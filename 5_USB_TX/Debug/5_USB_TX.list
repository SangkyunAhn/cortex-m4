
5_USB_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec8  08006ec8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed0  08006ed0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000132c  200001e4  080070bc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001510  080070bc  00021510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013189  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003054  00000000  00000000  0003339d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00036f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185a4  00000000  00000000  00037920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f26b  00000000  00000000  0004fec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086890  00000000  00000000  0005f12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e59bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  000e5a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e18 	.word	0x08006e18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08006e18 	.word	0x08006e18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <MX_GPIO_Init+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a25      	ldr	r2, [pc, #148]	; (800063c <MX_GPIO_Init+0xb4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_GPIO_Init+0xb4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <MX_GPIO_Init+0xb8>)
 80005fa:	f000 fcd7 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <MX_GPIO_Init+0xb8>)
 8000618:	f000 fb44 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800061c:	2301      	movs	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_GPIO_Init+0xbc>)
 8000630:	f000 fb38 	bl	8000ca4 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020800 	.word	0x40020800
 8000644:	40020000 	.word	0x40020000

08000648 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_IncTick+0x40>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_IncTick+0x44>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <HAL_IncTick+0x44>)
 800065a:	6013      	str	r3, [r2, #0]

	if ((uwTick % 1000) == 0) {
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <HAL_IncTick+0x44>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_IncTick+0x48>)
 8000662:	fba3 1302 	umull	r1, r3, r3, r2
 8000666:	099b      	lsrs	r3, r3, #6
 8000668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800066c:	fb01 f303 	mul.w	r3, r1, r3
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d102      	bne.n	800067c <HAL_IncTick+0x34>
		sFlag = 1;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <HAL_IncTick+0x4c>)
 8000678:	2201      	movs	r2, #1
 800067a:	801a      	strh	r2, [r3, #0]
	}
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	20000454 	.word	0x20000454
 8000690:	10624dd3 	.word	0x10624dd3
 8000694:	20000202 	.word	0x20000202

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 f96e 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f82c 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f7ff ff70 	bl	8000588 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006a8:	f005 fa46 	bl	8005b38 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (sFlag) {
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <main+0x54>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d019      	beq.n	80006e8 <main+0x50>
		  sFlag = 0;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <main+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	801a      	strh	r2, [r3, #0]
		  sprintf(cdcBuf, "Count: %d\r\n", count++);
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <main+0x58>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	b291      	uxth	r1, r2
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <main+0x58>)
 80006c4:	8011      	strh	r1, [r2, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	490a      	ldr	r1, [pc, #40]	; (80006f4 <main+0x5c>)
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <main+0x60>)
 80006cc:	f005 ff76 	bl	80065bc <siprintf>
		  while (CDC_Transmit_FS((uint8_t *)cdcBuf, strlen(cdcBuf)) == USBD_OK) {}
 80006d0:	bf00      	nop
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <main+0x60>)
 80006d4:	f7ff fd84 	bl	80001e0 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	4619      	mov	r1, r3
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <main+0x60>)
 80006de:	f005 fae9 	bl	8005cb4 <CDC_Transmit_FS>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f4      	beq.n	80006d2 <main+0x3a>
	  }

	  __NOP();
 80006e8:	bf00      	nop
	  if (sFlag) {
 80006ea:	e7df      	b.n	80006ac <main+0x14>
 80006ec:	20000202 	.word	0x20000202
 80006f0:	20000200 	.word	0x20000200
 80006f4:	08006e30 	.word	0x08006e30
 80006f8:	20000434 	.word	0x20000434

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 ff4e 	bl	80065ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <SystemClock_Config+0xd0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <SystemClock_Config+0xd0>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd4>)
 800074a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000770:	2319      	movs	r3, #25
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800077e:	2307      	movs	r3, #7
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fdac 	bl	80022e4 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000792:	f000 f81f 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 f80e 	bl	80027d4 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007be:	f000 f809 	bl	80007d4 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <HAL_MspInit+0x4c>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	; 0x44
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x4c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f7ff fee4 	bl	8000648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <OTG_FS_IRQHandler+0x10>)
 800088a:	f000 fcf8 	bl	800127e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200010f8 	.word	0x200010f8

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f005 fe46 	bl	8006558 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20010000 	.word	0x20010000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20000204 	.word	0x20000204
 8000900:	20001510 	.word	0x20001510

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000952:	f7ff ffd7 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f005 fe05 	bl	8006564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fe9d 	bl	8000698 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000960:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800096c:	08006ed8 	.word	0x08006ed8
  ldr r2, =_sbss
 8000970:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000974:	20001510 	.word	0x20001510

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f93b 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff ff16 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f953 	bl	8000c8a <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f91b 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000454 	.word	0x20000454

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff29 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff3e 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff31 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa2 	bl	8000bdc <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	e159      	b.n	8000f74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	f040 8148 	bne.w	8000f6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d005      	beq.n	8000cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d130      	bne.n	8000d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	091b      	lsrs	r3, r3, #4
 8000d42:	f003 0201 	and.w	r2, r3, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d017      	beq.n	8000d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d123      	bne.n	8000de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	08da      	lsrs	r2, r3, #3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3208      	adds	r2, #8
 8000da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0203 	and.w	r2, r3, #3
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a2 	beq.w	8000f6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <HAL_GPIO_Init+0x2e8>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a56      	ldr	r2, [pc, #344]	; (8000f8c <HAL_GPIO_Init+0x2e8>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <HAL_GPIO_Init+0x2e8>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e46:	4a52      	ldr	r2, [pc, #328]	; (8000f90 <HAL_GPIO_Init+0x2ec>)
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d019      	beq.n	8000ea6 <HAL_GPIO_Init+0x202>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a48      	ldr	r2, [pc, #288]	; (8000f98 <HAL_GPIO_Init+0x2f4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1fe>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a47      	ldr	r2, [pc, #284]	; (8000f9c <HAL_GPIO_Init+0x2f8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1fa>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1f6>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1f2>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x204>
 8000e96:	2307      	movs	r3, #7
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x204>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x204>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x204>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x204>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	f002 0203 	and.w	r2, r2, #3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_GPIO_Init+0x2ec>)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eea:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f3e:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f68:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <HAL_GPIO_Init+0x304>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	f67f aea2 	bls.w	8000cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40013800 	.word	0x40013800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40013c00 	.word	0x40013c00

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	041a      	lsls	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	619a      	str	r2, [r3, #24]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe0:	b08f      	sub	sp, #60	; 0x3c
 8000fe2:	af0a      	add	r7, sp, #40	; 0x28
 8000fe4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e10f      	b.n	8001210 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f004 ff9a 	bl	8005f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fe8d 	bl	8002d4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	687e      	ldr	r6, [r7, #4]
 800103c:	466d      	mov	r5, sp
 800103e:	f106 0410 	add.w	r4, r6, #16
 8001042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800104e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001052:	1d33      	adds	r3, r6, #4
 8001054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f001 fd64 	bl	8002b24 <USB_CoreInit>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2202      	movs	r2, #2
 8001066:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0d0      	b.n	8001210 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fe7b 	bl	8002d70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e04a      	b.n	8001116 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	1a9b      	subs	r3, r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	333d      	adds	r3, #61	; 0x3d
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	333c      	adds	r3, #60	; 0x3c
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	b298      	uxth	r0, r3
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3342      	adds	r3, #66	; 0x42
 80010bc:	4602      	mov	r2, r0
 80010be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	333f      	adds	r3, #63	; 0x3f
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	1a9b      	subs	r3, r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3344      	adds	r3, #68	; 0x44
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	1a9b      	subs	r3, r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	3348      	adds	r3, #72	; 0x48
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3350      	adds	r3, #80	; 0x50
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	3301      	adds	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3af      	bcc.n	8001080 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e044      	b.n	80011b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	3301      	adds	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3b5      	bcc.n	8001126 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	687e      	ldr	r6, [r7, #4]
 80011c2:	466d      	mov	r5, sp
 80011c4:	f106 0410 	add.w	r4, r6, #16
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80011d8:	1d33      	adds	r3, r6, #4
 80011da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f001 fe13 	bl	8002e08 <USB_DevInit>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e00d      	b.n	8001210 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fe8f 	bl	8003f2c <USB_DevDisconnect>

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001218 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_PCD_Start+0x1c>
 8001230:	2302      	movs	r3, #2
 8001232:	e020      	b.n	8001276 <HAL_PCD_Start+0x5e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	2b01      	cmp	r3, #1
 8001242:	d109      	bne.n	8001258 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001250:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fd65 	bl	8002d2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fe3f 	bl	8003eea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b08d      	sub	sp, #52	; 0x34
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fefd 	bl	8004094 <USB_GetMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 839d 	bne.w	80019dc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fe61 	bl	8003f6e <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8393 	beq.w	80019da <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fe58 	bl	8003f6e <USB_ReadInterrupts>
 80012be:	4603      	mov	r3, r0
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d107      	bne.n	80012d8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f002 0202 	and.w	r2, r2, #2
 80012d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fe46 	bl	8003f6e <USB_ReadInterrupts>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b10      	cmp	r3, #16
 80012ea:	d161      	bne.n	80013b0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699a      	ldr	r2, [r3, #24]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0210 	bic.w	r2, r2, #16
 80012fa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f003 020f 	and.w	r2, r3, #15
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	3304      	adds	r3, #4
 800131a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	0c5b      	lsrs	r3, r3, #17
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	2b02      	cmp	r3, #2
 8001326:	d124      	bne.n	8001372 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d035      	beq.n	80013a0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800133e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001342:	b29b      	uxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	6a38      	ldr	r0, [r7, #32]
 8001348:	f002 fc7d 	bl	8003c46 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001358:	441a      	add	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	699a      	ldr	r2, [r3, #24]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136a:	441a      	add	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	619a      	str	r2, [r3, #24]
 8001370:	e016      	b.n	80013a0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	0c5b      	lsrs	r3, r3, #17
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	2b06      	cmp	r3, #6
 800137c:	d110      	bne.n	80013a0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001384:	2208      	movs	r2, #8
 8001386:	4619      	mov	r1, r3
 8001388:	6a38      	ldr	r0, [r7, #32]
 800138a:	f002 fc5c 	bl	8003c46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	699a      	ldr	r2, [r3, #24]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139a:	441a      	add	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0210 	orr.w	r2, r2, #16
 80013ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fdda 	bl	8003f6e <USB_ReadInterrupts>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013c4:	d16e      	bne.n	80014a4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fde0 	bl	8003f94 <USB_ReadDevAllOutEpInterrupt>
 80013d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013d6:	e062      	b.n	800149e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d057      	beq.n	8001492 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fe05 	bl	8003ffc <USB_ReadDevOutEPInterrupt>
 80013f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00c      	beq.n	8001418 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	015a      	lsls	r2, r3, #5
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800140a:	461a      	mov	r2, r3
 800140c:	2301      	movs	r3, #1
 800140e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fdb0 	bl	8001f78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142e:	461a      	mov	r2, r3
 8001430:	2308      	movs	r3, #8
 8001432:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 feaa 	bl	8002190 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001452:	461a      	mov	r2, r3
 8001454:	2310      	movs	r3, #16
 8001456:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146e:	461a      	mov	r2, r3
 8001470:	2320      	movs	r3, #32
 8001472:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4413      	add	r3, r2
 8001486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800148a:	461a      	mov	r2, r3
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d199      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fd60 	bl	8003f6e <USB_ReadInterrupts>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b8:	f040 80c0 	bne.w	800163c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fd81 	bl	8003fc8 <USB_ReadDevAllInEpInterrupt>
 80014c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014cc:	e0b2      	b.n	8001634 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a7 	beq.w	8001628 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fda7 	bl	8004038 <USB_ReadDevInEPInterrupt>
 80014ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d057      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	2201      	movs	r2, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800150a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	69f9      	ldr	r1, [r7, #28]
 8001512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001516:	4013      	ands	r3, r2
 8001518:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	015a      	lsls	r2, r3, #5
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	4413      	add	r3, r2
 8001522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001526:	461a      	mov	r2, r3
 8001528:	2301      	movs	r3, #1
 800152a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d132      	bne.n	800159a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3348      	adds	r3, #72	; 0x48
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4403      	add	r3, r0
 8001554:	3344      	adds	r3, #68	; 0x44
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4419      	add	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4403      	add	r3, r0
 8001568:	3348      	adds	r3, #72	; 0x48
 800156a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	2b00      	cmp	r3, #0
 8001570:	d113      	bne.n	800159a <HAL_PCD_IRQHandler+0x31c>
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3350      	adds	r3, #80	; 0x50
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001592:	461a      	mov	r2, r3
 8001594:	2101      	movs	r1, #1
 8001596:	f002 fdaf 	bl	80040f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f004 fd50 	bl	8006046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015bc:	461a      	mov	r2, r3
 80015be:	2308      	movs	r3, #8
 80015c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d8:	461a      	mov	r2, r3
 80015da:	2310      	movs	r3, #16
 80015dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f4:	461a      	mov	r2, r3
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001610:	461a      	mov	r2, r3
 8001612:	2302      	movs	r3, #2
 8001614:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fc1b 	bl	8001e5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	3301      	adds	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f af49 	bne.w	80014ce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fc94 	bl	8003f6e <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800164c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001650:	d122      	bne.n	8001698 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001678:	2100      	movs	r1, #0
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fe26 	bl	80022cc <HAL_PCDEx_LPM_Callback>
 8001680:	e002      	b.n	8001688 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f004 fd4c 	bl	8006120 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fc66 	bl	8003f6e <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ac:	d112      	bne.n	80016d4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d102      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f004 fd08 	bl	80060d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 fc48 	bl	8003f6e <USB_ReadInterrupts>
 80016de:	4603      	mov	r3, r0
 80016e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e8:	f040 80c7 	bne.w	800187a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2110      	movs	r1, #16
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fce2 	bl	80030d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001710:	e056      	b.n	80017c0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800171e:	461a      	mov	r2, r3
 8001720:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001724:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4413      	add	r3, r2
 800172e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001736:	0151      	lsls	r1, r2, #5
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	440a      	add	r2, r1
 800173c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001744:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001756:	0151      	lsls	r1, r2, #5
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	440a      	add	r2, r1
 800175c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001764:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001772:	461a      	mov	r2, r3
 8001774:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001778:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178a:	0151      	lsls	r1, r2, #5
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	440a      	add	r2, r1
 8001790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001798:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017aa:	0151      	lsls	r1, r2, #5
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	440a      	add	r2, r1
 80017b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	3301      	adds	r3, #1
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3a3      	bcc.n	8001712 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f6:	f043 030b 	orr.w	r3, r3, #11
 80017fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180c:	f043 030b 	orr.w	r3, r3, #11
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	e015      	b.n	8001840 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001826:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800182a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183a:	f043 030b 	orr.w	r3, r3, #11
 800183e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001852:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001864:	461a      	mov	r2, r3
 8001866:	f002 fc47 	bl	80040f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fb75 	bl	8003f6e <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188e:	d124      	bne.n	80018da <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fc0b 	bl	80040b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 fc73 	bl	800318a <USB_GetDevSpeed>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681c      	ldr	r4, [r3, #0]
 80018b0:	f001 f92c 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 80018b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4620      	mov	r0, r4
 80018c0:	f001 f992 	bl	8002be8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f004 fbe6 	bl	8006096 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fb45 	bl	8003f6e <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d10a      	bne.n	8001904 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f004 fbc3 	bl	800607a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f002 0208 	and.w	r2, r2, #8
 8001902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fb30 	bl	8003f6e <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001918:	d10f      	bne.n	800193a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f004 fc1b 	bl	8006160 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fb15 	bl	8003f6e <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800194e:	d10f      	bne.n	8001970 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f004 fbee 	bl	800613c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800196e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fafa 	bl	8003f6e <USB_ReadInterrupts>
 800197a:	4603      	mov	r3, r0
 800197c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d10a      	bne.n	800199c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f004 fbfc 	bl	8006184 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800199a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fae4 	bl	8003f6e <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d115      	bne.n	80019dc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f004 fbec 	bl	80061a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	e000      	b.n	80019dc <HAL_PCD_IRQHandler+0x75e>
      return;
 80019da:	bf00      	nop
    }
  }
}
 80019dc:	3734      	adds	r7, #52	; 0x34
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}

080019e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_PCD_SetAddress+0x1a>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e013      	b.n	8001a24 <HAL_PCD_SetAddress+0x42>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fa42 	bl	8003e9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	70fb      	strb	r3, [r7, #3]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	803b      	strh	r3, [r7, #0]
 8001a42:	4613      	mov	r3, r2
 8001a44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da0f      	bge.n	8001a72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 020f 	and.w	r2, r3, #15
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	3338      	adds	r3, #56	; 0x38
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	3304      	adds	r3, #4
 8001a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	705a      	strb	r2, [r3, #1]
 8001a70:	e00f      	b.n	8001a92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	3304      	adds	r3, #4
 8001a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a9e:	883a      	ldrh	r2, [r7, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	78ba      	ldrb	r2, [r7, #2]
 8001aa8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001abc:	78bb      	ldrb	r3, [r7, #2]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d102      	bne.n	8001ac8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_PCD_EP_Open+0xaa>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e00e      	b.n	8001af4 <HAL_PCD_EP_Open+0xc8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68f9      	ldr	r1, [r7, #12]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f001 fb75 	bl	80031d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da0f      	bge.n	8001b30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 020f 	and.w	r2, r3, #15
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3338      	adds	r3, #56	; 0x38
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	705a      	strb	r2, [r3, #1]
 8001b2e:	e00f      	b.n	8001b50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 020f 	and.w	r2, r3, #15
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_PCD_EP_Close+0x6e>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e00e      	b.n	8001b88 <HAL_PCD_EP_Close+0x8c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fbb3 	bl	80032e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	f003 020f 	and.w	r2, r3, #15
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d102      	bne.n	8001bec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	f001 fe8e 	bl	8003924 <USB_EP0StartXfer>
 8001c08:	e008      	b.n	8001c1c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	6979      	ldr	r1, [r7, #20]
 8001c18:	f001 fc40 	bl	800349c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 020f 	and.w	r2, r3, #15
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c48:	681b      	ldr	r3, [r3, #0]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	460b      	mov	r3, r1
 8001c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c66:	7afb      	ldrb	r3, [r7, #11]
 8001c68:	f003 020f 	and.w	r2, r3, #15
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	3338      	adds	r3, #56	; 0x38
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2201      	movs	r2, #1
 8001c94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d102      	bne.n	8001cb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	f001 fe2c 	bl	8003924 <USB_EP0StartXfer>
 8001ccc:	e008      	b.n	8001ce0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6979      	ldr	r1, [r7, #20]
 8001cdc:	f001 fbde 	bl	800349c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d901      	bls.n	8001d08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e050      	b.n	8001daa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da0f      	bge.n	8001d30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3338      	adds	r3, #56	; 0x38
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	705a      	strb	r2, [r3, #1]
 8001d2e:	e00d      	b.n	8001d4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_PCD_EP_SetStall+0x82>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e01e      	b.n	8001daa <HAL_PCD_EP_SetStall+0xc0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 ffbb 	bl	8003cf6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10a      	bne.n	8001da0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	b2d9      	uxtb	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f002 f9ac 	bl	80040f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 020f 	and.w	r2, r3, #15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d901      	bls.n	8001dd0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e042      	b.n	8001e56 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da0f      	bge.n	8001df8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	3338      	adds	r3, #56	; 0x38
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	705a      	strb	r2, [r3, #1]
 8001df6:	e00f      	b.n	8001e18 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 020f 	and.w	r2, r3, #15
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3304      	adds	r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_EP_ClrStall+0x86>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e00e      	b.n	8001e56 <HAL_PCD_EP_ClrStall+0xa4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 ffc3 	bl	8003dd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b08a      	sub	sp, #40	; 0x28
 8001e62:	af02      	add	r7, sp, #8
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3338      	adds	r3, #56	; 0x38
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d901      	bls.n	8001e96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06c      	b.n	8001f70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d902      	bls.n	8001eb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eba:	e02b      	b.n	8001f14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d902      	bls.n	8001ed8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3303      	adds	r3, #3
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68d9      	ldr	r1, [r3, #12]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f001 fe67 	bl	8003bca <USB_WritePacket>

    ep->xfer_buff  += len;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	441a      	add	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	441a      	add	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d809      	bhi.n	8001f3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d203      	bcs.n	8001f3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1be      	bne.n	8001ebc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d811      	bhi.n	8001f6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	2201      	movs	r2, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	6939      	ldr	r1, [r7, #16]
 8001f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	333c      	adds	r3, #60	; 0x3c
 8001f90:	3304      	adds	r3, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f040 80a0 	bne.w	80020f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d015      	beq.n	8001fe6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a72      	ldr	r2, [pc, #456]	; (8002188 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	f240 80dd 	bls.w	800217e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80d7 	beq.w	800217e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe2:	6093      	str	r3, [r2, #8]
 8001fe4:	e0cb      	b.n	800217e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2320      	movs	r3, #32
 8002000:	6093      	str	r3, [r2, #8]
 8002002:	e0bc      	b.n	800217e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80b7 	bne.w	800217e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <PCD_EP_OutXfrComplete_int+0x210>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d90f      	bls.n	8002038 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202e:	461a      	mov	r2, r3
 8002030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002034:	6093      	str	r3, [r2, #8]
 8002036:	e0a2      	b.n	800217e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800204a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	0159      	lsls	r1, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	440b      	add	r3, r1
 8002054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800205e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4403      	add	r3, r0
 800206e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002072:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4403      	add	r3, r0
 8002096:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4419      	add	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4403      	add	r3, r0
 80020ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d114      	bne.n	80020e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020da:	461a      	mov	r2, r3
 80020dc:	2101      	movs	r1, #1
 80020de:	f002 f80b 	bl	80040f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f003 ff91 	bl	8006010 <HAL_PCD_DataOutStageCallback>
 80020ee:	e046      	b.n	800217e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <PCD_EP_OutXfrComplete_int+0x214>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d124      	bne.n	8002142 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210e:	461a      	mov	r2, r3
 8002110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002114:	6093      	str	r3, [r2, #8]
 8002116:	e032      	b.n	800217e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212e:	461a      	mov	r2, r3
 8002130:	2320      	movs	r3, #32
 8002132:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f003 ff68 	bl	8006010 <HAL_PCD_DataOutStageCallback>
 8002140:	e01d      	b.n	800217e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d114      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800216a:	461a      	mov	r2, r3
 800216c:	2100      	movs	r1, #0
 800216e:	f001 ffc3 	bl	80040f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f003 ff49 	bl	8006010 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	4f54300a 	.word	0x4f54300a
 800218c:	4f54310a 	.word	0x4f54310a

08002190 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <PCD_EP_OutSetupPacket_int+0x88>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d90e      	bls.n	80021e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	461a      	mov	r2, r3
 80021de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f003 ff01 	bl	8005fec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d90c      	bls.n	800220c <PCD_EP_OutSetupPacket_int+0x7c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002204:	461a      	mov	r2, r3
 8002206:	2101      	movs	r1, #1
 8002208:	f001 ff76 	bl	80040f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	4f54300a 	.word	0x4f54300a

0800221c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
 8002228:	4613      	mov	r3, r2
 800222a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800223a:	883b      	ldrh	r3, [r7, #0]
 800223c:	0419      	lsls	r1, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	430a      	orrs	r2, r1
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
 8002248:	e028      	b.n	800229c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4413      	add	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e00d      	b.n	800227a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	3340      	adds	r3, #64	; 0x40
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	3b01      	subs	r3, #1
 8002280:	429a      	cmp	r2, r3
 8002282:	d3ec      	bcc.n	800225e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002284:	883b      	ldrh	r3, [r7, #0]
 8002286:	0418      	lsls	r0, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	3b01      	subs	r3, #1
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4302      	orrs	r2, r0
 8002294:	3340      	adds	r3, #64	; 0x40
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e264      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d075      	beq.n	80023ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00c      	beq.n	8002328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4ba0      	ldr	r3, [pc, #640]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d112      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002326:	d10b      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4b99      	ldr	r3, [pc, #612]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05b      	beq.n	80023ec <HAL_RCC_OscConfig+0x108>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d157      	bne.n	80023ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e23f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x74>
 800234a:	4b91      	ldr	r3, [pc, #580]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a90      	ldr	r2, [pc, #576]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a8a      	ldr	r2, [pc, #552]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a87      	ldr	r2, [pc, #540]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 800237c:	4b84      	ldr	r3, [pc, #528]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a83      	ldr	r2, [pc, #524]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a80      	ldr	r2, [pc, #512]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fb40 	bl	8000a20 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe fb3c 	bl	8000a20 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e204      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xc0>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fb2c 	bl	8000a20 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fb28 	bl	8000a20 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1f0      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0xe8>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1c4      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4952      	ldr	r1, [pc, #328]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_OscConfig+0x2b0>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fae1 	bl	8000a20 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fadd 	bl	8000a20 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1a5      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4940      	ldr	r1, [pc, #256]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_OscConfig+0x2b0>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fac0 	bl	8000a20 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fabc 	bl	8000a20 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e184      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d030      	beq.n	8002530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe faa0 	bl	8000a20 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fa9c 	bl	8000a20 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e164      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x200>
 8002502:	e015      	b.n	8002530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe fa89 	bl	8000a20 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe fa85 	bl	8000a20 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e14d      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a0 	beq.w	800267e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d121      	bne.n	80025be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7fe fa4b 	bl	8000a20 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	e011      	b.n	80025b2 <HAL_RCC_OscConfig+0x2ce>
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	42470000 	.word	0x42470000
 8002598:	42470e80 	.word	0x42470e80
 800259c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7fe fa3e 	bl	8000a20 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e106      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <HAL_RCC_OscConfig+0x4e4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2f0>
 80025c6:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a80      	ldr	r2, [pc, #512]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x312>
 80025dc:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	4b78      	ldr	r3, [pc, #480]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a77      	ldr	r2, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x32a>
 80025f6:	4b75      	ldr	r3, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a74      	ldr	r2, [pc, #464]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a71      	ldr	r2, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fa03 	bl	8000a20 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe f9ff 	bl	8000a20 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0c5      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x33a>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe f9ed 	bl	8000a20 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe f9e9 	bl	8000a20 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0af      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a55      	ldr	r2, [pc, #340]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 809b 	beq.w	80027be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d05c      	beq.n	800274e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d141      	bne.n	8002720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe f9bd 	bl	8000a20 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe f9b9 	bl	8000a20 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e081      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026bc:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	019b      	lsls	r3, r3, #6
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	061b      	lsls	r3, r3, #24
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f2:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe f992 	bl	8000a20 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe f98e 	bl	8000a20 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e056      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x41c>
 800271e:	e04e      	b.n	80027be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7fe f97b 	bl	8000a20 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe f977 	bl	8000a20 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e03f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x44a>
 800274c:	e037      	b.n	80027be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e032      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d028      	beq.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d121      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d11a      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800278a:	4013      	ands	r3, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002790:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	3b01      	subs	r3, #1
 80027a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40007000 	.word	0x40007000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470060 	.word	0x42470060

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cc      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90c      	bls.n	8002810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d044      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d003      	beq.n	8002892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e067      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4934      	ldr	r1, [pc, #208]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe f8ac 	bl	8000a20 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe f8a8 	bl	8000a20 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d20c      	bcs.n	800291c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4602      	mov	r2, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	5ccb      	ldrb	r3, [r1, r3]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f820 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	08006e84 	.word	0x08006e84
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a6:	2100      	movs	r1, #0
 80029a8:	6079      	str	r1, [r7, #4]
 80029aa:	2100      	movs	r1, #0
 80029ac:	60f9      	str	r1, [r7, #12]
 80029ae:	2100      	movs	r1, #0
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029b2:	2100      	movs	r1, #0
 80029b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b6:	4952      	ldr	r1, [pc, #328]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b8:	6889      	ldr	r1, [r1, #8]
 80029ba:	f001 010c 	and.w	r1, r1, #12
 80029be:	2908      	cmp	r1, #8
 80029c0:	d00d      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x3e>
 80029c2:	2908      	cmp	r1, #8
 80029c4:	f200 8094 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x150>
 80029c8:	2900      	cmp	r1, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x32>
 80029cc:	2904      	cmp	r1, #4
 80029ce:	d003      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x38>
 80029d0:	e08e      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x164>)
 80029d4:	60bb      	str	r3, [r7, #8]
       break;
 80029d6:	e08e      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d8:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x168>)
 80029da:	60bb      	str	r3, [r7, #8]
      break;
 80029dc:	e08b      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029de:	4948      	ldr	r1, [pc, #288]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80029e0:	6849      	ldr	r1, [r1, #4]
 80029e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029e6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e8:	4945      	ldr	r1, [pc, #276]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	6849      	ldr	r1, [r1, #4]
 80029ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029f0:	2900      	cmp	r1, #0
 80029f2:	d024      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f4:	4942      	ldr	r1, [pc, #264]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f6:	6849      	ldr	r1, [r1, #4]
 80029f8:	0989      	lsrs	r1, r1, #6
 80029fa:	4608      	mov	r0, r1
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a04:	f04f 0500 	mov.w	r5, #0
 8002a08:	ea00 0204 	and.w	r2, r0, r4
 8002a0c:	ea01 0305 	and.w	r3, r1, r5
 8002a10:	493d      	ldr	r1, [pc, #244]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a12:	fb01 f003 	mul.w	r0, r1, r3
 8002a16:	2100      	movs	r1, #0
 8002a18:	fb01 f102 	mul.w	r1, r1, r2
 8002a1c:	1844      	adds	r4, r0, r1
 8002a1e:	493a      	ldr	r1, [pc, #232]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a20:	fba2 0101 	umull	r0, r1, r2, r1
 8002a24:	1863      	adds	r3, r4, r1
 8002a26:	4619      	mov	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	f7fd fc2e 	bl	8000290 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e04a      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	461a      	mov	r2, r3
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	ea02 0400 	and.w	r4, r2, r0
 8002a56:	ea03 0501 	and.w	r5, r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	014b      	lsls	r3, r1, #5
 8002a68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a6c:	0142      	lsls	r2, r0, #5
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	1b00      	subs	r0, r0, r4
 8002a74:	eb61 0105 	sbc.w	r1, r1, r5
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	018b      	lsls	r3, r1, #6
 8002a82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a86:	0182      	lsls	r2, r0, #6
 8002a88:	1a12      	subs	r2, r2, r0
 8002a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	00d9      	lsls	r1, r3, #3
 8002a98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a9c:	00d0      	lsls	r0, r2, #3
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	1912      	adds	r2, r2, r4
 8002aa4:	eb45 0303 	adc.w	r3, r5, r3
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	f04f 0100 	mov.w	r1, #0
 8002ab0:	0299      	lsls	r1, r3, #10
 8002ab2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ab6:	0290      	lsls	r0, r2, #10
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	f7fd fbe2 	bl	8000290 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	60bb      	str	r3, [r7, #8]
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x164>)
 8002af2:	60bb      	str	r3, [r7, #8]
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	68bb      	ldr	r3, [r7, #8]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bdb0      	pop	{r4, r5, r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	017d7840 	.word	0x017d7840

08002b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000

08002b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b24:	b084      	sub	sp, #16
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	f107 001c 	add.w	r0, r7, #28
 8002b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d122      	bne.n	8002b82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f001 fb1c 	bl	80041b4 <USB_CoreReset>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e01a      	b.n	8002bb8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f001 fb10 	bl	80041b4 <USB_CoreReset>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8002baa:	e005      	b.n	8002bb8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10b      	bne.n	8002bd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f043 0206 	orr.w	r2, r3, #6
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002be2:	b004      	add	sp, #16
 8002be4:	4770      	bx	lr
	...

08002be8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d165      	bne.n	8002cc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4a41      	ldr	r2, [pc, #260]	; (8002d04 <USB_SetTurnaroundTime+0x11c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d906      	bls.n	8002c12 <USB_SetTurnaroundTime+0x2a>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <USB_SetTurnaroundTime+0x120>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d202      	bcs.n	8002c12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e062      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <USB_SetTurnaroundTime+0x120>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d306      	bcc.n	8002c28 <USB_SetTurnaroundTime+0x40>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a3b      	ldr	r2, [pc, #236]	; (8002d0c <USB_SetTurnaroundTime+0x124>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d202      	bcs.n	8002c28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c22:	230e      	movs	r3, #14
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e057      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a38      	ldr	r2, [pc, #224]	; (8002d0c <USB_SetTurnaroundTime+0x124>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d306      	bcc.n	8002c3e <USB_SetTurnaroundTime+0x56>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a37      	ldr	r2, [pc, #220]	; (8002d10 <USB_SetTurnaroundTime+0x128>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d202      	bcs.n	8002c3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c38:	230d      	movs	r3, #13
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e04c      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4a33      	ldr	r2, [pc, #204]	; (8002d10 <USB_SetTurnaroundTime+0x128>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d306      	bcc.n	8002c54 <USB_SetTurnaroundTime+0x6c>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a32      	ldr	r2, [pc, #200]	; (8002d14 <USB_SetTurnaroundTime+0x12c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d802      	bhi.n	8002c54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c4e:	230c      	movs	r3, #12
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e041      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <USB_SetTurnaroundTime+0x12c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d906      	bls.n	8002c6a <USB_SetTurnaroundTime+0x82>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <USB_SetTurnaroundTime+0x130>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d802      	bhi.n	8002c6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c64:	230b      	movs	r3, #11
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e036      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <USB_SetTurnaroundTime+0x130>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d906      	bls.n	8002c80 <USB_SetTurnaroundTime+0x98>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <USB_SetTurnaroundTime+0x134>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d802      	bhi.n	8002c80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e02b      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <USB_SetTurnaroundTime+0x134>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d906      	bls.n	8002c96 <USB_SetTurnaroundTime+0xae>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <USB_SetTurnaroundTime+0x138>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d202      	bcs.n	8002c96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c90:	2309      	movs	r3, #9
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e020      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <USB_SetTurnaroundTime+0x138>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d306      	bcc.n	8002cac <USB_SetTurnaroundTime+0xc4>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <USB_SetTurnaroundTime+0x13c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d802      	bhi.n	8002cac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e015      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <USB_SetTurnaroundTime+0x13c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d906      	bls.n	8002cc2 <USB_SetTurnaroundTime+0xda>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <USB_SetTurnaroundTime+0x140>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d202      	bcs.n	8002cc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00a      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cc2:	2306      	movs	r3, #6
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e007      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cce:	2309      	movs	r3, #9
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e001      	b.n	8002cd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cd4:	2309      	movs	r3, #9
 8002cd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	00d8acbf 	.word	0x00d8acbf
 8002d08:	00e4e1c0 	.word	0x00e4e1c0
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	01067380 	.word	0x01067380
 8002d14:	011a499f 	.word	0x011a499f
 8002d18:	01312cff 	.word	0x01312cff
 8002d1c:	014ca43f 	.word	0x014ca43f
 8002d20:	016e3600 	.word	0x016e3600
 8002d24:	01a6ab1f 	.word	0x01a6ab1f
 8002d28:	01e84800 	.word	0x01e84800

08002d2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d115      	bne.n	8002dbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7fd fe4a 	bl	8000a38 <HAL_Delay>
      ms++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 f972 	bl	8004094 <USB_GetMode>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d01e      	beq.n	8002df4 <USB_SetCurrentMode+0x84>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b31      	cmp	r3, #49	; 0x31
 8002dba:	d9f0      	bls.n	8002d9e <USB_SetCurrentMode+0x2e>
 8002dbc:	e01a      	b.n	8002df4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d115      	bne.n	8002df0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7fd fe31 	bl	8000a38 <HAL_Delay>
      ms++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f001 f959 	bl	8004094 <USB_GetMode>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <USB_SetCurrentMode+0x84>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b31      	cmp	r3, #49	; 0x31
 8002dec:	d9f0      	bls.n	8002dd0 <USB_SetCurrentMode+0x60>
 8002dee:	e001      	b.n	8002df4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e005      	b.n	8002e00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b32      	cmp	r3, #50	; 0x32
 8002df8:	d101      	bne.n	8002dfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e08:	b084      	sub	sp, #16
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	e009      	b.n	8002e3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	2200      	movs	r2, #0
 8002e34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b0e      	cmp	r3, #14
 8002e40:	d9f2      	bls.n	8002e28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11c      	bne.n	8002e82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e80:	e00b      	b.n	8002e9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	680b      	ldr	r3, [r1, #0]
 8002eb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10c      	bne.n	8002eda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f945 	bl	8003158 <USB_SetDevSpeed>
 8002ece:	e008      	b.n	8002ee2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f940 	bl	8003158 <USB_SetDevSpeed>
 8002ed8:	e003      	b.n	8002ee2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002eda:	2103      	movs	r1, #3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f93b 	bl	8003158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f8f3 	bl	80030d0 <USB_FlushTxFifo>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f90f 	bl	8003118 <USB_FlushRxFifo>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f16:	461a      	mov	r2, r3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f22:	461a      	mov	r2, r3
 8002f24:	2300      	movs	r3, #0
 8002f26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e043      	b.n	8002fb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f44:	d118      	bne.n	8002f78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e013      	b.n	8002f8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e008      	b.n	8002f8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f84:	461a      	mov	r2, r3
 8002f86:	2300      	movs	r3, #0
 8002f88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f96:	461a      	mov	r2, r3
 8002f98:	2300      	movs	r3, #0
 8002f9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3b7      	bcc.n	8002f2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e043      	b.n	800304c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fda:	d118      	bne.n	800300e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e013      	b.n	8003020 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003004:	461a      	mov	r2, r3
 8003006:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e008      	b.n	8003020 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	2300      	movs	r3, #0
 800301e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302c:	461a      	mov	r2, r3
 800302e:	2300      	movs	r3, #0
 8003030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003044:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3301      	adds	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	429a      	cmp	r2, r3
 8003052:	d3b7      	bcc.n	8002fc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003066:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003074:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <USB_DevInit+0x2c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f043 0208 	orr.w	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030c8:	b004      	add	sp, #16
 80030ca:	4770      	bx	lr
 80030cc:	803c3800 	.word	0x803c3800

080030d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3301      	adds	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	4a08      	ldr	r2, [pc, #32]	; (8003114 <USB_FlushTxFifo+0x44>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e006      	b.n	8003108 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b20      	cmp	r3, #32
 8003104:	d0f1      	beq.n	80030ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	00030d40 	.word	0x00030d40

08003118 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2210      	movs	r2, #16
 8003128:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3301      	adds	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	4a08      	ldr	r2, [pc, #32]	; (8003154 <USB_FlushRxFifo+0x3c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e006      	b.n	8003148 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b10      	cmp	r3, #16
 8003144:	d0f1      	beq.n	800312a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	00030d40 	.word	0x00030d40

08003158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0306 	and.w	r3, r3, #6
 80031a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]
 80031ae:	e00a      	b.n	80031c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d002      	beq.n	80031bc <USB_GetDevSpeed+0x32>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d102      	bne.n	80031c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80031bc:	2302      	movs	r3, #2
 80031be:	75fb      	strb	r3, [r7, #23]
 80031c0:	e001      	b.n	80031c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80031c2:	230f      	movs	r3, #15
 80031c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d13a      	bne.n	8003266 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	b29b      	uxth	r3, r3
 8003208:	68f9      	ldr	r1, [r7, #12]
 800320a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800320e:	4313      	orrs	r3, r2
 8003210:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d155      	bne.n	80032d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003244:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	059b      	lsls	r3, r3, #22
 800324a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800324c:	4313      	orrs	r3, r2
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	440a      	add	r2, r1
 8003256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	e036      	b.n	80032d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	2101      	movs	r1, #1
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003284:	4313      	orrs	r3, r2
 8003286:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11a      	bne.n	80032d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	78db      	ldrb	r3, [r3, #3]
 80032b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032ba:	430b      	orrs	r3, r1
 80032bc:	4313      	orrs	r3, r2
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	0151      	lsls	r1, r2, #5
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	440a      	add	r2, r1
 80032c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d161      	bne.n	80033c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003316:	d11f      	bne.n	8003358 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	0151      	lsls	r1, r2, #5
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	440a      	add	r2, r1
 800332e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003336:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	440a      	add	r2, r1
 800334e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	b29b      	uxth	r3, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003378:	4013      	ands	r3, r2
 800337a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	68f9      	ldr	r1, [r7, #12]
 8003398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800339c:	4013      	ands	r3, r2
 800339e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	0159      	lsls	r1, r3, #5
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ba:	4619      	mov	r1, r3
 80033bc:	4b35      	ldr	r3, [pc, #212]	; (8003494 <USB_DeactivateEndpoint+0x1b0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
 80033c2:	e060      	b.n	8003486 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033da:	d11f      	bne.n	800341c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	440a      	add	r2, r1
 8003412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800341a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	43db      	mvns	r3, r3
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800343c:	4013      	ands	r3, r2
 800343e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	43db      	mvns	r3, r3
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003460:	4013      	ands	r3, r2
 8003462:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	0159      	lsls	r1, r3, #5
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	440b      	add	r3, r1
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	4619      	mov	r1, r3
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <USB_DeactivateEndpoint+0x1b4>)
 8003482:	4013      	ands	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	ec337800 	.word	0xec337800
 8003498:	eff37800 	.word	0xeff37800

0800349c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 815c 	bne.w	8003776 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d132      	bne.n	800352c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	0151      	lsls	r1, r2, #5
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	440a      	add	r2, r1
 80034dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003508:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	0151      	lsls	r1, r2, #5
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	440a      	add	r2, r1
 8003520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003524:	0cdb      	lsrs	r3, r3, #19
 8003526:	04db      	lsls	r3, r3, #19
 8003528:	6113      	str	r3, [r2, #16]
 800352a:	e074      	b.n	8003616 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003546:	0cdb      	lsrs	r3, r3, #19
 8003548:	04db      	lsls	r3, r3, #19
 800354a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	440a      	add	r2, r1
 8003562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003566:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800356a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800356e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6959      	ldr	r1, [r3, #20]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	440b      	add	r3, r1
 8003588:	1e59      	subs	r1, r3, #1
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003594:	4b9d      	ldr	r3, [pc, #628]	; (800380c <USB_EPStartXfer+0x370>)
 8003596:	400b      	ands	r3, r1
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	0148      	lsls	r0, r1, #5
 800359c:	69f9      	ldr	r1, [r7, #28]
 800359e:	4401      	add	r1, r0
 80035a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035a4:	4313      	orrs	r3, r2
 80035a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	0148      	lsls	r0, r1, #5
 80035c2:	69f9      	ldr	r1, [r7, #28]
 80035c4:	4401      	add	r1, r0
 80035c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035ca:	4313      	orrs	r3, r2
 80035cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	78db      	ldrb	r3, [r3, #3]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d11f      	bne.n	8003616 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	0151      	lsls	r1, r2, #5
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	440a      	add	r2, r1
 80035ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80035f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	440a      	add	r2, r1
 800360c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003614:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d14b      	bne.n	80036b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	78db      	ldrb	r3, [r3, #3]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d128      	bne.n	8003692 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d110      	bne.n	8003672 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	440a      	add	r2, r1
 8003666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800366a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	e00f      	b.n	8003692 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	440a      	add	r2, r1
 8003688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e12f      	b.n	8003914 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	78db      	ldrb	r3, [r3, #3]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d015      	beq.n	8003708 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8117 	beq.w	8003914 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	2101      	movs	r1, #1
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	69f9      	ldr	r1, [r7, #28]
 80036fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003702:	4313      	orrs	r3, r2
 8003704:	634b      	str	r3, [r1, #52]	; 0x34
 8003706:	e105      	b.n	8003914 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d110      	bne.n	800373a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	440a      	add	r2, r1
 800372e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e00f      	b.n	800375a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	0151      	lsls	r1, r2, #5
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	440a      	add	r2, r1
 8003750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	68d9      	ldr	r1, [r3, #12]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	b298      	uxth	r0, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	4603      	mov	r3, r0
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa2b 	bl	8003bca <USB_WritePacket>
 8003774:	e0ce      	b.n	8003914 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003790:	0cdb      	lsrs	r3, r3, #19
 8003792:	04db      	lsls	r3, r3, #19
 8003794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d126      	bne.n	8003810 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	0148      	lsls	r0, r1, #5
 80037dc:	69f9      	ldr	r1, [r7, #28]
 80037de:	4401      	add	r1, r0
 80037e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037e4:	4313      	orrs	r3, r2
 80037e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003806:	6113      	str	r3, [r2, #16]
 8003808:	e036      	b.n	8003878 <USB_EPStartXfer+0x3dc>
 800380a:	bf00      	nop
 800380c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4413      	add	r3, r2
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	8afb      	ldrh	r3, [r7, #22]
 8003836:	04d9      	lsls	r1, r3, #19
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <USB_EPStartXfer+0x484>)
 800383a:	400b      	ands	r3, r1
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	0148      	lsls	r0, r1, #5
 8003840:	69f9      	ldr	r1, [r7, #28]
 8003842:	4401      	add	r1, r0
 8003844:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	8af9      	ldrh	r1, [r7, #22]
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	69b9      	ldr	r1, [r7, #24]
 800386a:	0148      	lsls	r0, r1, #5
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	4401      	add	r1, r0
 8003870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003874:	4313      	orrs	r3, r2
 8003876:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10d      	bne.n	800389a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	68d9      	ldr	r1, [r3, #12]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	460a      	mov	r2, r1
 8003898:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	78db      	ldrb	r3, [r3, #3]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d128      	bne.n	80038f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d110      	bne.n	80038d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e00f      	b.n	80038f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	0151      	lsls	r1, r2, #5
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	440a      	add	r2, r1
 80038ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	440a      	add	r2, r1
 800390a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800390e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	1ff80000 	.word	0x1ff80000

08003924 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	785b      	ldrb	r3, [r3, #1]
 8003940:	2b01      	cmp	r3, #1
 8003942:	f040 80cd 	bne.w	8003ae0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d132      	bne.n	80039b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	440a      	add	r2, r1
 8003964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800396c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	440a      	add	r2, r1
 8003988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800398c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	0151      	lsls	r1, r2, #5
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	440a      	add	r2, r1
 80039a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ac:	0cdb      	lsrs	r3, r3, #19
 80039ae:	04db      	lsls	r3, r3, #19
 80039b0:	6113      	str	r3, [r2, #16]
 80039b2:	e04e      	b.n	8003a52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ce:	0cdb      	lsrs	r3, r3, #19
 80039d0:	04db      	lsls	r3, r3, #19
 80039d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d903      	bls.n	8003a0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a42:	6939      	ldr	r1, [r7, #16]
 8003a44:	0148      	lsls	r0, r1, #5
 8003a46:	6979      	ldr	r1, [r7, #20]
 8003a48:	4401      	add	r1, r0
 8003a4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d11e      	bne.n	8003a96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e092      	b.n	8003bbc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	0151      	lsls	r1, r2, #5
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	440a      	add	r2, r1
 8003aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d07e      	beq.n	8003bbc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	6979      	ldr	r1, [r7, #20]
 8003ad6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ada:	4313      	orrs	r3, r2
 8003adc:	634b      	str	r3, [r1, #52]	; 0x34
 8003ade:	e06d      	b.n	8003bbc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afa:	0cdb      	lsrs	r3, r3, #19
 8003afc:	04db      	lsls	r3, r3, #19
 8003afe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b22:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	6939      	ldr	r1, [r7, #16]
 8003b6c:	0148      	lsls	r0, r1, #5
 8003b6e:	6979      	ldr	r1, [r7, #20]
 8003b70:	4401      	add	r1, r0
 8003b72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b76:	4313      	orrs	r3, r2
 8003b78:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10d      	bne.n	8003b9c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	68d9      	ldr	r1, [r3, #12]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	460a      	mov	r2, r1
 8003b9a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b089      	sub	sp, #36	; 0x24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	460b      	mov	r3, r1
 8003bda:	71fb      	strb	r3, [r7, #7]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003be8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d123      	bne.n	8003c38 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bf0:	88bb      	ldrh	r3, [r7, #4]
 8003bf2:	3303      	adds	r3, #3
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e018      	b.n	8003c30 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	031a      	lsls	r2, r3, #12
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3301      	adds	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	3301      	adds	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3e2      	bcc.n	8003bfe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3724      	adds	r7, #36	; 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b08b      	sub	sp, #44	; 0x2c
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
 8003c70:	e014      	b.n	8003c9c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	3301      	adds	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	3301      	adds	r3, #1
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	3301      	adds	r3, #1
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3e6      	bcc.n	8003c72 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ca4:	8bfb      	ldrh	r3, [r7, #30]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01e      	beq.n	8003ce8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f107 0310 	add.w	r3, r7, #16
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	701a      	strb	r2, [r3, #0]
      i++;
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	623b      	str	r3, [r7, #32]
      pDest++;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	3301      	adds	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003cdc:	8bfb      	ldrh	r3, [r7, #30]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ce2:	8bfb      	ldrh	r3, [r7, #30]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ea      	bne.n	8003cbe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	372c      	adds	r7, #44	; 0x2c
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d12c      	bne.n	8003d6c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	db12      	blt.n	8003d4a <USB_EPSetStall+0x54>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00f      	beq.n	8003d4a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	0151      	lsls	r1, r2, #5
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	440a      	add	r2, r1
 8003d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d48:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	0151      	lsls	r1, r2, #5
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	440a      	add	r2, r1
 8003d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e02b      	b.n	8003dc4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db12      	blt.n	8003da4 <USB_EPSetStall+0xae>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00f      	beq.n	8003da4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003da2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d128      	bne.n	8003e40 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	0151      	lsls	r1, r2, #5
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	440a      	add	r2, r1
 8003e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	78db      	ldrb	r3, [r3, #3]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d003      	beq.n	8003e1e <USB_EPClearStall+0x4c>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	78db      	ldrb	r3, [r3, #3]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d138      	bne.n	8003e90 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e027      	b.n	8003e90 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	78db      	ldrb	r3, [r3, #3]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d003      	beq.n	8003e70 <USB_EPClearStall+0x9e>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	78db      	ldrb	r3, [r3, #3]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d10f      	bne.n	8003e90 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	0151      	lsls	r1, r2, #5
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	440a      	add	r2, r1
 8003e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ebc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ec0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003ed2:	68f9      	ldr	r1, [r7, #12]
 8003ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f04:	f023 0303 	bic.w	r3, r3, #3
 8003f08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f18:	f023 0302 	bic.w	r3, r3, #2
 8003f1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4013      	ands	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	0c1b      	lsrs	r3, r3, #16
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	b29b      	uxth	r3, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	4013      	ands	r3, r2
 8004028:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800402a:	68bb      	ldr	r3, [r7, #8]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	01db      	lsls	r3, r3, #7
 800406a:	b2db      	uxtb	r3, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004086:	68bb      	ldr	r3, [r7, #8]
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0301 	and.w	r3, r3, #1
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040ce:	f023 0307 	bic.w	r3, r3, #7
 80040d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	460b      	mov	r3, r1
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	333c      	adds	r3, #60	; 0x3c
 800410e:	3304      	adds	r3, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <USB_EP0_OutStart+0xb8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d90a      	bls.n	8004132 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800412c:	d101      	bne.n	8004132 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e037      	b.n	80041a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	461a      	mov	r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f043 0318 	orr.w	r3, r3, #24
 8004164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004174:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004178:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800417a:	7afb      	ldrb	r3, [r7, #11]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d10f      	bne.n	80041a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800419e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	4f54300a 	.word	0x4f54300a

080041b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <USB_CoreReset+0x60>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e01a      	b.n	8004206 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	daf3      	bge.n	80041c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <USB_CoreReset+0x60>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d0f1      	beq.n	80041e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	00030d40 	.word	0x00030d40

08004218 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004224:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004228:	f002 f952 	bl	80064d0 <USBD_static_malloc>
 800422c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800423c:	2302      	movs	r3, #2
 800423e:	e066      	b.n	800430e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7c1b      	ldrb	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d119      	bne.n	8004284 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004254:	2202      	movs	r2, #2
 8004256:	2181      	movs	r1, #129	; 0x81
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f002 f816 	bl	800628a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004268:	2202      	movs	r2, #2
 800426a:	2101      	movs	r1, #1
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f002 f80c 	bl	800628a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2210      	movs	r2, #16
 800427e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004282:	e016      	b.n	80042b2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004284:	2340      	movs	r3, #64	; 0x40
 8004286:	2202      	movs	r2, #2
 8004288:	2181      	movs	r1, #129	; 0x81
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f001 fffd 	bl	800628a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004296:	2340      	movs	r3, #64	; 0x40
 8004298:	2202      	movs	r2, #2
 800429a:	2101      	movs	r1, #1
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f001 fff4 	bl	800628a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80042b2:	2308      	movs	r3, #8
 80042b4:	2203      	movs	r2, #3
 80042b6:	2182      	movs	r1, #130	; 0x82
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f001 ffe6 	bl	800628a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7c1b      	ldrb	r3, [r3, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f2:	2101      	movs	r1, #1
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f002 f8b7 	bl	8006468 <USBD_LL_PrepareReceive>
 80042fa:	e007      	b.n	800430c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	2101      	movs	r1, #1
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f002 f8ae 	bl	8006468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004322:	2181      	movs	r1, #129	; 0x81
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 ffd6 	bl	80062d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004330:	2101      	movs	r1, #1
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f001 ffcf 	bl	80062d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004340:	2182      	movs	r1, #130	; 0x82
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 ffc7 	bl	80062d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00e      	beq.n	8004380 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004372:	4618      	mov	r0, r3
 8004374:	f002 f8ba 	bl	80064ec <USBD_static_free>
    pdev->pClassData = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800439c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0af      	b.n	8004514 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03f      	beq.n	8004440 <USBD_CDC_Setup+0xb4>
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	f040 809f 	bne.w	8004504 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	88db      	ldrh	r3, [r3, #6]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02e      	beq.n	800442c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da16      	bge.n	8004406 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80043e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	88d2      	ldrh	r2, [r2, #6]
 80043ea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	88db      	ldrh	r3, [r3, #6]
 80043f0:	2b07      	cmp	r3, #7
 80043f2:	bf28      	it	cs
 80043f4:	2307      	movcs	r3, #7
 80043f6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	89fa      	ldrh	r2, [r7, #14]
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 fb19 	bl	8005a36 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004404:	e085      	b.n	8004512 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	785a      	ldrb	r2, [r3, #1]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	88db      	ldrh	r3, [r3, #6]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800441c:	6939      	ldr	r1, [r7, #16]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	88db      	ldrh	r3, [r3, #6]
 8004422:	461a      	mov	r2, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 fb32 	bl	8005a8e <USBD_CtlPrepareRx>
      break;
 800442a:	e072      	b.n	8004512 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	7850      	ldrb	r0, [r2, #1]
 8004438:	2200      	movs	r2, #0
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	4798      	blx	r3
      break;
 800443e:	e068      	b.n	8004512 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b0b      	cmp	r3, #11
 8004446:	d852      	bhi.n	80044ee <USBD_CDC_Setup+0x162>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <USBD_CDC_Setup+0xc4>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004481 	.word	0x08004481
 8004454:	080044fd 	.word	0x080044fd
 8004458:	080044ef 	.word	0x080044ef
 800445c:	080044ef 	.word	0x080044ef
 8004460:	080044ef 	.word	0x080044ef
 8004464:	080044ef 	.word	0x080044ef
 8004468:	080044ef 	.word	0x080044ef
 800446c:	080044ef 	.word	0x080044ef
 8004470:	080044ef 	.word	0x080044ef
 8004474:	080044ef 	.word	0x080044ef
 8004478:	080044ab 	.word	0x080044ab
 800447c:	080044d5 	.word	0x080044d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b03      	cmp	r3, #3
 800448a:	d107      	bne.n	800449c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800448c:	f107 030a 	add.w	r3, r7, #10
 8004490:	2202      	movs	r2, #2
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f001 face 	bl	8005a36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800449a:	e032      	b.n	8004502 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f001 fa58 	bl	8005954 <USBD_CtlError>
            ret = USBD_FAIL;
 80044a4:	2303      	movs	r3, #3
 80044a6:	75fb      	strb	r3, [r7, #23]
          break;
 80044a8:	e02b      	b.n	8004502 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80044b6:	f107 030d 	add.w	r3, r7, #13
 80044ba:	2201      	movs	r2, #1
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f001 fab9 	bl	8005a36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044c4:	e01d      	b.n	8004502 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80044c6:	6839      	ldr	r1, [r7, #0]
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f001 fa43 	bl	8005954 <USBD_CtlError>
            ret = USBD_FAIL;
 80044ce:	2303      	movs	r3, #3
 80044d0:	75fb      	strb	r3, [r7, #23]
          break;
 80044d2:	e016      	b.n	8004502 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d00f      	beq.n	8004500 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f001 fa36 	bl	8005954 <USBD_CtlError>
            ret = USBD_FAIL;
 80044e8:	2303      	movs	r3, #3
 80044ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80044ec:	e008      	b.n	8004500 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 fa2f 	bl	8005954 <USBD_CtlError>
          ret = USBD_FAIL;
 80044f6:	2303      	movs	r3, #3
 80044f8:	75fb      	strb	r3, [r7, #23]
          break;
 80044fa:	e002      	b.n	8004502 <USBD_CDC_Setup+0x176>
          break;
 80044fc:	bf00      	nop
 80044fe:	e008      	b.n	8004512 <USBD_CDC_Setup+0x186>
          break;
 8004500:	bf00      	nop
      }
      break;
 8004502:	e006      	b.n	8004512 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004504:	6839      	ldr	r1, [r7, #0]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f001 fa24 	bl	8005954 <USBD_CtlError>
      ret = USBD_FAIL;
 800450c:	2303      	movs	r3, #3
 800450e:	75fb      	strb	r3, [r7, #23]
      break;
 8004510:	bf00      	nop
  }

  return (uint8_t)ret;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800452e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800453a:	2303      	movs	r3, #3
 800453c:	e04f      	b.n	80045de <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004544:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3318      	adds	r3, #24
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d029      	beq.n	80045b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3318      	adds	r3, #24
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	78f9      	ldrb	r1, [r7, #3]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	460b      	mov	r3, r1
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	1a5b      	subs	r3, r3, r1
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4403      	add	r3, r0
 800457c:	3344      	adds	r3, #68	; 0x44
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	fbb2 f1f3 	udiv	r1, r2, r3
 8004584:	fb03 f301 	mul.w	r3, r3, r1
 8004588:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800458a:	2b00      	cmp	r3, #0
 800458c:	d110      	bne.n	80045b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3318      	adds	r3, #24
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80045a2:	78f9      	ldrb	r1, [r7, #3]
 80045a4:	2300      	movs	r3, #0
 80045a6:	2200      	movs	r2, #0
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f001 ff3c 	bl	8006426 <USBD_LL_Transmit>
 80045ae:	e015      	b.n	80045dc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004604:	2303      	movs	r3, #3
 8004606:	e015      	b.n	8004634 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	4619      	mov	r1, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f001 ff4c 	bl	80064aa <USBD_LL_GetRxDataSize>
 8004612:	4602      	mov	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800462e:	4611      	mov	r1, r2
 8004630:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800464a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004652:	2303      	movs	r3, #3
 8004654:	e01b      	b.n	800468e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <USBD_CDC_EP0_RxReady+0x50>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004666:	2bff      	cmp	r3, #255	; 0xff
 8004668:	d010      	beq.n	800468c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004678:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004680:	b292      	uxth	r2, r2
 8004682:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2243      	movs	r2, #67	; 0x43
 80046a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80046a6:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	20000094 	.word	0x20000094

080046b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2243      	movs	r2, #67	; 0x43
 80046c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80046c6:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	20000050 	.word	0x20000050

080046d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2243      	movs	r2, #67	; 0x43
 80046e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80046e6:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	200000d8 	.word	0x200000d8

080046f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	220a      	movs	r2, #10
 8004704:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004706:	4b03      	ldr	r3, [pc, #12]	; (8004714 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	2000000c 	.word	0x2000000c

08004718 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004728:	2303      	movs	r3, #3
 800472a:	e004      	b.n	8004736 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004742:	b480      	push	{r7}
 8004744:	b087      	sub	sp, #28
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004754:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800475c:	2303      	movs	r3, #3
 800475e:	e008      	b.n	8004772 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800478e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004796:	2303      	movs	r3, #3
 8004798:	e004      	b.n	80047a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e01a      	b.n	8004808 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d114      	bne.n	8004806 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2201      	movs	r2, #1
 80047e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80047fa:	2181      	movs	r1, #129	; 0x81
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f001 fe12 	bl	8006426 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800481e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800482a:	2303      	movs	r3, #3
 800482c:	e016      	b.n	800485c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7c1b      	ldrb	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800483c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004840:	2101      	movs	r1, #1
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 fe10 	bl	8006468 <USBD_LL_PrepareReceive>
 8004848:	e007      	b.n	800485a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004850:	2340      	movs	r3, #64	; 0x40
 8004852:	2101      	movs	r1, #1
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 fe07 	bl	8006468 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004878:	2303      	movs	r3, #3
 800487a:	e01f      	b.n	80048bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	79fa      	ldrb	r2, [r7, #7]
 80048ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f001 fc83 	bl	80061bc <USBD_LL_Init>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80048d8:	2303      	movs	r3, #3
 80048da:	e016      	b.n	800490a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f107 020e 	add.w	r2, r7, #14
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 fc9a 	bl	8006254 <USBD_LL_Start>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800494c:	2303      	movs	r3, #3
 800494e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	4611      	mov	r1, r2
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
 800496a:	4603      	mov	r3, r0
 800496c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	4611      	mov	r1, r2
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
  }

  return USBD_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 ff90 	bl	80058e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80049ce:	461a      	mov	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d01a      	beq.n	8004a1a <USBD_LL_SetupStage+0x72>
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d822      	bhi.n	8004a2e <USBD_LL_SetupStage+0x86>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <USBD_LL_SetupStage+0x4a>
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d00a      	beq.n	8004a06 <USBD_LL_SetupStage+0x5e>
 80049f0:	e01d      	b.n	8004a2e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa62 	bl	8004ec4 <USBD_StdDevReq>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
      break;
 8004a04:	e020      	b.n	8004a48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fac6 	bl	8004fa0 <USBD_StdItfReq>
 8004a14:	4603      	mov	r3, r0
 8004a16:	73fb      	strb	r3, [r7, #15]
      break;
 8004a18:	e016      	b.n	8004a48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fb05 	bl	8005032 <USBD_StdEPReq>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a2c:	e00c      	b.n	8004a48 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 fc69 	bl	8006314 <USBD_LL_StallEP>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
      break;
 8004a46:	bf00      	nop
  }

  return ret;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d138      	bne.n	8004ad8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004a6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d14a      	bne.n	8004b0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d913      	bls.n	8004aac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	1ad2      	subs	r2, r2, r3
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	bf28      	it	cs
 8004a9e:	4613      	movcs	r3, r2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f001 f80f 	bl	8005ac8 <USBD_CtlContinueRx>
 8004aaa:	e030      	b.n	8004b0e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d10b      	bne.n	8004ad0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f001 f80a 	bl	8005aea <USBD_CtlSendStatus>
 8004ad6:	e01a      	b.n	8004b0e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d114      	bne.n	8004b0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	7afa      	ldrb	r2, [r7, #11]
 8004afa:	4611      	mov	r1, r2
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	4798      	blx	r3
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	e000      	b.n	8004b10 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	460b      	mov	r3, r1
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004b26:	7afb      	ldrb	r3, [r7, #11]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d16b      	bne.n	8004c04 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d156      	bne.n	8004bea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d914      	bls.n	8004b72 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 ff84 	bl	8005a6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b64:	2300      	movs	r3, #0
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f001 fc7c 	bl	8006468 <USBD_LL_PrepareReceive>
 8004b70:	e03b      	b.n	8004bea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d11c      	bne.n	8004bb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d316      	bcc.n	8004bb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d20f      	bcs.n	8004bb8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 ff65 	bl	8005a6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004baa:	2300      	movs	r3, #0
 8004bac:	2200      	movs	r2, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f001 fc59 	bl	8006468 <USBD_LL_PrepareReceive>
 8004bb6:	e018      	b.n	8004bea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d10b      	bne.n	8004bdc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f001 fb98 	bl	8006314 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 ff93 	bl	8005b10 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d122      	bne.n	8004c3a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff fe98 	bl	800492a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c02:	e01a      	b.n	8004c3a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d114      	bne.n	8004c3a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	7afa      	ldrb	r2, [r7, #11]
 8004c26:	4611      	mov	r1, r2
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	4798      	blx	r3
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	e000      	b.n	8004c3c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e02f      	b.n	8004cd8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6852      	ldr	r2, [r2, #4]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ca2:	2340      	movs	r3, #64	; 0x40
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 faee 	bl	800628a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2240      	movs	r2, #64	; 0x40
 8004cba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cbe:	2340      	movs	r3, #64	; 0x40
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f001 fae0 	bl	800628a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2240      	movs	r2, #64	; 0x40
 8004cd4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2204      	movs	r2, #4
 8004d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d106      	bne.n	8004d4e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e012      	b.n	8004d98 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d10b      	bne.n	8004d96 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e014      	b.n	8004de4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d10d      	bne.n	8004de2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e014      	b.n	8004e30 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d10d      	bne.n	8004e2e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	4611      	mov	r1, r2
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6852      	ldr	r2, [r2, #4]
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	4611      	mov	r1, r2
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
  }

  return USBD_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004ea4:	8a3b      	ldrh	r3, [r7, #16]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	b21b      	sxth	r3, r3
 8004eb2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d005      	beq.n	8004eea <USBD_StdDevReq+0x26>
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d853      	bhi.n	8004f8a <USBD_StdDevReq+0xc6>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <USBD_StdDevReq+0x3a>
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d14f      	bne.n	8004f8a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e04a      	b.n	8004f94 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b09      	cmp	r3, #9
 8004f04:	d83b      	bhi.n	8004f7e <USBD_StdDevReq+0xba>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <USBD_StdDevReq+0x48>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08004f7f 	.word	0x08004f7f
 8004f18:	08004f6b 	.word	0x08004f6b
 8004f1c:	08004f7f 	.word	0x08004f7f
 8004f20:	08004f3f 	.word	0x08004f3f
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f7f 	.word	0x08004f7f
 8004f2c:	08004f57 	.word	0x08004f57
 8004f30:	08004f49 	.word	0x08004f49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9de 	bl	80052f8 <USBD_GetDescriptor>
          break;
 8004f3c:	e024      	b.n	8004f88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fb43 	bl	80055cc <USBD_SetAddress>
          break;
 8004f46:	e01f      	b.n	8004f88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fb82 	bl	8005654 <USBD_SetConfig>
 8004f50:	4603      	mov	r3, r0
 8004f52:	73fb      	strb	r3, [r7, #15]
          break;
 8004f54:	e018      	b.n	8004f88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fc21 	bl	80057a0 <USBD_GetConfig>
          break;
 8004f5e:	e013      	b.n	8004f88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fc52 	bl	800580c <USBD_GetStatus>
          break;
 8004f68:	e00e      	b.n	8004f88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004f6a:	6839      	ldr	r1, [r7, #0]
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fc81 	bl	8005874 <USBD_SetFeature>
          break;
 8004f72:	e009      	b.n	8004f88 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fc90 	bl	800589c <USBD_ClrFeature>
          break;
 8004f7c:	e004      	b.n	8004f88 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fce7 	bl	8005954 <USBD_CtlError>
          break;
 8004f86:	bf00      	nop
      }
      break;
 8004f88:	e004      	b.n	8004f94 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fce1 	bl	8005954 <USBD_CtlError>
      break;
 8004f92:	bf00      	nop
  }

  return ret;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop

08004fa0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d005      	beq.n	8004fc6 <USBD_StdItfReq+0x26>
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d82f      	bhi.n	800501e <USBD_StdItfReq+0x7e>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <USBD_StdItfReq+0x26>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d12b      	bne.n	800501e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d81d      	bhi.n	8005010 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	889b      	ldrh	r3, [r3, #4]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d813      	bhi.n	8005006 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	88db      	ldrh	r3, [r3, #6]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <USBD_StdItfReq+0x7a>
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10d      	bne.n	800501a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fd73 	bl	8005aea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005004:	e009      	b.n	800501a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fca3 	bl	8005954 <USBD_CtlError>
          break;
 800500e:	e004      	b.n	800501a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fc9e 	bl	8005954 <USBD_CtlError>
          break;
 8005018:	e000      	b.n	800501c <USBD_StdItfReq+0x7c>
          break;
 800501a:	bf00      	nop
      }
      break;
 800501c:	e004      	b.n	8005028 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fc97 	bl	8005954 <USBD_CtlError>
      break;
 8005026:	bf00      	nop
  }

  return ret;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	889b      	ldrh	r3, [r3, #4]
 8005044:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d007      	beq.n	8005062 <USBD_StdEPReq+0x30>
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	f200 8145 	bhi.w	80052e2 <USBD_StdEPReq+0x2b0>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00c      	beq.n	8005076 <USBD_StdEPReq+0x44>
 800505c:	2b20      	cmp	r3, #32
 800505e:	f040 8140 	bne.w	80052e2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
      break;
 8005074:	e13a      	b.n	80052ec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d007      	beq.n	800508e <USBD_StdEPReq+0x5c>
 800507e:	2b03      	cmp	r3, #3
 8005080:	f300 8129 	bgt.w	80052d6 <USBD_StdEPReq+0x2a4>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d07f      	beq.n	8005188 <USBD_StdEPReq+0x156>
 8005088:	2b01      	cmp	r3, #1
 800508a:	d03c      	beq.n	8005106 <USBD_StdEPReq+0xd4>
 800508c:	e123      	b.n	80052d6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d002      	beq.n	80050a0 <USBD_StdEPReq+0x6e>
 800509a:	2b03      	cmp	r3, #3
 800509c:	d016      	beq.n	80050cc <USBD_StdEPReq+0x9a>
 800509e:	e02c      	b.n	80050fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050a0:	7bbb      	ldrb	r3, [r7, #14]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <USBD_StdEPReq+0x90>
 80050a6:	7bbb      	ldrb	r3, [r7, #14]
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d00a      	beq.n	80050c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 f92f 	bl	8006314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 f92b 	bl	8006314 <USBD_LL_StallEP>
 80050be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80050c0:	e020      	b.n	8005104 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fc45 	bl	8005954 <USBD_CtlError>
              break;
 80050ca:	e01b      	b.n	8005104 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	885b      	ldrh	r3, [r3, #2]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10e      	bne.n	80050f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <USBD_StdEPReq+0xc0>
 80050da:	7bbb      	ldrb	r3, [r7, #14]
 80050dc:	2b80      	cmp	r3, #128	; 0x80
 80050de:	d008      	beq.n	80050f2 <USBD_StdEPReq+0xc0>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	88db      	ldrh	r3, [r3, #6]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80050e8:	7bbb      	ldrb	r3, [r7, #14]
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f001 f911 	bl	8006314 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fcf9 	bl	8005aea <USBD_CtlSendStatus>

              break;
 80050f8:	e004      	b.n	8005104 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fc29 	bl	8005954 <USBD_CtlError>
              break;
 8005102:	bf00      	nop
          }
          break;
 8005104:	e0ec      	b.n	80052e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d002      	beq.n	8005118 <USBD_StdEPReq+0xe6>
 8005112:	2b03      	cmp	r3, #3
 8005114:	d016      	beq.n	8005144 <USBD_StdEPReq+0x112>
 8005116:	e030      	b.n	800517a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005118:	7bbb      	ldrb	r3, [r7, #14]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <USBD_StdEPReq+0x108>
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d00a      	beq.n	800513a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 f8f3 	bl	8006314 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800512e:	2180      	movs	r1, #128	; 0x80
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 f8ef 	bl	8006314 <USBD_LL_StallEP>
 8005136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005138:	e025      	b.n	8005186 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fc09 	bl	8005954 <USBD_CtlError>
              break;
 8005142:	e020      	b.n	8005186 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	885b      	ldrh	r3, [r3, #2]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11b      	bne.n	8005184 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800514c:	7bbb      	ldrb	r3, [r7, #14]
 800514e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005156:	7bbb      	ldrb	r3, [r7, #14]
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 f8f9 	bl	8006352 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fcc2 	bl	8005aea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
 8005174:	4603      	mov	r3, r0
 8005176:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005178:	e004      	b.n	8005184 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fbe9 	bl	8005954 <USBD_CtlError>
              break;
 8005182:	e000      	b.n	8005186 <USBD_StdEPReq+0x154>
              break;
 8005184:	bf00      	nop
          }
          break;
 8005186:	e0ab      	b.n	80052e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d002      	beq.n	800519a <USBD_StdEPReq+0x168>
 8005194:	2b03      	cmp	r3, #3
 8005196:	d032      	beq.n	80051fe <USBD_StdEPReq+0x1cc>
 8005198:	e097      	b.n	80052ca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800519a:	7bbb      	ldrb	r3, [r7, #14]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <USBD_StdEPReq+0x17e>
 80051a0:	7bbb      	ldrb	r3, [r7, #14]
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d004      	beq.n	80051b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fbd3 	bl	8005954 <USBD_CtlError>
                break;
 80051ae:	e091      	b.n	80052d4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	da0b      	bge.n	80051d0 <USBD_StdEPReq+0x19e>
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	3310      	adds	r3, #16
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4413      	add	r3, r2
 80051cc:	3304      	adds	r3, #4
 80051ce:	e00b      	b.n	80051e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80051d0:	7bbb      	ldrb	r3, [r7, #14]
 80051d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2202      	movs	r2, #2
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fc1d 	bl	8005a36 <USBD_CtlSendData>
              break;
 80051fc:	e06a      	b.n	80052d4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80051fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da11      	bge.n	800522a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005206:	7bbb      	ldrb	r3, [r7, #14]
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3324      	adds	r3, #36	; 0x24
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d117      	bne.n	8005250 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fb96 	bl	8005954 <USBD_CtlError>
                  break;
 8005228:	e054      	b.n	80052d4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800522a:	7bbb      	ldrb	r3, [r7, #14]
 800522c:	f003 020f 	and.w	r2, r3, #15
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb83 	bl	8005954 <USBD_CtlError>
                  break;
 800524e:	e041      	b.n	80052d4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005254:	2b00      	cmp	r3, #0
 8005256:	da0b      	bge.n	8005270 <USBD_StdEPReq+0x23e>
 8005258:	7bbb      	ldrb	r3, [r7, #14]
 800525a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	3310      	adds	r3, #16
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4413      	add	r3, r2
 800526c:	3304      	adds	r3, #4
 800526e:	e00b      	b.n	8005288 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	3304      	adds	r3, #4
 8005288:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <USBD_StdEPReq+0x264>
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d103      	bne.n	800529e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e00e      	b.n	80052bc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800529e:	7bbb      	ldrb	r3, [r7, #14]
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 f874 	bl	8006390 <USBD_LL_IsStallEP>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e002      	b.n	80052bc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2202      	movs	r2, #2
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fbb7 	bl	8005a36 <USBD_CtlSendData>
              break;
 80052c8:	e004      	b.n	80052d4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fb41 	bl	8005954 <USBD_CtlError>
              break;
 80052d2:	bf00      	nop
          }
          break;
 80052d4:	e004      	b.n	80052e0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80052d6:	6839      	ldr	r1, [r7, #0]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fb3b 	bl	8005954 <USBD_CtlError>
          break;
 80052de:	bf00      	nop
      }
      break;
 80052e0:	e004      	b.n	80052ec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb35 	bl	8005954 <USBD_CtlError>
      break;
 80052ea:	bf00      	nop
  }

  return ret;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	885b      	ldrh	r3, [r3, #2]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	2b06      	cmp	r3, #6
 800531a:	f200 8128 	bhi.w	800556e <USBD_GetDescriptor+0x276>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <USBD_GetDescriptor+0x2c>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005341 	.word	0x08005341
 8005328:	08005359 	.word	0x08005359
 800532c:	08005399 	.word	0x08005399
 8005330:	0800556f 	.word	0x0800556f
 8005334:	0800556f 	.word	0x0800556f
 8005338:	0800550f 	.word	0x0800550f
 800533c:	0800553b 	.word	0x0800553b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	7c12      	ldrb	r2, [r2, #16]
 800534c:	f107 0108 	add.w	r1, r7, #8
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
 8005354:	60f8      	str	r0, [r7, #12]
      break;
 8005356:	e112      	b.n	800557e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	7c1b      	ldrb	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f107 0208 	add.w	r2, r7, #8
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
 8005370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3301      	adds	r3, #1
 8005376:	2202      	movs	r2, #2
 8005378:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800537a:	e100      	b.n	800557e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	f107 0208 	add.w	r2, r7, #8
 8005388:	4610      	mov	r0, r2
 800538a:	4798      	blx	r3
 800538c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	2202      	movs	r2, #2
 8005394:	701a      	strb	r2, [r3, #0]
      break;
 8005396:	e0f2      	b.n	800557e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	885b      	ldrh	r3, [r3, #2]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b05      	cmp	r3, #5
 80053a0:	f200 80ac 	bhi.w	80054fc <USBD_GetDescriptor+0x204>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <USBD_GetDescriptor+0xb4>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	0800542d 	.word	0x0800542d
 80053b8:	08005461 	.word	0x08005461
 80053bc:	08005495 	.word	0x08005495
 80053c0:	080054c9 	.word	0x080054c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	7c12      	ldrb	r2, [r2, #16]
 80053dc:	f107 0108 	add.w	r1, r7, #8
 80053e0:	4610      	mov	r0, r2
 80053e2:	4798      	blx	r3
 80053e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053e6:	e091      	b.n	800550c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fab2 	bl	8005954 <USBD_CtlError>
            err++;
 80053f0:	7afb      	ldrb	r3, [r7, #11]
 80053f2:	3301      	adds	r3, #1
 80053f4:	72fb      	strb	r3, [r7, #11]
          break;
 80053f6:	e089      	b.n	800550c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	7c12      	ldrb	r2, [r2, #16]
 8005410:	f107 0108 	add.w	r1, r7, #8
 8005414:	4610      	mov	r0, r2
 8005416:	4798      	blx	r3
 8005418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800541a:	e077      	b.n	800550c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa98 	bl	8005954 <USBD_CtlError>
            err++;
 8005424:	7afb      	ldrb	r3, [r7, #11]
 8005426:	3301      	adds	r3, #1
 8005428:	72fb      	strb	r3, [r7, #11]
          break;
 800542a:	e06f      	b.n	800550c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00b      	beq.n	8005450 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	7c12      	ldrb	r2, [r2, #16]
 8005444:	f107 0108 	add.w	r1, r7, #8
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
 800544c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800544e:	e05d      	b.n	800550c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa7e 	bl	8005954 <USBD_CtlError>
            err++;
 8005458:	7afb      	ldrb	r3, [r7, #11]
 800545a:	3301      	adds	r3, #1
 800545c:	72fb      	strb	r3, [r7, #11]
          break;
 800545e:	e055      	b.n	800550c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	7c12      	ldrb	r2, [r2, #16]
 8005478:	f107 0108 	add.w	r1, r7, #8
 800547c:	4610      	mov	r0, r2
 800547e:	4798      	blx	r3
 8005480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005482:	e043      	b.n	800550c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa64 	bl	8005954 <USBD_CtlError>
            err++;
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	3301      	adds	r3, #1
 8005490:	72fb      	strb	r3, [r7, #11]
          break;
 8005492:	e03b      	b.n	800550c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	7c12      	ldrb	r2, [r2, #16]
 80054ac:	f107 0108 	add.w	r1, r7, #8
 80054b0:	4610      	mov	r0, r2
 80054b2:	4798      	blx	r3
 80054b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054b6:	e029      	b.n	800550c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa4a 	bl	8005954 <USBD_CtlError>
            err++;
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	3301      	adds	r3, #1
 80054c4:	72fb      	strb	r3, [r7, #11]
          break;
 80054c6:	e021      	b.n	800550c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	7c12      	ldrb	r2, [r2, #16]
 80054e0:	f107 0108 	add.w	r1, r7, #8
 80054e4:	4610      	mov	r0, r2
 80054e6:	4798      	blx	r3
 80054e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054ea:	e00f      	b.n	800550c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa30 	bl	8005954 <USBD_CtlError>
            err++;
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	3301      	adds	r3, #1
 80054f8:	72fb      	strb	r3, [r7, #11]
          break;
 80054fa:	e007      	b.n	800550c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa28 	bl	8005954 <USBD_CtlError>
          err++;
 8005504:	7afb      	ldrb	r3, [r7, #11]
 8005506:	3301      	adds	r3, #1
 8005508:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800550a:	bf00      	nop
      }
      break;
 800550c:	e037      	b.n	800557e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7c1b      	ldrb	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	f107 0208 	add.w	r2, r7, #8
 8005522:	4610      	mov	r0, r2
 8005524:	4798      	blx	r3
 8005526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005528:	e029      	b.n	800557e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa11 	bl	8005954 <USBD_CtlError>
        err++;
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	3301      	adds	r3, #1
 8005536:	72fb      	strb	r3, [r7, #11]
      break;
 8005538:	e021      	b.n	800557e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	7c1b      	ldrb	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	4610      	mov	r0, r2
 8005550:	4798      	blx	r3
 8005552:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	2207      	movs	r2, #7
 800555a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800555c:	e00f      	b.n	800557e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f9f7 	bl	8005954 <USBD_CtlError>
        err++;
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	3301      	adds	r3, #1
 800556a:	72fb      	strb	r3, [r7, #11]
      break;
 800556c:	e007      	b.n	800557e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f9ef 	bl	8005954 <USBD_CtlError>
      err++;
 8005576:	7afb      	ldrb	r3, [r7, #11]
 8005578:	3301      	adds	r3, #1
 800557a:	72fb      	strb	r3, [r7, #11]
      break;
 800557c:	bf00      	nop
  }

  if (err != 0U)
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11e      	bne.n	80055c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	88db      	ldrh	r3, [r3, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d016      	beq.n	80055ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800558c:	893b      	ldrh	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00e      	beq.n	80055b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	88da      	ldrh	r2, [r3, #6]
 8005596:	893b      	ldrh	r3, [r7, #8]
 8005598:	4293      	cmp	r3, r2
 800559a:	bf28      	it	cs
 800559c:	4613      	movcs	r3, r2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80055a2:	893b      	ldrh	r3, [r7, #8]
 80055a4:	461a      	mov	r2, r3
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa44 	bl	8005a36 <USBD_CtlSendData>
 80055ae:	e009      	b.n	80055c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9ce 	bl	8005954 <USBD_CtlError>
 80055b8:	e004      	b.n	80055c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa95 	bl	8005aea <USBD_CtlSendStatus>
 80055c0:	e000      	b.n	80055c4 <USBD_GetDescriptor+0x2cc>
    return;
 80055c2:	bf00      	nop
  }
}
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop

080055cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	889b      	ldrh	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d131      	bne.n	8005642 <USBD_SetAddress+0x76>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d12d      	bne.n	8005642 <USBD_SetAddress+0x76>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	885b      	ldrh	r3, [r3, #2]
 80055ea:	2b7f      	cmp	r3, #127	; 0x7f
 80055ec:	d829      	bhi.n	8005642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	885b      	ldrh	r3, [r3, #2]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b03      	cmp	r3, #3
 8005604:	d104      	bne.n	8005610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f9a3 	bl	8005954 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800560e:	e01d      	b.n	800564c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	7bfa      	ldrb	r2, [r7, #15]
 8005614:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fee3 	bl	80063e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa61 	bl	8005aea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005636:	e009      	b.n	800564c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005640:	e004      	b.n	800564c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f985 	bl	8005954 <USBD_CtlError>
  }
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	885b      	ldrh	r3, [r3, #2]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	4b4c      	ldr	r3, [pc, #304]	; (800579c <USBD_SetConfig+0x148>)
 800566a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800566c:	4b4b      	ldr	r3, [pc, #300]	; (800579c <USBD_SetConfig+0x148>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d905      	bls.n	8005680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f96c 	bl	8005954 <USBD_CtlError>
    return USBD_FAIL;
 800567c:	2303      	movs	r3, #3
 800567e:	e088      	b.n	8005792 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d002      	beq.n	8005692 <USBD_SetConfig+0x3e>
 800568c:	2b03      	cmp	r3, #3
 800568e:	d025      	beq.n	80056dc <USBD_SetConfig+0x88>
 8005690:	e071      	b.n	8005776 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005692:	4b42      	ldr	r3, [pc, #264]	; (800579c <USBD_SetConfig+0x148>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01c      	beq.n	80056d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800569a:	4b40      	ldr	r3, [pc, #256]	; (800579c <USBD_SetConfig+0x148>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80056a4:	4b3d      	ldr	r3, [pc, #244]	; (800579c <USBD_SetConfig+0x148>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff f948 	bl	8004940 <USBD_SetClassConfig>
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f949 	bl	8005954 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80056c2:	e065      	b.n	8005790 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa10 	bl	8005aea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2203      	movs	r2, #3
 80056ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80056d2:	e05d      	b.n	8005790 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa08 	bl	8005aea <USBD_CtlSendStatus>
      break;
 80056da:	e059      	b.n	8005790 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <USBD_SetConfig+0x148>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d112      	bne.n	800570a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80056ec:	4b2b      	ldr	r3, [pc, #172]	; (800579c <USBD_SetConfig+0x148>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80056f6:	4b29      	ldr	r3, [pc, #164]	; (800579c <USBD_SetConfig+0x148>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff f93b 	bl	8004978 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f9f1 	bl	8005aea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005708:	e042      	b.n	8005790 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <USBD_SetConfig+0x148>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d02a      	beq.n	800576e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff f929 	bl	8004978 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005726:	4b1d      	ldr	r3, [pc, #116]	; (800579c <USBD_SetConfig+0x148>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005730:	4b1a      	ldr	r3, [pc, #104]	; (800579c <USBD_SetConfig+0x148>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff f902 	bl	8004940 <USBD_SetClassConfig>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00f      	beq.n	8005766 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f903 	bl	8005954 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff f90e 	bl	8004978 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005764:	e014      	b.n	8005790 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9bf 	bl	8005aea <USBD_CtlSendStatus>
      break;
 800576c:	e010      	b.n	8005790 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9bb 	bl	8005aea <USBD_CtlSendStatus>
      break;
 8005774:	e00c      	b.n	8005790 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f8eb 	bl	8005954 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <USBD_SetConfig+0x148>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff f8f7 	bl	8004978 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800578a:	2303      	movs	r3, #3
 800578c:	73fb      	strb	r3, [r7, #15]
      break;
 800578e:	bf00      	nop
  }

  return ret;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000208 	.word	0x20000208

080057a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	88db      	ldrh	r3, [r3, #6]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d004      	beq.n	80057bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f8cd 	bl	8005954 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80057ba:	e023      	b.n	8005804 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	dc02      	bgt.n	80057ce <USBD_GetConfig+0x2e>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	dc03      	bgt.n	80057d4 <USBD_GetConfig+0x34>
 80057cc:	e015      	b.n	80057fa <USBD_GetConfig+0x5a>
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d00b      	beq.n	80057ea <USBD_GetConfig+0x4a>
 80057d2:	e012      	b.n	80057fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3308      	adds	r3, #8
 80057de:	2201      	movs	r2, #1
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f927 	bl	8005a36 <USBD_CtlSendData>
        break;
 80057e8:	e00c      	b.n	8005804 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2201      	movs	r2, #1
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f91f 	bl	8005a36 <USBD_CtlSendData>
        break;
 80057f8:	e004      	b.n	8005804 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f8a9 	bl	8005954 <USBD_CtlError>
        break;
 8005802:	bf00      	nop
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581c:	b2db      	uxtb	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	2b02      	cmp	r3, #2
 8005822:	d81e      	bhi.n	8005862 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	88db      	ldrh	r3, [r3, #6]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d004      	beq.n	8005836 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f890 	bl	8005954 <USBD_CtlError>
        break;
 8005834:	e01a      	b.n	800586c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f043 0202 	orr.w	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	330c      	adds	r3, #12
 8005856:	2202      	movs	r2, #2
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8eb 	bl	8005a36 <USBD_CtlSendData>
      break;
 8005860:	e004      	b.n	800586c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f875 	bl	8005954 <USBD_CtlError>
      break;
 800586a:	bf00      	nop
  }
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	885b      	ldrh	r3, [r3, #2]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d106      	bne.n	8005894 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f92b 	bl	8005aea <USBD_CtlSendStatus>
  }
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d80b      	bhi.n	80058cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	885b      	ldrh	r3, [r3, #2]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10c      	bne.n	80058d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f910 	bl	8005aea <USBD_CtlSendStatus>
      }
      break;
 80058ca:	e004      	b.n	80058d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f840 	bl	8005954 <USBD_CtlError>
      break;
 80058d4:	e000      	b.n	80058d8 <USBD_ClrFeature+0x3c>
      break;
 80058d6:	bf00      	nop
  }
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	781a      	ldrb	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	781a      	ldrb	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fabb 	bl	8004e86 <SWAPBYTE>
 8005910:	4603      	mov	r3, r0
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff faae 	bl	8004e86 <SWAPBYTE>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff faa1 	bl	8004e86 <SWAPBYTE>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	80da      	strh	r2, [r3, #6]
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800595e:	2180      	movs	r1, #128	; 0x80
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fcd7 	bl	8006314 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005966:	2100      	movs	r1, #0
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fcd3 	bl	8006314 <USBD_LL_StallEP>
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d036      	beq.n	80059fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005990:	6938      	ldr	r0, [r7, #16]
 8005992:	f000 f836 	bl	8005a02 <USBD_GetLen>
 8005996:	4603      	mov	r3, r0
 8005998:	3301      	adds	r3, #1
 800599a:	b29b      	uxth	r3, r3
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	4413      	add	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	7812      	ldrb	r2, [r2, #0]
 80059ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	3301      	adds	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	4413      	add	r3, r2
 80059bc:	2203      	movs	r2, #3
 80059be:	701a      	strb	r2, [r3, #0]
  idx++;
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	3301      	adds	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80059c6:	e013      	b.n	80059f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	3301      	adds	r3, #1
 80059d8:	613b      	str	r3, [r7, #16]
    idx++;
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	3301      	adds	r3, #1
 80059de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4413      	add	r3, r2
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	3301      	adds	r3, #1
 80059ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e7      	bne.n	80059c8 <USBD_GetString+0x52>
 80059f8:	e000      	b.n	80059fc <USBD_GetString+0x86>
    return;
 80059fa:	bf00      	nop
  }
}
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005a12:	e005      	b.n	8005a20 <USBD_GetLen+0x1e>
  {
    len++;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	3301      	adds	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f5      	bne.n	8005a14 <USBD_GetLen+0x12>
  }

  return len;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fce2 	bl	8006426 <USBD_LL_Transmit>

  return USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fcd1 	bl	8006426 <USBD_LL_Transmit>

  return USBD_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fcd5 	bl	8006468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fcc4 	bl	8006468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005afa:	2300      	movs	r3, #0
 8005afc:	2200      	movs	r2, #0
 8005afe:	2100      	movs	r1, #0
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fc90 	bl	8006426 <USBD_LL_Transmit>

  return USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b20:	2300      	movs	r3, #0
 8005b22:	2200      	movs	r2, #0
 8005b24:	2100      	movs	r1, #0
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fc9e 	bl	8006468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	4912      	ldr	r1, [pc, #72]	; (8005b88 <MX_USB_DEVICE_Init+0x50>)
 8005b40:	4812      	ldr	r0, [pc, #72]	; (8005b8c <MX_USB_DEVICE_Init+0x54>)
 8005b42:	f7fe fe8f 	bl	8004864 <USBD_Init>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005b4c:	f7fa fe42 	bl	80007d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005b50:	490f      	ldr	r1, [pc, #60]	; (8005b90 <MX_USB_DEVICE_Init+0x58>)
 8005b52:	480e      	ldr	r0, [pc, #56]	; (8005b8c <MX_USB_DEVICE_Init+0x54>)
 8005b54:	f7fe feb6 	bl	80048c4 <USBD_RegisterClass>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005b5e:	f7fa fe39 	bl	80007d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005b62:	490c      	ldr	r1, [pc, #48]	; (8005b94 <MX_USB_DEVICE_Init+0x5c>)
 8005b64:	4809      	ldr	r0, [pc, #36]	; (8005b8c <MX_USB_DEVICE_Init+0x54>)
 8005b66:	f7fe fdd7 	bl	8004718 <USBD_CDC_RegisterInterface>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005b70:	f7fa fe30 	bl	80007d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005b74:	4805      	ldr	r0, [pc, #20]	; (8005b8c <MX_USB_DEVICE_Init+0x54>)
 8005b76:	f7fe fecc 	bl	8004912 <USBD_Start>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005b80:	f7fa fe28 	bl	80007d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b84:	bf00      	nop
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000130 	.word	0x20000130
 8005b8c:	20000458 	.word	0x20000458
 8005b90:	20000018 	.word	0x20000018
 8005b94:	2000011c 	.word	0x2000011c

08005b98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4905      	ldr	r1, [pc, #20]	; (8005bb4 <CDC_Init_FS+0x1c>)
 8005ba0:	4805      	ldr	r0, [pc, #20]	; (8005bb8 <CDC_Init_FS+0x20>)
 8005ba2:	f7fe fdce 	bl	8004742 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ba6:	4905      	ldr	r1, [pc, #20]	; (8005bbc <CDC_Init_FS+0x24>)
 8005ba8:	4803      	ldr	r0, [pc, #12]	; (8005bb8 <CDC_Init_FS+0x20>)
 8005baa:	f7fe fde8 	bl	800477e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005bae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000b10 	.word	0x20000b10
 8005bb8:	20000458 	.word	0x20000458
 8005bbc:	20000728 	.word	0x20000728

08005bc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005bc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	2b23      	cmp	r3, #35	; 0x23
 8005be4:	d84a      	bhi.n	8005c7c <CDC_Control_FS+0xac>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <CDC_Control_FS+0x1c>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c7d 	.word	0x08005c7d
 8005bf0:	08005c7d 	.word	0x08005c7d
 8005bf4:	08005c7d 	.word	0x08005c7d
 8005bf8:	08005c7d 	.word	0x08005c7d
 8005bfc:	08005c7d 	.word	0x08005c7d
 8005c00:	08005c7d 	.word	0x08005c7d
 8005c04:	08005c7d 	.word	0x08005c7d
 8005c08:	08005c7d 	.word	0x08005c7d
 8005c0c:	08005c7d 	.word	0x08005c7d
 8005c10:	08005c7d 	.word	0x08005c7d
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005c7d 	.word	0x08005c7d
 8005c1c:	08005c7d 	.word	0x08005c7d
 8005c20:	08005c7d 	.word	0x08005c7d
 8005c24:	08005c7d 	.word	0x08005c7d
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005c7d 	.word	0x08005c7d
 8005c30:	08005c7d 	.word	0x08005c7d
 8005c34:	08005c7d 	.word	0x08005c7d
 8005c38:	08005c7d 	.word	0x08005c7d
 8005c3c:	08005c7d 	.word	0x08005c7d
 8005c40:	08005c7d 	.word	0x08005c7d
 8005c44:	08005c7d 	.word	0x08005c7d
 8005c48:	08005c7d 	.word	0x08005c7d
 8005c4c:	08005c7d 	.word	0x08005c7d
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	08005c7d 	.word	0x08005c7d
 8005c58:	08005c7d 	.word	0x08005c7d
 8005c5c:	08005c7d 	.word	0x08005c7d
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005c7d 	.word	0x08005c7d
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c7d 	.word	0x08005c7d
 8005c74:	08005c7d 	.word	0x08005c7d
 8005c78:	08005c7d 	.word	0x08005c7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005c7c:	bf00      	nop
  }

  return (USBD_OK);
 8005c7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <CDC_Receive_FS+0x24>)
 8005c9a:	f7fe fd70 	bl	800477e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005c9e:	4804      	ldr	r0, [pc, #16]	; (8005cb0 <CDC_Receive_FS+0x24>)
 8005ca0:	f7fe fdb6 	bl	8004810 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005ca4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000458 	.word	0x20000458

08005cb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <CDC_Transmit_FS+0x48>)
 8005cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e00b      	b.n	8005cf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005cda:	887b      	ldrh	r3, [r7, #2]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4806      	ldr	r0, [pc, #24]	; (8005cfc <CDC_Transmit_FS+0x48>)
 8005ce2:	f7fe fd2e 	bl	8004742 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005ce6:	4805      	ldr	r0, [pc, #20]	; (8005cfc <CDC_Transmit_FS+0x48>)
 8005ce8:	f7fe fd62 	bl	80047b0 <USBD_CDC_TransmitPacket>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000458 	.word	0x20000458

08005d00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	6039      	str	r1, [r7, #0]
 8005d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2212      	movs	r2, #18
 8005d34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	2000014c 	.word	0x2000014c

08005d48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2204      	movs	r2, #4
 8005d58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005d5a:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000160 	.word	0x20000160

08005d6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4907      	ldr	r1, [pc, #28]	; (8005da0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d82:	4808      	ldr	r0, [pc, #32]	; (8005da4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d84:	f7ff fdf7 	bl	8005976 <USBD_GetString>
 8005d88:	e004      	b.n	8005d94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	4904      	ldr	r1, [pc, #16]	; (8005da0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005d8e:	4805      	ldr	r0, [pc, #20]	; (8005da4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005d90:	f7ff fdf1 	bl	8005976 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d94:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000ef8 	.word	0x20000ef8
 8005da4:	08006e3c 	.word	0x08006e3c

08005da8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	6039      	str	r1, [r7, #0]
 8005db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	4904      	ldr	r1, [pc, #16]	; (8005dc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005db8:	4804      	ldr	r0, [pc, #16]	; (8005dcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005dba:	f7ff fddc 	bl	8005976 <USBD_GetString>
  return USBD_StrDesc;
 8005dbe:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000ef8 	.word	0x20000ef8
 8005dcc:	08006e54 	.word	0x08006e54

08005dd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	221a      	movs	r2, #26
 8005de0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005de2:	f000 f843 	bl	8005e6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005de6:	4b02      	ldr	r3, [pc, #8]	; (8005df0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000164 	.word	0x20000164

08005df4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4907      	ldr	r1, [pc, #28]	; (8005e28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e0a:	4808      	ldr	r0, [pc, #32]	; (8005e2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e0c:	f7ff fdb3 	bl	8005976 <USBD_GetString>
 8005e10:	e004      	b.n	8005e1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4904      	ldr	r1, [pc, #16]	; (8005e28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e16:	4805      	ldr	r0, [pc, #20]	; (8005e2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e18:	f7ff fdad 	bl	8005976 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000ef8 	.word	0x20000ef8
 8005e2c:	08006e68 	.word	0x08006e68

08005e30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	4907      	ldr	r1, [pc, #28]	; (8005e64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e46:	4808      	ldr	r0, [pc, #32]	; (8005e68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e48:	f7ff fd95 	bl	8005976 <USBD_GetString>
 8005e4c:	e004      	b.n	8005e58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4904      	ldr	r1, [pc, #16]	; (8005e64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005e52:	4805      	ldr	r0, [pc, #20]	; (8005e68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005e54:	f7ff fd8f 	bl	8005976 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e58:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000ef8 	.word	0x20000ef8
 8005e68:	08006e74 	.word	0x08006e74

08005e6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e72:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <Get_SerialNum+0x44>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <Get_SerialNum+0x48>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <Get_SerialNum+0x4c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e92:	2208      	movs	r2, #8
 8005e94:	4909      	ldr	r1, [pc, #36]	; (8005ebc <Get_SerialNum+0x50>)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f814 	bl	8005ec4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	4908      	ldr	r1, [pc, #32]	; (8005ec0 <Get_SerialNum+0x54>)
 8005ea0:	68b8      	ldr	r0, [r7, #8]
 8005ea2:	f000 f80f 	bl	8005ec4 <IntToUnicode>
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	1fff7a10 	.word	0x1fff7a10
 8005eb4:	1fff7a14 	.word	0x1fff7a14
 8005eb8:	1fff7a18 	.word	0x1fff7a18
 8005ebc:	20000166 	.word	0x20000166
 8005ec0:	20000176 	.word	0x20000176

08005ec4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]
 8005eda:	e027      	b.n	8005f2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	0f1b      	lsrs	r3, r3, #28
 8005ee0:	2b09      	cmp	r3, #9
 8005ee2:	d80b      	bhi.n	8005efc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	0f1b      	lsrs	r3, r3, #28
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3230      	adds	r2, #48	; 0x30
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e00a      	b.n	8005f12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	0f1b      	lsrs	r3, r3, #28
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4619      	mov	r1, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3237      	adds	r2, #55	; 0x37
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4413      	add	r3, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	75fb      	strb	r3, [r7, #23]
 8005f2c:	7dfa      	ldrb	r2, [r7, #23]
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d3d3      	bcc.n	8005edc <IntToUnicode+0x18>
  }
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f64:	d13a      	bne.n	8005fdc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30
 8005f76:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f90:	2303      	movs	r3, #3
 8005f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f94:	230a      	movs	r3, #10
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4812      	ldr	r0, [pc, #72]	; (8005fe8 <HAL_PCD_MspInit+0xa4>)
 8005fa0:	f7fa fe80 	bl	8000ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	4a0e      	ldr	r2, [pc, #56]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	6353      	str	r3, [r2, #52]	; 0x34
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb8:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <HAL_PCD_MspInit+0xa0>)
 8005fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	2043      	movs	r0, #67	; 0x43
 8005fd2:	f7fa fe30 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005fd6:	2043      	movs	r0, #67	; 0x43
 8005fd8:	f7fa fe49 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3728      	adds	r7, #40	; 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40020000 	.word	0x40020000

08005fec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7fe fcd0 	bl	80049a8 <USBD_LL_SetupStage>
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	4619      	mov	r1, r3
 800603a:	f7fe fd0a 	bl	8004a52 <USBD_LL_DataOutStage>
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	3348      	adds	r3, #72	; 0x48
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	4619      	mov	r1, r3
 800606e:	f7fe fd53 	bl	8004b18 <USBD_LL_DataInStage>
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fe67 	bl	8004d5c <USBD_LL_SOF>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800609e:	2301      	movs	r3, #1
 80060a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d001      	beq.n	80060ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80060aa:	f7fa fb93 	bl	80007d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060b4:	7bfa      	ldrb	r2, [r7, #15]
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe fe11 	bl	8004ce0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fdbd 	bl	8004c44 <USBD_LL_Reset>
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fe0c 	bl	8004d00 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <HAL_PCD_SuspendCallback+0x48>)
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	4a03      	ldr	r2, [pc, #12]	; (800611c <HAL_PCD_SuspendCallback+0x48>)
 800610e:	f043 0306 	orr.w	r3, r3, #6
 8006112:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	e000ed00 	.word	0xe000ed00

08006120 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe fdfc 	bl	8004d2c <USBD_LL_Resume>
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fe4a 	bl	8004dec <USBD_LL_IsoOUTIncomplete>
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	4611      	mov	r1, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fe12 	bl	8004da0 <USBD_LL_IsoINIncomplete>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fe50 	bl	8004e38 <USBD_LL_DevConnected>
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fe4d 	bl	8004e4e <USBD_LL_DevDisconnected>
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d13c      	bne.n	8006246 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80061cc:	4a20      	ldr	r2, [pc, #128]	; (8006250 <USBD_LL_Init+0x94>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <USBD_LL_Init+0x94>)
 80061d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80061dc:	4b1c      	ldr	r3, [pc, #112]	; (8006250 <USBD_LL_Init+0x94>)
 80061de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80061e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80061e4:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <USBD_LL_Init+0x94>)
 80061e6:	2204      	movs	r2, #4
 80061e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80061ea:	4b19      	ldr	r3, [pc, #100]	; (8006250 <USBD_LL_Init+0x94>)
 80061ec:	2202      	movs	r2, #2
 80061ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80061f0:	4b17      	ldr	r3, [pc, #92]	; (8006250 <USBD_LL_Init+0x94>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80061f6:	4b16      	ldr	r3, [pc, #88]	; (8006250 <USBD_LL_Init+0x94>)
 80061f8:	2202      	movs	r2, #2
 80061fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80061fc:	4b14      	ldr	r3, [pc, #80]	; (8006250 <USBD_LL_Init+0x94>)
 80061fe:	2200      	movs	r2, #0
 8006200:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006202:	4b13      	ldr	r3, [pc, #76]	; (8006250 <USBD_LL_Init+0x94>)
 8006204:	2200      	movs	r2, #0
 8006206:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <USBD_LL_Init+0x94>)
 800620a:	2200      	movs	r2, #0
 800620c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800620e:	4b10      	ldr	r3, [pc, #64]	; (8006250 <USBD_LL_Init+0x94>)
 8006210:	2200      	movs	r2, #0
 8006212:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006214:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <USBD_LL_Init+0x94>)
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800621a:	480d      	ldr	r0, [pc, #52]	; (8006250 <USBD_LL_Init+0x94>)
 800621c:	f7fa fedf 	bl	8000fde <HAL_PCD_Init>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006226:	f7fa fad5 	bl	80007d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800622a:	2180      	movs	r1, #128	; 0x80
 800622c:	4808      	ldr	r0, [pc, #32]	; (8006250 <USBD_LL_Init+0x94>)
 800622e:	f7fc f83c 	bl	80022aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006232:	2240      	movs	r2, #64	; 0x40
 8006234:	2100      	movs	r1, #0
 8006236:	4806      	ldr	r0, [pc, #24]	; (8006250 <USBD_LL_Init+0x94>)
 8006238:	f7fb fff0 	bl	800221c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800623c:	2280      	movs	r2, #128	; 0x80
 800623e:	2101      	movs	r1, #1
 8006240:	4803      	ldr	r0, [pc, #12]	; (8006250 <USBD_LL_Init+0x94>)
 8006242:	f7fb ffeb 	bl	800221c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	200010f8 	.word	0x200010f8

08006254 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800626a:	4618      	mov	r0, r3
 800626c:	f7fa ffd4 	bl	8001218 <HAL_PCD_Start>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f942 	bl	8006500 <USBD_Get_USB_Status>
 800627c:	4603      	mov	r3, r0
 800627e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006280:	7bbb      	ldrb	r3, [r7, #14]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	4608      	mov	r0, r1
 8006294:	4611      	mov	r1, r2
 8006296:	461a      	mov	r2, r3
 8006298:	4603      	mov	r3, r0
 800629a:	70fb      	strb	r3, [r7, #3]
 800629c:	460b      	mov	r3, r1
 800629e:	70bb      	strb	r3, [r7, #2]
 80062a0:	4613      	mov	r3, r2
 80062a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062b2:	78bb      	ldrb	r3, [r7, #2]
 80062b4:	883a      	ldrh	r2, [r7, #0]
 80062b6:	78f9      	ldrb	r1, [r7, #3]
 80062b8:	f7fb fbb8 	bl	8001a2c <HAL_PCD_EP_Open>
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f91c 	bl	8006500 <USBD_Get_USB_Status>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb fc01 	bl	8001afc <HAL_PCD_EP_Close>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f8fd 	bl	8006500 <USBD_Get_USB_Status>
 8006306:	4603      	mov	r3, r0
 8006308:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800630a:	7bbb      	ldrb	r3, [r7, #14]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f7fb fcd9 	bl	8001cea <HAL_PCD_EP_SetStall>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f8de 	bl	8006500 <USBD_Get_USB_Status>
 8006344:	4603      	mov	r3, r0
 8006346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006348:	7bbb      	ldrb	r3, [r7, #14]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800636c:	78fa      	ldrb	r2, [r7, #3]
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f7fb fd1e 	bl	8001db2 <HAL_PCD_EP_ClrStall>
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 f8bf 	bl	8006500 <USBD_Get_USB_Status>
 8006382:	4603      	mov	r3, r0
 8006384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006386:	7bbb      	ldrb	r3, [r7, #14]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80063a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da0b      	bge.n	80063c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	333e      	adds	r3, #62	; 0x3e
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	e00b      	b.n	80063dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f7fb faeb 	bl	80019e2 <HAL_PCD_SetAddress>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f874 	bl	8006500 <USBD_Get_USB_Status>
 8006418:	4603      	mov	r3, r0
 800641a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800641c:	7bbb      	ldrb	r3, [r7, #14]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	460b      	mov	r3, r1
 8006434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006444:	7af9      	ldrb	r1, [r7, #11]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	f7fb fc04 	bl	8001c56 <HAL_PCD_EP_Transmit>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f853 	bl	8006500 <USBD_Get_USB_Status>
 800645a:	4603      	mov	r3, r0
 800645c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800645e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	460b      	mov	r3, r1
 8006476:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006486:	7af9      	ldrb	r1, [r7, #11]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	f7fb fb80 	bl	8001b90 <HAL_PCD_EP_Receive>
 8006490:	4603      	mov	r3, r0
 8006492:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f832 	bl	8006500 <USBD_Get_USB_Status>
 800649c:	4603      	mov	r3, r0
 800649e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80064a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fb fbb0 	bl	8001c26 <HAL_PCD_EP_GetRxCount>
 80064c6:	4603      	mov	r3, r0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80064d8:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <USBD_static_malloc+0x18>)
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	2000020c 	.word	0x2000020c

080064ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	2b03      	cmp	r3, #3
 8006512:	d817      	bhi.n	8006544 <USBD_Get_USB_Status+0x44>
 8006514:	a201      	add	r2, pc, #4	; (adr r2, 800651c <USBD_Get_USB_Status+0x1c>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	0800652d 	.word	0x0800652d
 8006520:	08006533 	.word	0x08006533
 8006524:	08006539 	.word	0x08006539
 8006528:	0800653f 	.word	0x0800653f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
    break;
 8006530:	e00b      	b.n	800654a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006532:	2303      	movs	r3, #3
 8006534:	73fb      	strb	r3, [r7, #15]
    break;
 8006536:	e008      	b.n	800654a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
    break;
 800653c:	e005      	b.n	800654a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800653e:	2303      	movs	r3, #3
 8006540:	73fb      	strb	r3, [r7, #15]
    break;
 8006542:	e002      	b.n	800654a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006544:	2303      	movs	r3, #3
 8006546:	73fb      	strb	r3, [r7, #15]
    break;
 8006548:	bf00      	nop
  }
  return usb_status;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <__errno>:
 8006558:	4b01      	ldr	r3, [pc, #4]	; (8006560 <__errno+0x8>)
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000180 	.word	0x20000180

08006564 <__libc_init_array>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	4d0d      	ldr	r5, [pc, #52]	; (800659c <__libc_init_array+0x38>)
 8006568:	4c0d      	ldr	r4, [pc, #52]	; (80065a0 <__libc_init_array+0x3c>)
 800656a:	1b64      	subs	r4, r4, r5
 800656c:	10a4      	asrs	r4, r4, #2
 800656e:	2600      	movs	r6, #0
 8006570:	42a6      	cmp	r6, r4
 8006572:	d109      	bne.n	8006588 <__libc_init_array+0x24>
 8006574:	4d0b      	ldr	r5, [pc, #44]	; (80065a4 <__libc_init_array+0x40>)
 8006576:	4c0c      	ldr	r4, [pc, #48]	; (80065a8 <__libc_init_array+0x44>)
 8006578:	f000 fc4e 	bl	8006e18 <_init>
 800657c:	1b64      	subs	r4, r4, r5
 800657e:	10a4      	asrs	r4, r4, #2
 8006580:	2600      	movs	r6, #0
 8006582:	42a6      	cmp	r6, r4
 8006584:	d105      	bne.n	8006592 <__libc_init_array+0x2e>
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	f855 3b04 	ldr.w	r3, [r5], #4
 800658c:	4798      	blx	r3
 800658e:	3601      	adds	r6, #1
 8006590:	e7ee      	b.n	8006570 <__libc_init_array+0xc>
 8006592:	f855 3b04 	ldr.w	r3, [r5], #4
 8006596:	4798      	blx	r3
 8006598:	3601      	adds	r6, #1
 800659a:	e7f2      	b.n	8006582 <__libc_init_array+0x1e>
 800659c:	08006ed0 	.word	0x08006ed0
 80065a0:	08006ed0 	.word	0x08006ed0
 80065a4:	08006ed0 	.word	0x08006ed0
 80065a8:	08006ed4 	.word	0x08006ed4

080065ac <memset>:
 80065ac:	4402      	add	r2, r0
 80065ae:	4603      	mov	r3, r0
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d100      	bne.n	80065b6 <memset+0xa>
 80065b4:	4770      	bx	lr
 80065b6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ba:	e7f9      	b.n	80065b0 <memset+0x4>

080065bc <siprintf>:
 80065bc:	b40e      	push	{r1, r2, r3}
 80065be:	b500      	push	{lr}
 80065c0:	b09c      	sub	sp, #112	; 0x70
 80065c2:	ab1d      	add	r3, sp, #116	; 0x74
 80065c4:	9002      	str	r0, [sp, #8]
 80065c6:	9006      	str	r0, [sp, #24]
 80065c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065cc:	4809      	ldr	r0, [pc, #36]	; (80065f4 <siprintf+0x38>)
 80065ce:	9107      	str	r1, [sp, #28]
 80065d0:	9104      	str	r1, [sp, #16]
 80065d2:	4909      	ldr	r1, [pc, #36]	; (80065f8 <siprintf+0x3c>)
 80065d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d8:	9105      	str	r1, [sp, #20]
 80065da:	6800      	ldr	r0, [r0, #0]
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	a902      	add	r1, sp, #8
 80065e0:	f000 f868 	bl	80066b4 <_svfiprintf_r>
 80065e4:	9b02      	ldr	r3, [sp, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	b01c      	add	sp, #112	; 0x70
 80065ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80065f0:	b003      	add	sp, #12
 80065f2:	4770      	bx	lr
 80065f4:	20000180 	.word	0x20000180
 80065f8:	ffff0208 	.word	0xffff0208

080065fc <__ssputs_r>:
 80065fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	688e      	ldr	r6, [r1, #8]
 8006602:	429e      	cmp	r6, r3
 8006604:	4682      	mov	sl, r0
 8006606:	460c      	mov	r4, r1
 8006608:	4690      	mov	r8, r2
 800660a:	461f      	mov	r7, r3
 800660c:	d838      	bhi.n	8006680 <__ssputs_r+0x84>
 800660e:	898a      	ldrh	r2, [r1, #12]
 8006610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006614:	d032      	beq.n	800667c <__ssputs_r+0x80>
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	6909      	ldr	r1, [r1, #16]
 800661a:	eba5 0901 	sub.w	r9, r5, r1
 800661e:	6965      	ldr	r5, [r4, #20]
 8006620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006628:	3301      	adds	r3, #1
 800662a:	444b      	add	r3, r9
 800662c:	106d      	asrs	r5, r5, #1
 800662e:	429d      	cmp	r5, r3
 8006630:	bf38      	it	cc
 8006632:	461d      	movcc	r5, r3
 8006634:	0553      	lsls	r3, r2, #21
 8006636:	d531      	bpl.n	800669c <__ssputs_r+0xa0>
 8006638:	4629      	mov	r1, r5
 800663a:	f000 fb47 	bl	8006ccc <_malloc_r>
 800663e:	4606      	mov	r6, r0
 8006640:	b950      	cbnz	r0, 8006658 <__ssputs_r+0x5c>
 8006642:	230c      	movs	r3, #12
 8006644:	f8ca 3000 	str.w	r3, [sl]
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	f04f 30ff 	mov.w	r0, #4294967295
 8006654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006658:	6921      	ldr	r1, [r4, #16]
 800665a:	464a      	mov	r2, r9
 800665c:	f000 fabe 	bl	8006bdc <memcpy>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	6126      	str	r6, [r4, #16]
 800666e:	6165      	str	r5, [r4, #20]
 8006670:	444e      	add	r6, r9
 8006672:	eba5 0509 	sub.w	r5, r5, r9
 8006676:	6026      	str	r6, [r4, #0]
 8006678:	60a5      	str	r5, [r4, #8]
 800667a:	463e      	mov	r6, r7
 800667c:	42be      	cmp	r6, r7
 800667e:	d900      	bls.n	8006682 <__ssputs_r+0x86>
 8006680:	463e      	mov	r6, r7
 8006682:	4632      	mov	r2, r6
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	4641      	mov	r1, r8
 8006688:	f000 fab6 	bl	8006bf8 <memmove>
 800668c:	68a3      	ldr	r3, [r4, #8]
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	1b9b      	subs	r3, r3, r6
 8006692:	4432      	add	r2, r6
 8006694:	60a3      	str	r3, [r4, #8]
 8006696:	6022      	str	r2, [r4, #0]
 8006698:	2000      	movs	r0, #0
 800669a:	e7db      	b.n	8006654 <__ssputs_r+0x58>
 800669c:	462a      	mov	r2, r5
 800669e:	f000 fb6f 	bl	8006d80 <_realloc_r>
 80066a2:	4606      	mov	r6, r0
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d1e1      	bne.n	800666c <__ssputs_r+0x70>
 80066a8:	6921      	ldr	r1, [r4, #16]
 80066aa:	4650      	mov	r0, sl
 80066ac:	f000 fabe 	bl	8006c2c <_free_r>
 80066b0:	e7c7      	b.n	8006642 <__ssputs_r+0x46>
	...

080066b4 <_svfiprintf_r>:
 80066b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	4698      	mov	r8, r3
 80066ba:	898b      	ldrh	r3, [r1, #12]
 80066bc:	061b      	lsls	r3, r3, #24
 80066be:	b09d      	sub	sp, #116	; 0x74
 80066c0:	4607      	mov	r7, r0
 80066c2:	460d      	mov	r5, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	d50e      	bpl.n	80066e6 <_svfiprintf_r+0x32>
 80066c8:	690b      	ldr	r3, [r1, #16]
 80066ca:	b963      	cbnz	r3, 80066e6 <_svfiprintf_r+0x32>
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	f000 fafd 	bl	8006ccc <_malloc_r>
 80066d2:	6028      	str	r0, [r5, #0]
 80066d4:	6128      	str	r0, [r5, #16]
 80066d6:	b920      	cbnz	r0, 80066e2 <_svfiprintf_r+0x2e>
 80066d8:	230c      	movs	r3, #12
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e0d1      	b.n	8006886 <_svfiprintf_r+0x1d2>
 80066e2:	2340      	movs	r3, #64	; 0x40
 80066e4:	616b      	str	r3, [r5, #20]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ea:	2320      	movs	r3, #32
 80066ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066f4:	2330      	movs	r3, #48	; 0x30
 80066f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068a0 <_svfiprintf_r+0x1ec>
 80066fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066fe:	f04f 0901 	mov.w	r9, #1
 8006702:	4623      	mov	r3, r4
 8006704:	469a      	mov	sl, r3
 8006706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800670a:	b10a      	cbz	r2, 8006710 <_svfiprintf_r+0x5c>
 800670c:	2a25      	cmp	r2, #37	; 0x25
 800670e:	d1f9      	bne.n	8006704 <_svfiprintf_r+0x50>
 8006710:	ebba 0b04 	subs.w	fp, sl, r4
 8006714:	d00b      	beq.n	800672e <_svfiprintf_r+0x7a>
 8006716:	465b      	mov	r3, fp
 8006718:	4622      	mov	r2, r4
 800671a:	4629      	mov	r1, r5
 800671c:	4638      	mov	r0, r7
 800671e:	f7ff ff6d 	bl	80065fc <__ssputs_r>
 8006722:	3001      	adds	r0, #1
 8006724:	f000 80aa 	beq.w	800687c <_svfiprintf_r+0x1c8>
 8006728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800672a:	445a      	add	r2, fp
 800672c:	9209      	str	r2, [sp, #36]	; 0x24
 800672e:	f89a 3000 	ldrb.w	r3, [sl]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80a2 	beq.w	800687c <_svfiprintf_r+0x1c8>
 8006738:	2300      	movs	r3, #0
 800673a:	f04f 32ff 	mov.w	r2, #4294967295
 800673e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006742:	f10a 0a01 	add.w	sl, sl, #1
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	9307      	str	r3, [sp, #28]
 800674a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800674e:	931a      	str	r3, [sp, #104]	; 0x68
 8006750:	4654      	mov	r4, sl
 8006752:	2205      	movs	r2, #5
 8006754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006758:	4851      	ldr	r0, [pc, #324]	; (80068a0 <_svfiprintf_r+0x1ec>)
 800675a:	f7f9 fd49 	bl	80001f0 <memchr>
 800675e:	9a04      	ldr	r2, [sp, #16]
 8006760:	b9d8      	cbnz	r0, 800679a <_svfiprintf_r+0xe6>
 8006762:	06d0      	lsls	r0, r2, #27
 8006764:	bf44      	itt	mi
 8006766:	2320      	movmi	r3, #32
 8006768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800676c:	0711      	lsls	r1, r2, #28
 800676e:	bf44      	itt	mi
 8006770:	232b      	movmi	r3, #43	; 0x2b
 8006772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006776:	f89a 3000 	ldrb.w	r3, [sl]
 800677a:	2b2a      	cmp	r3, #42	; 0x2a
 800677c:	d015      	beq.n	80067aa <_svfiprintf_r+0xf6>
 800677e:	9a07      	ldr	r2, [sp, #28]
 8006780:	4654      	mov	r4, sl
 8006782:	2000      	movs	r0, #0
 8006784:	f04f 0c0a 	mov.w	ip, #10
 8006788:	4621      	mov	r1, r4
 800678a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800678e:	3b30      	subs	r3, #48	; 0x30
 8006790:	2b09      	cmp	r3, #9
 8006792:	d94e      	bls.n	8006832 <_svfiprintf_r+0x17e>
 8006794:	b1b0      	cbz	r0, 80067c4 <_svfiprintf_r+0x110>
 8006796:	9207      	str	r2, [sp, #28]
 8006798:	e014      	b.n	80067c4 <_svfiprintf_r+0x110>
 800679a:	eba0 0308 	sub.w	r3, r0, r8
 800679e:	fa09 f303 	lsl.w	r3, r9, r3
 80067a2:	4313      	orrs	r3, r2
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	46a2      	mov	sl, r4
 80067a8:	e7d2      	b.n	8006750 <_svfiprintf_r+0x9c>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	1d19      	adds	r1, r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	9103      	str	r1, [sp, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfbb      	ittet	lt
 80067b6:	425b      	neglt	r3, r3
 80067b8:	f042 0202 	orrlt.w	r2, r2, #2
 80067bc:	9307      	strge	r3, [sp, #28]
 80067be:	9307      	strlt	r3, [sp, #28]
 80067c0:	bfb8      	it	lt
 80067c2:	9204      	strlt	r2, [sp, #16]
 80067c4:	7823      	ldrb	r3, [r4, #0]
 80067c6:	2b2e      	cmp	r3, #46	; 0x2e
 80067c8:	d10c      	bne.n	80067e4 <_svfiprintf_r+0x130>
 80067ca:	7863      	ldrb	r3, [r4, #1]
 80067cc:	2b2a      	cmp	r3, #42	; 0x2a
 80067ce:	d135      	bne.n	800683c <_svfiprintf_r+0x188>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	1d1a      	adds	r2, r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	9203      	str	r2, [sp, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bfb8      	it	lt
 80067dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80067e0:	3402      	adds	r4, #2
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068b0 <_svfiprintf_r+0x1fc>
 80067e8:	7821      	ldrb	r1, [r4, #0]
 80067ea:	2203      	movs	r2, #3
 80067ec:	4650      	mov	r0, sl
 80067ee:	f7f9 fcff 	bl	80001f0 <memchr>
 80067f2:	b140      	cbz	r0, 8006806 <_svfiprintf_r+0x152>
 80067f4:	2340      	movs	r3, #64	; 0x40
 80067f6:	eba0 000a 	sub.w	r0, r0, sl
 80067fa:	fa03 f000 	lsl.w	r0, r3, r0
 80067fe:	9b04      	ldr	r3, [sp, #16]
 8006800:	4303      	orrs	r3, r0
 8006802:	3401      	adds	r4, #1
 8006804:	9304      	str	r3, [sp, #16]
 8006806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800680a:	4826      	ldr	r0, [pc, #152]	; (80068a4 <_svfiprintf_r+0x1f0>)
 800680c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006810:	2206      	movs	r2, #6
 8006812:	f7f9 fced 	bl	80001f0 <memchr>
 8006816:	2800      	cmp	r0, #0
 8006818:	d038      	beq.n	800688c <_svfiprintf_r+0x1d8>
 800681a:	4b23      	ldr	r3, [pc, #140]	; (80068a8 <_svfiprintf_r+0x1f4>)
 800681c:	bb1b      	cbnz	r3, 8006866 <_svfiprintf_r+0x1b2>
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	3307      	adds	r3, #7
 8006822:	f023 0307 	bic.w	r3, r3, #7
 8006826:	3308      	adds	r3, #8
 8006828:	9303      	str	r3, [sp, #12]
 800682a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682c:	4433      	add	r3, r6
 800682e:	9309      	str	r3, [sp, #36]	; 0x24
 8006830:	e767      	b.n	8006702 <_svfiprintf_r+0x4e>
 8006832:	fb0c 3202 	mla	r2, ip, r2, r3
 8006836:	460c      	mov	r4, r1
 8006838:	2001      	movs	r0, #1
 800683a:	e7a5      	b.n	8006788 <_svfiprintf_r+0xd4>
 800683c:	2300      	movs	r3, #0
 800683e:	3401      	adds	r4, #1
 8006840:	9305      	str	r3, [sp, #20]
 8006842:	4619      	mov	r1, r3
 8006844:	f04f 0c0a 	mov.w	ip, #10
 8006848:	4620      	mov	r0, r4
 800684a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800684e:	3a30      	subs	r2, #48	; 0x30
 8006850:	2a09      	cmp	r2, #9
 8006852:	d903      	bls.n	800685c <_svfiprintf_r+0x1a8>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0c5      	beq.n	80067e4 <_svfiprintf_r+0x130>
 8006858:	9105      	str	r1, [sp, #20]
 800685a:	e7c3      	b.n	80067e4 <_svfiprintf_r+0x130>
 800685c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006860:	4604      	mov	r4, r0
 8006862:	2301      	movs	r3, #1
 8006864:	e7f0      	b.n	8006848 <_svfiprintf_r+0x194>
 8006866:	ab03      	add	r3, sp, #12
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	462a      	mov	r2, r5
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <_svfiprintf_r+0x1f8>)
 800686e:	a904      	add	r1, sp, #16
 8006870:	4638      	mov	r0, r7
 8006872:	f3af 8000 	nop.w
 8006876:	1c42      	adds	r2, r0, #1
 8006878:	4606      	mov	r6, r0
 800687a:	d1d6      	bne.n	800682a <_svfiprintf_r+0x176>
 800687c:	89ab      	ldrh	r3, [r5, #12]
 800687e:	065b      	lsls	r3, r3, #25
 8006880:	f53f af2c 	bmi.w	80066dc <_svfiprintf_r+0x28>
 8006884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006886:	b01d      	add	sp, #116	; 0x74
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	ab03      	add	r3, sp, #12
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	462a      	mov	r2, r5
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <_svfiprintf_r+0x1f8>)
 8006894:	a904      	add	r1, sp, #16
 8006896:	4638      	mov	r0, r7
 8006898:	f000 f87a 	bl	8006990 <_printf_i>
 800689c:	e7eb      	b.n	8006876 <_svfiprintf_r+0x1c2>
 800689e:	bf00      	nop
 80068a0:	08006e94 	.word	0x08006e94
 80068a4:	08006e9e 	.word	0x08006e9e
 80068a8:	00000000 	.word	0x00000000
 80068ac:	080065fd 	.word	0x080065fd
 80068b0:	08006e9a 	.word	0x08006e9a

080068b4 <_printf_common>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	4616      	mov	r6, r2
 80068ba:	4699      	mov	r9, r3
 80068bc:	688a      	ldr	r2, [r1, #8]
 80068be:	690b      	ldr	r3, [r1, #16]
 80068c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	bfb8      	it	lt
 80068c8:	4613      	movlt	r3, r2
 80068ca:	6033      	str	r3, [r6, #0]
 80068cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068d0:	4607      	mov	r7, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	b10a      	cbz	r2, 80068da <_printf_common+0x26>
 80068d6:	3301      	adds	r3, #1
 80068d8:	6033      	str	r3, [r6, #0]
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	0699      	lsls	r1, r3, #26
 80068de:	bf42      	ittt	mi
 80068e0:	6833      	ldrmi	r3, [r6, #0]
 80068e2:	3302      	addmi	r3, #2
 80068e4:	6033      	strmi	r3, [r6, #0]
 80068e6:	6825      	ldr	r5, [r4, #0]
 80068e8:	f015 0506 	ands.w	r5, r5, #6
 80068ec:	d106      	bne.n	80068fc <_printf_common+0x48>
 80068ee:	f104 0a19 	add.w	sl, r4, #25
 80068f2:	68e3      	ldr	r3, [r4, #12]
 80068f4:	6832      	ldr	r2, [r6, #0]
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dc26      	bgt.n	800694a <_printf_common+0x96>
 80068fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006900:	1e13      	subs	r3, r2, #0
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	bf18      	it	ne
 8006906:	2301      	movne	r3, #1
 8006908:	0692      	lsls	r2, r2, #26
 800690a:	d42b      	bmi.n	8006964 <_printf_common+0xb0>
 800690c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006910:	4649      	mov	r1, r9
 8006912:	4638      	mov	r0, r7
 8006914:	47c0      	blx	r8
 8006916:	3001      	adds	r0, #1
 8006918:	d01e      	beq.n	8006958 <_printf_common+0xa4>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	68e5      	ldr	r5, [r4, #12]
 800691e:	6832      	ldr	r2, [r6, #0]
 8006920:	f003 0306 	and.w	r3, r3, #6
 8006924:	2b04      	cmp	r3, #4
 8006926:	bf08      	it	eq
 8006928:	1aad      	subeq	r5, r5, r2
 800692a:	68a3      	ldr	r3, [r4, #8]
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	bf0c      	ite	eq
 8006930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006934:	2500      	movne	r5, #0
 8006936:	4293      	cmp	r3, r2
 8006938:	bfc4      	itt	gt
 800693a:	1a9b      	subgt	r3, r3, r2
 800693c:	18ed      	addgt	r5, r5, r3
 800693e:	2600      	movs	r6, #0
 8006940:	341a      	adds	r4, #26
 8006942:	42b5      	cmp	r5, r6
 8006944:	d11a      	bne.n	800697c <_printf_common+0xc8>
 8006946:	2000      	movs	r0, #0
 8006948:	e008      	b.n	800695c <_printf_common+0xa8>
 800694a:	2301      	movs	r3, #1
 800694c:	4652      	mov	r2, sl
 800694e:	4649      	mov	r1, r9
 8006950:	4638      	mov	r0, r7
 8006952:	47c0      	blx	r8
 8006954:	3001      	adds	r0, #1
 8006956:	d103      	bne.n	8006960 <_printf_common+0xac>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006960:	3501      	adds	r5, #1
 8006962:	e7c6      	b.n	80068f2 <_printf_common+0x3e>
 8006964:	18e1      	adds	r1, r4, r3
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	2030      	movs	r0, #48	; 0x30
 800696a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800696e:	4422      	add	r2, r4
 8006970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006978:	3302      	adds	r3, #2
 800697a:	e7c7      	b.n	800690c <_printf_common+0x58>
 800697c:	2301      	movs	r3, #1
 800697e:	4622      	mov	r2, r4
 8006980:	4649      	mov	r1, r9
 8006982:	4638      	mov	r0, r7
 8006984:	47c0      	blx	r8
 8006986:	3001      	adds	r0, #1
 8006988:	d0e6      	beq.n	8006958 <_printf_common+0xa4>
 800698a:	3601      	adds	r6, #1
 800698c:	e7d9      	b.n	8006942 <_printf_common+0x8e>
	...

08006990 <_printf_i>:
 8006990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	460c      	mov	r4, r1
 8006996:	4691      	mov	r9, r2
 8006998:	7e27      	ldrb	r7, [r4, #24]
 800699a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800699c:	2f78      	cmp	r7, #120	; 0x78
 800699e:	4680      	mov	r8, r0
 80069a0:	469a      	mov	sl, r3
 80069a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a6:	d807      	bhi.n	80069b8 <_printf_i+0x28>
 80069a8:	2f62      	cmp	r7, #98	; 0x62
 80069aa:	d80a      	bhi.n	80069c2 <_printf_i+0x32>
 80069ac:	2f00      	cmp	r7, #0
 80069ae:	f000 80d8 	beq.w	8006b62 <_printf_i+0x1d2>
 80069b2:	2f58      	cmp	r7, #88	; 0x58
 80069b4:	f000 80a3 	beq.w	8006afe <_printf_i+0x16e>
 80069b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069c0:	e03a      	b.n	8006a38 <_printf_i+0xa8>
 80069c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069c6:	2b15      	cmp	r3, #21
 80069c8:	d8f6      	bhi.n	80069b8 <_printf_i+0x28>
 80069ca:	a001      	add	r0, pc, #4	; (adr r0, 80069d0 <_printf_i+0x40>)
 80069cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069d0:	08006a29 	.word	0x08006a29
 80069d4:	08006a3d 	.word	0x08006a3d
 80069d8:	080069b9 	.word	0x080069b9
 80069dc:	080069b9 	.word	0x080069b9
 80069e0:	080069b9 	.word	0x080069b9
 80069e4:	080069b9 	.word	0x080069b9
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	080069b9 	.word	0x080069b9
 80069f0:	080069b9 	.word	0x080069b9
 80069f4:	080069b9 	.word	0x080069b9
 80069f8:	080069b9 	.word	0x080069b9
 80069fc:	08006b49 	.word	0x08006b49
 8006a00:	08006a6d 	.word	0x08006a6d
 8006a04:	08006b2b 	.word	0x08006b2b
 8006a08:	080069b9 	.word	0x080069b9
 8006a0c:	080069b9 	.word	0x080069b9
 8006a10:	08006b6b 	.word	0x08006b6b
 8006a14:	080069b9 	.word	0x080069b9
 8006a18:	08006a6d 	.word	0x08006a6d
 8006a1c:	080069b9 	.word	0x080069b9
 8006a20:	080069b9 	.word	0x080069b9
 8006a24:	08006b33 	.word	0x08006b33
 8006a28:	680b      	ldr	r3, [r1, #0]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	600a      	str	r2, [r1, #0]
 8006a30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0a3      	b.n	8006b84 <_printf_i+0x1f4>
 8006a3c:	6825      	ldr	r5, [r4, #0]
 8006a3e:	6808      	ldr	r0, [r1, #0]
 8006a40:	062e      	lsls	r6, r5, #24
 8006a42:	f100 0304 	add.w	r3, r0, #4
 8006a46:	d50a      	bpl.n	8006a5e <_printf_i+0xce>
 8006a48:	6805      	ldr	r5, [r0, #0]
 8006a4a:	600b      	str	r3, [r1, #0]
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	da03      	bge.n	8006a58 <_printf_i+0xc8>
 8006a50:	232d      	movs	r3, #45	; 0x2d
 8006a52:	426d      	negs	r5, r5
 8006a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a58:	485e      	ldr	r0, [pc, #376]	; (8006bd4 <_printf_i+0x244>)
 8006a5a:	230a      	movs	r3, #10
 8006a5c:	e019      	b.n	8006a92 <_printf_i+0x102>
 8006a5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a62:	6805      	ldr	r5, [r0, #0]
 8006a64:	600b      	str	r3, [r1, #0]
 8006a66:	bf18      	it	ne
 8006a68:	b22d      	sxthne	r5, r5
 8006a6a:	e7ef      	b.n	8006a4c <_printf_i+0xbc>
 8006a6c:	680b      	ldr	r3, [r1, #0]
 8006a6e:	6825      	ldr	r5, [r4, #0]
 8006a70:	1d18      	adds	r0, r3, #4
 8006a72:	6008      	str	r0, [r1, #0]
 8006a74:	0628      	lsls	r0, r5, #24
 8006a76:	d501      	bpl.n	8006a7c <_printf_i+0xec>
 8006a78:	681d      	ldr	r5, [r3, #0]
 8006a7a:	e002      	b.n	8006a82 <_printf_i+0xf2>
 8006a7c:	0669      	lsls	r1, r5, #25
 8006a7e:	d5fb      	bpl.n	8006a78 <_printf_i+0xe8>
 8006a80:	881d      	ldrh	r5, [r3, #0]
 8006a82:	4854      	ldr	r0, [pc, #336]	; (8006bd4 <_printf_i+0x244>)
 8006a84:	2f6f      	cmp	r7, #111	; 0x6f
 8006a86:	bf0c      	ite	eq
 8006a88:	2308      	moveq	r3, #8
 8006a8a:	230a      	movne	r3, #10
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a92:	6866      	ldr	r6, [r4, #4]
 8006a94:	60a6      	str	r6, [r4, #8]
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	bfa2      	ittt	ge
 8006a9a:	6821      	ldrge	r1, [r4, #0]
 8006a9c:	f021 0104 	bicge.w	r1, r1, #4
 8006aa0:	6021      	strge	r1, [r4, #0]
 8006aa2:	b90d      	cbnz	r5, 8006aa8 <_printf_i+0x118>
 8006aa4:	2e00      	cmp	r6, #0
 8006aa6:	d04d      	beq.n	8006b44 <_printf_i+0x1b4>
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006aae:	fb03 5711 	mls	r7, r3, r1, r5
 8006ab2:	5dc7      	ldrb	r7, [r0, r7]
 8006ab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ab8:	462f      	mov	r7, r5
 8006aba:	42bb      	cmp	r3, r7
 8006abc:	460d      	mov	r5, r1
 8006abe:	d9f4      	bls.n	8006aaa <_printf_i+0x11a>
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d10b      	bne.n	8006adc <_printf_i+0x14c>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07df      	lsls	r7, r3, #31
 8006ac8:	d508      	bpl.n	8006adc <_printf_i+0x14c>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	6861      	ldr	r1, [r4, #4]
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	bfde      	ittt	le
 8006ad2:	2330      	movle	r3, #48	; 0x30
 8006ad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006adc:	1b92      	subs	r2, r2, r6
 8006ade:	6122      	str	r2, [r4, #16]
 8006ae0:	f8cd a000 	str.w	sl, [sp]
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	aa03      	add	r2, sp, #12
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4640      	mov	r0, r8
 8006aec:	f7ff fee2 	bl	80068b4 <_printf_common>
 8006af0:	3001      	adds	r0, #1
 8006af2:	d14c      	bne.n	8006b8e <_printf_i+0x1fe>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	b004      	add	sp, #16
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	4835      	ldr	r0, [pc, #212]	; (8006bd4 <_printf_i+0x244>)
 8006b00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	680e      	ldr	r6, [r1, #0]
 8006b08:	061f      	lsls	r7, r3, #24
 8006b0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b0e:	600e      	str	r6, [r1, #0]
 8006b10:	d514      	bpl.n	8006b3c <_printf_i+0x1ac>
 8006b12:	07d9      	lsls	r1, r3, #31
 8006b14:	bf44      	itt	mi
 8006b16:	f043 0320 	orrmi.w	r3, r3, #32
 8006b1a:	6023      	strmi	r3, [r4, #0]
 8006b1c:	b91d      	cbnz	r5, 8006b26 <_printf_i+0x196>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f023 0320 	bic.w	r3, r3, #32
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	2310      	movs	r3, #16
 8006b28:	e7b0      	b.n	8006a8c <_printf_i+0xfc>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	f043 0320 	orr.w	r3, r3, #32
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	2378      	movs	r3, #120	; 0x78
 8006b34:	4828      	ldr	r0, [pc, #160]	; (8006bd8 <_printf_i+0x248>)
 8006b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b3a:	e7e3      	b.n	8006b04 <_printf_i+0x174>
 8006b3c:	065e      	lsls	r6, r3, #25
 8006b3e:	bf48      	it	mi
 8006b40:	b2ad      	uxthmi	r5, r5
 8006b42:	e7e6      	b.n	8006b12 <_printf_i+0x182>
 8006b44:	4616      	mov	r6, r2
 8006b46:	e7bb      	b.n	8006ac0 <_printf_i+0x130>
 8006b48:	680b      	ldr	r3, [r1, #0]
 8006b4a:	6826      	ldr	r6, [r4, #0]
 8006b4c:	6960      	ldr	r0, [r4, #20]
 8006b4e:	1d1d      	adds	r5, r3, #4
 8006b50:	600d      	str	r5, [r1, #0]
 8006b52:	0635      	lsls	r5, r6, #24
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	d501      	bpl.n	8006b5c <_printf_i+0x1cc>
 8006b58:	6018      	str	r0, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <_printf_i+0x1d2>
 8006b5c:	0671      	lsls	r1, r6, #25
 8006b5e:	d5fb      	bpl.n	8006b58 <_printf_i+0x1c8>
 8006b60:	8018      	strh	r0, [r3, #0]
 8006b62:	2300      	movs	r3, #0
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	4616      	mov	r6, r2
 8006b68:	e7ba      	b.n	8006ae0 <_printf_i+0x150>
 8006b6a:	680b      	ldr	r3, [r1, #0]
 8006b6c:	1d1a      	adds	r2, r3, #4
 8006b6e:	600a      	str	r2, [r1, #0]
 8006b70:	681e      	ldr	r6, [r3, #0]
 8006b72:	6862      	ldr	r2, [r4, #4]
 8006b74:	2100      	movs	r1, #0
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7f9 fb3a 	bl	80001f0 <memchr>
 8006b7c:	b108      	cbz	r0, 8006b82 <_printf_i+0x1f2>
 8006b7e:	1b80      	subs	r0, r0, r6
 8006b80:	6060      	str	r0, [r4, #4]
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	2300      	movs	r3, #0
 8006b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8c:	e7a8      	b.n	8006ae0 <_printf_i+0x150>
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	4632      	mov	r2, r6
 8006b92:	4649      	mov	r1, r9
 8006b94:	4640      	mov	r0, r8
 8006b96:	47d0      	blx	sl
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d0ab      	beq.n	8006af4 <_printf_i+0x164>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	079b      	lsls	r3, r3, #30
 8006ba0:	d413      	bmi.n	8006bca <_printf_i+0x23a>
 8006ba2:	68e0      	ldr	r0, [r4, #12]
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	4298      	cmp	r0, r3
 8006ba8:	bfb8      	it	lt
 8006baa:	4618      	movlt	r0, r3
 8006bac:	e7a4      	b.n	8006af8 <_printf_i+0x168>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	47d0      	blx	sl
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d09b      	beq.n	8006af4 <_printf_i+0x164>
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	68e3      	ldr	r3, [r4, #12]
 8006bc0:	9903      	ldr	r1, [sp, #12]
 8006bc2:	1a5b      	subs	r3, r3, r1
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	dcf2      	bgt.n	8006bae <_printf_i+0x21e>
 8006bc8:	e7eb      	b.n	8006ba2 <_printf_i+0x212>
 8006bca:	2500      	movs	r5, #0
 8006bcc:	f104 0619 	add.w	r6, r4, #25
 8006bd0:	e7f5      	b.n	8006bbe <_printf_i+0x22e>
 8006bd2:	bf00      	nop
 8006bd4:	08006ea5 	.word	0x08006ea5
 8006bd8:	08006eb6 	.word	0x08006eb6

08006bdc <memcpy>:
 8006bdc:	440a      	add	r2, r1
 8006bde:	4291      	cmp	r1, r2
 8006be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be4:	d100      	bne.n	8006be8 <memcpy+0xc>
 8006be6:	4770      	bx	lr
 8006be8:	b510      	push	{r4, lr}
 8006bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	d1f9      	bne.n	8006bea <memcpy+0xe>
 8006bf6:	bd10      	pop	{r4, pc}

08006bf8 <memmove>:
 8006bf8:	4288      	cmp	r0, r1
 8006bfa:	b510      	push	{r4, lr}
 8006bfc:	eb01 0402 	add.w	r4, r1, r2
 8006c00:	d902      	bls.n	8006c08 <memmove+0x10>
 8006c02:	4284      	cmp	r4, r0
 8006c04:	4623      	mov	r3, r4
 8006c06:	d807      	bhi.n	8006c18 <memmove+0x20>
 8006c08:	1e43      	subs	r3, r0, #1
 8006c0a:	42a1      	cmp	r1, r4
 8006c0c:	d008      	beq.n	8006c20 <memmove+0x28>
 8006c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c16:	e7f8      	b.n	8006c0a <memmove+0x12>
 8006c18:	4402      	add	r2, r0
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	428a      	cmp	r2, r1
 8006c1e:	d100      	bne.n	8006c22 <memmove+0x2a>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c2a:	e7f7      	b.n	8006c1c <memmove+0x24>

08006c2c <_free_r>:
 8006c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	d048      	beq.n	8006cc4 <_free_r+0x98>
 8006c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c36:	9001      	str	r0, [sp, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c3e:	bfb8      	it	lt
 8006c40:	18e4      	addlt	r4, r4, r3
 8006c42:	f000 f8d3 	bl	8006dec <__malloc_lock>
 8006c46:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <_free_r+0x9c>)
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	4615      	mov	r5, r2
 8006c4e:	b933      	cbnz	r3, 8006c5e <_free_r+0x32>
 8006c50:	6063      	str	r3, [r4, #4]
 8006c52:	6014      	str	r4, [r2, #0]
 8006c54:	b003      	add	sp, #12
 8006c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c5a:	f000 b8cd 	b.w	8006df8 <__malloc_unlock>
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	d90b      	bls.n	8006c7a <_free_r+0x4e>
 8006c62:	6821      	ldr	r1, [r4, #0]
 8006c64:	1862      	adds	r2, r4, r1
 8006c66:	4293      	cmp	r3, r2
 8006c68:	bf04      	itt	eq
 8006c6a:	681a      	ldreq	r2, [r3, #0]
 8006c6c:	685b      	ldreq	r3, [r3, #4]
 8006c6e:	6063      	str	r3, [r4, #4]
 8006c70:	bf04      	itt	eq
 8006c72:	1852      	addeq	r2, r2, r1
 8006c74:	6022      	streq	r2, [r4, #0]
 8006c76:	602c      	str	r4, [r5, #0]
 8006c78:	e7ec      	b.n	8006c54 <_free_r+0x28>
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	b10b      	cbz	r3, 8006c84 <_free_r+0x58>
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	d9fa      	bls.n	8006c7a <_free_r+0x4e>
 8006c84:	6811      	ldr	r1, [r2, #0]
 8006c86:	1855      	adds	r5, r2, r1
 8006c88:	42a5      	cmp	r5, r4
 8006c8a:	d10b      	bne.n	8006ca4 <_free_r+0x78>
 8006c8c:	6824      	ldr	r4, [r4, #0]
 8006c8e:	4421      	add	r1, r4
 8006c90:	1854      	adds	r4, r2, r1
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	d1dd      	bne.n	8006c54 <_free_r+0x28>
 8006c98:	681c      	ldr	r4, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	6053      	str	r3, [r2, #4]
 8006c9e:	4421      	add	r1, r4
 8006ca0:	6011      	str	r1, [r2, #0]
 8006ca2:	e7d7      	b.n	8006c54 <_free_r+0x28>
 8006ca4:	d902      	bls.n	8006cac <_free_r+0x80>
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	6003      	str	r3, [r0, #0]
 8006caa:	e7d3      	b.n	8006c54 <_free_r+0x28>
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	1961      	adds	r1, r4, r5
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	bf04      	itt	eq
 8006cb4:	6819      	ldreq	r1, [r3, #0]
 8006cb6:	685b      	ldreq	r3, [r3, #4]
 8006cb8:	6063      	str	r3, [r4, #4]
 8006cba:	bf04      	itt	eq
 8006cbc:	1949      	addeq	r1, r1, r5
 8006cbe:	6021      	streq	r1, [r4, #0]
 8006cc0:	6054      	str	r4, [r2, #4]
 8006cc2:	e7c7      	b.n	8006c54 <_free_r+0x28>
 8006cc4:	b003      	add	sp, #12
 8006cc6:	bd30      	pop	{r4, r5, pc}
 8006cc8:	2000042c 	.word	0x2000042c

08006ccc <_malloc_r>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	1ccd      	adds	r5, r1, #3
 8006cd0:	f025 0503 	bic.w	r5, r5, #3
 8006cd4:	3508      	adds	r5, #8
 8006cd6:	2d0c      	cmp	r5, #12
 8006cd8:	bf38      	it	cc
 8006cda:	250c      	movcc	r5, #12
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	4606      	mov	r6, r0
 8006ce0:	db01      	blt.n	8006ce6 <_malloc_r+0x1a>
 8006ce2:	42a9      	cmp	r1, r5
 8006ce4:	d903      	bls.n	8006cee <_malloc_r+0x22>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	2000      	movs	r0, #0
 8006cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cee:	f000 f87d 	bl	8006dec <__malloc_lock>
 8006cf2:	4921      	ldr	r1, [pc, #132]	; (8006d78 <_malloc_r+0xac>)
 8006cf4:	680a      	ldr	r2, [r1, #0]
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	b99c      	cbnz	r4, 8006d22 <_malloc_r+0x56>
 8006cfa:	4f20      	ldr	r7, [pc, #128]	; (8006d7c <_malloc_r+0xb0>)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	b923      	cbnz	r3, 8006d0a <_malloc_r+0x3e>
 8006d00:	4621      	mov	r1, r4
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 f862 	bl	8006dcc <_sbrk_r>
 8006d08:	6038      	str	r0, [r7, #0]
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f000 f85d 	bl	8006dcc <_sbrk_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d123      	bne.n	8006d5e <_malloc_r+0x92>
 8006d16:	230c      	movs	r3, #12
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f000 f86c 	bl	8006df8 <__malloc_unlock>
 8006d20:	e7e3      	b.n	8006cea <_malloc_r+0x1e>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	1b5b      	subs	r3, r3, r5
 8006d26:	d417      	bmi.n	8006d58 <_malloc_r+0x8c>
 8006d28:	2b0b      	cmp	r3, #11
 8006d2a:	d903      	bls.n	8006d34 <_malloc_r+0x68>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	441c      	add	r4, r3
 8006d30:	6025      	str	r5, [r4, #0]
 8006d32:	e004      	b.n	8006d3e <_malloc_r+0x72>
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	42a2      	cmp	r2, r4
 8006d38:	bf0c      	ite	eq
 8006d3a:	600b      	streq	r3, [r1, #0]
 8006d3c:	6053      	strne	r3, [r2, #4]
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 f85a 	bl	8006df8 <__malloc_unlock>
 8006d44:	f104 000b 	add.w	r0, r4, #11
 8006d48:	1d23      	adds	r3, r4, #4
 8006d4a:	f020 0007 	bic.w	r0, r0, #7
 8006d4e:	1ac2      	subs	r2, r0, r3
 8006d50:	d0cc      	beq.n	8006cec <_malloc_r+0x20>
 8006d52:	1a1b      	subs	r3, r3, r0
 8006d54:	50a3      	str	r3, [r4, r2]
 8006d56:	e7c9      	b.n	8006cec <_malloc_r+0x20>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	6864      	ldr	r4, [r4, #4]
 8006d5c:	e7cc      	b.n	8006cf8 <_malloc_r+0x2c>
 8006d5e:	1cc4      	adds	r4, r0, #3
 8006d60:	f024 0403 	bic.w	r4, r4, #3
 8006d64:	42a0      	cmp	r0, r4
 8006d66:	d0e3      	beq.n	8006d30 <_malloc_r+0x64>
 8006d68:	1a21      	subs	r1, r4, r0
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f82e 	bl	8006dcc <_sbrk_r>
 8006d70:	3001      	adds	r0, #1
 8006d72:	d1dd      	bne.n	8006d30 <_malloc_r+0x64>
 8006d74:	e7cf      	b.n	8006d16 <_malloc_r+0x4a>
 8006d76:	bf00      	nop
 8006d78:	2000042c 	.word	0x2000042c
 8006d7c:	20000430 	.word	0x20000430

08006d80 <_realloc_r>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	4607      	mov	r7, r0
 8006d84:	4614      	mov	r4, r2
 8006d86:	460e      	mov	r6, r1
 8006d88:	b921      	cbnz	r1, 8006d94 <_realloc_r+0x14>
 8006d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d8e:	4611      	mov	r1, r2
 8006d90:	f7ff bf9c 	b.w	8006ccc <_malloc_r>
 8006d94:	b922      	cbnz	r2, 8006da0 <_realloc_r+0x20>
 8006d96:	f7ff ff49 	bl	8006c2c <_free_r>
 8006d9a:	4625      	mov	r5, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da0:	f000 f830 	bl	8006e04 <_malloc_usable_size_r>
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d20f      	bcs.n	8006dc8 <_realloc_r+0x48>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff ff8e 	bl	8006ccc <_malloc_r>
 8006db0:	4605      	mov	r5, r0
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0f2      	beq.n	8006d9c <_realloc_r+0x1c>
 8006db6:	4631      	mov	r1, r6
 8006db8:	4622      	mov	r2, r4
 8006dba:	f7ff ff0f 	bl	8006bdc <memcpy>
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ff33 	bl	8006c2c <_free_r>
 8006dc6:	e7e9      	b.n	8006d9c <_realloc_r+0x1c>
 8006dc8:	4635      	mov	r5, r6
 8006dca:	e7e7      	b.n	8006d9c <_realloc_r+0x1c>

08006dcc <_sbrk_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d06      	ldr	r5, [pc, #24]	; (8006de8 <_sbrk_r+0x1c>)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7f9 fd5e 	bl	8000898 <_sbrk>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_sbrk_r+0x1a>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_sbrk_r+0x1a>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	20001500 	.word	0x20001500

08006dec <__malloc_lock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_lock+0x8>)
 8006dee:	f000 b811 	b.w	8006e14 <__retarget_lock_acquire_recursive>
 8006df2:	bf00      	nop
 8006df4:	20001508 	.word	0x20001508

08006df8 <__malloc_unlock>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__malloc_unlock+0x8>)
 8006dfa:	f000 b80c 	b.w	8006e16 <__retarget_lock_release_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20001508 	.word	0x20001508

08006e04 <_malloc_usable_size_r>:
 8006e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e08:	1f18      	subs	r0, r3, #4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bfbc      	itt	lt
 8006e0e:	580b      	ldrlt	r3, [r1, r0]
 8006e10:	18c0      	addlt	r0, r0, r3
 8006e12:	4770      	bx	lr

08006e14 <__retarget_lock_acquire_recursive>:
 8006e14:	4770      	bx	lr

08006e16 <__retarget_lock_release_recursive>:
 8006e16:	4770      	bx	lr

08006e18 <_init>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr

08006e24 <_fini>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr
