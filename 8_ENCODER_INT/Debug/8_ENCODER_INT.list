
8_ENCODER_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008830  08008830  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008838  08008838  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000141c  200001e4  08008a24  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001600  08008a24  00021600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd6b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc1  00000000  00000000  0003cf7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00040d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  000421a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a375  00000000  00000000  00043470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d17  00000000  00000000  0005d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e3d  00000000  00000000  000774fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  0010938c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008740 	.word	0x08008740

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008740 	.word	0x08008740

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <MX_GPIO_Init+0xd4>)
 8000616:	f000 ff9b 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <MX_GPIO_Init+0xd4>)
 8000634:	f000 fdf0 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_Pin|GC_Pin;
 8000638:	2321      	movs	r3, #33	; 0x21
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_GPIO_Init+0xd8>)
 800064c:	f000 fde4 	bl	8001218 <HAL_GPIO_Init>

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40020800 	.word	0x40020800
 8000660:	40020000 	.word	0x40020000

08000664 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <MX_I2C1_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_I2C1_Init+0x58>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_I2C1_Init+0x50>)
 80006a2:	f000 ff89 	bl	80015b8 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 fa8a 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200004a8 	.word	0x200004a8
 80006b8:	40005400 	.word	0x40005400
 80006bc:	000186a0 	.word	0x000186a0

080006c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a19      	ldr	r2, [pc, #100]	; (8000744 <HAL_I2C_MspInit+0x84>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d12c      	bne.n	800073c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_I2C_MspInit+0x88>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <HAL_I2C_MspInit+0x88>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_I2C_MspInit+0x88>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000704:	2312      	movs	r3, #18
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000710:	2304      	movs	r3, #4
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <HAL_I2C_MspInit+0x8c>)
 800071c:	f000 fd7c 	bl	8001218 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_I2C_MspInit+0x88>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_I2C_MspInit+0x88>)
 800072a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_I2C_MspInit+0x88>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40005400 	.word	0x40005400
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400

08000750 <LCD_SendInternal>:
        0b00110,
        0b00000
};


HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af02      	add	r7, sp, #8
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	460b      	mov	r3, r1
 800075c:	71bb      	strb	r3, [r7, #6]
 800075e:	4613      	mov	r3, r2
 8000760:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	b299      	uxth	r1, r3
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2201      	movs	r2, #1
 800076c:	4822      	ldr	r0, [pc, #136]	; (80007f8 <LCD_SendInternal+0xa8>)
 800076e:	f001 f965 	bl	8001a3c <HAL_I2C_IsDeviceReady>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800077c:	e7f1      	b.n	8000762 <LCD_SendInternal+0x12>
            break;
 800077e:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	f023 030f 	bic.w	r3, r3, #15
 8000786:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800078e:	7bba      	ldrb	r2, [r7, #14]
 8000790:	797b      	ldrb	r3, [r7, #5]
 8000792:	4313      	orrs	r3, r2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f043 030c 	orr.w	r3, r3, #12
 800079a:	b2db      	uxtb	r3, r3
 800079c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800079e:	7bba      	ldrb	r2, [r7, #14]
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80007ae:	7b7a      	ldrb	r2, [r7, #13]
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f043 030c 	orr.w	r3, r3, #12
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80007be:	7b7a      	ldrb	r2, [r7, #13]
 80007c0:	797b      	ldrb	r3, [r7, #5]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	b299      	uxth	r1, r3
 80007d2:	f107 0208 	add.w	r2, r7, #8
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2304      	movs	r3, #4
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <LCD_SendInternal+0xa8>)
 80007e0:	f001 f82e 	bl	8001840 <HAL_I2C_Master_Transmit>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]
    LCD_Delay_ms(5);
 80007e8:	2005      	movs	r0, #5
 80007ea:	f000 f8bf 	bl	800096c <LCD_Delay_ms>
    return res;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200004a8 	.word	0x200004a8

080007fc <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, cmd, 0);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	204e      	movs	r0, #78	; 0x4e
 800080e:	f7ff ff9f 	bl	8000750 <LCD_SendInternal>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, data, PIN_RS);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2201      	movs	r2, #1
 8000828:	4619      	mov	r1, r3
 800082a:	204e      	movs	r0, #78	; 0x4e
 800082c:	f7ff ff90 	bl	8000750 <LCD_SendInternal>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <LCD_Clear>:
    LCD_CreateSpecialChar(0, special1);
    LCD_CreateSpecialChar(1, special2);
}

void LCD_Clear()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_CLEARDISPLAY);
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff ffdd 	bl	80007fc <LCD_SendCommand>
	LCD_Delay_ms(2);
 8000842:	2002      	movs	r0, #2
 8000844:	f000 f892 	bl	800096c <LCD_Delay_ms>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <LCD_SetCursor>:
	LCD_SendCommand(LCD_RETURNHOME);
	LCD_Delay_ms(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	460a      	mov	r2, r1
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	4613      	mov	r3, r2
 800085a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <LCD_SetCursor+0x60>)
 800085e:	f107 0408 	add.w	r4, r7, #8
 8000862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= _LCD_ROWS)
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d901      	bls.n	8000872 <LCD_SetCursor+0x26>
		row = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	71bb      	strb	r3, [r7, #6]
	LCD_Opt.CurrentX = col;
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <LCD_SetCursor+0x64>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	70d3      	strb	r3, [r2, #3]
	LCD_Opt.CurrentY = row;
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <LCD_SetCursor+0x64>)
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	7113      	strb	r3, [r2, #4]
	LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	f107 0218 	add.w	r2, r7, #24
 8000886:	4413      	add	r3, r2
 8000888:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4413      	add	r3, r2
 8000892:	b2db      	uxtb	r3, r3
 8000894:	b25b      	sxtb	r3, r3
 8000896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800089a:	b25b      	sxtb	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffac 	bl	80007fc <LCD_SendCommand>
}
 80008a4:	bf00      	nop
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	08008758 	.word	0x08008758
 80008b0:	20000200 	.word	0x20000200

080008b4 <LCD_Puts>:
{
  while(*c) LCD_SendData(*c++);
}

void LCD_Puts(uint8_t x, uint8_t y, char* str)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	603a      	str	r2, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	460b      	mov	r3, r1
 80008c2:	71bb      	strb	r3, [r7, #6]
	LCD_SetCursor(x, y);
 80008c4:	79ba      	ldrb	r2, [r7, #6]
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffbe 	bl	800084c <LCD_SetCursor>
	while (*str)
 80008d0:	e040      	b.n	8000954 <LCD_Puts+0xa0>
	{
		if (LCD_Opt.CurrentX >= _LCD_COLS)
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <LCD_Puts+0xb4>)
 80008d4:	78db      	ldrb	r3, [r3, #3]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d910      	bls.n	80008fc <LCD_Puts+0x48>
		{
			LCD_Opt.CurrentX = 0;
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <LCD_Puts+0xb4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			LCD_Opt.CurrentY++;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <LCD_Puts+0xb4>)
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <LCD_Puts+0xb4>)
 80008ea:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <LCD_Puts+0xb4>)
 80008ee:	78db      	ldrb	r3, [r3, #3]
 80008f0:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <LCD_Puts+0xb4>)
 80008f2:	7912      	ldrb	r2, [r2, #4]
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffa8 	bl	800084c <LCD_SetCursor>
		}
		if (*str == '\n')
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b0a      	cmp	r3, #10
 8000902:	d10e      	bne.n	8000922 <LCD_Puts+0x6e>
		{
			LCD_Opt.CurrentY++;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <LCD_Puts+0xb4>)
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <LCD_Puts+0xb4>)
 800090e:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <LCD_Puts+0xb4>)
 8000912:	78db      	ldrb	r3, [r3, #3]
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <LCD_Puts+0xb4>)
 8000916:	7912      	ldrb	r2, [r2, #4]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff96 	bl	800084c <LCD_SetCursor>
 8000920:	e015      	b.n	800094e <LCD_Puts+0x9a>
		}
		else if (*str == '\r')
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b0d      	cmp	r3, #13
 8000928:	d106      	bne.n	8000938 <LCD_Puts+0x84>
		{
			LCD_SetCursor(0, LCD_Opt.CurrentY);
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <LCD_Puts+0xb4>)
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	4619      	mov	r1, r3
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff8b 	bl	800084c <LCD_SetCursor>
 8000936:	e00a      	b.n	800094e <LCD_Puts+0x9a>
		}
		else
		{
			LCD_SendData(*str);//LCD_Print(*str);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff6c 	bl	800081a <LCD_SendData>
			LCD_Opt.CurrentX++;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <LCD_Puts+0xb4>)
 8000944:	78db      	ldrb	r3, [r3, #3]
 8000946:	3301      	adds	r3, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <LCD_Puts+0xb4>)
 800094c:	70da      	strb	r2, [r3, #3]
		}
		str++;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	603b      	str	r3, [r7, #0]
	while (*str)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1ba      	bne.n	80008d2 <LCD_Puts+0x1e>
	}
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000200 	.word	0x20000200

0800096c <LCD_Delay_ms>:
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));
}

void LCD_Delay_ms(uint8_t ms)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  #if _LCD_USE_FREERTOS==1
  osDelay(ms);
  #else
  HAL_Delay(ms);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fb17 	bl	8000fac <HAL_Delay>
  #endif
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b598      	push	{r3, r4, r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fa9c 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 f8ae 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f7ff fdf8 	bl	8000588 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000998:	f000 f9c8 	bl	8000d2c <MX_TIM3_Init>
  MX_I2C1_Init();
 800099c:	f7ff fe62 	bl	8000664 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80009a0:	f006 fcfa 	bl	8007398 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80009a4:	213c      	movs	r1, #60	; 0x3c
 80009a6:	4845      	ldr	r0, [pc, #276]	; (8000abc <main+0x134>)
 80009a8:	f003 f9dc 	bl	8003d64 <HAL_TIM_Encoder_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  encVal = (uint16_t)((TIM3->CNT) >> 2);
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <main+0x138>)
 80009ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <main+0x13c>)
 80009b8:	601a      	str	r2, [r3, #0]

	  if (encVal != oldEncVal) {
 80009ba:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <main+0x13c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <main+0x140>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d04a      	beq.n	8000a5c <main+0xd4>
		  DIR = (encVal - oldEncVal >= 1) ? 1 : 2;
 80009c6:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <main+0x13c>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <main+0x140>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dd01      	ble.n	80009d8 <main+0x50>
 80009d4:	2201      	movs	r2, #1
 80009d6:	e000      	b.n	80009da <main+0x52>
 80009d8:	2202      	movs	r2, #2
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <main+0x144>)
 80009dc:	701a      	strb	r2, [r3, #0]

		  sprintf(MSG, "%d: Tick: %d\r\n", DIR, encVal);
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <main+0x144>)
 80009e0:	f993 3000 	ldrsb.w	r3, [r3]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <main+0x13c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4939      	ldr	r1, [pc, #228]	; (8000ad0 <main+0x148>)
 80009ec:	4839      	ldr	r0, [pc, #228]	; (8000ad4 <main+0x14c>)
 80009ee:	f007 fa2f 	bl	8007e50 <siprintf>
		  itoa(DIR, strDir, 10);
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <main+0x144>)
 80009f4:	f993 3000 	ldrsb.w	r3, [r3]
 80009f8:	220a      	movs	r2, #10
 80009fa:	4937      	ldr	r1, [pc, #220]	; (8000ad8 <main+0x150>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f007 fa1d 	bl	8007e3c <itoa>
		  itoa(encVal, lcdMsg, 10);
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <main+0x13c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	220a      	movs	r2, #10
 8000a08:	4934      	ldr	r1, [pc, #208]	; (8000adc <main+0x154>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f007 fa16 	bl	8007e3c <itoa>
		  if (strlen(oldMsg) != strlen(lcdMsg)) LCD_Clear();
 8000a10:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <main+0x158>)
 8000a12:	f7ff fbe5 	bl	80001e0 <strlen>
 8000a16:	4604      	mov	r4, r0
 8000a18:	4830      	ldr	r0, [pc, #192]	; (8000adc <main+0x154>)
 8000a1a:	f7ff fbe1 	bl	80001e0 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	429c      	cmp	r4, r3
 8000a22:	d001      	beq.n	8000a28 <main+0xa0>
 8000a24:	f7ff ff08 	bl	8000838 <LCD_Clear>
		  LCD_Puts(0, 0, strDir);
 8000a28:	4a2b      	ldr	r2, [pc, #172]	; (8000ad8 <main+0x150>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ff41 	bl	80008b4 <LCD_Puts>
		  LCD_Puts(0, 1, lcdMsg);
 8000a32:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <main+0x154>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff ff3c 	bl	80008b4 <LCD_Puts>
		  while (CDC_Transmit_FS(MSG, strlen(MSG)) == USBD_OK) {}
 8000a3c:	bf00      	nop
 8000a3e:	4825      	ldr	r0, [pc, #148]	; (8000ad4 <main+0x14c>)
 8000a40:	f7ff fbce 	bl	80001e0 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <main+0x14c>)
 8000a4a:	f006 fd63 	bl	8007514 <CDC_Transmit_FS>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f4      	beq.n	8000a3e <main+0xb6>

		  oldEncVal = encVal;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <main+0x13c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <main+0x140>)
 8000a5a:	6013      	str	r3, [r2, #0]
	  }

	  if (SW != oldBt && SW) {
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <main+0x15c>)
 8000a60:	f000 fd5e 	bl	8001520 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf0c      	ite	eq
 8000a6a:	2301      	moveq	r3, #1
 8000a6c:	2300      	movne	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <main+0x160>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d00b      	beq.n	8000a92 <main+0x10a>
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <main+0x15c>)
 8000a7e:	f000 fd4f 	bl	8001520 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <main+0x10a>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <main+0x164>)
 8000a8e:	f000 fd78 	bl	8001582 <HAL_GPIO_TogglePin>
	  }

	  oldBt = SW;
 8000a92:	2120      	movs	r1, #32
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <main+0x15c>)
 8000a96:	f000 fd43 	bl	8001520 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf0c      	ite	eq
 8000aa0:	2301      	moveq	r3, #1
 8000aa2:	2300      	movne	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <main+0x160>)
 8000aaa:	701a      	strb	r2, [r3, #0]
	  strcpy(oldMsg, lcdMsg);
 8000aac:	490b      	ldr	r1, [pc, #44]	; (8000adc <main+0x154>)
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <main+0x158>)
 8000ab0:	f007 f9ee 	bl	8007e90 <strcpy>

	  HAL_Delay(10);
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f000 fa79 	bl	8000fac <HAL_Delay>
	  encVal = (uint16_t)((TIM3->CNT) >> 2);
 8000aba:	e777      	b.n	80009ac <main+0x24>
 8000abc:	200004fc 	.word	0x200004fc
 8000ac0:	40000400 	.word	0x40000400
 8000ac4:	20000228 	.word	0x20000228
 8000ac8:	2000022c 	.word	0x2000022c
 8000acc:	20000230 	.word	0x20000230
 8000ad0:	08008768 	.word	0x08008768
 8000ad4:	20000208 	.word	0x20000208
 8000ad8:	20000274 	.word	0x20000274
 8000adc:	20000234 	.word	0x20000234
 8000ae0:	20000254 	.word	0x20000254
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	20000226 	.word	0x20000226
 8000aec:	40020800 	.word	0x40020800

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2230      	movs	r2, #48	; 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f007 f99e 	bl	8007e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b64:	2319      	movs	r3, #25
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b68:	23c0      	movs	r3, #192	; 0xc0
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fc19 	bl	80033b0 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b84:	f000 f81e 	bl	8000bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fe7b 	bl	80038a0 <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bb0:	f000 f808 	bl	8000bc4 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3750      	adds	r7, #80	; 0x50
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f97e 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM3_IRQHandler+0x10>)
 8000c7a:	f003 f921 	bl	8003ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200004fc 	.word	0x200004fc

08000c88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <OTG_FS_IRQHandler+0x10>)
 8000c8e:	f001 fb5c 	bl	800234a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200011e8 	.word	0x200011e8

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f007 f874 	bl	8007db8 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20010000 	.word	0x20010000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000278 	.word	0x20000278
 8000d04:	20001600 	.word	0x20001600

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2224      	movs	r2, #36	; 0x24
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f007 f880 	bl	8007e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_TIM3_Init+0xa4>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000d56:	2220      	movs	r2, #32
 8000d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000d72:	2302      	movs	r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000d7e:	230a      	movs	r3, #10
 8000d80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d86:	2301      	movs	r3, #1
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000d8e:	230a      	movs	r3, #10
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000d9a:	f002 ff3d 	bl	8003c18 <HAL_TIM_Encoder_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f7ff ff0e 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_TIM3_Init+0xa0>)
 8000db6:	f003 fa63 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000dc0:	f7ff ff00 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3730      	adds	r7, #48	; 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200004fc 	.word	0x200004fc
 8000dd0:	40000400 	.word	0x40000400

08000dd4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_TIM_Encoder_MspInit+0x94>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d133      	bne.n	8000e5e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x98>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x98>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x98>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x98>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x98>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x98>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e4a:	f000 f9e5 	bl	8001218 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201d      	movs	r0, #29
 8000e54:	f000 f9a9 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e58:	201d      	movs	r0, #29
 8000e5a:	f000 f9c2 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ff33 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f006 ff8f 	bl	8007dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fd6f 	bl	8000988 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000eb8:	08008840 	.word	0x08008840
  ldr r2, =_sbss
 8000ebc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000ec0:	20001600 	.word	0x20001600

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94f 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe68 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f967 	bl	80011fe <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f92f 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000544 	.word	0x20000544

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000544 	.word	0x20000544

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e159      	b.n	80014e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8148 	bne.w	80014e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	2b02      	cmp	r3, #2
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d017      	beq.n	8001308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d123      	bne.n	800135c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80a2 	beq.w	80014e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b57      	ldr	r3, [pc, #348]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a56      	ldr	r2, [pc, #344]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b54      	ldr	r3, [pc, #336]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x202>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a48      	ldr	r2, [pc, #288]	; (800150c <HAL_GPIO_Init+0x2f4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x1fe>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <HAL_GPIO_Init+0x2f8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x1fa>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a46      	ldr	r2, [pc, #280]	; (8001514 <HAL_GPIO_Init+0x2fc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x1f6>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a45      	ldr	r2, [pc, #276]	; (8001518 <HAL_GPIO_Init+0x300>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x1f2>
 8001406:	2304      	movs	r3, #4
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x204>
 800140a:	2307      	movs	r3, #7
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x204>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x204>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x204>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x204>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_GPIO_Init+0x304>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145e:	4a2f      	ldr	r2, [pc, #188]	; (800151c <HAL_GPIO_Init+0x304>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_GPIO_Init+0x304>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <HAL_GPIO_Init+0x304>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_GPIO_Init+0x304>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_GPIO_Init+0x304>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f aea2 	bls.w	8001234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001594:	887a      	ldrh	r2, [r7, #2]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	041a      	lsls	r2, r3, #16
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43d9      	mvns	r1, r3
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	400b      	ands	r3, r1
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e12b      	b.n	8001822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d106      	bne.n	80015e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff f86e 	bl	80006c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800160a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800161a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800161c:	f002 fae8 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a81      	ldr	r2, [pc, #516]	; (800182c <HAL_I2C_Init+0x274>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d807      	bhi.n	800163c <HAL_I2C_Init+0x84>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a80      	ldr	r2, [pc, #512]	; (8001830 <HAL_I2C_Init+0x278>)
 8001630:	4293      	cmp	r3, r2
 8001632:	bf94      	ite	ls
 8001634:	2301      	movls	r3, #1
 8001636:	2300      	movhi	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	e006      	b.n	800164a <HAL_I2C_Init+0x92>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a7d      	ldr	r2, [pc, #500]	; (8001834 <HAL_I2C_Init+0x27c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	bf94      	ite	ls
 8001644:	2301      	movls	r3, #1
 8001646:	2300      	movhi	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0e7      	b.n	8001822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4a78      	ldr	r2, [pc, #480]	; (8001838 <HAL_I2C_Init+0x280>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9b      	lsrs	r3, r3, #18
 800165c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a6a      	ldr	r2, [pc, #424]	; (800182c <HAL_I2C_Init+0x274>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d802      	bhi.n	800168c <HAL_I2C_Init+0xd4>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3301      	adds	r3, #1
 800168a:	e009      	b.n	80016a0 <HAL_I2C_Init+0xe8>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a69      	ldr	r2, [pc, #420]	; (800183c <HAL_I2C_Init+0x284>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	3301      	adds	r3, #1
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	495c      	ldr	r1, [pc, #368]	; (800182c <HAL_I2C_Init+0x274>)
 80016bc:	428b      	cmp	r3, r1
 80016be:	d819      	bhi.n	80016f4 <HAL_I2C_Init+0x13c>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1e59      	subs	r1, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016d4:	400b      	ands	r3, r1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00a      	beq.n	80016f0 <HAL_I2C_Init+0x138>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e59      	subs	r1, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ee:	e051      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e04f      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d111      	bne.n	8001720 <HAL_I2C_Init+0x168>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	440b      	add	r3, r1
 800170a:	fbb0 f3f3 	udiv	r3, r0, r3
 800170e:	3301      	adds	r3, #1
 8001710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	e012      	b.n	8001746 <HAL_I2C_Init+0x18e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1e58      	subs	r0, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	0099      	lsls	r1, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Init+0x196>
 800174a:	2301      	movs	r3, #1
 800174c:	e022      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10e      	bne.n	8001774 <HAL_I2C_Init+0x1bc>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1e58      	subs	r0, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	440b      	add	r3, r1
 8001764:	fbb0 f3f3 	udiv	r3, r0, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001772:	e00f      	b.n	8001794 <HAL_I2C_Init+0x1dc>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1e58      	subs	r0, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	0099      	lsls	r1, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	fbb0 f3f3 	udiv	r3, r0, r3
 800178a:	3301      	adds	r3, #1
 800178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	6809      	ldr	r1, [r1, #0]
 8001798:	4313      	orrs	r3, r2
 800179a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6911      	ldr	r1, [r2, #16]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68d2      	ldr	r2, [r2, #12]
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2220      	movs	r2, #32
 800180e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	000186a0 	.word	0x000186a0
 8001830:	001e847f 	.word	0x001e847f
 8001834:	003d08ff 	.word	0x003d08ff
 8001838:	431bde83 	.word	0x431bde83
 800183c:	10624dd3 	.word	0x10624dd3

08001840 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	461a      	mov	r2, r3
 800184c:	460b      	mov	r3, r1
 800184e:	817b      	strh	r3, [r7, #10]
 8001850:	4613      	mov	r3, r2
 8001852:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fb9e 	bl	8000f94 <HAL_GetTick>
 8001858:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b20      	cmp	r3, #32
 8001864:	f040 80e0 	bne.w	8001a28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2319      	movs	r3, #25
 800186e:	2201      	movs	r2, #1
 8001870:	4970      	ldr	r1, [pc, #448]	; (8001a34 <HAL_I2C_Master_Transmit+0x1f4>)
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fa92 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800187e:	2302      	movs	r3, #2
 8001880:	e0d3      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_I2C_Master_Transmit+0x50>
 800188c:	2302      	movs	r3, #2
 800188e:	e0cc      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ea>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d007      	beq.n	80018b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0201 	orr.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2221      	movs	r2, #33	; 0x21
 80018ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2210      	movs	r2, #16
 80018d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	893a      	ldrh	r2, [r7, #8]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a50      	ldr	r2, [pc, #320]	; (8001a38 <HAL_I2C_Master_Transmit+0x1f8>)
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018f8:	8979      	ldrh	r1, [r7, #10]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f9ca 	bl	8001c98 <I2C_MasterRequestWrite>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e08d      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001924:	e066      	b.n	80019f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fb0c 	bl	8001f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00d      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b04      	cmp	r3, #4
 800193c:	d107      	bne.n	800194e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e06b      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b04      	cmp	r3, #4
 800198e:	d11b      	bne.n	80019c8 <HAL_I2C_Master_Transmit+0x188>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	d017      	beq.n	80019c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	6a39      	ldr	r1, [r7, #32]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 fafc 	bl	8001fca <I2C_WaitOnBTFFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00d      	beq.n	80019f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d107      	bne.n	80019f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e01a      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d194      	bne.n	8001926 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e000      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a28:	2302      	movs	r3, #2
  }
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	00100002 	.word	0x00100002
 8001a38:	ffff0000 	.word	0xffff0000

08001a3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff faa2 	bl	8000f94 <HAL_GetTick>
 8001a50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	f040 8111 	bne.w	8001c86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2319      	movs	r3, #25
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4988      	ldr	r1, [pc, #544]	; (8001c90 <HAL_I2C_IsDeviceReady+0x254>)
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f994 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e104      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2C_IsDeviceReady+0x50>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e0fd      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x24c>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d007      	beq.n	8001ab2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2224      	movs	r2, #36	; 0x24
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4a70      	ldr	r2, [pc, #448]	; (8001c94 <HAL_I2C_IsDeviceReady+0x258>)
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f952 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0c:	d103      	bne.n	8001b16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0b6      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b1a:	897b      	ldrh	r3, [r7, #10]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fa33 	bl	8000f94 <HAL_GetTick>
 8001b2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	bf0c      	ite	eq
 8001b3e:	2301      	moveq	r3, #1
 8001b40:	2300      	movne	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b5e:	e025      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b60:	f7ff fa18 	bl	8000f94 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d302      	bcc.n	8001b76 <HAL_I2C_IsDeviceReady+0x13a>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	22a0      	movs	r2, #160	; 0xa0
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2ba0      	cmp	r3, #160	; 0xa0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_I2C_IsDeviceReady+0x188>
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <HAL_I2C_IsDeviceReady+0x188>
 8001bbe:	7dbb      	ldrb	r3, [r7, #22]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0cd      	beq.n	8001b60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d129      	bne.n	8001c2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2319      	movs	r3, #25
 8001c06:	2201      	movs	r2, #1
 8001c08:	4921      	ldr	r1, [pc, #132]	; (8001c90 <HAL_I2C_IsDeviceReady+0x254>)
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f8c6 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e036      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e02c      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2319      	movs	r3, #25
 8001c4e:	2201      	movs	r2, #1
 8001c50:	490f      	ldr	r1, [pc, #60]	; (8001c90 <HAL_I2C_IsDeviceReady+0x254>)
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f8a2 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e012      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f4ff af32 	bcc.w	8001ad6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	00100002 	.word	0x00100002
 8001c94:	ffff0000 	.word	0xffff0000

08001c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d006      	beq.n	8001cc2 <I2C_MasterRequestWrite+0x2a>
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d003      	beq.n	8001cc2 <I2C_MasterRequestWrite+0x2a>
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e00b      	b.n	8001cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d107      	bne.n	8001cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f84f 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d12:	d103      	bne.n	8001d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e035      	b.n	8001d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d28:	d108      	bne.n	8001d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	e01b      	b.n	8001d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d3c:	897b      	ldrh	r3, [r7, #10]
 8001d3e:	11db      	asrs	r3, r3, #7
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f003 0306 	and.w	r3, r3, #6
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f063 030f 	orn	r3, r3, #15
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <I2C_MasterRequestWrite+0xfc>)
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f875 	bl	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e010      	b.n	8001d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d6a:	897b      	ldrh	r3, [r7, #10]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <I2C_MasterRequestWrite+0x100>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f865 	bl	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	00010008 	.word	0x00010008
 8001d98:	00010002 	.word	0x00010002

08001d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dac:	e025      	b.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d021      	beq.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7ff f8ed 	bl	8000f94 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d116      	bne.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0220 	orr.w	r2, r3, #32
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e023      	b.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10d      	bne.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	e00c      	b.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d0b6      	beq.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e58:	e051      	b.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d123      	bne.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e046      	b.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d021      	beq.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7ff f86b 	bl	8000f94 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d116      	bne.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f043 0220 	orr.w	r2, r3, #32
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e020      	b.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d10c      	bne.n	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	e00b      	b.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d18d      	bne.n	8001e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f54:	e02d      	b.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f878 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e02d      	b.n	8001fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d021      	beq.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6e:	f7ff f811 	bl	8000f94 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d302      	bcc.n	8001f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d116      	bne.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e007      	b.n	8001fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d1ca      	bne.n	8001f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fd6:	e02d      	b.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f837 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e02d      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fee:	d021      	beq.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff0:	f7fe ffd0 	bl	8000f94 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d302      	bcc.n	8002006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d1ca      	bne.n	8001fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d11b      	bne.n	800209c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800206c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ac:	b08f      	sub	sp, #60	; 0x3c
 80020ae:	af0a      	add	r7, sp, #40	; 0x28
 80020b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e10f      	b.n	80022dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f005 fb64 	bl	80077a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fa57 	bl	80045ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	687e      	ldr	r6, [r7, #4]
 8002108:	466d      	mov	r5, sp
 800210a:	f106 0410 	add.w	r4, r6, #16
 800210e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800211a:	e885 0003 	stmia.w	r5, {r0, r1}
 800211e:	1d33      	adds	r3, r6, #4
 8002120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002122:	6838      	ldr	r0, [r7, #0]
 8002124:	f002 f92e 	bl	8004384 <USB_CoreInit>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0d0      	b.n	80022dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f002 fa45 	bl	80045d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e04a      	b.n	80021e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	333d      	adds	r3, #61	; 0x3d
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	333c      	adds	r3, #60	; 0x3c
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	b298      	uxth	r0, r3
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3342      	adds	r3, #66	; 0x42
 8002188:	4602      	mov	r2, r0
 800218a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	333f      	adds	r3, #63	; 0x3f
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3344      	adds	r3, #68	; 0x44
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3348      	adds	r3, #72	; 0x48
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	3350      	adds	r3, #80	; 0x50
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	3301      	adds	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3af      	bcc.n	800214c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e044      	b.n	800227c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	3301      	adds	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d3b5      	bcc.n	80021f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	687e      	ldr	r6, [r7, #4]
 800228e:	466d      	mov	r5, sp
 8002290:	f106 0410 	add.w	r4, r6, #16
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a4:	1d33      	adds	r3, r6, #4
 80022a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f002 f9dd 	bl	8004668 <USB_DevInit>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e00d      	b.n	80022dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fa59 	bl	800578c <USB_DevDisconnect>

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_PCD_Start+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e020      	b.n	8002342 <HAL_PCD_Start+0x5e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	2b01      	cmp	r3, #1
 800230e:	d109      	bne.n	8002324 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f002 f92f 	bl	800458c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fa09 	bl	800574a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800234a:	b590      	push	{r4, r7, lr}
 800234c:	b08d      	sub	sp, #52	; 0x34
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fac7 	bl	80058f4 <USB_GetMode>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 839d 	bne.w	8002aa8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fa2b 	bl	80057ce <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8393 	beq.w	8002aa6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fa22 	bl	80057ce <USB_ReadInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d107      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f002 0202 	and.w	r2, r2, #2
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fa10 	bl	80057ce <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d161      	bne.n	800247c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0210 	bic.w	r2, r2, #16
 80023c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f003 020f 	and.w	r2, r3, #15
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	0c5b      	lsrs	r3, r3, #17
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d124      	bne.n	800243e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d035      	beq.n	800246c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800240a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	6a38      	ldr	r0, [r7, #32]
 8002414:	f003 f847 	bl	80054a6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002424:	441a      	add	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002436:	441a      	add	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	619a      	str	r2, [r3, #24]
 800243c:	e016      	b.n	800246c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	0c5b      	lsrs	r3, r3, #17
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	2b06      	cmp	r3, #6
 8002448:	d110      	bne.n	800246c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002450:	2208      	movs	r2, #8
 8002452:	4619      	mov	r1, r3
 8002454:	6a38      	ldr	r0, [r7, #32]
 8002456:	f003 f826 	bl	80054a6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002466:	441a      	add	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0210 	orr.w	r2, r2, #16
 800247a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f003 f9a4 	bl	80057ce <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002490:	d16e      	bne.n	8002570 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 f9aa 	bl	80057f4 <USB_ReadDevAllOutEpInterrupt>
 80024a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024a2:	e062      	b.n	800256a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d057      	beq.n	800255e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 f9cf 	bl	800585c <USB_ReadDevOutEPInterrupt>
 80024be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d6:	461a      	mov	r2, r3
 80024d8:	2301      	movs	r3, #1
 80024da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fdb0 	bl	8003044 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fa:	461a      	mov	r2, r3
 80024fc:	2308      	movs	r3, #8
 80024fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 feaa 	bl	800325c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251e:	461a      	mov	r2, r3
 8002520:	2310      	movs	r3, #16
 8002522:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	461a      	mov	r2, r3
 800253c:	2320      	movs	r3, #32
 800253e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002556:	461a      	mov	r2, r3
 8002558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3301      	adds	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d199      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 f92a 	bl	80057ce <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002584:	f040 80c0 	bne.w	8002708 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f003 f94b 	bl	8005828 <USB_ReadDevAllInEpInterrupt>
 8002592:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002598:	e0b2      	b.n	8002700 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80a7 	beq.w	80026f4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 f971 	bl	8005898 <USB_ReadDevInEPInterrupt>
 80025b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d057      	beq.n	8002672 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2201      	movs	r2, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025e2:	4013      	ands	r3, r2
 80025e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f2:	461a      	mov	r2, r3
 80025f4:	2301      	movs	r3, #1
 80025f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d132      	bne.n	8002666 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3348      	adds	r3, #72	; 0x48
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4403      	add	r3, r0
 8002620:	3344      	adds	r3, #68	; 0x44
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4419      	add	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4403      	add	r3, r0
 8002634:	3348      	adds	r3, #72	; 0x48
 8002636:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d113      	bne.n	8002666 <HAL_PCD_IRQHandler+0x31c>
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3350      	adds	r3, #80	; 0x50
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800265e:	461a      	mov	r2, r3
 8002660:	2101      	movs	r1, #1
 8002662:	f003 f979 	bl	8005958 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f005 f91a 	bl	80078a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	461a      	mov	r2, r3
 800268a:	2308      	movs	r3, #8
 800268c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a4:	461a      	mov	r2, r3
 80026a6:	2310      	movs	r3, #16
 80026a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c0:	461a      	mov	r2, r3
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026dc:	461a      	mov	r2, r3
 80026de:	2302      	movs	r3, #2
 80026e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fc1b 	bl	8002f2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	3301      	adds	r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	2b00      	cmp	r3, #0
 8002704:	f47f af49 	bne.w	800259a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 f85e 	bl	80057ce <USB_ReadInterrupts>
 8002712:	4603      	mov	r3, r0
 8002714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800271c:	d122      	bne.n	8002764 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002738:	2b01      	cmp	r3, #1
 800273a:	d108      	bne.n	800274e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002744:	2100      	movs	r1, #0
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fe26 	bl	8003398 <HAL_PCDEx_LPM_Callback>
 800274c:	e002      	b.n	8002754 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f005 f916 	bl	8007980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 f830 	bl	80057ce <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002778:	d112      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f005 f8d2 	bl	8007934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800279e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 f812 	bl	80057ce <USB_ReadInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b4:	f040 80c7 	bne.w	8002946 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2110      	movs	r1, #16
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 f8ac 	bl	8004930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027dc:	e056      	b.n	800288c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ea:	461a      	mov	r2, r3
 80027ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002802:	0151      	lsls	r1, r2, #5
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	440a      	add	r2, r1
 8002808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800280c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002810:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	0151      	lsls	r1, r2, #5
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	440a      	add	r2, r1
 8002828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800282c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002830:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283e:	461a      	mov	r2, r3
 8002840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002844:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002856:	0151      	lsls	r1, r2, #5
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	440a      	add	r2, r1
 800285c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002860:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002864:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002876:	0151      	lsls	r1, r2, #5
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	440a      	add	r2, r1
 800287c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002884:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	3301      	adds	r3, #1
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002892:	429a      	cmp	r2, r3
 8002894:	d3a3      	bcc.n	80027de <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c2:	f043 030b 	orr.w	r3, r3, #11
 80028c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d8:	f043 030b 	orr.w	r3, r3, #11
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	e015      	b.n	800290c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002906:	f043 030b 	orr.w	r3, r3, #11
 800290a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800291e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002930:	461a      	mov	r2, r3
 8002932:	f003 f811 	bl	8005958 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f002 ff3f 	bl	80057ce <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	d124      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 ffd5 	bl	8005910 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 f83d 	bl	80049ea <USB_GetDevSpeed>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681c      	ldr	r4, [r3, #0]
 800297c:	f001 f92c 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8002980:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	4620      	mov	r0, r4
 800298c:	f001 fd5c 	bl	8004448 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f004 ffb0 	bl	80078f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 ff0f 	bl	80057ce <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d10a      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f004 ff8d 	bl	80078da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f002 0208 	and.w	r2, r2, #8
 80029ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 fefa 	bl	80057ce <USB_ReadInterrupts>
 80029da:	4603      	mov	r3, r0
 80029dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e4:	d10f      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f004 ffe5 	bl	80079c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fedf 	bl	80057ce <USB_ReadInterrupts>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a1a:	d10f      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f004 ffb8 	bl	800799c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fec4 	bl	80057ce <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d10a      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f004 ffc6 	bl	80079e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f002 feae 	bl	80057ce <USB_ReadInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d115      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f004 ffb6 	bl	8007a00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	e000      	b.n	8002aa8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002aa6:	bf00      	nop
    }
  }
}
 8002aa8:	3734      	adds	r7, #52	; 0x34
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}

08002aae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_PCD_SetAddress+0x1a>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e013      	b.n	8002af0 <HAL_PCD_SetAddress+0x42>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 fe0c 	bl	80056fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	70fb      	strb	r3, [r7, #3]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	803b      	strh	r3, [r7, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da0f      	bge.n	8002b3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	3338      	adds	r3, #56	; 0x38
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	3304      	adds	r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	705a      	strb	r2, [r3, #1]
 8002b3c:	e00f      	b.n	8002b5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b6a:	883a      	ldrh	r2, [r7, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	78ba      	ldrb	r2, [r7, #2]
 8002b74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	785b      	ldrb	r3, [r3, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b88:	78bb      	ldrb	r3, [r7, #2]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d102      	bne.n	8002b94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_EP_Open+0xaa>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e00e      	b.n	8002bc0 <HAL_PCD_EP_Open+0xc8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68f9      	ldr	r1, [r7, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 ff3f 	bl	8004a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da0f      	bge.n	8002bfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	3338      	adds	r3, #56	; 0x38
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	705a      	strb	r2, [r3, #1]
 8002bfa:	e00f      	b.n	8002c1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f003 020f 	and.w	r2, r3, #15
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	3304      	adds	r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_PCD_EP_Close+0x6e>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e00e      	b.n	8002c54 <HAL_PCD_EP_Close+0x8c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 ff7d 	bl	8004b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d102      	bne.n	8002cb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6979      	ldr	r1, [r7, #20]
 8002cd0:	f002 fa58 	bl	8005184 <USB_EP0StartXfer>
 8002cd4:	e008      	b.n	8002ce8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6979      	ldr	r1, [r7, #20]
 8002ce4:	f002 f80a 	bl	8004cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d14:	681b      	ldr	r3, [r3, #0]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f003 020f 	and.w	r2, r3, #15
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	3338      	adds	r3, #56	; 0x38
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	3304      	adds	r3, #4
 8002d48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6979      	ldr	r1, [r7, #20]
 8002d94:	f002 f9f6 	bl	8005184 <USB_EP0StartXfer>
 8002d98:	e008      	b.n	8002dac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	6979      	ldr	r1, [r7, #20]
 8002da8:	f001 ffa8 	bl	8004cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d901      	bls.n	8002dd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e050      	b.n	8002e76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da0f      	bge.n	8002dfc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3338      	adds	r3, #56	; 0x38
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	705a      	strb	r2, [r3, #1]
 8002dfa:	e00d      	b.n	8002e18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3304      	adds	r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_PCD_EP_SetStall+0x82>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e01e      	b.n	8002e76 <HAL_PCD_EP_SetStall+0xc0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68f9      	ldr	r1, [r7, #12]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f002 fb85 	bl	8005556 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	b2d9      	uxtb	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e66:	461a      	mov	r2, r3
 8002e68:	f002 fd76 	bl	8005958 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d901      	bls.n	8002e9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e042      	b.n	8002f22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da0f      	bge.n	8002ec4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 020f 	and.w	r2, r3, #15
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	3338      	adds	r3, #56	; 0x38
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	705a      	strb	r2, [r3, #1]
 8002ec2:	e00f      	b.n	8002ee4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 020f 	and.w	r2, r3, #15
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	3304      	adds	r3, #4
 8002edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_EP_ClrStall+0x86>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e00e      	b.n	8002f22 <HAL_PCD_EP_ClrStall+0xa4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fb8d 	bl	8005632 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b08a      	sub	sp, #40	; 0x28
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	3338      	adds	r3, #56	; 0x38
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d901      	bls.n	8002f62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06c      	b.n	800303c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d902      	bls.n	8002f7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3303      	adds	r3, #3
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f86:	e02b      	b.n	8002fe0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d902      	bls.n	8002fa4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3303      	adds	r3, #3
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68d9      	ldr	r1, [r3, #12]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f002 fa31 	bl	800542a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	441a      	add	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d809      	bhi.n	800300a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d203      	bcs.n	800300a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1be      	bne.n	8002f88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	429a      	cmp	r2, r3
 8003014:	d811      	bhi.n	800303a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	2201      	movs	r2, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	43db      	mvns	r3, r3
 8003030:	6939      	ldr	r1, [r7, #16]
 8003032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003036:	4013      	ands	r3, r2
 8003038:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	333c      	adds	r3, #60	; 0x3c
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 80a0 	bne.w	80031bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d015      	beq.n	80030b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a72      	ldr	r2, [pc, #456]	; (8003254 <PCD_EP_OutXfrComplete_int+0x210>)
 800308a:	4293      	cmp	r3, r2
 800308c:	f240 80dd 	bls.w	800324a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80d7 	beq.w	800324a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a8:	461a      	mov	r2, r3
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	6093      	str	r3, [r2, #8]
 80030b0:	e0cb      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	2320      	movs	r3, #32
 80030cc:	6093      	str	r3, [r2, #8]
 80030ce:	e0bc      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 80b7 	bne.w	800324a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a5d      	ldr	r2, [pc, #372]	; (8003254 <PCD_EP_OutXfrComplete_int+0x210>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d90f      	bls.n	8003104 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	e0a2      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003116:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	0159      	lsls	r1, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	440b      	add	r3, r1
 8003120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800312a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800313e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4403      	add	r3, r0
 8003162:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4419      	add	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4403      	add	r3, r0
 8003178:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800317c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d114      	bne.n	80031ae <PCD_EP_OutXfrComplete_int+0x16a>
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d108      	bne.n	80031ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031a6:	461a      	mov	r2, r3
 80031a8:	2101      	movs	r1, #1
 80031aa:	f002 fbd5 	bl	8005958 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f004 fb5b 	bl	8007870 <HAL_PCD_DataOutStageCallback>
 80031ba:	e046      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a26      	ldr	r2, [pc, #152]	; (8003258 <PCD_EP_OutXfrComplete_int+0x214>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d124      	bne.n	800320e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	461a      	mov	r2, r3
 80031dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e0:	6093      	str	r3, [r2, #8]
 80031e2:	e032      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fa:	461a      	mov	r2, r3
 80031fc:	2320      	movs	r3, #32
 80031fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f004 fb32 	bl	8007870 <HAL_PCD_DataOutStageCallback>
 800320c:	e01d      	b.n	800324a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d114      	bne.n	800323e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d108      	bne.n	800323e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003236:	461a      	mov	r2, r3
 8003238:	2100      	movs	r1, #0
 800323a:	f002 fb8d 	bl	8005958 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f004 fb13 	bl	8007870 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	4f54300a 	.word	0x4f54300a
 8003258:	4f54310a 	.word	0x4f54310a

0800325c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	333c      	adds	r3, #60	; 0x3c
 8003274:	3304      	adds	r3, #4
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d90e      	bls.n	80032b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f004 facb 	bl	800784c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d90c      	bls.n	80032d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032d0:	461a      	mov	r2, r3
 80032d2:	2101      	movs	r1, #1
 80032d4:	f002 fb40 	bl	8005958 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	4f54300a 	.word	0x4f54300a

080032e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	70fb      	strb	r3, [r7, #3]
 80032f4:	4613      	mov	r3, r2
 80032f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003306:	883b      	ldrh	r3, [r7, #0]
 8003308:	0419      	lsls	r1, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	430a      	orrs	r2, r1
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
 8003314:	e028      	b.n	8003368 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4413      	add	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e00d      	b.n	8003346 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	3340      	adds	r3, #64	; 0x40
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	3301      	adds	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	3b01      	subs	r3, #1
 800334c:	429a      	cmp	r2, r3
 800334e:	d3ec      	bcc.n	800332a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003350:	883b      	ldrh	r3, [r7, #0]
 8003352:	0418      	lsls	r0, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	3b01      	subs	r3, #1
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	4302      	orrs	r2, r0
 8003360:	3340      	adds	r3, #64	; 0x40
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e264      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d075      	beq.n	80034ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ce:	4ba3      	ldr	r3, [pc, #652]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d00c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033da:	4ba0      	ldr	r3, [pc, #640]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d112      	bne.n	800340c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e6:	4b9d      	ldr	r3, [pc, #628]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f2:	d10b      	bne.n	800340c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	4b99      	ldr	r3, [pc, #612]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d05b      	beq.n	80034b8 <HAL_RCC_OscConfig+0x108>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d157      	bne.n	80034b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e23f      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003414:	d106      	bne.n	8003424 <HAL_RCC_OscConfig+0x74>
 8003416:	4b91      	ldr	r3, [pc, #580]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a90      	ldr	r2, [pc, #576]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e01d      	b.n	8003460 <HAL_RCC_OscConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x98>
 800342e:	4b8b      	ldr	r3, [pc, #556]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a8a      	ldr	r2, [pc, #552]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a87      	ldr	r2, [pc, #540]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0xb0>
 8003448:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a83      	ldr	r2, [pc, #524]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a80      	ldr	r2, [pc, #512]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800345a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fd fd94 	bl	8000f94 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003470:	f7fd fd90 	bl	8000f94 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e204      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0xc0>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd fd80 	bl	8000f94 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003498:	f7fd fd7c 	bl	8000f94 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1f0      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0xe8>
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d063      	beq.n	800358e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d2:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d11c      	bne.n	8003518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b5f      	ldr	r3, [pc, #380]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	4b5c      	ldr	r3, [pc, #368]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x152>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1c4      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b56      	ldr	r3, [pc, #344]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4952      	ldr	r1, [pc, #328]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	e03a      	b.n	800358e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_RCC_OscConfig+0x2b0>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fd fd35 	bl	8000f94 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352e:	f7fd fd31 	bl	8000f94 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e1a5      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4940      	ldr	r1, [pc, #256]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	e015      	b.n	800358e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_OscConfig+0x2b0>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd fd14 	bl	8000f94 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003570:	f7fd fd10 	bl	8000f94 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e184      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d030      	beq.n	80035fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a2:	4b30      	ldr	r3, [pc, #192]	; (8003664 <HAL_RCC_OscConfig+0x2b4>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fd fcf4 	bl	8000f94 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fd fcf0 	bl	8000f94 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e164      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x200>
 80035ce:	e015      	b.n	80035fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_OscConfig+0x2b4>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fd fcdd 	bl	8000f94 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035de:	f7fd fcd9 	bl	8000f94 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e14d      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a0 	beq.w	800374a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x2b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d121      	bne.n	800368a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_OscConfig+0x2b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_RCC_OscConfig+0x2b8>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fd fc9f 	bl	8000f94 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	e011      	b.n	800367e <HAL_RCC_OscConfig+0x2ce>
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	42470000 	.word	0x42470000
 8003664:	42470e80 	.word	0x42470e80
 8003668:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366c:	f7fd fc92 	bl	8000f94 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e106      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b85      	ldr	r3, [pc, #532]	; (8003894 <HAL_RCC_OscConfig+0x4e4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
 8003692:	4b81      	ldr	r3, [pc, #516]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a80      	ldr	r2, [pc, #512]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	e01c      	b.n	80036da <HAL_RCC_OscConfig+0x32a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x312>
 80036a8:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a7a      	ldr	r2, [pc, #488]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
 80036b4:	4b78      	ldr	r3, [pc, #480]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a77      	ldr	r2, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	e00b      	b.n	80036da <HAL_RCC_OscConfig+0x32a>
 80036c2:	4b75      	ldr	r3, [pc, #468]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a74      	ldr	r2, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	4b72      	ldr	r3, [pc, #456]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a71      	ldr	r2, [pc, #452]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d015      	beq.n	800370e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd fc57 	bl	8000f94 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fd fc53 	bl	8000f94 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0c5      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	4b65      	ldr	r3, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ee      	beq.n	80036ea <HAL_RCC_OscConfig+0x33a>
 800370c:	e014      	b.n	8003738 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fd fc41 	bl	8000f94 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fd fc3d 	bl	8000f94 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0af      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372c:	4b5a      	ldr	r3, [pc, #360]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4b56      	ldr	r3, [pc, #344]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a55      	ldr	r2, [pc, #340]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 809b 	beq.w	800388a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003754:	4b50      	ldr	r3, [pc, #320]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d05c      	beq.n	800381a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d141      	bne.n	80037ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b4c      	ldr	r3, [pc, #304]	; (800389c <HAL_RCC_OscConfig+0x4ec>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fd fc11 	bl	8000f94 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fd fc0d 	bl	8000f94 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e081      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003788:	4b43      	ldr	r3, [pc, #268]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	019b      	lsls	r3, r3, #6
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	061b      	lsls	r3, r3, #24
 80037b8:	4937      	ldr	r1, [pc, #220]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037be:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_RCC_OscConfig+0x4ec>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd fbe6 	bl	8000f94 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd fbe2 	bl	8000f94 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e056      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x41c>
 80037ea:	e04e      	b.n	800388a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_RCC_OscConfig+0x4ec>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fbcf 	bl	8000f94 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fd fbcb 	bl	8000f94 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e03f      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x44a>
 8003818:	e037      	b.n	800388a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e032      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003826:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_RCC_OscConfig+0x4e8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d028      	beq.n	8003886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d121      	bne.n	8003886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d11a      	bne.n	8003886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003856:	4013      	ands	r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385e:	4293      	cmp	r3, r2
 8003860:	d111      	bne.n	8003886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	3b01      	subs	r3, #1
 8003870:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d107      	bne.n	8003886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40007000 	.word	0x40007000
 8003898:	40023800 	.word	0x40023800
 800389c:	42470060 	.word	0x42470060

080038a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0cc      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b4:	4b68      	ldr	r3, [pc, #416]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d90c      	bls.n	80038dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0b8      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d020      	beq.n	800392a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f4:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a58      	ldr	r2, [pc, #352]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800390c:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a52      	ldr	r2, [pc, #328]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003918:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	494d      	ldr	r1, [pc, #308]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d044      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d119      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e07f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d003      	beq.n	800395e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395a:	2b03      	cmp	r3, #3
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e067      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f023 0203 	bic.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4934      	ldr	r1, [pc, #208]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003990:	f7fd fb00 	bl	8000f94 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	e00a      	b.n	80039ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003998:	f7fd fafc 	bl	8000f94 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e04f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 020c 	and.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1eb      	bne.n	8003998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d20c      	bcs.n	80039e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e032      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4916      	ldr	r1, [pc, #88]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	490e      	ldr	r1, [pc, #56]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a26:	f000 f821 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	490a      	ldr	r1, [pc, #40]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	5ccb      	ldrb	r3, [r1, r3]
 8003a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3e:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fa60 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023c00 	.word	0x40023c00
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	080087c0 	.word	0x080087c0
 8003a64:	20000000 	.word	0x20000000
 8003a68:	20000004 	.word	0x20000004

08003a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a6c:	b5b0      	push	{r4, r5, r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a72:	2100      	movs	r1, #0
 8003a74:	6079      	str	r1, [r7, #4]
 8003a76:	2100      	movs	r1, #0
 8003a78:	60f9      	str	r1, [r7, #12]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a7e:	2100      	movs	r1, #0
 8003a80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a82:	4952      	ldr	r1, [pc, #328]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	f001 010c 	and.w	r1, r1, #12
 8003a8a:	2908      	cmp	r1, #8
 8003a8c:	d00d      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x3e>
 8003a8e:	2908      	cmp	r1, #8
 8003a90:	f200 8094 	bhi.w	8003bbc <HAL_RCC_GetSysClockFreq+0x150>
 8003a94:	2900      	cmp	r1, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x32>
 8003a98:	2904      	cmp	r1, #4
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x38>
 8003a9c:	e08e      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003aa0:	60bb      	str	r3, [r7, #8]
       break;
 8003aa2:	e08e      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003aa6:	60bb      	str	r3, [r7, #8]
      break;
 8003aa8:	e08b      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aaa:	4948      	ldr	r1, [pc, #288]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8003aac:	6849      	ldr	r1, [r1, #4]
 8003aae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003ab2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab4:	4945      	ldr	r1, [pc, #276]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8003ab6:	6849      	ldr	r1, [r1, #4]
 8003ab8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003abc:	2900      	cmp	r1, #0
 8003abe:	d024      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac0:	4942      	ldr	r1, [pc, #264]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac2:	6849      	ldr	r1, [r1, #4]
 8003ac4:	0989      	lsrs	r1, r1, #6
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ad0:	f04f 0500 	mov.w	r5, #0
 8003ad4:	ea00 0204 	and.w	r2, r0, r4
 8003ad8:	ea01 0305 	and.w	r3, r1, r5
 8003adc:	493d      	ldr	r1, [pc, #244]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ade:	fb01 f003 	mul.w	r0, r1, r3
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	fb01 f102 	mul.w	r1, r1, r2
 8003ae8:	1844      	adds	r4, r0, r1
 8003aea:	493a      	ldr	r1, [pc, #232]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003aec:	fba2 0101 	umull	r0, r1, r2, r1
 8003af0:	1863      	adds	r3, r4, r1
 8003af2:	4619      	mov	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	f7fc fbc8 	bl	8000290 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4613      	mov	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e04a      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	461a      	mov	r2, r3
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	ea02 0400 	and.w	r4, r2, r0
 8003b22:	ea03 0501 	and.w	r5, r3, r1
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	014b      	lsls	r3, r1, #5
 8003b34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b38:	0142      	lsls	r2, r0, #5
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	1b00      	subs	r0, r0, r4
 8003b40:	eb61 0105 	sbc.w	r1, r1, r5
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	018b      	lsls	r3, r1, #6
 8003b4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b52:	0182      	lsls	r2, r0, #6
 8003b54:	1a12      	subs	r2, r2, r0
 8003b56:	eb63 0301 	sbc.w	r3, r3, r1
 8003b5a:	f04f 0000 	mov.w	r0, #0
 8003b5e:	f04f 0100 	mov.w	r1, #0
 8003b62:	00d9      	lsls	r1, r3, #3
 8003b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b68:	00d0      	lsls	r0, r2, #3
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	1912      	adds	r2, r2, r4
 8003b70:	eb45 0303 	adc.w	r3, r5, r3
 8003b74:	f04f 0000 	mov.w	r0, #0
 8003b78:	f04f 0100 	mov.w	r1, #0
 8003b7c:	0299      	lsls	r1, r3, #10
 8003b7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b82:	0290      	lsls	r0, r2, #10
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	f7fc fb7c 	bl	8000290 <__aeabi_uldivmod>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	60bb      	str	r3, [r7, #8]
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003bbe:	60bb      	str	r3, [r7, #8]
      break;
 8003bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdb0      	pop	{r4, r5, r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	017d7840 	.word	0x017d7840

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000000 	.word	0x20000000

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	080087d0 	.word	0x080087d0

08003c18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e097      	b.n	8003d5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fd f8c7 	bl	8000dd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f000 fa61 	bl	8004134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	4313      	orrs	r3, r2
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cb8:	f023 030c 	bic.w	r3, r3, #12
 8003cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	011a      	lsls	r2, r3, #4
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	031b      	lsls	r3, r3, #12
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d110      	bne.n	8003db6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d9a:	7b7b      	ldrb	r3, [r7, #13]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d001      	beq.n	8003da4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e089      	b.n	8003eb8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db4:	e031      	b.n	8003e1a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d110      	bne.n	8003dde <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dbc:	7bbb      	ldrb	r3, [r7, #14]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d102      	bne.n	8003dc8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dc2:	7b3b      	ldrb	r3, [r7, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d001      	beq.n	8003dcc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e075      	b.n	8003eb8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ddc:	e01d      	b.n	8003e1a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d108      	bne.n	8003df6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003de4:	7bbb      	ldrb	r3, [r7, #14]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dea:	7b7b      	ldrb	r3, [r7, #13]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d102      	bne.n	8003df6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003df0:	7b3b      	ldrb	r3, [r7, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d001      	beq.n	8003dfa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e05e      	b.n	8003eb8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d010      	beq.n	8003e48 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003e26:	e01f      	b.n	8003e68 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f9ff 	bl	8004234 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0202 	orr.w	r2, r2, #2
 8003e44:	60da      	str	r2, [r3, #12]
      break;
 8003e46:	e02e      	b.n	8003ea6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	2104      	movs	r1, #4
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f9ef 	bl	8004234 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0204 	orr.w	r2, r2, #4
 8003e64:	60da      	str	r2, [r3, #12]
      break;
 8003e66:	e01e      	b.n	8003ea6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f9df 	bl	8004234 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f9d8 	bl	8004234 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0202 	orr.w	r2, r2, #2
 8003e92:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0204 	orr.w	r2, r2, #4
 8003ea2:	60da      	str	r2, [r3, #12]
      break;
 8003ea4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d122      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d11b      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0202 	mvn.w	r2, #2
 8003eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8f8 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8ea 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f8fb 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d122      	bne.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d11b      	bne.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0204 	mvn.w	r2, #4
 8003f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8ce 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f8c0 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8d1 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d122      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0208 	mvn.w	r2, #8
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8a4 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f896 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f8a7 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d122      	bne.n	8004018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d11b      	bne.n	8004018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0210 	mvn.w	r2, #16
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2208      	movs	r2, #8
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f87a 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f86c 	bl	80040e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f87d 	bl	800410c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10e      	bne.n	8004044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0201 	mvn.w	r2, #1
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f846 	bl	80040d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d10e      	bne.n	8004070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405c:	2b80      	cmp	r3, #128	; 0x80
 800405e:	d107      	bne.n	8004070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f980 	bl	8004370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f842 	bl	8004120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0220 	mvn.w	r2, #32
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f94a 	bl	800435c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a34      	ldr	r2, [pc, #208]	; (8004218 <TIM_Base_SetConfig+0xe4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a31      	ldr	r2, [pc, #196]	; (800421c <TIM_Base_SetConfig+0xe8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a30      	ldr	r2, [pc, #192]	; (8004220 <TIM_Base_SetConfig+0xec>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <TIM_Base_SetConfig+0xf0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <TIM_Base_SetConfig+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01b      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d017      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_Base_SetConfig+0xe8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_Base_SetConfig+0xec>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00f      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <TIM_Base_SetConfig+0xf0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <TIM_Base_SetConfig+0xf4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1e      	ldr	r2, [pc, #120]	; (800422c <TIM_Base_SetConfig+0xf8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <TIM_Base_SetConfig+0xfc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a08      	ldr	r2, [pc, #32]	; (8004218 <TIM_Base_SetConfig+0xe4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2201      	movs	r2, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004294:	2302      	movs	r3, #2
 8004296:	e050      	b.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d013      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a16      	ldr	r2, [pc, #88]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a13      	ldr	r2, [pc, #76]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40014000 	.word	0x40014000

0800435c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004384:	b084      	sub	sp, #16
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	f107 001c 	add.w	r0, r7, #28
 8004392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	2b01      	cmp	r3, #1
 800439a:	d122      	bne.n	80043e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 fb1c 	bl	8005a14 <USB_CoreReset>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e01a      	b.n	8004418 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 fb10 	bl	8005a14 <USB_CoreReset>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
 800440a:	e005      	b.n	8004418 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10b      	bne.n	8004436 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f043 0206 	orr.w	r2, r3, #6
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004442:	b004      	add	sp, #16
 8004444:	4770      	bx	lr
	...

08004448 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d165      	bne.n	8004528 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a41      	ldr	r2, [pc, #260]	; (8004564 <USB_SetTurnaroundTime+0x11c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d906      	bls.n	8004472 <USB_SetTurnaroundTime+0x2a>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a40      	ldr	r2, [pc, #256]	; (8004568 <USB_SetTurnaroundTime+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d202      	bcs.n	8004472 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800446c:	230f      	movs	r3, #15
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e062      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <USB_SetTurnaroundTime+0x120>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d306      	bcc.n	8004488 <USB_SetTurnaroundTime+0x40>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a3b      	ldr	r2, [pc, #236]	; (800456c <USB_SetTurnaroundTime+0x124>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d202      	bcs.n	8004488 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004482:	230e      	movs	r3, #14
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e057      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a38      	ldr	r2, [pc, #224]	; (800456c <USB_SetTurnaroundTime+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d306      	bcc.n	800449e <USB_SetTurnaroundTime+0x56>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a37      	ldr	r2, [pc, #220]	; (8004570 <USB_SetTurnaroundTime+0x128>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d202      	bcs.n	800449e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004498:	230d      	movs	r3, #13
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e04c      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a33      	ldr	r2, [pc, #204]	; (8004570 <USB_SetTurnaroundTime+0x128>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d306      	bcc.n	80044b4 <USB_SetTurnaroundTime+0x6c>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a32      	ldr	r2, [pc, #200]	; (8004574 <USB_SetTurnaroundTime+0x12c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d802      	bhi.n	80044b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044ae:	230c      	movs	r3, #12
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e041      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <USB_SetTurnaroundTime+0x12c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d906      	bls.n	80044ca <USB_SetTurnaroundTime+0x82>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <USB_SetTurnaroundTime+0x130>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d802      	bhi.n	80044ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044c4:	230b      	movs	r3, #11
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e036      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <USB_SetTurnaroundTime+0x130>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d906      	bls.n	80044e0 <USB_SetTurnaroundTime+0x98>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <USB_SetTurnaroundTime+0x134>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d802      	bhi.n	80044e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044da:	230a      	movs	r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e02b      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <USB_SetTurnaroundTime+0x134>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d906      	bls.n	80044f6 <USB_SetTurnaroundTime+0xae>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4a25      	ldr	r2, [pc, #148]	; (8004580 <USB_SetTurnaroundTime+0x138>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d202      	bcs.n	80044f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044f0:	2309      	movs	r3, #9
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e020      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <USB_SetTurnaroundTime+0x138>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d306      	bcc.n	800450c <USB_SetTurnaroundTime+0xc4>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <USB_SetTurnaroundTime+0x13c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d802      	bhi.n	800450c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004506:	2308      	movs	r3, #8
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e015      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <USB_SetTurnaroundTime+0x13c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d906      	bls.n	8004522 <USB_SetTurnaroundTime+0xda>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <USB_SetTurnaroundTime+0x140>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d202      	bcs.n	8004522 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800451c:	2307      	movs	r3, #7
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e00a      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004522:	2306      	movs	r3, #6
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e007      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800452e:	2309      	movs	r3, #9
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e001      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004534:	2309      	movs	r3, #9
 8004536:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	00d8acbf 	.word	0x00d8acbf
 8004568:	00e4e1c0 	.word	0x00e4e1c0
 800456c:	00f42400 	.word	0x00f42400
 8004570:	01067380 	.word	0x01067380
 8004574:	011a499f 	.word	0x011a499f
 8004578:	01312cff 	.word	0x01312cff
 800457c:	014ca43f 	.word	0x014ca43f
 8004580:	016e3600 	.word	0x016e3600
 8004584:	01a6ab1f 	.word	0x01a6ab1f
 8004588:	01e84800 	.word	0x01e84800

0800458c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f043 0201 	orr.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d115      	bne.n	800461e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fc fcd4 	bl	8000fac <HAL_Delay>
      ms++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 f972 	bl	80058f4 <USB_GetMode>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d01e      	beq.n	8004654 <USB_SetCurrentMode+0x84>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b31      	cmp	r3, #49	; 0x31
 800461a:	d9f0      	bls.n	80045fe <USB_SetCurrentMode+0x2e>
 800461c:	e01a      	b.n	8004654 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d115      	bne.n	8004650 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004630:	2001      	movs	r0, #1
 8004632:	f7fc fcbb 	bl	8000fac <HAL_Delay>
      ms++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 f959 	bl	80058f4 <USB_GetMode>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <USB_SetCurrentMode+0x84>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b31      	cmp	r3, #49	; 0x31
 800464c:	d9f0      	bls.n	8004630 <USB_SetCurrentMode+0x60>
 800464e:	e001      	b.n	8004654 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e005      	b.n	8004660 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b32      	cmp	r3, #50	; 0x32
 8004658:	d101      	bne.n	800465e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004668:	b084      	sub	sp, #16
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e009      	b.n	800469c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3340      	adds	r3, #64	; 0x40
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3301      	adds	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0e      	cmp	r3, #14
 80046a0:	d9f2      	bls.n	8004688 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d11c      	bne.n	80046e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
 80046e0:	e00b      	b.n	80046fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470c:	4619      	mov	r1, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004714:	461a      	mov	r2, r3
 8004716:	680b      	ldr	r3, [r1, #0]
 8004718:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10c      	bne.n	800473a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004726:	2100      	movs	r1, #0
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f945 	bl	80049b8 <USB_SetDevSpeed>
 800472e:	e008      	b.n	8004742 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004730:	2101      	movs	r1, #1
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f940 	bl	80049b8 <USB_SetDevSpeed>
 8004738:	e003      	b.n	8004742 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800473a:	2103      	movs	r1, #3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f93b 	bl	80049b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004742:	2110      	movs	r1, #16
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8f3 	bl	8004930 <USB_FlushTxFifo>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f90f 	bl	8004978 <USB_FlushRxFifo>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	461a      	mov	r2, r3
 800476c:	2300      	movs	r3, #0
 800476e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	461a      	mov	r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e043      	b.n	8004816 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a4:	d118      	bne.n	80047d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	461a      	mov	r2, r3
 80047ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e013      	b.n	80047ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	461a      	mov	r2, r3
 80047d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e008      	b.n	80047ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e4:	461a      	mov	r2, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	461a      	mov	r2, r3
 80047f8:	2300      	movs	r3, #0
 80047fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	461a      	mov	r2, r3
 800480a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800480e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3301      	adds	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	429a      	cmp	r2, r3
 800481c:	d3b7      	bcc.n	800478e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e043      	b.n	80048ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800483a:	d118      	bne.n	800486e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	461a      	mov	r2, r3
 8004850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e013      	b.n	8004880 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	461a      	mov	r2, r3
 8004866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	e008      	b.n	8004880 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	461a      	mov	r2, r3
 800487c:	2300      	movs	r3, #0
 800487e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	461a      	mov	r2, r3
 800488e:	2300      	movs	r3, #0
 8004890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3301      	adds	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d3b7      	bcc.n	8004824 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f043 0210 	orr.w	r2, r3, #16
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <USB_DevInit+0x2c4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f043 0208 	orr.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004928:	b004      	add	sp, #16
 800492a:	4770      	bx	lr
 800492c:	803c3800 	.word	0x803c3800

08004930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	4a08      	ldr	r2, [pc, #32]	; (8004974 <USB_FlushTxFifo+0x44>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e006      	b.n	8004968 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d0f1      	beq.n	800494a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	00030d40 	.word	0x00030d40

08004978 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2210      	movs	r2, #16
 8004988:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <USB_FlushRxFifo+0x3c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e006      	b.n	80049a8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d0f1      	beq.n	800498a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	00030d40 	.word	0x00030d40

080049b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]
 8004a0e:	e00a      	b.n	8004a26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d002      	beq.n	8004a1c <USB_GetDevSpeed+0x32>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b06      	cmp	r3, #6
 8004a1a:	d102      	bne.n	8004a22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	75fb      	strb	r3, [r7, #23]
 8004a20:	e001      	b.n	8004a26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a22:	230f      	movs	r3, #15
 8004a24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d13a      	bne.n	8004ac6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d155      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	78db      	ldrb	r3, [r3, #3]
 8004aa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	059b      	lsls	r3, r3, #22
 8004aaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aac:	4313      	orrs	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e036      	b.n	8004b34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11a      	bne.n	8004b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	78db      	ldrb	r3, [r3, #3]
 8004b18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d161      	bne.n	8004c24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b76:	d11f      	bne.n	8004bb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	2101      	movs	r1, #1
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd8:	4013      	ands	r3, r2
 8004bda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0159      	lsls	r1, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <USB_DeactivateEndpoint+0x1b0>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
 8004c22:	e060      	b.n	8004ce6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c3a:	d11f      	bne.n	8004c7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	43db      	mvns	r3, r3
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <USB_DeactivateEndpoint+0x1b4>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	ec337800 	.word	0xec337800
 8004cf8:	eff37800 	.word	0xeff37800

08004cfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 815c 	bne.w	8004fd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d132      	bne.n	8004d8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	0cdb      	lsrs	r3, r3, #19
 8004d86:	04db      	lsls	r3, r3, #19
 8004d88:	6113      	str	r3, [r2, #16]
 8004d8a:	e074      	b.n	8004e76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da6:	0cdb      	lsrs	r3, r3, #19
 8004da8:	04db      	lsls	r3, r3, #19
 8004daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6959      	ldr	r1, [r3, #20]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	440b      	add	r3, r1
 8004de8:	1e59      	subs	r1, r3, #1
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004df4:	4b9d      	ldr	r3, [pc, #628]	; (800506c <USB_EPStartXfer+0x370>)
 8004df6:	400b      	ands	r3, r1
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	0148      	lsls	r0, r1, #5
 8004dfc:	69f9      	ldr	r1, [r7, #28]
 8004dfe:	4401      	add	r1, r0
 8004e00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1e:	69b9      	ldr	r1, [r7, #24]
 8004e20:	0148      	lsls	r0, r1, #5
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	4401      	add	r1, r0
 8004e26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d11f      	bne.n	8004e76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d14b      	bne.n	8004f14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	78db      	ldrb	r3, [r3, #3]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d128      	bne.n	8004ef2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e00f      	b.n	8004ef2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e12f      	b.n	8005174 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	78db      	ldrb	r3, [r3, #3]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d015      	beq.n	8004f68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8117 	beq.w	8005174 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	2101      	movs	r1, #1
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	69f9      	ldr	r1, [r7, #28]
 8004f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f62:	4313      	orrs	r3, r2
 8004f64:	634b      	str	r3, [r1, #52]	; 0x34
 8004f66:	e105      	b.n	8005174 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d110      	bne.n	8004f9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e00f      	b.n	8004fba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	68d9      	ldr	r1, [r3, #12]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	b298      	uxth	r0, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4603      	mov	r3, r0
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fa2b 	bl	800542a <USB_WritePacket>
 8004fd4:	e0ce      	b.n	8005174 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff0:	0cdb      	lsrs	r3, r3, #19
 8004ff2:	04db      	lsls	r3, r3, #19
 8004ff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005018:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d126      	bne.n	8005070 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	0148      	lsls	r0, r1, #5
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	4401      	add	r1, r0
 8005040:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005044:	4313      	orrs	r3, r2
 8005046:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005066:	6113      	str	r3, [r2, #16]
 8005068:	e036      	b.n	80050d8 <USB_EPStartXfer+0x3dc>
 800506a:	bf00      	nop
 800506c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4413      	add	r3, r2
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	8afb      	ldrh	r3, [r7, #22]
 8005096:	04d9      	lsls	r1, r3, #19
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <USB_EPStartXfer+0x484>)
 800509a:	400b      	ands	r3, r1
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	0148      	lsls	r0, r1, #5
 80050a0:	69f9      	ldr	r1, [r7, #28]
 80050a2:	4401      	add	r1, r0
 80050a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050a8:	4313      	orrs	r3, r2
 80050aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	8af9      	ldrh	r1, [r7, #22]
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c8:	69b9      	ldr	r1, [r7, #24]
 80050ca:	0148      	lsls	r0, r1, #5
 80050cc:	69f9      	ldr	r1, [r7, #28]
 80050ce:	4401      	add	r1, r0
 80050d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050d4:	4313      	orrs	r3, r2
 80050d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10d      	bne.n	80050fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	460a      	mov	r2, r1
 80050f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	78db      	ldrb	r3, [r3, #3]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d128      	bne.n	8005154 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d110      	bne.n	8005134 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e00f      	b.n	8005154 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005152:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	1ff80000 	.word	0x1ff80000

08005184 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 80cd 	bne.w	8005340 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d132      	bne.n	8005214 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	0cdb      	lsrs	r3, r3, #19
 800520e:	04db      	lsls	r3, r3, #19
 8005210:	6113      	str	r3, [r2, #16]
 8005212:	e04e      	b.n	80052b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	0cdb      	lsrs	r3, r3, #19
 8005230:	04db      	lsls	r3, r3, #19
 8005232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005252:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005256:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	695a      	ldr	r2, [r3, #20]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d903      	bls.n	800526c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	440a      	add	r2, r1
 8005282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800528a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a2:	6939      	ldr	r1, [r7, #16]
 80052a4:	0148      	lsls	r0, r1, #5
 80052a6:	6979      	ldr	r1, [r7, #20]
 80052a8:	4401      	add	r1, r0
 80052aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052ae:	4313      	orrs	r3, r2
 80052b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d11e      	bne.n	80052f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e092      	b.n	800541c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005310:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005314:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d07e      	beq.n	800541c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	2101      	movs	r1, #1
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533a:	4313      	orrs	r3, r2
 800533c:	634b      	str	r3, [r1, #52]	; 0x34
 800533e:	e06d      	b.n	800541c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535a:	0cdb      	lsrs	r3, r3, #19
 800535c:	04db      	lsls	r3, r3, #19
 800535e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800537e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005382:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	0148      	lsls	r0, r1, #5
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	4401      	add	r1, r0
 80053d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053d6:	4313      	orrs	r3, r2
 80053d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10d      	bne.n	80053fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	68d9      	ldr	r1, [r3, #12]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	460a      	mov	r2, r1
 80053fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800541a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800542a:	b480      	push	{r7}
 800542c:	b089      	sub	sp, #36	; 0x24
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	4611      	mov	r1, r2
 8005436:	461a      	mov	r2, r3
 8005438:	460b      	mov	r3, r1
 800543a:	71fb      	strb	r3, [r7, #7]
 800543c:	4613      	mov	r3, r2
 800543e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005448:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d123      	bne.n	8005498 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005450:	88bb      	ldrh	r3, [r7, #4]
 8005452:	3303      	adds	r3, #3
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e018      	b.n	8005490 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	031a      	lsls	r2, r3, #12
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546a:	461a      	mov	r2, r3
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	3301      	adds	r3, #1
 8005476:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	3301      	adds	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3301      	adds	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	3301      	adds	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3301      	adds	r3, #1
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	429a      	cmp	r2, r3
 8005496:	d3e2      	bcc.n	800545e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3724      	adds	r7, #36	; 0x24
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b08b      	sub	sp, #44	; 0x2c
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	4613      	mov	r3, r2
 80054b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	e014      	b.n	80054fc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	3301      	adds	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	3301      	adds	r3, #1
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	3301      	adds	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	3301      	adds	r3, #1
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	3301      	adds	r3, #1
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	429a      	cmp	r2, r3
 8005502:	d3e6      	bcc.n	80054d2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005504:	8bfb      	ldrh	r3, [r7, #30]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01e      	beq.n	8005548 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005514:	461a      	mov	r2, r3
 8005516:	f107 0310 	add.w	r3, r7, #16
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	b2da      	uxtb	r2, r3
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	701a      	strb	r2, [r3, #0]
      i++;
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	3301      	adds	r3, #1
 8005534:	623b      	str	r3, [r7, #32]
      pDest++;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	3301      	adds	r3, #1
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800553c:	8bfb      	ldrh	r3, [r7, #30]
 800553e:	3b01      	subs	r3, #1
 8005540:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005542:	8bfb      	ldrh	r3, [r7, #30]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ea      	bne.n	800551e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800554a:	4618      	mov	r0, r3
 800554c:	372c      	adds	r7, #44	; 0x2c
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d12c      	bne.n	80055cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	db12      	blt.n	80055aa <USB_EPSetStall+0x54>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00f      	beq.n	80055aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e02b      	b.n	8005624 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	db12      	blt.n	8005604 <USB_EPSetStall+0xae>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00f      	beq.n	8005604 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005602:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	440a      	add	r2, r1
 800561a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d128      	bne.n	80056a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800566c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	78db      	ldrb	r3, [r3, #3]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d003      	beq.n	800567e <USB_EPClearStall+0x4c>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	78db      	ldrb	r3, [r3, #3]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d138      	bne.n	80056f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e027      	b.n	80056f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	78db      	ldrb	r3, [r3, #3]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d003      	beq.n	80056d0 <USB_EPClearStall+0x9e>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	78db      	ldrb	r3, [r3, #3]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d10f      	bne.n	80056f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005720:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005764:	f023 0303 	bic.w	r3, r3, #3
 8005768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005778:	f023 0302 	bic.w	r3, r3, #2
 800577c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ba:	f043 0302 	orr.w	r3, r3, #2
 80057be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4013      	ands	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	0c1b      	lsrs	r3, r3, #16
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	b29b      	uxth	r3, r3
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800588a:	68bb      	ldr	r3, [r7, #8]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	01db      	lsls	r3, r3, #7
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058e6:	68bb      	ldr	r3, [r7, #8]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0301 	and.w	r3, r3, #1
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800592e:	f023 0307 	bic.w	r3, r3, #7
 8005932:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005946:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	460b      	mov	r3, r1
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	333c      	adds	r3, #60	; 0x3c
 800596e:	3304      	adds	r3, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <USB_EP0_OutStart+0xb8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d90a      	bls.n	8005992 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598c:	d101      	bne.n	8005992 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e037      	b.n	8005a02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	461a      	mov	r2, r3
 800599a:	2300      	movs	r3, #0
 800599c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c0:	f043 0318 	orr.w	r3, r3, #24
 80059c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d10f      	bne.n	8005a00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	4f54300a 	.word	0x4f54300a

08005a14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <USB_CoreReset+0x60>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e01a      	b.n	8005a66 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	daf3      	bge.n	8005a20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f043 0201 	orr.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <USB_CoreReset+0x60>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e006      	b.n	8005a66 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d0f1      	beq.n	8005a48 <USB_CoreReset+0x34>

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	00030d40 	.word	0x00030d40

08005a78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a88:	f002 f952 	bl	8007d30 <USBD_static_malloc>
 8005a8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e066      	b.n	8005b6e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7c1b      	ldrb	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d119      	bne.n	8005ae4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	2181      	movs	r1, #129	; 0x81
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f002 f816 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ac8:	2202      	movs	r2, #2
 8005aca:	2101      	movs	r1, #1
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f002 f80c 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2210      	movs	r2, #16
 8005ade:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005ae2:	e016      	b.n	8005b12 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	2181      	movs	r1, #129	; 0x81
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 fffd 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	2202      	movs	r2, #2
 8005afa:	2101      	movs	r1, #1
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fff4 	bl	8007aea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b12:	2308      	movs	r3, #8
 8005b14:	2203      	movs	r2, #3
 8005b16:	2182      	movs	r1, #130	; 0x82
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 ffe6 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7c1b      	ldrb	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b52:	2101      	movs	r1, #1
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 f8b7 	bl	8007cc8 <USBD_LL_PrepareReceive>
 8005b5a:	e007      	b.n	8005b6c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b62:	2340      	movs	r3, #64	; 0x40
 8005b64:	2101      	movs	r1, #1
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f002 f8ae 	bl	8007cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b82:	2181      	movs	r1, #129	; 0x81
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 ffd6 	bl	8007b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b90:	2101      	movs	r1, #1
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 ffcf 	bl	8007b36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ba0:	2182      	movs	r1, #130	; 0x82
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 ffc7 	bl	8007b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00e      	beq.n	8005be0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f002 f8ba 	bl	8007d4c <USBD_static_free>
    pdev->pClassData = NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e0af      	b.n	8005d74 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d03f      	beq.n	8005ca0 <USBD_CDC_Setup+0xb4>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	f040 809f 	bne.w	8005d64 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	88db      	ldrh	r3, [r3, #6]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02e      	beq.n	8005c8c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b25b      	sxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da16      	bge.n	8005c66 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005c44:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	88d2      	ldrh	r2, [r2, #6]
 8005c4a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	88db      	ldrh	r3, [r3, #6]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	bf28      	it	cs
 8005c54:	2307      	movcs	r3, #7
 8005c56:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	89fa      	ldrh	r2, [r7, #14]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 fb19 	bl	8007296 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005c64:	e085      	b.n	8005d72 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	785a      	ldrb	r2, [r3, #1]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	88db      	ldrh	r3, [r3, #6]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c7c:	6939      	ldr	r1, [r7, #16]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	88db      	ldrh	r3, [r3, #6]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fb32 	bl	80072ee <USBD_CtlPrepareRx>
      break;
 8005c8a:	e072      	b.n	8005d72 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	7850      	ldrb	r0, [r2, #1]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	4798      	blx	r3
      break;
 8005c9e:	e068      	b.n	8005d72 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b0b      	cmp	r3, #11
 8005ca6:	d852      	bhi.n	8005d4e <USBD_CDC_Setup+0x162>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <USBD_CDC_Setup+0xc4>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005ce1 	.word	0x08005ce1
 8005cb4:	08005d5d 	.word	0x08005d5d
 8005cb8:	08005d4f 	.word	0x08005d4f
 8005cbc:	08005d4f 	.word	0x08005d4f
 8005cc0:	08005d4f 	.word	0x08005d4f
 8005cc4:	08005d4f 	.word	0x08005d4f
 8005cc8:	08005d4f 	.word	0x08005d4f
 8005ccc:	08005d4f 	.word	0x08005d4f
 8005cd0:	08005d4f 	.word	0x08005d4f
 8005cd4:	08005d4f 	.word	0x08005d4f
 8005cd8:	08005d0b 	.word	0x08005d0b
 8005cdc:	08005d35 	.word	0x08005d35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d107      	bne.n	8005cfc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cec:	f107 030a 	add.w	r3, r7, #10
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 face 	bl	8007296 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cfa:	e032      	b.n	8005d62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f001 fa58 	bl	80071b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	75fb      	strb	r3, [r7, #23]
          break;
 8005d08:	e02b      	b.n	8005d62 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d107      	bne.n	8005d26 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d16:	f107 030d 	add.w	r3, r7, #13
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f001 fab9 	bl	8007296 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d24:	e01d      	b.n	8005d62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 fa43 	bl	80071b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	75fb      	strb	r3, [r7, #23]
          break;
 8005d32:	e016      	b.n	8005d62 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d00f      	beq.n	8005d60 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fa36 	bl	80071b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d4c:	e008      	b.n	8005d60 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fa2f 	bl	80071b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d56:	2303      	movs	r3, #3
 8005d58:	75fb      	strb	r3, [r7, #23]
          break;
 8005d5a:	e002      	b.n	8005d62 <USBD_CDC_Setup+0x176>
          break;
 8005d5c:	bf00      	nop
 8005d5e:	e008      	b.n	8005d72 <USBD_CDC_Setup+0x186>
          break;
 8005d60:	bf00      	nop
      }
      break;
 8005d62:	e006      	b.n	8005d72 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 fa24 	bl	80071b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e04f      	b.n	8005e3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3318      	adds	r3, #24
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d029      	beq.n	8005e10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	3318      	adds	r3, #24
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	78f9      	ldrb	r1, [r7, #3]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	1a5b      	subs	r3, r3, r1
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4403      	add	r3, r0
 8005ddc:	3344      	adds	r3, #68	; 0x44
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005de4:	fb03 f301 	mul.w	r3, r3, r1
 8005de8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d110      	bne.n	8005e10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3318      	adds	r3, #24
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e02:	78f9      	ldrb	r1, [r7, #3]
 8005e04:	2300      	movs	r3, #0
 8005e06:	2200      	movs	r2, #0
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 ff3c 	bl	8007c86 <USBD_LL_Transmit>
 8005e0e:	e015      	b.n	8005e3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e38:	78fa      	ldrb	r2, [r7, #3]
 8005e3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e015      	b.n	8005e94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 ff4c 	bl	8007d0a <USBD_LL_GetRxDataSize>
 8005e72:	4602      	mov	r2, r0
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e01b      	b.n	8005eee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d015      	beq.n	8005eec <USBD_CDC_EP0_RxReady+0x50>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ec6:	2bff      	cmp	r3, #255	; 0xff
 8005ec8:	d010      	beq.n	8005eec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005ed8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ee0:	b292      	uxth	r2, r2
 8005ee2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	22ff      	movs	r2, #255	; 0xff
 8005ee8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2243      	movs	r2, #67	; 0x43
 8005f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005f06:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20000094 	.word	0x20000094

08005f18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2243      	movs	r2, #67	; 0x43
 8005f24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005f26:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000050 	.word	0x20000050

08005f38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2243      	movs	r2, #67	; 0x43
 8005f44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005f46:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	200000d8 	.word	0x200000d8

08005f58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	220a      	movs	r2, #10
 8005f64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f66:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	2000000c 	.word	0x2000000c

08005f78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e004      	b.n	8005f96 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b087      	sub	sp, #28
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e008      	b.n	8005fd2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e004      	b.n	8006004 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800602e:	2303      	movs	r3, #3
 8006030:	e01a      	b.n	8006068 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006038:	2b00      	cmp	r3, #0
 800603a:	d114      	bne.n	8006066 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2201      	movs	r2, #1
 8006040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800605a:	2181      	movs	r1, #129	; 0x81
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fe12 	bl	8007c86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800607e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800608a:	2303      	movs	r3, #3
 800608c:	e016      	b.n	80060bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7c1b      	ldrb	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800609c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a0:	2101      	movs	r1, #1
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fe10 	bl	8007cc8 <USBD_LL_PrepareReceive>
 80060a8:	e007      	b.n	80060ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060b0:	2340      	movs	r3, #64	; 0x40
 80060b2:	2101      	movs	r1, #1
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 fe07 	bl	8007cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80060d8:	2303      	movs	r3, #3
 80060da:	e01f      	b.n	800611c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	79fa      	ldrb	r2, [r7, #7]
 800610e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f001 fc83 	bl	8007a1c <USBD_LL_Init>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]

  return ret;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006138:	2303      	movs	r3, #3
 800613a:	e016      	b.n	800616a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	f107 020e 	add.w	r2, r7, #14
 800615c:	4610      	mov	r0, r2
 800615e:	4798      	blx	r3
 8006160:	4602      	mov	r2, r0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 fc9a 	bl	8007ab4 <USBD_LL_Start>
 8006180:	4603      	mov	r3, r0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	4611      	mov	r1, r2
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	4611      	mov	r1, r2
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
  }

  return USBD_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 ff90 	bl	8007140 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800622e:	461a      	mov	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2b02      	cmp	r3, #2
 8006242:	d01a      	beq.n	800627a <USBD_LL_SetupStage+0x72>
 8006244:	2b02      	cmp	r3, #2
 8006246:	d822      	bhi.n	800628e <USBD_LL_SetupStage+0x86>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <USBD_LL_SetupStage+0x4a>
 800624c:	2b01      	cmp	r3, #1
 800624e:	d00a      	beq.n	8006266 <USBD_LL_SetupStage+0x5e>
 8006250:	e01d      	b.n	800628e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa62 	bl	8006724 <USBD_StdDevReq>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
      break;
 8006264:	e020      	b.n	80062a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fac6 	bl	8006800 <USBD_StdItfReq>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	e016      	b.n	80062a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fb05 	bl	8006892 <USBD_StdEPReq>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e00c      	b.n	80062a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006294:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006298:	b2db      	uxtb	r3, r3
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 fc69 	bl	8007b74 <USBD_LL_StallEP>
 80062a2:	4603      	mov	r3, r0
 80062a4:	73fb      	strb	r3, [r7, #15]
      break;
 80062a6:	bf00      	nop
  }

  return ret;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	460b      	mov	r3, r1
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d138      	bne.n	8006338 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d14a      	bne.n	800636e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d913      	bls.n	800630c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	1ad2      	subs	r2, r2, r3
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	4293      	cmp	r3, r2
 80062fc:	bf28      	it	cs
 80062fe:	4613      	movcs	r3, r2
 8006300:	461a      	mov	r2, r3
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f001 f80f 	bl	8007328 <USBD_CtlContinueRx>
 800630a:	e030      	b.n	800636e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d10b      	bne.n	8006330 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f001 f80a 	bl	800734a <USBD_CtlSendStatus>
 8006336:	e01a      	b.n	800636e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b03      	cmp	r3, #3
 8006342:	d114      	bne.n	800636e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	7afa      	ldrb	r2, [r7, #11]
 800635a:	4611      	mov	r1, r2
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	4798      	blx	r3
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	e000      	b.n	8006370 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	460b      	mov	r3, r1
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006386:	7afb      	ldrb	r3, [r7, #11]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d16b      	bne.n	8006464 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3314      	adds	r3, #20
 8006390:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006398:	2b02      	cmp	r3, #2
 800639a:	d156      	bne.n	800644a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d914      	bls.n	80063d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	1ad2      	subs	r2, r2, r3
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 ff84 	bl	80072cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063c4:	2300      	movs	r3, #0
 80063c6:	2200      	movs	r2, #0
 80063c8:	2100      	movs	r1, #0
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f001 fc7c 	bl	8007cc8 <USBD_LL_PrepareReceive>
 80063d0:	e03b      	b.n	800644a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d11c      	bne.n	8006418 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d316      	bcc.n	8006418 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d20f      	bcs.n	8006418 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063f8:	2200      	movs	r2, #0
 80063fa:	2100      	movs	r1, #0
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 ff65 	bl	80072cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800640a:	2300      	movs	r3, #0
 800640c:	2200      	movs	r2, #0
 800640e:	2100      	movs	r1, #0
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f001 fc59 	bl	8007cc8 <USBD_LL_PrepareReceive>
 8006416:	e018      	b.n	800644a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b03      	cmp	r3, #3
 8006422:	d10b      	bne.n	800643c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f001 fb98 	bl	8007b74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 ff93 	bl	8007370 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006450:	2b01      	cmp	r3, #1
 8006452:	d122      	bne.n	800649a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff fe98 	bl	800618a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006462:	e01a      	b.n	800649a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b03      	cmp	r3, #3
 800646e:	d114      	bne.n	800649a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00e      	beq.n	800649a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	7afa      	ldrb	r2, [r7, #11]
 8006486:	4611      	mov	r1, r2
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	4798      	blx	r3
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	e000      	b.n	800649c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e02f      	b.n	8006538 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00f      	beq.n	8006502 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6852      	ldr	r2, [r2, #4]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	4611      	mov	r1, r2
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006502:	2340      	movs	r3, #64	; 0x40
 8006504:	2200      	movs	r2, #0
 8006506:	2100      	movs	r1, #0
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 faee 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2240      	movs	r2, #64	; 0x40
 800651a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	2200      	movs	r2, #0
 8006522:	2180      	movs	r1, #128	; 0x80
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fae0 	bl	8007aea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2240      	movs	r2, #64	; 0x40
 8006534:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656e:	b2da      	uxtb	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2204      	movs	r2, #4
 800657a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b04      	cmp	r3, #4
 800659e:	d106      	bne.n	80065ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e012      	b.n	80065f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d10b      	bne.n	80065f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006616:	2303      	movs	r3, #3
 8006618:	e014      	b.n	8006644 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b03      	cmp	r3, #3
 8006624:	d10d      	bne.n	8006642 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	4611      	mov	r1, r2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006662:	2303      	movs	r3, #3
 8006664:	e014      	b.n	8006690 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b03      	cmp	r3, #3
 8006670:	d10d      	bne.n	800668e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	4611      	mov	r1, r2
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6852      	ldr	r2, [r2, #4]
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	4611      	mov	r1, r2
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
  }

  return USBD_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b087      	sub	sp, #28
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	3301      	adds	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006704:	8a3b      	ldrh	r3, [r7, #16]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	b21a      	sxth	r2, r3
 800670a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800670e:	4313      	orrs	r3, r2
 8006710:	b21b      	sxth	r3, r3
 8006712:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006714:	89fb      	ldrh	r3, [r7, #14]
}
 8006716:	4618      	mov	r0, r3
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d005      	beq.n	800674a <USBD_StdDevReq+0x26>
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d853      	bhi.n	80067ea <USBD_StdDevReq+0xc6>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <USBD_StdDevReq+0x3a>
 8006746:	2b20      	cmp	r3, #32
 8006748:	d14f      	bne.n	80067ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]
      break;
 800675c:	e04a      	b.n	80067f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	785b      	ldrb	r3, [r3, #1]
 8006762:	2b09      	cmp	r3, #9
 8006764:	d83b      	bhi.n	80067de <USBD_StdDevReq+0xba>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <USBD_StdDevReq+0x48>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	080067c1 	.word	0x080067c1
 8006770:	080067d5 	.word	0x080067d5
 8006774:	080067df 	.word	0x080067df
 8006778:	080067cb 	.word	0x080067cb
 800677c:	080067df 	.word	0x080067df
 8006780:	0800679f 	.word	0x0800679f
 8006784:	08006795 	.word	0x08006795
 8006788:	080067df 	.word	0x080067df
 800678c:	080067b7 	.word	0x080067b7
 8006790:	080067a9 	.word	0x080067a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9de 	bl	8006b58 <USBD_GetDescriptor>
          break;
 800679c:	e024      	b.n	80067e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fb43 	bl	8006e2c <USBD_SetAddress>
          break;
 80067a6:	e01f      	b.n	80067e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fb82 	bl	8006eb4 <USBD_SetConfig>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
          break;
 80067b4:	e018      	b.n	80067e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fc21 	bl	8007000 <USBD_GetConfig>
          break;
 80067be:	e013      	b.n	80067e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fc52 	bl	800706c <USBD_GetStatus>
          break;
 80067c8:	e00e      	b.n	80067e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fc81 	bl	80070d4 <USBD_SetFeature>
          break;
 80067d2:	e009      	b.n	80067e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fc90 	bl	80070fc <USBD_ClrFeature>
          break;
 80067dc:	e004      	b.n	80067e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fce7 	bl	80071b4 <USBD_CtlError>
          break;
 80067e6:	bf00      	nop
      }
      break;
 80067e8:	e004      	b.n	80067f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fce1 	bl	80071b4 <USBD_CtlError>
      break;
 80067f2:	bf00      	nop
  }

  return ret;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop

08006800 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d005      	beq.n	8006826 <USBD_StdItfReq+0x26>
 800681a:	2b40      	cmp	r3, #64	; 0x40
 800681c:	d82f      	bhi.n	800687e <USBD_StdItfReq+0x7e>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <USBD_StdItfReq+0x26>
 8006822:	2b20      	cmp	r3, #32
 8006824:	d12b      	bne.n	800687e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682c:	b2db      	uxtb	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	2b02      	cmp	r3, #2
 8006832:	d81d      	bhi.n	8006870 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	889b      	ldrh	r3, [r3, #4]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b01      	cmp	r3, #1
 800683c:	d813      	bhi.n	8006866 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	88db      	ldrh	r3, [r3, #6]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d110      	bne.n	800687a <USBD_StdItfReq+0x7a>
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10d      	bne.n	800687a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fd73 	bl	800734a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006864:	e009      	b.n	800687a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fca3 	bl	80071b4 <USBD_CtlError>
          break;
 800686e:	e004      	b.n	800687a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fc9e 	bl	80071b4 <USBD_CtlError>
          break;
 8006878:	e000      	b.n	800687c <USBD_StdItfReq+0x7c>
          break;
 800687a:	bf00      	nop
      }
      break;
 800687c:	e004      	b.n	8006888 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc97 	bl	80071b4 <USBD_CtlError>
      break;
 8006886:	bf00      	nop
  }

  return ret;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	889b      	ldrh	r3, [r3, #4]
 80068a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ae:	2b40      	cmp	r3, #64	; 0x40
 80068b0:	d007      	beq.n	80068c2 <USBD_StdEPReq+0x30>
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	f200 8145 	bhi.w	8006b42 <USBD_StdEPReq+0x2b0>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00c      	beq.n	80068d6 <USBD_StdEPReq+0x44>
 80068bc:	2b20      	cmp	r3, #32
 80068be:	f040 8140 	bne.w	8006b42 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
      break;
 80068d4:	e13a      	b.n	8006b4c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d007      	beq.n	80068ee <USBD_StdEPReq+0x5c>
 80068de:	2b03      	cmp	r3, #3
 80068e0:	f300 8129 	bgt.w	8006b36 <USBD_StdEPReq+0x2a4>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d07f      	beq.n	80069e8 <USBD_StdEPReq+0x156>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d03c      	beq.n	8006966 <USBD_StdEPReq+0xd4>
 80068ec:	e123      	b.n	8006b36 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d002      	beq.n	8006900 <USBD_StdEPReq+0x6e>
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d016      	beq.n	800692c <USBD_StdEPReq+0x9a>
 80068fe:	e02c      	b.n	800695a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <USBD_StdEPReq+0x90>
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b80      	cmp	r3, #128	; 0x80
 800690a:	d00a      	beq.n	8006922 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f92f 	bl	8007b74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006916:	2180      	movs	r1, #128	; 0x80
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 f92b 	bl	8007b74 <USBD_LL_StallEP>
 800691e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006920:	e020      	b.n	8006964 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fc45 	bl	80071b4 <USBD_CtlError>
              break;
 800692a:	e01b      	b.n	8006964 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	885b      	ldrh	r3, [r3, #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10e      	bne.n	8006952 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <USBD_StdEPReq+0xc0>
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b80      	cmp	r3, #128	; 0x80
 800693e:	d008      	beq.n	8006952 <USBD_StdEPReq+0xc0>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f911 	bl	8007b74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fcf9 	bl	800734a <USBD_CtlSendStatus>

              break;
 8006958:	e004      	b.n	8006964 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc29 	bl	80071b4 <USBD_CtlError>
              break;
 8006962:	bf00      	nop
          }
          break;
 8006964:	e0ec      	b.n	8006b40 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d002      	beq.n	8006978 <USBD_StdEPReq+0xe6>
 8006972:	2b03      	cmp	r3, #3
 8006974:	d016      	beq.n	80069a4 <USBD_StdEPReq+0x112>
 8006976:	e030      	b.n	80069da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00d      	beq.n	800699a <USBD_StdEPReq+0x108>
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b80      	cmp	r3, #128	; 0x80
 8006982:	d00a      	beq.n	800699a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 f8f3 	bl	8007b74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f8ef 	bl	8007b74 <USBD_LL_StallEP>
 8006996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006998:	e025      	b.n	80069e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc09 	bl	80071b4 <USBD_CtlError>
              break;
 80069a2:	e020      	b.n	80069e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	885b      	ldrh	r3, [r3, #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d11b      	bne.n	80069e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d004      	beq.n	80069c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 f8f9 	bl	8007bb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fcc2 	bl	800734a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80069d8:	e004      	b.n	80069e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fbe9 	bl	80071b4 <USBD_CtlError>
              break;
 80069e2:	e000      	b.n	80069e6 <USBD_StdEPReq+0x154>
              break;
 80069e4:	bf00      	nop
          }
          break;
 80069e6:	e0ab      	b.n	8006b40 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d002      	beq.n	80069fa <USBD_StdEPReq+0x168>
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d032      	beq.n	8006a5e <USBD_StdEPReq+0x1cc>
 80069f8:	e097      	b.n	8006b2a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <USBD_StdEPReq+0x17e>
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d004      	beq.n	8006a10 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fbd3 	bl	80071b4 <USBD_CtlError>
                break;
 8006a0e:	e091      	b.n	8006b34 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	da0b      	bge.n	8006a30 <USBD_StdEPReq+0x19e>
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	3310      	adds	r3, #16
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	e00b      	b.n	8006a48 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	3304      	adds	r3, #4
 8006a48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2202      	movs	r2, #2
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc1d 	bl	8007296 <USBD_CtlSendData>
              break;
 8006a5c:	e06a      	b.n	8006b34 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	da11      	bge.n	8006a8a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	f003 020f 	and.w	r2, r3, #15
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	3324      	adds	r3, #36	; 0x24
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d117      	bne.n	8006ab0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fb96 	bl	80071b4 <USBD_CtlError>
                  break;
 8006a88:	e054      	b.n	8006b34 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	f003 020f 	and.w	r2, r3, #15
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d104      	bne.n	8006ab0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fb83 	bl	80071b4 <USBD_CtlError>
                  break;
 8006aae:	e041      	b.n	8006b34 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da0b      	bge.n	8006ad0 <USBD_StdEPReq+0x23e>
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	3310      	adds	r3, #16
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	3304      	adds	r3, #4
 8006ace:	e00b      	b.n	8006ae8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <USBD_StdEPReq+0x264>
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d103      	bne.n	8006afe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e00e      	b.n	8006b1c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 f874 	bl	8007bf0 <USBD_LL_IsStallEP>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e002      	b.n	8006b1c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fbb7 	bl	8007296 <USBD_CtlSendData>
              break;
 8006b28:	e004      	b.n	8006b34 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fb41 	bl	80071b4 <USBD_CtlError>
              break;
 8006b32:	bf00      	nop
          }
          break;
 8006b34:	e004      	b.n	8006b40 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fb3b 	bl	80071b4 <USBD_CtlError>
          break;
 8006b3e:	bf00      	nop
      }
      break;
 8006b40:	e004      	b.n	8006b4c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fb35 	bl	80071b4 <USBD_CtlError>
      break;
 8006b4a:	bf00      	nop
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	885b      	ldrh	r3, [r3, #2]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	2b06      	cmp	r3, #6
 8006b7a:	f200 8128 	bhi.w	8006dce <USBD_GetDescriptor+0x276>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <USBD_GetDescriptor+0x2c>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006dcf 	.word	0x08006dcf
 8006b94:	08006dcf 	.word	0x08006dcf
 8006b98:	08006d6f 	.word	0x08006d6f
 8006b9c:	08006d9b 	.word	0x08006d9b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	7c12      	ldrb	r2, [r2, #16]
 8006bac:	f107 0108 	add.w	r1, r7, #8
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4798      	blx	r3
 8006bb4:	60f8      	str	r0, [r7, #12]
      break;
 8006bb6:	e112      	b.n	8006dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7c1b      	ldrb	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10d      	bne.n	8006bdc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	f107 0208 	add.w	r2, r7, #8
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
 8006bd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bda:	e100      	b.n	8006dde <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	f107 0208 	add.w	r2, r7, #8
 8006be8:	4610      	mov	r0, r2
 8006bea:	4798      	blx	r3
 8006bec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	701a      	strb	r2, [r3, #0]
      break;
 8006bf6:	e0f2      	b.n	8006dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	885b      	ldrh	r3, [r3, #2]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	f200 80ac 	bhi.w	8006d5c <USBD_GetDescriptor+0x204>
 8006c04:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <USBD_GetDescriptor+0xb4>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c25 	.word	0x08006c25
 8006c10:	08006c59 	.word	0x08006c59
 8006c14:	08006c8d 	.word	0x08006c8d
 8006c18:	08006cc1 	.word	0x08006cc1
 8006c1c:	08006cf5 	.word	0x08006cf5
 8006c20:	08006d29 	.word	0x08006d29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7c12      	ldrb	r2, [r2, #16]
 8006c3c:	f107 0108 	add.w	r1, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c46:	e091      	b.n	8006d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fab2 	bl	80071b4 <USBD_CtlError>
            err++;
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	3301      	adds	r3, #1
 8006c54:	72fb      	strb	r3, [r7, #11]
          break;
 8006c56:	e089      	b.n	8006d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7c12      	ldrb	r2, [r2, #16]
 8006c70:	f107 0108 	add.w	r1, r7, #8
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
 8006c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c7a:	e077      	b.n	8006d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa98 	bl	80071b4 <USBD_CtlError>
            err++;
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	3301      	adds	r3, #1
 8006c88:	72fb      	strb	r3, [r7, #11]
          break;
 8006c8a:	e06f      	b.n	8006d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	f107 0108 	add.w	r1, r7, #8
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cae:	e05d      	b.n	8006d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa7e 	bl	80071b4 <USBD_CtlError>
            err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cbe:	e055      	b.n	8006d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7c12      	ldrb	r2, [r2, #16]
 8006cd8:	f107 0108 	add.w	r1, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce2:	e043      	b.n	8006d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa64 	bl	80071b4 <USBD_CtlError>
            err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf2:	e03b      	b.n	8006d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7c12      	ldrb	r2, [r2, #16]
 8006d0c:	f107 0108 	add.w	r1, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d16:	e029      	b.n	8006d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa4a 	bl	80071b4 <USBD_CtlError>
            err++;
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	3301      	adds	r3, #1
 8006d24:	72fb      	strb	r3, [r7, #11]
          break;
 8006d26:	e021      	b.n	8006d6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4a:	e00f      	b.n	8006d6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa30 	bl	80071b4 <USBD_CtlError>
            err++;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	3301      	adds	r3, #1
 8006d58:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5a:	e007      	b.n	8006d6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa28 	bl	80071b4 <USBD_CtlError>
          err++;
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	3301      	adds	r3, #1
 8006d68:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006d6a:	bf00      	nop
      }
      break;
 8006d6c:	e037      	b.n	8006dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	7c1b      	ldrb	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7e:	f107 0208 	add.w	r2, r7, #8
 8006d82:	4610      	mov	r0, r2
 8006d84:	4798      	blx	r3
 8006d86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d88:	e029      	b.n	8006dde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fa11 	bl	80071b4 <USBD_CtlError>
        err++;
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	3301      	adds	r3, #1
 8006d96:	72fb      	strb	r3, [r7, #11]
      break;
 8006d98:	e021      	b.n	8006dde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7c1b      	ldrb	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10d      	bne.n	8006dbe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	f107 0208 	add.w	r2, r7, #8
 8006dae:	4610      	mov	r0, r2
 8006db0:	4798      	blx	r3
 8006db2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	2207      	movs	r2, #7
 8006dba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dbc:	e00f      	b.n	8006dde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f9f7 	bl	80071b4 <USBD_CtlError>
        err++;
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	72fb      	strb	r3, [r7, #11]
      break;
 8006dcc:	e007      	b.n	8006dde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f9ef 	bl	80071b4 <USBD_CtlError>
      err++;
 8006dd6:	7afb      	ldrb	r3, [r7, #11]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	72fb      	strb	r3, [r7, #11]
      break;
 8006ddc:	bf00      	nop
  }

  if (err != 0U)
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11e      	bne.n	8006e22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	88db      	ldrh	r3, [r3, #6]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d016      	beq.n	8006e1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006dec:	893b      	ldrh	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	88da      	ldrh	r2, [r3, #6]
 8006df6:	893b      	ldrh	r3, [r7, #8]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bf28      	it	cs
 8006dfc:	4613      	movcs	r3, r2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e02:	893b      	ldrh	r3, [r7, #8]
 8006e04:	461a      	mov	r2, r3
 8006e06:	68f9      	ldr	r1, [r7, #12]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa44 	bl	8007296 <USBD_CtlSendData>
 8006e0e:	e009      	b.n	8006e24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9ce 	bl	80071b4 <USBD_CtlError>
 8006e18:	e004      	b.n	8006e24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa95 	bl	800734a <USBD_CtlSendStatus>
 8006e20:	e000      	b.n	8006e24 <USBD_GetDescriptor+0x2cc>
    return;
 8006e22:	bf00      	nop
  }
}
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop

08006e2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	889b      	ldrh	r3, [r3, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d131      	bne.n	8006ea2 <USBD_SetAddress+0x76>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	88db      	ldrh	r3, [r3, #6]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d12d      	bne.n	8006ea2 <USBD_SetAddress+0x76>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	885b      	ldrh	r3, [r3, #2]
 8006e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e4c:	d829      	bhi.n	8006ea2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d104      	bne.n	8006e70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f9a3 	bl	80071b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6e:	e01d      	b.n	8006eac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fee3 	bl	8007c48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa61 	bl	800734a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e96:	e009      	b.n	8006eac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea0:	e004      	b.n	8006eac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f985 	bl	80071b4 <USBD_CtlError>
  }
}
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	885b      	ldrh	r3, [r3, #2]
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	4b4c      	ldr	r3, [pc, #304]	; (8006ffc <USBD_SetConfig+0x148>)
 8006eca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ecc:	4b4b      	ldr	r3, [pc, #300]	; (8006ffc <USBD_SetConfig+0x148>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d905      	bls.n	8006ee0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f96c 	bl	80071b4 <USBD_CtlError>
    return USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e088      	b.n	8006ff2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d002      	beq.n	8006ef2 <USBD_SetConfig+0x3e>
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d025      	beq.n	8006f3c <USBD_SetConfig+0x88>
 8006ef0:	e071      	b.n	8006fd6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ef2:	4b42      	ldr	r3, [pc, #264]	; (8006ffc <USBD_SetConfig+0x148>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01c      	beq.n	8006f34 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006efa:	4b40      	ldr	r3, [pc, #256]	; (8006ffc <USBD_SetConfig+0x148>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f04:	4b3d      	ldr	r3, [pc, #244]	; (8006ffc <USBD_SetConfig+0x148>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff f948 	bl	80061a0 <USBD_SetClassConfig>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f949 	bl	80071b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f22:	e065      	b.n	8006ff0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa10 	bl	800734a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f32:	e05d      	b.n	8006ff0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fa08 	bl	800734a <USBD_CtlSendStatus>
      break;
 8006f3a:	e059      	b.n	8006ff0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f3c:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <USBD_SetConfig+0x148>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d112      	bne.n	8006f6a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f4c:	4b2b      	ldr	r3, [pc, #172]	; (8006ffc <USBD_SetConfig+0x148>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f56:	4b29      	ldr	r3, [pc, #164]	; (8006ffc <USBD_SetConfig+0x148>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff f93b 	bl	80061d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9f1 	bl	800734a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f68:	e042      	b.n	8006ff0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006f6a:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <USBD_SetConfig+0x148>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d02a      	beq.n	8006fce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff f929 	bl	80061d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f86:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <USBD_SetConfig+0x148>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f90:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <USBD_SetConfig+0x148>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff f902 	bl	80061a0 <USBD_SetClassConfig>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00f      	beq.n	8006fc6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f903 	bl	80071b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff f90e 	bl	80061d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fc4:	e014      	b.n	8006ff0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9bf 	bl	800734a <USBD_CtlSendStatus>
      break;
 8006fcc:	e010      	b.n	8006ff0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f9bb 	bl	800734a <USBD_CtlSendStatus>
      break;
 8006fd4:	e00c      	b.n	8006ff0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8eb 	bl	80071b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fde:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <USBD_SetConfig+0x148>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff f8f7 	bl	80061d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006fea:	2303      	movs	r3, #3
 8006fec:	73fb      	strb	r3, [r7, #15]
      break;
 8006fee:	bf00      	nop
  }

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	2000027c 	.word	0x2000027c

08007000 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	88db      	ldrh	r3, [r3, #6]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d004      	beq.n	800701c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f8cd 	bl	80071b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800701a:	e023      	b.n	8007064 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	dc02      	bgt.n	800702e <USBD_GetConfig+0x2e>
 8007028:	2b00      	cmp	r3, #0
 800702a:	dc03      	bgt.n	8007034 <USBD_GetConfig+0x34>
 800702c:	e015      	b.n	800705a <USBD_GetConfig+0x5a>
 800702e:	2b03      	cmp	r3, #3
 8007030:	d00b      	beq.n	800704a <USBD_GetConfig+0x4a>
 8007032:	e012      	b.n	800705a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3308      	adds	r3, #8
 800703e:	2201      	movs	r2, #1
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f927 	bl	8007296 <USBD_CtlSendData>
        break;
 8007048:	e00c      	b.n	8007064 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3304      	adds	r3, #4
 800704e:	2201      	movs	r2, #1
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f91f 	bl	8007296 <USBD_CtlSendData>
        break;
 8007058:	e004      	b.n	8007064 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f8a9 	bl	80071b4 <USBD_CtlError>
        break;
 8007062:	bf00      	nop
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707c:	b2db      	uxtb	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	2b02      	cmp	r3, #2
 8007082:	d81e      	bhi.n	80070c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	88db      	ldrh	r3, [r3, #6]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d004      	beq.n	8007096 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f890 	bl	80071b4 <USBD_CtlError>
        break;
 8007094:	e01a      	b.n	80070cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f043 0202 	orr.w	r2, r3, #2
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	330c      	adds	r3, #12
 80070b6:	2202      	movs	r2, #2
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f8eb 	bl	8007296 <USBD_CtlSendData>
      break;
 80070c0:	e004      	b.n	80070cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f875 	bl	80071b4 <USBD_CtlError>
      break;
 80070ca:	bf00      	nop
  }
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	885b      	ldrh	r3, [r3, #2]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d106      	bne.n	80070f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f92b 	bl	800734a <USBD_CtlSendStatus>
  }
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710c:	b2db      	uxtb	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	2b02      	cmp	r3, #2
 8007112:	d80b      	bhi.n	800712c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	885b      	ldrh	r3, [r3, #2]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d10c      	bne.n	8007136 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f910 	bl	800734a <USBD_CtlSendStatus>
      }
      break;
 800712a:	e004      	b.n	8007136 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f840 	bl	80071b4 <USBD_CtlError>
      break;
 8007134:	e000      	b.n	8007138 <USBD_ClrFeature+0x3c>
      break;
 8007136:	bf00      	nop
  }
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7ff fabb 	bl	80066e6 <SWAPBYTE>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff faae 	bl	80066e6 <SWAPBYTE>
 800718a:	4603      	mov	r3, r0
 800718c:	461a      	mov	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff faa1 	bl	80066e6 <SWAPBYTE>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	80da      	strh	r2, [r3, #6]
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071be:	2180      	movs	r1, #128	; 0x80
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fcd7 	bl	8007b74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071c6:	2100      	movs	r1, #0
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fcd3 	bl	8007b74 <USBD_LL_StallEP>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d036      	beq.n	800725a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80071f0:	6938      	ldr	r0, [r7, #16]
 80071f2:	f000 f836 	bl	8007262 <USBD_GetLen>
 80071f6:	4603      	mov	r3, r0
 80071f8:	3301      	adds	r3, #1
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	4413      	add	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	3301      	adds	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	4413      	add	r3, r2
 800721c:	2203      	movs	r2, #3
 800721e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	3301      	adds	r3, #1
 8007224:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007226:	e013      	b.n	8007250 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	3301      	adds	r3, #1
 8007238:	613b      	str	r3, [r7, #16]
    idx++;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	3301      	adds	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	4413      	add	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
    idx++;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	3301      	adds	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e7      	bne.n	8007228 <USBD_GetString+0x52>
 8007258:	e000      	b.n	800725c <USBD_GetString+0x86>
    return;
 800725a:	bf00      	nop
  }
}
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007272:	e005      	b.n	8007280 <USBD_GetLen+0x1e>
  {
    len++;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	3301      	adds	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	3301      	adds	r3, #1
 800727e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f5      	bne.n	8007274 <USBD_GetLen+0x12>
  }

  return len;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	2100      	movs	r1, #0
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 fce2 	bl	8007c86 <USBD_LL_Transmit>

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	2100      	movs	r1, #0
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fcd1 	bl	8007c86 <USBD_LL_Transmit>

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2203      	movs	r2, #3
 80072fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	2100      	movs	r1, #0
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fcd5 	bl	8007cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	2100      	movs	r1, #0
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fcc4 	bl	8007cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2204      	movs	r2, #4
 8007356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fc90 	bl	8007c86 <USBD_LL_Transmit>

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2205      	movs	r2, #5
 800737c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007380:	2300      	movs	r3, #0
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fc9e 	bl	8007cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800739c:	2200      	movs	r2, #0
 800739e:	4912      	ldr	r1, [pc, #72]	; (80073e8 <MX_USB_DEVICE_Init+0x50>)
 80073a0:	4812      	ldr	r0, [pc, #72]	; (80073ec <MX_USB_DEVICE_Init+0x54>)
 80073a2:	f7fe fe8f 	bl	80060c4 <USBD_Init>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073ac:	f7f9 fc0a 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073b0:	490f      	ldr	r1, [pc, #60]	; (80073f0 <MX_USB_DEVICE_Init+0x58>)
 80073b2:	480e      	ldr	r0, [pc, #56]	; (80073ec <MX_USB_DEVICE_Init+0x54>)
 80073b4:	f7fe feb6 	bl	8006124 <USBD_RegisterClass>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073be:	f7f9 fc01 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073c2:	490c      	ldr	r1, [pc, #48]	; (80073f4 <MX_USB_DEVICE_Init+0x5c>)
 80073c4:	4809      	ldr	r0, [pc, #36]	; (80073ec <MX_USB_DEVICE_Init+0x54>)
 80073c6:	f7fe fdd7 	bl	8005f78 <USBD_CDC_RegisterInterface>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80073d0:	f7f9 fbf8 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073d4:	4805      	ldr	r0, [pc, #20]	; (80073ec <MX_USB_DEVICE_Init+0x54>)
 80073d6:	f7fe fecc 	bl	8006172 <USBD_Start>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80073e0:	f7f9 fbf0 	bl	8000bc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073e4:	bf00      	nop
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20000130 	.word	0x20000130
 80073ec:	20000548 	.word	0x20000548
 80073f0:	20000018 	.word	0x20000018
 80073f4:	2000011c 	.word	0x2000011c

080073f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80073fc:	2200      	movs	r2, #0
 80073fe:	4905      	ldr	r1, [pc, #20]	; (8007414 <CDC_Init_FS+0x1c>)
 8007400:	4805      	ldr	r0, [pc, #20]	; (8007418 <CDC_Init_FS+0x20>)
 8007402:	f7fe fdce 	bl	8005fa2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007406:	4905      	ldr	r1, [pc, #20]	; (800741c <CDC_Init_FS+0x24>)
 8007408:	4803      	ldr	r0, [pc, #12]	; (8007418 <CDC_Init_FS+0x20>)
 800740a:	f7fe fde8 	bl	8005fde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800740e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000c00 	.word	0x20000c00
 8007418:	20000548 	.word	0x20000548
 800741c:	20000818 	.word	0x20000818

08007420 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007424:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007426:	4618      	mov	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
 800743c:	4613      	mov	r3, r2
 800743e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	2b23      	cmp	r3, #35	; 0x23
 8007444:	d84a      	bhi.n	80074dc <CDC_Control_FS+0xac>
 8007446:	a201      	add	r2, pc, #4	; (adr r2, 800744c <CDC_Control_FS+0x1c>)
 8007448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744c:	080074dd 	.word	0x080074dd
 8007450:	080074dd 	.word	0x080074dd
 8007454:	080074dd 	.word	0x080074dd
 8007458:	080074dd 	.word	0x080074dd
 800745c:	080074dd 	.word	0x080074dd
 8007460:	080074dd 	.word	0x080074dd
 8007464:	080074dd 	.word	0x080074dd
 8007468:	080074dd 	.word	0x080074dd
 800746c:	080074dd 	.word	0x080074dd
 8007470:	080074dd 	.word	0x080074dd
 8007474:	080074dd 	.word	0x080074dd
 8007478:	080074dd 	.word	0x080074dd
 800747c:	080074dd 	.word	0x080074dd
 8007480:	080074dd 	.word	0x080074dd
 8007484:	080074dd 	.word	0x080074dd
 8007488:	080074dd 	.word	0x080074dd
 800748c:	080074dd 	.word	0x080074dd
 8007490:	080074dd 	.word	0x080074dd
 8007494:	080074dd 	.word	0x080074dd
 8007498:	080074dd 	.word	0x080074dd
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074dd 	.word	0x080074dd
 80074a4:	080074dd 	.word	0x080074dd
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	080074dd 	.word	0x080074dd
 80074b0:	080074dd 	.word	0x080074dd
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074dd 	.word	0x080074dd
 80074c0:	080074dd 	.word	0x080074dd
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	080074dd 	.word	0x080074dd
 80074cc:	080074dd 	.word	0x080074dd
 80074d0:	080074dd 	.word	0x080074dd
 80074d4:	080074dd 	.word	0x080074dd
 80074d8:	080074dd 	.word	0x080074dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074dc:	bf00      	nop
  }

  return (USBD_OK);
 80074de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	4805      	ldr	r0, [pc, #20]	; (8007510 <CDC_Receive_FS+0x24>)
 80074fa:	f7fe fd70 	bl	8005fde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074fe:	4804      	ldr	r0, [pc, #16]	; (8007510 <CDC_Receive_FS+0x24>)
 8007500:	f7fe fdb6 	bl	8006070 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007504:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000548 	.word	0x20000548

08007514 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007524:	4b0d      	ldr	r3, [pc, #52]	; (800755c <CDC_Transmit_FS+0x48>)
 8007526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800752a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007536:	2301      	movs	r3, #1
 8007538:	e00b      	b.n	8007552 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800753a:	887b      	ldrh	r3, [r7, #2]
 800753c:	461a      	mov	r2, r3
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4806      	ldr	r0, [pc, #24]	; (800755c <CDC_Transmit_FS+0x48>)
 8007542:	f7fe fd2e 	bl	8005fa2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007546:	4805      	ldr	r0, [pc, #20]	; (800755c <CDC_Transmit_FS+0x48>)
 8007548:	f7fe fd62 	bl	8006010 <USBD_CDC_TransmitPacket>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000548 	.word	0x20000548

08007560 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007576:	4618      	mov	r0, r3
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2212      	movs	r2, #18
 8007594:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007596:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	2000014c 	.word	0x2000014c

080075a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2204      	movs	r2, #4
 80075b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075ba:	4b03      	ldr	r3, [pc, #12]	; (80075c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20000160 	.word	0x20000160

080075cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	4907      	ldr	r1, [pc, #28]	; (8007600 <USBD_FS_ProductStrDescriptor+0x34>)
 80075e2:	4808      	ldr	r0, [pc, #32]	; (8007604 <USBD_FS_ProductStrDescriptor+0x38>)
 80075e4:	f7ff fdf7 	bl	80071d6 <USBD_GetString>
 80075e8:	e004      	b.n	80075f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4904      	ldr	r1, [pc, #16]	; (8007600 <USBD_FS_ProductStrDescriptor+0x34>)
 80075ee:	4805      	ldr	r0, [pc, #20]	; (8007604 <USBD_FS_ProductStrDescriptor+0x38>)
 80075f0:	f7ff fdf1 	bl	80071d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075f4:	4b02      	ldr	r3, [pc, #8]	; (8007600 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000fe8 	.word	0x20000fe8
 8007604:	08008778 	.word	0x08008778

08007608 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	6039      	str	r1, [r7, #0]
 8007612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	4904      	ldr	r1, [pc, #16]	; (8007628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007618:	4804      	ldr	r0, [pc, #16]	; (800762c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800761a:	f7ff fddc 	bl	80071d6 <USBD_GetString>
  return USBD_StrDesc;
 800761e:	4b02      	ldr	r3, [pc, #8]	; (8007628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000fe8 	.word	0x20000fe8
 800762c:	08008790 	.word	0x08008790

08007630 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	221a      	movs	r2, #26
 8007640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007642:	f000 f843 	bl	80076cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007646:	4b02      	ldr	r3, [pc, #8]	; (8007650 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000164 	.word	0x20000164

08007654 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d105      	bne.n	8007672 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	4907      	ldr	r1, [pc, #28]	; (8007688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800766a:	4808      	ldr	r0, [pc, #32]	; (800768c <USBD_FS_ConfigStrDescriptor+0x38>)
 800766c:	f7ff fdb3 	bl	80071d6 <USBD_GetString>
 8007670:	e004      	b.n	800767c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	4904      	ldr	r1, [pc, #16]	; (8007688 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007676:	4805      	ldr	r0, [pc, #20]	; (800768c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007678:	f7ff fdad 	bl	80071d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800767c:	4b02      	ldr	r3, [pc, #8]	; (8007688 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000fe8 	.word	0x20000fe8
 800768c:	080087a4 	.word	0x080087a4

08007690 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	6039      	str	r1, [r7, #0]
 800769a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4907      	ldr	r1, [pc, #28]	; (80076c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076a6:	4808      	ldr	r0, [pc, #32]	; (80076c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076a8:	f7ff fd95 	bl	80071d6 <USBD_GetString>
 80076ac:	e004      	b.n	80076b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4904      	ldr	r1, [pc, #16]	; (80076c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076b2:	4805      	ldr	r0, [pc, #20]	; (80076c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076b4:	f7ff fd8f 	bl	80071d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076b8:	4b02      	ldr	r3, [pc, #8]	; (80076c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000fe8 	.word	0x20000fe8
 80076c8:	080087b0 	.word	0x080087b0

080076cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076d2:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <Get_SerialNum+0x44>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076d8:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <Get_SerialNum+0x48>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076de:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <Get_SerialNum+0x4c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076f2:	2208      	movs	r2, #8
 80076f4:	4909      	ldr	r1, [pc, #36]	; (800771c <Get_SerialNum+0x50>)
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f814 	bl	8007724 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076fc:	2204      	movs	r2, #4
 80076fe:	4908      	ldr	r1, [pc, #32]	; (8007720 <Get_SerialNum+0x54>)
 8007700:	68b8      	ldr	r0, [r7, #8]
 8007702:	f000 f80f 	bl	8007724 <IntToUnicode>
  }
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	1fff7a10 	.word	0x1fff7a10
 8007714:	1fff7a14 	.word	0x1fff7a14
 8007718:	1fff7a18 	.word	0x1fff7a18
 800771c:	20000166 	.word	0x20000166
 8007720:	20000176 	.word	0x20000176

08007724 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]
 800773a:	e027      	b.n	800778c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	0f1b      	lsrs	r3, r3, #28
 8007740:	2b09      	cmp	r3, #9
 8007742:	d80b      	bhi.n	800775c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	0f1b      	lsrs	r3, r3, #28
 8007748:	b2da      	uxtb	r2, r3
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	4619      	mov	r1, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	440b      	add	r3, r1
 8007754:	3230      	adds	r2, #48	; 0x30
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e00a      	b.n	8007772 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	0f1b      	lsrs	r3, r3, #28
 8007760:	b2da      	uxtb	r2, r3
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	4619      	mov	r1, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	440b      	add	r3, r1
 800776c:	3237      	adds	r2, #55	; 0x37
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	3301      	adds	r3, #1
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4413      	add	r3, r2
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	3301      	adds	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
 800778c:	7dfa      	ldrb	r2, [r7, #23]
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	429a      	cmp	r2, r3
 8007792:	d3d3      	bcc.n	800773c <IntToUnicode+0x18>
  }
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
	...

080077a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ac:	f107 0314 	add.w	r3, r7, #20
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077c4:	d13a      	bne.n	800783c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	4b1e      	ldr	r3, [pc, #120]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	6313      	str	r3, [r2, #48]	; 0x30
 80077d6:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80077e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e8:	2302      	movs	r3, #2
 80077ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f0:	2303      	movs	r3, #3
 80077f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077f4:	230a      	movs	r3, #10
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	4619      	mov	r1, r3
 80077fe:	4812      	ldr	r0, [pc, #72]	; (8007848 <HAL_PCD_MspInit+0xa4>)
 8007800:	f7f9 fd0a 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 8007806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007808:	4a0e      	ldr	r2, [pc, #56]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 800780a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780e:	6353      	str	r3, [r2, #52]	; 0x34
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 8007816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007818:	4a0a      	ldr	r2, [pc, #40]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 800781a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800781e:	6453      	str	r3, [r2, #68]	; 0x44
 8007820:	4b08      	ldr	r3, [pc, #32]	; (8007844 <HAL_PCD_MspInit+0xa0>)
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	2043      	movs	r0, #67	; 0x43
 8007832:	f7f9 fcba 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007836:	2043      	movs	r0, #67	; 0x43
 8007838:	f7f9 fcd3 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800783c:	bf00      	nop
 800783e:	3728      	adds	r7, #40	; 0x28
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40023800 	.word	0x40023800
 8007848:	40020000 	.word	0x40020000

0800784c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fe fcd0 	bl	8006208 <USBD_LL_SetupStage>
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4613      	mov	r3, r2
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	4619      	mov	r1, r3
 800789a:	f7fe fd0a 	bl	80062b2 <USBD_LL_DataOutStage>
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	3348      	adds	r3, #72	; 0x48
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f7fe fd53 	bl	8006378 <USBD_LL_DataInStage>
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fe67 	bl	80065bc <USBD_LL_SOF>
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078fe:	2301      	movs	r3, #1
 8007900:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d001      	beq.n	800790e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800790a:	f7f9 f95b 	bl	8000bc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007914:	7bfa      	ldrb	r2, [r7, #15]
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe fe11 	bl	8006540 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fdbd 	bl	80064a4 <USBD_LL_Reset>
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe fe0c 	bl	8006560 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007968:	4b04      	ldr	r3, [pc, #16]	; (800797c <HAL_PCD_SuspendCallback+0x48>)
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	4a03      	ldr	r2, [pc, #12]	; (800797c <HAL_PCD_SuspendCallback+0x48>)
 800796e:	f043 0306 	orr.w	r3, r3, #6
 8007972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	e000ed00 	.word	0xe000ed00

08007980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fdfc 	bl	800658c <USBD_LL_Resume>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fe4a 	bl	800664c <USBD_LL_IsoOUTIncomplete>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fe12 	bl	8006600 <USBD_LL_IsoINIncomplete>
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fe50 	bl	8006698 <USBD_LL_DevConnected>
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fe4d 	bl	80066ae <USBD_LL_DevDisconnected>
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d13c      	bne.n	8007aa6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a1e      	ldr	r2, [pc, #120]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a3c:	4b1c      	ldr	r3, [pc, #112]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a44:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a46:	2204      	movs	r2, #4
 8007a48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a4a:	4b19      	ldr	r3, [pc, #100]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a50:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a56:	4b16      	ldr	r3, [pc, #88]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a58:	2202      	movs	r2, #2
 8007a5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a5c:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a62:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a68:	4b11      	ldr	r3, [pc, #68]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a6e:	4b10      	ldr	r3, [pc, #64]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a74:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a7a:	480d      	ldr	r0, [pc, #52]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a7c:	f7fa fb15 	bl	80020aa <HAL_PCD_Init>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a86:	f7f9 f89d 	bl	8000bc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a8a:	2180      	movs	r1, #128	; 0x80
 8007a8c:	4808      	ldr	r0, [pc, #32]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a8e:	f7fb fc72 	bl	8003376 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a92:	2240      	movs	r2, #64	; 0x40
 8007a94:	2100      	movs	r1, #0
 8007a96:	4806      	ldr	r0, [pc, #24]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007a98:	f7fb fc26 	bl	80032e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a9c:	2280      	movs	r2, #128	; 0x80
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	4803      	ldr	r0, [pc, #12]	; (8007ab0 <USBD_LL_Init+0x94>)
 8007aa2:	f7fb fc21 	bl	80032e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	200011e8 	.word	0x200011e8

08007ab4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fa fc0a 	bl	80022e4 <HAL_PCD_Start>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f942 	bl	8007d60 <USBD_Get_USB_Status>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	4608      	mov	r0, r1
 8007af4:	4611      	mov	r1, r2
 8007af6:	461a      	mov	r2, r3
 8007af8:	4603      	mov	r3, r0
 8007afa:	70fb      	strb	r3, [r7, #3]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70bb      	strb	r3, [r7, #2]
 8007b00:	4613      	mov	r3, r2
 8007b02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b12:	78bb      	ldrb	r3, [r7, #2]
 8007b14:	883a      	ldrh	r2, [r7, #0]
 8007b16:	78f9      	ldrb	r1, [r7, #3]
 8007b18:	f7fa ffee 	bl	8002af8 <HAL_PCD_EP_Open>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f91c 	bl	8007d60 <USBD_Get_USB_Status>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fb f837 	bl	8002bc8 <HAL_PCD_EP_Close>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f8fd 	bl	8007d60 <USBD_Get_USB_Status>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	4611      	mov	r1, r2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fb f90f 	bl	8002db6 <HAL_PCD_EP_SetStall>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 f8de 	bl	8007d60 <USBD_Get_USB_Status>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fb f954 	bl	8002e7e <HAL_PCD_EP_ClrStall>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f8bf 	bl	8007d60 <USBD_Get_USB_Status>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da0b      	bge.n	8007c24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	4613      	mov	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	333e      	adds	r3, #62	; 0x3e
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	e00b      	b.n	8007c3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c2a:	68f9      	ldr	r1, [r7, #12]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	1a9b      	subs	r3, r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fa ff21 	bl	8002aae <HAL_PCD_SetAddress>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f874 	bl	8007d60 <USBD_Get_USB_Status>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b086      	sub	sp, #24
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	460b      	mov	r3, r1
 8007c94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ca4:	7af9      	ldrb	r1, [r7, #11]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	f7fb f83a 	bl	8002d22 <HAL_PCD_EP_Transmit>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f853 	bl	8007d60 <USBD_Get_USB_Status>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ce6:	7af9      	ldrb	r1, [r7, #11]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	f7fa ffb6 	bl	8002c5c <HAL_PCD_EP_Receive>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f832 	bl	8007d60 <USBD_Get_USB_Status>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d00:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fa ffe6 	bl	8002cf2 <HAL_PCD_EP_GetRxCount>
 8007d26:	4603      	mov	r3, r0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d38:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <USBD_static_malloc+0x18>)
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	20000280 	.word	0x20000280

08007d4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]

}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d817      	bhi.n	8007da4 <USBD_Get_USB_Status+0x44>
 8007d74:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <USBD_Get_USB_Status+0x1c>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007d93 	.word	0x08007d93
 8007d84:	08007d99 	.word	0x08007d99
 8007d88:	08007d9f 	.word	0x08007d9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d90:	e00b      	b.n	8007daa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d92:	2303      	movs	r3, #3
 8007d94:	73fb      	strb	r3, [r7, #15]
    break;
 8007d96:	e008      	b.n	8007daa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d9c:	e005      	b.n	8007daa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	73fb      	strb	r3, [r7, #15]
    break;
 8007da2:	e002      	b.n	8007daa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007da4:	2303      	movs	r3, #3
 8007da6:	73fb      	strb	r3, [r7, #15]
    break;
 8007da8:	bf00      	nop
  }
  return usb_status;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <__errno>:
 8007db8:	4b01      	ldr	r3, [pc, #4]	; (8007dc0 <__errno+0x8>)
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000180 	.word	0x20000180

08007dc4 <__libc_init_array>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4d0d      	ldr	r5, [pc, #52]	; (8007dfc <__libc_init_array+0x38>)
 8007dc8:	4c0d      	ldr	r4, [pc, #52]	; (8007e00 <__libc_init_array+0x3c>)
 8007dca:	1b64      	subs	r4, r4, r5
 8007dcc:	10a4      	asrs	r4, r4, #2
 8007dce:	2600      	movs	r6, #0
 8007dd0:	42a6      	cmp	r6, r4
 8007dd2:	d109      	bne.n	8007de8 <__libc_init_array+0x24>
 8007dd4:	4d0b      	ldr	r5, [pc, #44]	; (8007e04 <__libc_init_array+0x40>)
 8007dd6:	4c0c      	ldr	r4, [pc, #48]	; (8007e08 <__libc_init_array+0x44>)
 8007dd8:	f000 fcb2 	bl	8008740 <_init>
 8007ddc:	1b64      	subs	r4, r4, r5
 8007dde:	10a4      	asrs	r4, r4, #2
 8007de0:	2600      	movs	r6, #0
 8007de2:	42a6      	cmp	r6, r4
 8007de4:	d105      	bne.n	8007df2 <__libc_init_array+0x2e>
 8007de6:	bd70      	pop	{r4, r5, r6, pc}
 8007de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dec:	4798      	blx	r3
 8007dee:	3601      	adds	r6, #1
 8007df0:	e7ee      	b.n	8007dd0 <__libc_init_array+0xc>
 8007df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df6:	4798      	blx	r3
 8007df8:	3601      	adds	r6, #1
 8007dfa:	e7f2      	b.n	8007de2 <__libc_init_array+0x1e>
 8007dfc:	08008838 	.word	0x08008838
 8007e00:	08008838 	.word	0x08008838
 8007e04:	08008838 	.word	0x08008838
 8007e08:	0800883c 	.word	0x0800883c

08007e0c <__itoa>:
 8007e0c:	1e93      	subs	r3, r2, #2
 8007e0e:	2b22      	cmp	r3, #34	; 0x22
 8007e10:	b510      	push	{r4, lr}
 8007e12:	460c      	mov	r4, r1
 8007e14:	d904      	bls.n	8007e20 <__itoa+0x14>
 8007e16:	2300      	movs	r3, #0
 8007e18:	700b      	strb	r3, [r1, #0]
 8007e1a:	461c      	mov	r4, r3
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	bd10      	pop	{r4, pc}
 8007e20:	2a0a      	cmp	r2, #10
 8007e22:	d109      	bne.n	8007e38 <__itoa+0x2c>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	da07      	bge.n	8007e38 <__itoa+0x2c>
 8007e28:	232d      	movs	r3, #45	; 0x2d
 8007e2a:	700b      	strb	r3, [r1, #0]
 8007e2c:	4240      	negs	r0, r0
 8007e2e:	2101      	movs	r1, #1
 8007e30:	4421      	add	r1, r4
 8007e32:	f000 f835 	bl	8007ea0 <__utoa>
 8007e36:	e7f1      	b.n	8007e1c <__itoa+0x10>
 8007e38:	2100      	movs	r1, #0
 8007e3a:	e7f9      	b.n	8007e30 <__itoa+0x24>

08007e3c <itoa>:
 8007e3c:	f7ff bfe6 	b.w	8007e0c <__itoa>

08007e40 <memset>:
 8007e40:	4402      	add	r2, r0
 8007e42:	4603      	mov	r3, r0
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d100      	bne.n	8007e4a <memset+0xa>
 8007e48:	4770      	bx	lr
 8007e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e4e:	e7f9      	b.n	8007e44 <memset+0x4>

08007e50 <siprintf>:
 8007e50:	b40e      	push	{r1, r2, r3}
 8007e52:	b500      	push	{lr}
 8007e54:	b09c      	sub	sp, #112	; 0x70
 8007e56:	ab1d      	add	r3, sp, #116	; 0x74
 8007e58:	9002      	str	r0, [sp, #8]
 8007e5a:	9006      	str	r0, [sp, #24]
 8007e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e60:	4809      	ldr	r0, [pc, #36]	; (8007e88 <siprintf+0x38>)
 8007e62:	9107      	str	r1, [sp, #28]
 8007e64:	9104      	str	r1, [sp, #16]
 8007e66:	4909      	ldr	r1, [pc, #36]	; (8007e8c <siprintf+0x3c>)
 8007e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6c:	9105      	str	r1, [sp, #20]
 8007e6e:	6800      	ldr	r0, [r0, #0]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	a902      	add	r1, sp, #8
 8007e74:	f000 f8b2 	bl	8007fdc <_svfiprintf_r>
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	b01c      	add	sp, #112	; 0x70
 8007e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e84:	b003      	add	sp, #12
 8007e86:	4770      	bx	lr
 8007e88:	20000180 	.word	0x20000180
 8007e8c:	ffff0208 	.word	0xffff0208

08007e90 <strcpy>:
 8007e90:	4603      	mov	r3, r0
 8007e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e96:	f803 2b01 	strb.w	r2, [r3], #1
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d1f9      	bne.n	8007e92 <strcpy+0x2>
 8007e9e:	4770      	bx	lr

08007ea0 <__utoa>:
 8007ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea2:	4c1f      	ldr	r4, [pc, #124]	; (8007f20 <__utoa+0x80>)
 8007ea4:	b08b      	sub	sp, #44	; 0x2c
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	466e      	mov	r6, sp
 8007eac:	f104 0c20 	add.w	ip, r4, #32
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	6861      	ldr	r1, [r4, #4]
 8007eb4:	4637      	mov	r7, r6
 8007eb6:	c703      	stmia	r7!, {r0, r1}
 8007eb8:	3408      	adds	r4, #8
 8007eba:	4564      	cmp	r4, ip
 8007ebc:	463e      	mov	r6, r7
 8007ebe:	d1f7      	bne.n	8007eb0 <__utoa+0x10>
 8007ec0:	7921      	ldrb	r1, [r4, #4]
 8007ec2:	7139      	strb	r1, [r7, #4]
 8007ec4:	1e91      	subs	r1, r2, #2
 8007ec6:	6820      	ldr	r0, [r4, #0]
 8007ec8:	6038      	str	r0, [r7, #0]
 8007eca:	2922      	cmp	r1, #34	; 0x22
 8007ecc:	f04f 0100 	mov.w	r1, #0
 8007ed0:	d904      	bls.n	8007edc <__utoa+0x3c>
 8007ed2:	7019      	strb	r1, [r3, #0]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	b00b      	add	sp, #44	; 0x2c
 8007eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007edc:	1e58      	subs	r0, r3, #1
 8007ede:	4684      	mov	ip, r0
 8007ee0:	fbb5 f7f2 	udiv	r7, r5, r2
 8007ee4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007ee8:	fb02 5617 	mls	r6, r2, r7, r5
 8007eec:	4476      	add	r6, lr
 8007eee:	460c      	mov	r4, r1
 8007ef0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007ef4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007ef8:	462e      	mov	r6, r5
 8007efa:	42b2      	cmp	r2, r6
 8007efc:	f101 0101 	add.w	r1, r1, #1
 8007f00:	463d      	mov	r5, r7
 8007f02:	d9ed      	bls.n	8007ee0 <__utoa+0x40>
 8007f04:	2200      	movs	r2, #0
 8007f06:	545a      	strb	r2, [r3, r1]
 8007f08:	1919      	adds	r1, r3, r4
 8007f0a:	1aa5      	subs	r5, r4, r2
 8007f0c:	42aa      	cmp	r2, r5
 8007f0e:	dae2      	bge.n	8007ed6 <__utoa+0x36>
 8007f10:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007f14:	780e      	ldrb	r6, [r1, #0]
 8007f16:	7006      	strb	r6, [r0, #0]
 8007f18:	3201      	adds	r2, #1
 8007f1a:	f801 5901 	strb.w	r5, [r1], #-1
 8007f1e:	e7f4      	b.n	8007f0a <__utoa+0x6a>
 8007f20:	080087d8 	.word	0x080087d8

08007f24 <__ssputs_r>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	688e      	ldr	r6, [r1, #8]
 8007f2a:	429e      	cmp	r6, r3
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4690      	mov	r8, r2
 8007f32:	461f      	mov	r7, r3
 8007f34:	d838      	bhi.n	8007fa8 <__ssputs_r+0x84>
 8007f36:	898a      	ldrh	r2, [r1, #12]
 8007f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f3c:	d032      	beq.n	8007fa4 <__ssputs_r+0x80>
 8007f3e:	6825      	ldr	r5, [r4, #0]
 8007f40:	6909      	ldr	r1, [r1, #16]
 8007f42:	eba5 0901 	sub.w	r9, r5, r1
 8007f46:	6965      	ldr	r5, [r4, #20]
 8007f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f50:	3301      	adds	r3, #1
 8007f52:	444b      	add	r3, r9
 8007f54:	106d      	asrs	r5, r5, #1
 8007f56:	429d      	cmp	r5, r3
 8007f58:	bf38      	it	cc
 8007f5a:	461d      	movcc	r5, r3
 8007f5c:	0553      	lsls	r3, r2, #21
 8007f5e:	d531      	bpl.n	8007fc4 <__ssputs_r+0xa0>
 8007f60:	4629      	mov	r1, r5
 8007f62:	f000 fb47 	bl	80085f4 <_malloc_r>
 8007f66:	4606      	mov	r6, r0
 8007f68:	b950      	cbnz	r0, 8007f80 <__ssputs_r+0x5c>
 8007f6a:	230c      	movs	r3, #12
 8007f6c:	f8ca 3000 	str.w	r3, [sl]
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f80:	6921      	ldr	r1, [r4, #16]
 8007f82:	464a      	mov	r2, r9
 8007f84:	f000 fabe 	bl	8008504 <memcpy>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	6126      	str	r6, [r4, #16]
 8007f96:	6165      	str	r5, [r4, #20]
 8007f98:	444e      	add	r6, r9
 8007f9a:	eba5 0509 	sub.w	r5, r5, r9
 8007f9e:	6026      	str	r6, [r4, #0]
 8007fa0:	60a5      	str	r5, [r4, #8]
 8007fa2:	463e      	mov	r6, r7
 8007fa4:	42be      	cmp	r6, r7
 8007fa6:	d900      	bls.n	8007faa <__ssputs_r+0x86>
 8007fa8:	463e      	mov	r6, r7
 8007faa:	4632      	mov	r2, r6
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	4641      	mov	r1, r8
 8007fb0:	f000 fab6 	bl	8008520 <memmove>
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	1b9b      	subs	r3, r3, r6
 8007fba:	4432      	add	r2, r6
 8007fbc:	60a3      	str	r3, [r4, #8]
 8007fbe:	6022      	str	r2, [r4, #0]
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e7db      	b.n	8007f7c <__ssputs_r+0x58>
 8007fc4:	462a      	mov	r2, r5
 8007fc6:	f000 fb6f 	bl	80086a8 <_realloc_r>
 8007fca:	4606      	mov	r6, r0
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d1e1      	bne.n	8007f94 <__ssputs_r+0x70>
 8007fd0:	6921      	ldr	r1, [r4, #16]
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	f000 fabe 	bl	8008554 <_free_r>
 8007fd8:	e7c7      	b.n	8007f6a <__ssputs_r+0x46>
	...

08007fdc <_svfiprintf_r>:
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	4698      	mov	r8, r3
 8007fe2:	898b      	ldrh	r3, [r1, #12]
 8007fe4:	061b      	lsls	r3, r3, #24
 8007fe6:	b09d      	sub	sp, #116	; 0x74
 8007fe8:	4607      	mov	r7, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	4614      	mov	r4, r2
 8007fee:	d50e      	bpl.n	800800e <_svfiprintf_r+0x32>
 8007ff0:	690b      	ldr	r3, [r1, #16]
 8007ff2:	b963      	cbnz	r3, 800800e <_svfiprintf_r+0x32>
 8007ff4:	2140      	movs	r1, #64	; 0x40
 8007ff6:	f000 fafd 	bl	80085f4 <_malloc_r>
 8007ffa:	6028      	str	r0, [r5, #0]
 8007ffc:	6128      	str	r0, [r5, #16]
 8007ffe:	b920      	cbnz	r0, 800800a <_svfiprintf_r+0x2e>
 8008000:	230c      	movs	r3, #12
 8008002:	603b      	str	r3, [r7, #0]
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	e0d1      	b.n	80081ae <_svfiprintf_r+0x1d2>
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	616b      	str	r3, [r5, #20]
 800800e:	2300      	movs	r3, #0
 8008010:	9309      	str	r3, [sp, #36]	; 0x24
 8008012:	2320      	movs	r3, #32
 8008014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008018:	f8cd 800c 	str.w	r8, [sp, #12]
 800801c:	2330      	movs	r3, #48	; 0x30
 800801e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081c8 <_svfiprintf_r+0x1ec>
 8008022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008026:	f04f 0901 	mov.w	r9, #1
 800802a:	4623      	mov	r3, r4
 800802c:	469a      	mov	sl, r3
 800802e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008032:	b10a      	cbz	r2, 8008038 <_svfiprintf_r+0x5c>
 8008034:	2a25      	cmp	r2, #37	; 0x25
 8008036:	d1f9      	bne.n	800802c <_svfiprintf_r+0x50>
 8008038:	ebba 0b04 	subs.w	fp, sl, r4
 800803c:	d00b      	beq.n	8008056 <_svfiprintf_r+0x7a>
 800803e:	465b      	mov	r3, fp
 8008040:	4622      	mov	r2, r4
 8008042:	4629      	mov	r1, r5
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff ff6d 	bl	8007f24 <__ssputs_r>
 800804a:	3001      	adds	r0, #1
 800804c:	f000 80aa 	beq.w	80081a4 <_svfiprintf_r+0x1c8>
 8008050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008052:	445a      	add	r2, fp
 8008054:	9209      	str	r2, [sp, #36]	; 0x24
 8008056:	f89a 3000 	ldrb.w	r3, [sl]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 80a2 	beq.w	80081a4 <_svfiprintf_r+0x1c8>
 8008060:	2300      	movs	r3, #0
 8008062:	f04f 32ff 	mov.w	r2, #4294967295
 8008066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800806a:	f10a 0a01 	add.w	sl, sl, #1
 800806e:	9304      	str	r3, [sp, #16]
 8008070:	9307      	str	r3, [sp, #28]
 8008072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008076:	931a      	str	r3, [sp, #104]	; 0x68
 8008078:	4654      	mov	r4, sl
 800807a:	2205      	movs	r2, #5
 800807c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008080:	4851      	ldr	r0, [pc, #324]	; (80081c8 <_svfiprintf_r+0x1ec>)
 8008082:	f7f8 f8b5 	bl	80001f0 <memchr>
 8008086:	9a04      	ldr	r2, [sp, #16]
 8008088:	b9d8      	cbnz	r0, 80080c2 <_svfiprintf_r+0xe6>
 800808a:	06d0      	lsls	r0, r2, #27
 800808c:	bf44      	itt	mi
 800808e:	2320      	movmi	r3, #32
 8008090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008094:	0711      	lsls	r1, r2, #28
 8008096:	bf44      	itt	mi
 8008098:	232b      	movmi	r3, #43	; 0x2b
 800809a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809e:	f89a 3000 	ldrb.w	r3, [sl]
 80080a2:	2b2a      	cmp	r3, #42	; 0x2a
 80080a4:	d015      	beq.n	80080d2 <_svfiprintf_r+0xf6>
 80080a6:	9a07      	ldr	r2, [sp, #28]
 80080a8:	4654      	mov	r4, sl
 80080aa:	2000      	movs	r0, #0
 80080ac:	f04f 0c0a 	mov.w	ip, #10
 80080b0:	4621      	mov	r1, r4
 80080b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b6:	3b30      	subs	r3, #48	; 0x30
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	d94e      	bls.n	800815a <_svfiprintf_r+0x17e>
 80080bc:	b1b0      	cbz	r0, 80080ec <_svfiprintf_r+0x110>
 80080be:	9207      	str	r2, [sp, #28]
 80080c0:	e014      	b.n	80080ec <_svfiprintf_r+0x110>
 80080c2:	eba0 0308 	sub.w	r3, r0, r8
 80080c6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	9304      	str	r3, [sp, #16]
 80080ce:	46a2      	mov	sl, r4
 80080d0:	e7d2      	b.n	8008078 <_svfiprintf_r+0x9c>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	1d19      	adds	r1, r3, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	9103      	str	r1, [sp, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfbb      	ittet	lt
 80080de:	425b      	neglt	r3, r3
 80080e0:	f042 0202 	orrlt.w	r2, r2, #2
 80080e4:	9307      	strge	r3, [sp, #28]
 80080e6:	9307      	strlt	r3, [sp, #28]
 80080e8:	bfb8      	it	lt
 80080ea:	9204      	strlt	r2, [sp, #16]
 80080ec:	7823      	ldrb	r3, [r4, #0]
 80080ee:	2b2e      	cmp	r3, #46	; 0x2e
 80080f0:	d10c      	bne.n	800810c <_svfiprintf_r+0x130>
 80080f2:	7863      	ldrb	r3, [r4, #1]
 80080f4:	2b2a      	cmp	r3, #42	; 0x2a
 80080f6:	d135      	bne.n	8008164 <_svfiprintf_r+0x188>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9203      	str	r2, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfb8      	it	lt
 8008104:	f04f 33ff 	movlt.w	r3, #4294967295
 8008108:	3402      	adds	r4, #2
 800810a:	9305      	str	r3, [sp, #20]
 800810c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081d8 <_svfiprintf_r+0x1fc>
 8008110:	7821      	ldrb	r1, [r4, #0]
 8008112:	2203      	movs	r2, #3
 8008114:	4650      	mov	r0, sl
 8008116:	f7f8 f86b 	bl	80001f0 <memchr>
 800811a:	b140      	cbz	r0, 800812e <_svfiprintf_r+0x152>
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	eba0 000a 	sub.w	r0, r0, sl
 8008122:	fa03 f000 	lsl.w	r0, r3, r0
 8008126:	9b04      	ldr	r3, [sp, #16]
 8008128:	4303      	orrs	r3, r0
 800812a:	3401      	adds	r4, #1
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	4826      	ldr	r0, [pc, #152]	; (80081cc <_svfiprintf_r+0x1f0>)
 8008134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008138:	2206      	movs	r2, #6
 800813a:	f7f8 f859 	bl	80001f0 <memchr>
 800813e:	2800      	cmp	r0, #0
 8008140:	d038      	beq.n	80081b4 <_svfiprintf_r+0x1d8>
 8008142:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <_svfiprintf_r+0x1f4>)
 8008144:	bb1b      	cbnz	r3, 800818e <_svfiprintf_r+0x1b2>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	3307      	adds	r3, #7
 800814a:	f023 0307 	bic.w	r3, r3, #7
 800814e:	3308      	adds	r3, #8
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008154:	4433      	add	r3, r6
 8008156:	9309      	str	r3, [sp, #36]	; 0x24
 8008158:	e767      	b.n	800802a <_svfiprintf_r+0x4e>
 800815a:	fb0c 3202 	mla	r2, ip, r2, r3
 800815e:	460c      	mov	r4, r1
 8008160:	2001      	movs	r0, #1
 8008162:	e7a5      	b.n	80080b0 <_svfiprintf_r+0xd4>
 8008164:	2300      	movs	r3, #0
 8008166:	3401      	adds	r4, #1
 8008168:	9305      	str	r3, [sp, #20]
 800816a:	4619      	mov	r1, r3
 800816c:	f04f 0c0a 	mov.w	ip, #10
 8008170:	4620      	mov	r0, r4
 8008172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008176:	3a30      	subs	r2, #48	; 0x30
 8008178:	2a09      	cmp	r2, #9
 800817a:	d903      	bls.n	8008184 <_svfiprintf_r+0x1a8>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0c5      	beq.n	800810c <_svfiprintf_r+0x130>
 8008180:	9105      	str	r1, [sp, #20]
 8008182:	e7c3      	b.n	800810c <_svfiprintf_r+0x130>
 8008184:	fb0c 2101 	mla	r1, ip, r1, r2
 8008188:	4604      	mov	r4, r0
 800818a:	2301      	movs	r3, #1
 800818c:	e7f0      	b.n	8008170 <_svfiprintf_r+0x194>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <_svfiprintf_r+0x1f8>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4638      	mov	r0, r7
 800819a:	f3af 8000 	nop.w
 800819e:	1c42      	adds	r2, r0, #1
 80081a0:	4606      	mov	r6, r0
 80081a2:	d1d6      	bne.n	8008152 <_svfiprintf_r+0x176>
 80081a4:	89ab      	ldrh	r3, [r5, #12]
 80081a6:	065b      	lsls	r3, r3, #25
 80081a8:	f53f af2c 	bmi.w	8008004 <_svfiprintf_r+0x28>
 80081ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ae:	b01d      	add	sp, #116	; 0x74
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	ab03      	add	r3, sp, #12
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	462a      	mov	r2, r5
 80081ba:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <_svfiprintf_r+0x1f8>)
 80081bc:	a904      	add	r1, sp, #16
 80081be:	4638      	mov	r0, r7
 80081c0:	f000 f87a 	bl	80082b8 <_printf_i>
 80081c4:	e7eb      	b.n	800819e <_svfiprintf_r+0x1c2>
 80081c6:	bf00      	nop
 80081c8:	080087fd 	.word	0x080087fd
 80081cc:	08008807 	.word	0x08008807
 80081d0:	00000000 	.word	0x00000000
 80081d4:	08007f25 	.word	0x08007f25
 80081d8:	08008803 	.word	0x08008803

080081dc <_printf_common>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	4616      	mov	r6, r2
 80081e2:	4699      	mov	r9, r3
 80081e4:	688a      	ldr	r2, [r1, #8]
 80081e6:	690b      	ldr	r3, [r1, #16]
 80081e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	bfb8      	it	lt
 80081f0:	4613      	movlt	r3, r2
 80081f2:	6033      	str	r3, [r6, #0]
 80081f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081f8:	4607      	mov	r7, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	b10a      	cbz	r2, 8008202 <_printf_common+0x26>
 80081fe:	3301      	adds	r3, #1
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	0699      	lsls	r1, r3, #26
 8008206:	bf42      	ittt	mi
 8008208:	6833      	ldrmi	r3, [r6, #0]
 800820a:	3302      	addmi	r3, #2
 800820c:	6033      	strmi	r3, [r6, #0]
 800820e:	6825      	ldr	r5, [r4, #0]
 8008210:	f015 0506 	ands.w	r5, r5, #6
 8008214:	d106      	bne.n	8008224 <_printf_common+0x48>
 8008216:	f104 0a19 	add.w	sl, r4, #25
 800821a:	68e3      	ldr	r3, [r4, #12]
 800821c:	6832      	ldr	r2, [r6, #0]
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	42ab      	cmp	r3, r5
 8008222:	dc26      	bgt.n	8008272 <_printf_common+0x96>
 8008224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008228:	1e13      	subs	r3, r2, #0
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	bf18      	it	ne
 800822e:	2301      	movne	r3, #1
 8008230:	0692      	lsls	r2, r2, #26
 8008232:	d42b      	bmi.n	800828c <_printf_common+0xb0>
 8008234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008238:	4649      	mov	r1, r9
 800823a:	4638      	mov	r0, r7
 800823c:	47c0      	blx	r8
 800823e:	3001      	adds	r0, #1
 8008240:	d01e      	beq.n	8008280 <_printf_common+0xa4>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	68e5      	ldr	r5, [r4, #12]
 8008246:	6832      	ldr	r2, [r6, #0]
 8008248:	f003 0306 	and.w	r3, r3, #6
 800824c:	2b04      	cmp	r3, #4
 800824e:	bf08      	it	eq
 8008250:	1aad      	subeq	r5, r5, r2
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	6922      	ldr	r2, [r4, #16]
 8008256:	bf0c      	ite	eq
 8008258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800825c:	2500      	movne	r5, #0
 800825e:	4293      	cmp	r3, r2
 8008260:	bfc4      	itt	gt
 8008262:	1a9b      	subgt	r3, r3, r2
 8008264:	18ed      	addgt	r5, r5, r3
 8008266:	2600      	movs	r6, #0
 8008268:	341a      	adds	r4, #26
 800826a:	42b5      	cmp	r5, r6
 800826c:	d11a      	bne.n	80082a4 <_printf_common+0xc8>
 800826e:	2000      	movs	r0, #0
 8008270:	e008      	b.n	8008284 <_printf_common+0xa8>
 8008272:	2301      	movs	r3, #1
 8008274:	4652      	mov	r2, sl
 8008276:	4649      	mov	r1, r9
 8008278:	4638      	mov	r0, r7
 800827a:	47c0      	blx	r8
 800827c:	3001      	adds	r0, #1
 800827e:	d103      	bne.n	8008288 <_printf_common+0xac>
 8008280:	f04f 30ff 	mov.w	r0, #4294967295
 8008284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008288:	3501      	adds	r5, #1
 800828a:	e7c6      	b.n	800821a <_printf_common+0x3e>
 800828c:	18e1      	adds	r1, r4, r3
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	2030      	movs	r0, #48	; 0x30
 8008292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008296:	4422      	add	r2, r4
 8008298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800829c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082a0:	3302      	adds	r3, #2
 80082a2:	e7c7      	b.n	8008234 <_printf_common+0x58>
 80082a4:	2301      	movs	r3, #1
 80082a6:	4622      	mov	r2, r4
 80082a8:	4649      	mov	r1, r9
 80082aa:	4638      	mov	r0, r7
 80082ac:	47c0      	blx	r8
 80082ae:	3001      	adds	r0, #1
 80082b0:	d0e6      	beq.n	8008280 <_printf_common+0xa4>
 80082b2:	3601      	adds	r6, #1
 80082b4:	e7d9      	b.n	800826a <_printf_common+0x8e>
	...

080082b8 <_printf_i>:
 80082b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	4691      	mov	r9, r2
 80082c0:	7e27      	ldrb	r7, [r4, #24]
 80082c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082c4:	2f78      	cmp	r7, #120	; 0x78
 80082c6:	4680      	mov	r8, r0
 80082c8:	469a      	mov	sl, r3
 80082ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ce:	d807      	bhi.n	80082e0 <_printf_i+0x28>
 80082d0:	2f62      	cmp	r7, #98	; 0x62
 80082d2:	d80a      	bhi.n	80082ea <_printf_i+0x32>
 80082d4:	2f00      	cmp	r7, #0
 80082d6:	f000 80d8 	beq.w	800848a <_printf_i+0x1d2>
 80082da:	2f58      	cmp	r7, #88	; 0x58
 80082dc:	f000 80a3 	beq.w	8008426 <_printf_i+0x16e>
 80082e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082e8:	e03a      	b.n	8008360 <_printf_i+0xa8>
 80082ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ee:	2b15      	cmp	r3, #21
 80082f0:	d8f6      	bhi.n	80082e0 <_printf_i+0x28>
 80082f2:	a001      	add	r0, pc, #4	; (adr r0, 80082f8 <_printf_i+0x40>)
 80082f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082f8:	08008351 	.word	0x08008351
 80082fc:	08008365 	.word	0x08008365
 8008300:	080082e1 	.word	0x080082e1
 8008304:	080082e1 	.word	0x080082e1
 8008308:	080082e1 	.word	0x080082e1
 800830c:	080082e1 	.word	0x080082e1
 8008310:	08008365 	.word	0x08008365
 8008314:	080082e1 	.word	0x080082e1
 8008318:	080082e1 	.word	0x080082e1
 800831c:	080082e1 	.word	0x080082e1
 8008320:	080082e1 	.word	0x080082e1
 8008324:	08008471 	.word	0x08008471
 8008328:	08008395 	.word	0x08008395
 800832c:	08008453 	.word	0x08008453
 8008330:	080082e1 	.word	0x080082e1
 8008334:	080082e1 	.word	0x080082e1
 8008338:	08008493 	.word	0x08008493
 800833c:	080082e1 	.word	0x080082e1
 8008340:	08008395 	.word	0x08008395
 8008344:	080082e1 	.word	0x080082e1
 8008348:	080082e1 	.word	0x080082e1
 800834c:	0800845b 	.word	0x0800845b
 8008350:	680b      	ldr	r3, [r1, #0]
 8008352:	1d1a      	adds	r2, r3, #4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	600a      	str	r2, [r1, #0]
 8008358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800835c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008360:	2301      	movs	r3, #1
 8008362:	e0a3      	b.n	80084ac <_printf_i+0x1f4>
 8008364:	6825      	ldr	r5, [r4, #0]
 8008366:	6808      	ldr	r0, [r1, #0]
 8008368:	062e      	lsls	r6, r5, #24
 800836a:	f100 0304 	add.w	r3, r0, #4
 800836e:	d50a      	bpl.n	8008386 <_printf_i+0xce>
 8008370:	6805      	ldr	r5, [r0, #0]
 8008372:	600b      	str	r3, [r1, #0]
 8008374:	2d00      	cmp	r5, #0
 8008376:	da03      	bge.n	8008380 <_printf_i+0xc8>
 8008378:	232d      	movs	r3, #45	; 0x2d
 800837a:	426d      	negs	r5, r5
 800837c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008380:	485e      	ldr	r0, [pc, #376]	; (80084fc <_printf_i+0x244>)
 8008382:	230a      	movs	r3, #10
 8008384:	e019      	b.n	80083ba <_printf_i+0x102>
 8008386:	f015 0f40 	tst.w	r5, #64	; 0x40
 800838a:	6805      	ldr	r5, [r0, #0]
 800838c:	600b      	str	r3, [r1, #0]
 800838e:	bf18      	it	ne
 8008390:	b22d      	sxthne	r5, r5
 8008392:	e7ef      	b.n	8008374 <_printf_i+0xbc>
 8008394:	680b      	ldr	r3, [r1, #0]
 8008396:	6825      	ldr	r5, [r4, #0]
 8008398:	1d18      	adds	r0, r3, #4
 800839a:	6008      	str	r0, [r1, #0]
 800839c:	0628      	lsls	r0, r5, #24
 800839e:	d501      	bpl.n	80083a4 <_printf_i+0xec>
 80083a0:	681d      	ldr	r5, [r3, #0]
 80083a2:	e002      	b.n	80083aa <_printf_i+0xf2>
 80083a4:	0669      	lsls	r1, r5, #25
 80083a6:	d5fb      	bpl.n	80083a0 <_printf_i+0xe8>
 80083a8:	881d      	ldrh	r5, [r3, #0]
 80083aa:	4854      	ldr	r0, [pc, #336]	; (80084fc <_printf_i+0x244>)
 80083ac:	2f6f      	cmp	r7, #111	; 0x6f
 80083ae:	bf0c      	ite	eq
 80083b0:	2308      	moveq	r3, #8
 80083b2:	230a      	movne	r3, #10
 80083b4:	2100      	movs	r1, #0
 80083b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083ba:	6866      	ldr	r6, [r4, #4]
 80083bc:	60a6      	str	r6, [r4, #8]
 80083be:	2e00      	cmp	r6, #0
 80083c0:	bfa2      	ittt	ge
 80083c2:	6821      	ldrge	r1, [r4, #0]
 80083c4:	f021 0104 	bicge.w	r1, r1, #4
 80083c8:	6021      	strge	r1, [r4, #0]
 80083ca:	b90d      	cbnz	r5, 80083d0 <_printf_i+0x118>
 80083cc:	2e00      	cmp	r6, #0
 80083ce:	d04d      	beq.n	800846c <_printf_i+0x1b4>
 80083d0:	4616      	mov	r6, r2
 80083d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083d6:	fb03 5711 	mls	r7, r3, r1, r5
 80083da:	5dc7      	ldrb	r7, [r0, r7]
 80083dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e0:	462f      	mov	r7, r5
 80083e2:	42bb      	cmp	r3, r7
 80083e4:	460d      	mov	r5, r1
 80083e6:	d9f4      	bls.n	80083d2 <_printf_i+0x11a>
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d10b      	bne.n	8008404 <_printf_i+0x14c>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	07df      	lsls	r7, r3, #31
 80083f0:	d508      	bpl.n	8008404 <_printf_i+0x14c>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	6861      	ldr	r1, [r4, #4]
 80083f6:	4299      	cmp	r1, r3
 80083f8:	bfde      	ittt	le
 80083fa:	2330      	movle	r3, #48	; 0x30
 80083fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008400:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008404:	1b92      	subs	r2, r2, r6
 8008406:	6122      	str	r2, [r4, #16]
 8008408:	f8cd a000 	str.w	sl, [sp]
 800840c:	464b      	mov	r3, r9
 800840e:	aa03      	add	r2, sp, #12
 8008410:	4621      	mov	r1, r4
 8008412:	4640      	mov	r0, r8
 8008414:	f7ff fee2 	bl	80081dc <_printf_common>
 8008418:	3001      	adds	r0, #1
 800841a:	d14c      	bne.n	80084b6 <_printf_i+0x1fe>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	b004      	add	sp, #16
 8008422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008426:	4835      	ldr	r0, [pc, #212]	; (80084fc <_printf_i+0x244>)
 8008428:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	680e      	ldr	r6, [r1, #0]
 8008430:	061f      	lsls	r7, r3, #24
 8008432:	f856 5b04 	ldr.w	r5, [r6], #4
 8008436:	600e      	str	r6, [r1, #0]
 8008438:	d514      	bpl.n	8008464 <_printf_i+0x1ac>
 800843a:	07d9      	lsls	r1, r3, #31
 800843c:	bf44      	itt	mi
 800843e:	f043 0320 	orrmi.w	r3, r3, #32
 8008442:	6023      	strmi	r3, [r4, #0]
 8008444:	b91d      	cbnz	r5, 800844e <_printf_i+0x196>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	f023 0320 	bic.w	r3, r3, #32
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	2310      	movs	r3, #16
 8008450:	e7b0      	b.n	80083b4 <_printf_i+0xfc>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	f043 0320 	orr.w	r3, r3, #32
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	2378      	movs	r3, #120	; 0x78
 800845c:	4828      	ldr	r0, [pc, #160]	; (8008500 <_printf_i+0x248>)
 800845e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008462:	e7e3      	b.n	800842c <_printf_i+0x174>
 8008464:	065e      	lsls	r6, r3, #25
 8008466:	bf48      	it	mi
 8008468:	b2ad      	uxthmi	r5, r5
 800846a:	e7e6      	b.n	800843a <_printf_i+0x182>
 800846c:	4616      	mov	r6, r2
 800846e:	e7bb      	b.n	80083e8 <_printf_i+0x130>
 8008470:	680b      	ldr	r3, [r1, #0]
 8008472:	6826      	ldr	r6, [r4, #0]
 8008474:	6960      	ldr	r0, [r4, #20]
 8008476:	1d1d      	adds	r5, r3, #4
 8008478:	600d      	str	r5, [r1, #0]
 800847a:	0635      	lsls	r5, r6, #24
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	d501      	bpl.n	8008484 <_printf_i+0x1cc>
 8008480:	6018      	str	r0, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0x1d2>
 8008484:	0671      	lsls	r1, r6, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0x1c8>
 8008488:	8018      	strh	r0, [r3, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	4616      	mov	r6, r2
 8008490:	e7ba      	b.n	8008408 <_printf_i+0x150>
 8008492:	680b      	ldr	r3, [r1, #0]
 8008494:	1d1a      	adds	r2, r3, #4
 8008496:	600a      	str	r2, [r1, #0]
 8008498:	681e      	ldr	r6, [r3, #0]
 800849a:	6862      	ldr	r2, [r4, #4]
 800849c:	2100      	movs	r1, #0
 800849e:	4630      	mov	r0, r6
 80084a0:	f7f7 fea6 	bl	80001f0 <memchr>
 80084a4:	b108      	cbz	r0, 80084aa <_printf_i+0x1f2>
 80084a6:	1b80      	subs	r0, r0, r6
 80084a8:	6060      	str	r0, [r4, #4]
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	2300      	movs	r3, #0
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b4:	e7a8      	b.n	8008408 <_printf_i+0x150>
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	4632      	mov	r2, r6
 80084ba:	4649      	mov	r1, r9
 80084bc:	4640      	mov	r0, r8
 80084be:	47d0      	blx	sl
 80084c0:	3001      	adds	r0, #1
 80084c2:	d0ab      	beq.n	800841c <_printf_i+0x164>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	079b      	lsls	r3, r3, #30
 80084c8:	d413      	bmi.n	80084f2 <_printf_i+0x23a>
 80084ca:	68e0      	ldr	r0, [r4, #12]
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	4298      	cmp	r0, r3
 80084d0:	bfb8      	it	lt
 80084d2:	4618      	movlt	r0, r3
 80084d4:	e7a4      	b.n	8008420 <_printf_i+0x168>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4632      	mov	r2, r6
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d09b      	beq.n	800841c <_printf_i+0x164>
 80084e4:	3501      	adds	r5, #1
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	9903      	ldr	r1, [sp, #12]
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	dcf2      	bgt.n	80084d6 <_printf_i+0x21e>
 80084f0:	e7eb      	b.n	80084ca <_printf_i+0x212>
 80084f2:	2500      	movs	r5, #0
 80084f4:	f104 0619 	add.w	r6, r4, #25
 80084f8:	e7f5      	b.n	80084e6 <_printf_i+0x22e>
 80084fa:	bf00      	nop
 80084fc:	0800880e 	.word	0x0800880e
 8008500:	0800881f 	.word	0x0800881f

08008504 <memcpy>:
 8008504:	440a      	add	r2, r1
 8008506:	4291      	cmp	r1, r2
 8008508:	f100 33ff 	add.w	r3, r0, #4294967295
 800850c:	d100      	bne.n	8008510 <memcpy+0xc>
 800850e:	4770      	bx	lr
 8008510:	b510      	push	{r4, lr}
 8008512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800851a:	4291      	cmp	r1, r2
 800851c:	d1f9      	bne.n	8008512 <memcpy+0xe>
 800851e:	bd10      	pop	{r4, pc}

08008520 <memmove>:
 8008520:	4288      	cmp	r0, r1
 8008522:	b510      	push	{r4, lr}
 8008524:	eb01 0402 	add.w	r4, r1, r2
 8008528:	d902      	bls.n	8008530 <memmove+0x10>
 800852a:	4284      	cmp	r4, r0
 800852c:	4623      	mov	r3, r4
 800852e:	d807      	bhi.n	8008540 <memmove+0x20>
 8008530:	1e43      	subs	r3, r0, #1
 8008532:	42a1      	cmp	r1, r4
 8008534:	d008      	beq.n	8008548 <memmove+0x28>
 8008536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800853a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853e:	e7f8      	b.n	8008532 <memmove+0x12>
 8008540:	4402      	add	r2, r0
 8008542:	4601      	mov	r1, r0
 8008544:	428a      	cmp	r2, r1
 8008546:	d100      	bne.n	800854a <memmove+0x2a>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800854e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008552:	e7f7      	b.n	8008544 <memmove+0x24>

08008554 <_free_r>:
 8008554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008556:	2900      	cmp	r1, #0
 8008558:	d048      	beq.n	80085ec <_free_r+0x98>
 800855a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855e:	9001      	str	r0, [sp, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f1a1 0404 	sub.w	r4, r1, #4
 8008566:	bfb8      	it	lt
 8008568:	18e4      	addlt	r4, r4, r3
 800856a:	f000 f8d3 	bl	8008714 <__malloc_lock>
 800856e:	4a20      	ldr	r2, [pc, #128]	; (80085f0 <_free_r+0x9c>)
 8008570:	9801      	ldr	r0, [sp, #4]
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	4615      	mov	r5, r2
 8008576:	b933      	cbnz	r3, 8008586 <_free_r+0x32>
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	6014      	str	r4, [r2, #0]
 800857c:	b003      	add	sp, #12
 800857e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008582:	f000 b8cd 	b.w	8008720 <__malloc_unlock>
 8008586:	42a3      	cmp	r3, r4
 8008588:	d90b      	bls.n	80085a2 <_free_r+0x4e>
 800858a:	6821      	ldr	r1, [r4, #0]
 800858c:	1862      	adds	r2, r4, r1
 800858e:	4293      	cmp	r3, r2
 8008590:	bf04      	itt	eq
 8008592:	681a      	ldreq	r2, [r3, #0]
 8008594:	685b      	ldreq	r3, [r3, #4]
 8008596:	6063      	str	r3, [r4, #4]
 8008598:	bf04      	itt	eq
 800859a:	1852      	addeq	r2, r2, r1
 800859c:	6022      	streq	r2, [r4, #0]
 800859e:	602c      	str	r4, [r5, #0]
 80085a0:	e7ec      	b.n	800857c <_free_r+0x28>
 80085a2:	461a      	mov	r2, r3
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b10b      	cbz	r3, 80085ac <_free_r+0x58>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x4e>
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	1855      	adds	r5, r2, r1
 80085b0:	42a5      	cmp	r5, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x78>
 80085b4:	6824      	ldr	r4, [r4, #0]
 80085b6:	4421      	add	r1, r4
 80085b8:	1854      	adds	r4, r2, r1
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	d1dd      	bne.n	800857c <_free_r+0x28>
 80085c0:	681c      	ldr	r4, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	4421      	add	r1, r4
 80085c8:	6011      	str	r1, [r2, #0]
 80085ca:	e7d7      	b.n	800857c <_free_r+0x28>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x80>
 80085ce:	230c      	movs	r3, #12
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	e7d3      	b.n	800857c <_free_r+0x28>
 80085d4:	6825      	ldr	r5, [r4, #0]
 80085d6:	1961      	adds	r1, r4, r5
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf04      	itt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	bf04      	itt	eq
 80085e4:	1949      	addeq	r1, r1, r5
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	6054      	str	r4, [r2, #4]
 80085ea:	e7c7      	b.n	800857c <_free_r+0x28>
 80085ec:	b003      	add	sp, #12
 80085ee:	bd30      	pop	{r4, r5, pc}
 80085f0:	200004a0 	.word	0x200004a0

080085f4 <_malloc_r>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	1ccd      	adds	r5, r1, #3
 80085f8:	f025 0503 	bic.w	r5, r5, #3
 80085fc:	3508      	adds	r5, #8
 80085fe:	2d0c      	cmp	r5, #12
 8008600:	bf38      	it	cc
 8008602:	250c      	movcc	r5, #12
 8008604:	2d00      	cmp	r5, #0
 8008606:	4606      	mov	r6, r0
 8008608:	db01      	blt.n	800860e <_malloc_r+0x1a>
 800860a:	42a9      	cmp	r1, r5
 800860c:	d903      	bls.n	8008616 <_malloc_r+0x22>
 800860e:	230c      	movs	r3, #12
 8008610:	6033      	str	r3, [r6, #0]
 8008612:	2000      	movs	r0, #0
 8008614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008616:	f000 f87d 	bl	8008714 <__malloc_lock>
 800861a:	4921      	ldr	r1, [pc, #132]	; (80086a0 <_malloc_r+0xac>)
 800861c:	680a      	ldr	r2, [r1, #0]
 800861e:	4614      	mov	r4, r2
 8008620:	b99c      	cbnz	r4, 800864a <_malloc_r+0x56>
 8008622:	4f20      	ldr	r7, [pc, #128]	; (80086a4 <_malloc_r+0xb0>)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	b923      	cbnz	r3, 8008632 <_malloc_r+0x3e>
 8008628:	4621      	mov	r1, r4
 800862a:	4630      	mov	r0, r6
 800862c:	f000 f862 	bl	80086f4 <_sbrk_r>
 8008630:	6038      	str	r0, [r7, #0]
 8008632:	4629      	mov	r1, r5
 8008634:	4630      	mov	r0, r6
 8008636:	f000 f85d 	bl	80086f4 <_sbrk_r>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d123      	bne.n	8008686 <_malloc_r+0x92>
 800863e:	230c      	movs	r3, #12
 8008640:	6033      	str	r3, [r6, #0]
 8008642:	4630      	mov	r0, r6
 8008644:	f000 f86c 	bl	8008720 <__malloc_unlock>
 8008648:	e7e3      	b.n	8008612 <_malloc_r+0x1e>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	1b5b      	subs	r3, r3, r5
 800864e:	d417      	bmi.n	8008680 <_malloc_r+0x8c>
 8008650:	2b0b      	cmp	r3, #11
 8008652:	d903      	bls.n	800865c <_malloc_r+0x68>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	441c      	add	r4, r3
 8008658:	6025      	str	r5, [r4, #0]
 800865a:	e004      	b.n	8008666 <_malloc_r+0x72>
 800865c:	6863      	ldr	r3, [r4, #4]
 800865e:	42a2      	cmp	r2, r4
 8008660:	bf0c      	ite	eq
 8008662:	600b      	streq	r3, [r1, #0]
 8008664:	6053      	strne	r3, [r2, #4]
 8008666:	4630      	mov	r0, r6
 8008668:	f000 f85a 	bl	8008720 <__malloc_unlock>
 800866c:	f104 000b 	add.w	r0, r4, #11
 8008670:	1d23      	adds	r3, r4, #4
 8008672:	f020 0007 	bic.w	r0, r0, #7
 8008676:	1ac2      	subs	r2, r0, r3
 8008678:	d0cc      	beq.n	8008614 <_malloc_r+0x20>
 800867a:	1a1b      	subs	r3, r3, r0
 800867c:	50a3      	str	r3, [r4, r2]
 800867e:	e7c9      	b.n	8008614 <_malloc_r+0x20>
 8008680:	4622      	mov	r2, r4
 8008682:	6864      	ldr	r4, [r4, #4]
 8008684:	e7cc      	b.n	8008620 <_malloc_r+0x2c>
 8008686:	1cc4      	adds	r4, r0, #3
 8008688:	f024 0403 	bic.w	r4, r4, #3
 800868c:	42a0      	cmp	r0, r4
 800868e:	d0e3      	beq.n	8008658 <_malloc_r+0x64>
 8008690:	1a21      	subs	r1, r4, r0
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f82e 	bl	80086f4 <_sbrk_r>
 8008698:	3001      	adds	r0, #1
 800869a:	d1dd      	bne.n	8008658 <_malloc_r+0x64>
 800869c:	e7cf      	b.n	800863e <_malloc_r+0x4a>
 800869e:	bf00      	nop
 80086a0:	200004a0 	.word	0x200004a0
 80086a4:	200004a4 	.word	0x200004a4

080086a8 <_realloc_r>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	4607      	mov	r7, r0
 80086ac:	4614      	mov	r4, r2
 80086ae:	460e      	mov	r6, r1
 80086b0:	b921      	cbnz	r1, 80086bc <_realloc_r+0x14>
 80086b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086b6:	4611      	mov	r1, r2
 80086b8:	f7ff bf9c 	b.w	80085f4 <_malloc_r>
 80086bc:	b922      	cbnz	r2, 80086c8 <_realloc_r+0x20>
 80086be:	f7ff ff49 	bl	8008554 <_free_r>
 80086c2:	4625      	mov	r5, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c8:	f000 f830 	bl	800872c <_malloc_usable_size_r>
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d20f      	bcs.n	80086f0 <_realloc_r+0x48>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4638      	mov	r0, r7
 80086d4:	f7ff ff8e 	bl	80085f4 <_malloc_r>
 80086d8:	4605      	mov	r5, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0f2      	beq.n	80086c4 <_realloc_r+0x1c>
 80086de:	4631      	mov	r1, r6
 80086e0:	4622      	mov	r2, r4
 80086e2:	f7ff ff0f 	bl	8008504 <memcpy>
 80086e6:	4631      	mov	r1, r6
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ff33 	bl	8008554 <_free_r>
 80086ee:	e7e9      	b.n	80086c4 <_realloc_r+0x1c>
 80086f0:	4635      	mov	r5, r6
 80086f2:	e7e7      	b.n	80086c4 <_realloc_r+0x1c>

080086f4 <_sbrk_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d06      	ldr	r5, [pc, #24]	; (8008710 <_sbrk_r+0x1c>)
 80086f8:	2300      	movs	r3, #0
 80086fa:	4604      	mov	r4, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	602b      	str	r3, [r5, #0]
 8008700:	f7f8 facc 	bl	8000c9c <_sbrk>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d102      	bne.n	800870e <_sbrk_r+0x1a>
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	b103      	cbz	r3, 800870e <_sbrk_r+0x1a>
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	200015f0 	.word	0x200015f0

08008714 <__malloc_lock>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__malloc_lock+0x8>)
 8008716:	f000 b811 	b.w	800873c <__retarget_lock_acquire_recursive>
 800871a:	bf00      	nop
 800871c:	200015f8 	.word	0x200015f8

08008720 <__malloc_unlock>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__malloc_unlock+0x8>)
 8008722:	f000 b80c 	b.w	800873e <__retarget_lock_release_recursive>
 8008726:	bf00      	nop
 8008728:	200015f8 	.word	0x200015f8

0800872c <_malloc_usable_size_r>:
 800872c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008730:	1f18      	subs	r0, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfbc      	itt	lt
 8008736:	580b      	ldrlt	r3, [r1, r0]
 8008738:	18c0      	addlt	r0, r0, r3
 800873a:	4770      	bx	lr

0800873c <__retarget_lock_acquire_recursive>:
 800873c:	4770      	bx	lr

0800873e <__retarget_lock_release_recursive>:
 800873e:	4770      	bx	lr

08008740 <_init>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	bf00      	nop
 8008744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008746:	bc08      	pop	{r3}
 8008748:	469e      	mov	lr, r3
 800874a:	4770      	bx	lr

0800874c <_fini>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr
