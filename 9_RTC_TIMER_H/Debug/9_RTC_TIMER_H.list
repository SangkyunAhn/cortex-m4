
9_RTC_TIMER_H.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007620  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800786c  0800786c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007874  08007874  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007878  08007878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800787c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  200001e4  08007a60  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000152c  08007a60  0002152c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001504d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000356b  00000000  00000000  00035261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000387d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  00039470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001958c  00000000  00000000  00039f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011939  00000000  00000000  00053514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c3a2  00000000  00000000  00064e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f11ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000351c  00000000  00000000  000f1244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077a8 	.word	0x080077a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080077a8 	.word	0x080077a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <MX_GPIO_Init+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a25      	ldr	r2, [pc, #148]	; (800063c <MX_GPIO_Init+0xb4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_GPIO_Init+0xb4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <MX_GPIO_Init+0xb8>)
 80005fa:	f000 fd7f 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <MX_GPIO_Init+0xb8>)
 8000618:	f000 fbec 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800061c:	2301      	movs	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_GPIO_Init+0xbc>)
 8000630:	f000 fbe0 	bl	8000df4 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020800 	.word	0x40020800
 8000644:	40020000 	.word	0x40020000

08000648 <get_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void)
{
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af04      	add	r7, sp, #16
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	480f      	ldr	r0, [pc, #60]	; (8000694 <get_time+0x4c>)
 8000658:	f002 fe4d 	bl	80032f6 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <get_time+0x4c>)
 8000664:	f002 fd42 	bl	80030ec <HAL_RTC_GetTime>

	sprintf((char *)showTime, "%04d-%02d-%02d %02d:%02d:%02d\r\n", sDate.Year + 2000, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800066e:	7d7b      	ldrb	r3, [r7, #21]
 8000670:	461d      	mov	r5, r3
 8000672:	7dbb      	ldrb	r3, [r7, #22]
 8000674:	7839      	ldrb	r1, [r7, #0]
 8000676:	7878      	ldrb	r0, [r7, #1]
 8000678:	78bc      	ldrb	r4, [r7, #2]
 800067a:	9403      	str	r4, [sp, #12]
 800067c:	9002      	str	r0, [sp, #8]
 800067e:	9101      	str	r1, [sp, #4]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	462b      	mov	r3, r5
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <get_time+0x50>)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <get_time+0x54>)
 8000688:	f006 fc60 	bl	8006f4c <siprintf>
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bdb0      	pop	{r4, r5, r7, pc}
 8000694:	20000450 	.word	0x20000450
 8000698:	080077c0 	.word	0x080077c0
 800069c:	20000200 	.word	0x20000200

080006a0 <HAL_IncTick>:

void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_IncTick+0x40>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_IncTick+0x44>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <HAL_IncTick+0x44>)
 80006b2:	6013      	str	r3, [r2, #0]

	if ((uwTick % 1000) == 0) {
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_IncTick+0x44>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <HAL_IncTick+0x48>)
 80006ba:	fba3 1302 	umull	r1, r3, r3, r2
 80006be:	099b      	lsrs	r3, r3, #6
 80006c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c4:	fb01 f303 	mul.w	r3, r1, r3
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d102      	bne.n	80006d4 <HAL_IncTick+0x34>
		sFlag = SET;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <HAL_IncTick+0x4c>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]
	}
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000470 	.word	0x20000470
 80006e8:	10624dd3 	.word	0x10624dd3
 80006ec:	2000021e 	.word	0x2000021e

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 f9ea 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f822 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f7ff ff44 	bl	8000588 <MX_GPIO_Init>
  MX_RTC_Init();
 8000700:	f000 f890 	bl	8000824 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000704:	f005 fee0 	bl	80064c8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8000708:	f7ff ff9e 	bl	8000648 <get_time>

	  if (sFlag) {
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <main+0x48>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00e      	beq.n	8000732 <main+0x42>
		  sFlag = RESET;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <main+0x48>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
		  while (CDC_Transmit_FS(showTime, strlen(showTime)) == USBD_OK) {}
 800071a:	bf00      	nop
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <main+0x4c>)
 800071e:	f7ff fd5f 	bl	80001e0 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	4619      	mov	r1, r3
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <main+0x4c>)
 8000728:	f005 ff8c 	bl	8006644 <CDC_Transmit_FS>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0f4      	beq.n	800071c <main+0x2c>
	  }

	  __NOP();
 8000732:	bf00      	nop
	  get_time();
 8000734:	e7e8      	b.n	8000708 <main+0x18>
 8000736:	bf00      	nop
 8000738:	2000021e 	.word	0x2000021e
 800073c:	20000200 	.word	0x20000200

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fbf4 	bl	8006f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a28      	ldr	r2, [pc, #160]	; (8000810 <SystemClock_Config+0xd0>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd4>)
 800078e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007a0:	2305      	movs	r3, #5
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007b8:	2319      	movs	r3, #25
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80007c0:	2306      	movs	r3, #6
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fe31 	bl	8002434 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007d8:	f000 f81e 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 f894 	bl	8002924 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000802:	f000 f809 	bl	8000818 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_RTC_Init+0xac>)
 800083e:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <MX_RTC_Init+0xb0>)
 8000840:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_RTC_Init+0xac>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_RTC_Init+0xac>)
 800084a:	227f      	movs	r2, #127	; 0x7f
 800084c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_RTC_Init+0xac>)
 8000850:	22ff      	movs	r2, #255	; 0xff
 8000852:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_RTC_Init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_RTC_Init+0xac>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_RTC_Init+0xac>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_RTC_Init+0xac>)
 8000868:	f002 faf2 	bl	8002e50 <HAL_RTC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000872:	f7ff ffd1 	bl	8000818 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000876:	2312      	movs	r3, #18
 8000878:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800087a:	2300      	movs	r3, #0
 800087c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800087e:	2300      	movs	r3, #0
 8000880:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2201      	movs	r2, #1
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_RTC_Init+0xac>)
 8000892:	f002 fb6e 	bl	8002f72 <HAL_RTC_SetTime>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800089c:	f7ff ffbc 	bl	8000818 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80008a0:	2305      	movs	r3, #5
 80008a2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80008a4:	2302      	movs	r3, #2
 80008a6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x18;
 80008a8:	2318      	movs	r3, #24
 80008aa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80008ac:	2322      	movs	r3, #34	; 0x22
 80008ae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_RTC_Init+0xac>)
 80008b8:	f002 fc76 	bl	80031a8 <HAL_RTC_SetDate>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008c2:	f7ff ffa9 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000450 	.word	0x20000450
 80008d4:	40002800 	.word	0x40002800

080008d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <HAL_RTC_MspInit+0x50>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d111      	bne.n	800091e <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000902:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4618      	mov	r0, r3
 800090a:	f002 f9b3 	bl	8002c74 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000914:	f7ff ff80 	bl	8000818 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_RTC_MspInit+0x54>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40002800 	.word	0x40002800
 800092c:	42470e3c 	.word	0x42470e3c

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f7ff fe68 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <OTG_FS_IRQHandler+0x10>)
 80009da:	f000 fcf8 	bl	80013ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20001114 	.word	0x20001114

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f006 fa66 	bl	8006ee8 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20010000 	.word	0x20010000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	20000220 	.word	0x20000220
 8000a50:	20001530 	.word	0x20001530

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7e:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a94:	4c0b      	ldr	r4, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aa2:	f7ff ffd7 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f006 fa25 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fe21 	bl	80006f0 <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000abc:	0800787c 	.word	0x0800787c
  ldr r2, =_sbss
 8000ac0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000ac4:	2000152c 	.word	0x2000152c

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_Init+0x40>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_Init+0x40>)
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x40>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f93b 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff ff16 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023c00 	.word	0x40023c00

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f953 	bl	8000dda <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f91b 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000470 	.word	0x20000470

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff ffee 	bl	8000b70 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffde 	bl	8000b70 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e159      	b.n	80010c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8148 	bne.w	80010be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a2 	beq.w	80010be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b57      	ldr	r3, [pc, #348]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a56      	ldr	r2, [pc, #344]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b54      	ldr	r3, [pc, #336]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a52      	ldr	r2, [pc, #328]	; (80010e0 <HAL_GPIO_Init+0x2ec>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x202>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_GPIO_Init+0x2f4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x1fe>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a47      	ldr	r2, [pc, #284]	; (80010ec <HAL_GPIO_Init+0x2f8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x1f6>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a45      	ldr	r2, [pc, #276]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x1f2>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_GPIO_Init+0x2ec>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x304>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001064:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x304>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f aea2 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800112e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001130:	b08f      	sub	sp, #60	; 0x3c
 8001132:	af0a      	add	r7, sp, #40	; 0x28
 8001134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e10f      	b.n	8001360 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f005 fbba 	bl	80068d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f002 faad 	bl	80036de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	687e      	ldr	r6, [r7, #4]
 800118c:	466d      	mov	r5, sp
 800118e:	f106 0410 	add.w	r4, r6, #16
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800119e:	e885 0003 	stmia.w	r5, {r0, r1}
 80011a2:	1d33      	adds	r3, r6, #4
 80011a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f002 f984 	bl	80034b4 <USB_CoreInit>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2202      	movs	r2, #2
 80011b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e0d0      	b.n	8001360 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fa9b 	bl	8003700 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e04a      	b.n	8001266 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	333d      	adds	r3, #61	; 0x3d
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	333c      	adds	r3, #60	; 0x3c
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	b298      	uxth	r0, r3
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3342      	adds	r3, #66	; 0x42
 800120c:	4602      	mov	r2, r0
 800120e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	333f      	adds	r3, #63	; 0x3f
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	3344      	adds	r3, #68	; 0x44
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3348      	adds	r3, #72	; 0x48
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	3350      	adds	r3, #80	; 0x50
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	3301      	adds	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3af      	bcc.n	80011d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e044      	b.n	8001300 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	3301      	adds	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3b5      	bcc.n	8001276 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	687e      	ldr	r6, [r7, #4]
 8001312:	466d      	mov	r5, sp
 8001314:	f106 0410 	add.w	r4, r6, #16
 8001318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001324:	e885 0003 	stmia.w	r5, {r0, r1}
 8001328:	1d33      	adds	r3, r6, #4
 800132a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f002 fa33 	bl	8003798 <USB_DevInit>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e00d      	b.n	8001360 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 faaf 	bl	80048bc <USB_DevDisconnect>

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001368 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_PCD_Start+0x1c>
 8001380:	2302      	movs	r3, #2
 8001382:	e020      	b.n	80013c6 <HAL_PCD_Start+0x5e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	2b01      	cmp	r3, #1
 8001392:	d109      	bne.n	80013a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 f985 	bl	80036bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fa5f 	bl	800487a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ce:	b590      	push	{r4, r7, lr}
 80013d0:	b08d      	sub	sp, #52	; 0x34
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fb1d 	bl	8004a24 <USB_GetMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 839d 	bne.w	8001b2c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fa81 	bl	80048fe <USB_ReadInterrupts>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8393 	beq.w	8001b2a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fa78 	bl	80048fe <USB_ReadInterrupts>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b02      	cmp	r3, #2
 8001416:	d107      	bne.n	8001428 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f002 0202 	and.w	r2, r2, #2
 8001426:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fa66 	bl	80048fe <USB_ReadInterrupts>
 8001432:	4603      	mov	r3, r0
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b10      	cmp	r3, #16
 800143a:	d161      	bne.n	8001500 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0210 	bic.w	r2, r2, #16
 800144a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	f003 020f 	and.w	r2, r3, #15
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	0c5b      	lsrs	r3, r3, #17
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	2b02      	cmp	r3, #2
 8001476:	d124      	bne.n	80014c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d035      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	6a38      	ldr	r0, [r7, #32]
 8001498:	f003 f89d 	bl	80045d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014a8:	441a      	add	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ba:	441a      	add	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	619a      	str	r2, [r3, #24]
 80014c0:	e016      	b.n	80014f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	0c5b      	lsrs	r3, r3, #17
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d110      	bne.n	80014f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014d4:	2208      	movs	r2, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	6a38      	ldr	r0, [r7, #32]
 80014da:	f003 f87c 	bl	80045d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ea:	441a      	add	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0210 	orr.w	r2, r2, #16
 80014fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f003 f9fa 	bl	80048fe <USB_ReadInterrupts>
 800150a:	4603      	mov	r3, r0
 800150c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001510:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001514:	d16e      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fa00 	bl	8004924 <USB_ReadDevAllOutEpInterrupt>
 8001524:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001526:	e062      	b.n	80015ee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d057      	beq.n	80015e2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fa25 	bl	800498c <USB_ReadDevOutEPInterrupt>
 8001542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00c      	beq.n	8001568 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fdb0 	bl	80020c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00c      	beq.n	800158c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800157e:	461a      	mov	r2, r3
 8001580:	2308      	movs	r3, #8
 8001582:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 feaa 	bl	80022e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	015a      	lsls	r2, r3, #5
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a2:	461a      	mov	r2, r3
 80015a4:	2310      	movs	r3, #16
 80015a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d008      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015be:	461a      	mov	r2, r3
 80015c0:	2320      	movs	r3, #32
 80015c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015da:	461a      	mov	r2, r3
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3301      	adds	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d199      	bne.n	8001528 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 f980 	bl	80048fe <USB_ReadInterrupts>
 80015fe:	4603      	mov	r3, r0
 8001600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001608:	f040 80c0 	bne.w	800178c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 f9a1 	bl	8004958 <USB_ReadDevAllInEpInterrupt>
 8001616:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800161c:	e0b2      	b.n	8001784 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a7 	beq.w	8001778 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f9c7 	bl	80049c8 <USB_ReadDevInEPInterrupt>
 800163a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d057      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	2201      	movs	r2, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800165a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	69f9      	ldr	r1, [r7, #28]
 8001662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001666:	4013      	ands	r3, r2
 8001668:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001676:	461a      	mov	r2, r3
 8001678:	2301      	movs	r3, #1
 800167a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d132      	bne.n	80016ea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3348      	adds	r3, #72	; 0x48
 8001694:	6819      	ldr	r1, [r3, #0]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4403      	add	r3, r0
 80016a4:	3344      	adds	r3, #68	; 0x44
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4419      	add	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4403      	add	r3, r0
 80016b8:	3348      	adds	r3, #72	; 0x48
 80016ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d113      	bne.n	80016ea <HAL_PCD_IRQHandler+0x31c>
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3350      	adds	r3, #80	; 0x50
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016e2:	461a      	mov	r2, r3
 80016e4:	2101      	movs	r1, #1
 80016e6:	f003 f9cf 	bl	8004a88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f005 f970 	bl	80069d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170c:	461a      	mov	r2, r3
 800170e:	2308      	movs	r3, #8
 8001710:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001728:	461a      	mov	r2, r3
 800172a:	2310      	movs	r3, #16
 800172c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001744:	461a      	mov	r2, r3
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	4413      	add	r3, r2
 800175c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001760:	461a      	mov	r2, r3
 8001762:	2302      	movs	r3, #2
 8001764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fc1b 	bl	8001fae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3301      	adds	r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	2b00      	cmp	r3, #0
 8001788:	f47f af49 	bne.w	800161e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f003 f8b4 	bl	80048fe <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800179c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017a0:	d122      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017c8:	2100      	movs	r1, #0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fe26 	bl	800241c <HAL_PCDEx_LPM_Callback>
 80017d0:	e002      	b.n	80017d8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f005 f96c 	bl	8006ab0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 f886 	bl	80048fe <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017fc:	d112      	bne.n	8001824 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d102      	bne.n	8001814 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f005 f928 	bl	8006a64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001822:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f003 f868 	bl	80048fe <USB_ReadInterrupts>
 800182e:	4603      	mov	r3, r0
 8001830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001838:	f040 80c7 	bne.w	80019ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2110      	movs	r1, #16
 8001856:	4618      	mov	r0, r3
 8001858:	f002 f902 	bl	8003a60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001860:	e056      	b.n	8001910 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800186e:	461a      	mov	r2, r3
 8001870:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001874:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001886:	0151      	lsls	r1, r2, #5
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	440a      	add	r2, r1
 800188c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001890:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001894:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a6:	0151      	lsls	r1, r2, #5
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	440a      	add	r2, r1
 80018ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c2:	461a      	mov	r2, r3
 80018c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018da:	0151      	lsls	r1, r2, #5
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	440a      	add	r2, r1
 80018e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	0151      	lsls	r1, r2, #5
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	440a      	add	r2, r1
 8001900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001908:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	3301      	adds	r3, #1
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001916:	429a      	cmp	r2, r3
 8001918:	d3a3      	bcc.n	8001862 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001928:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800192c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800193c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001946:	f043 030b 	orr.w	r3, r3, #11
 800194a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195c:	f043 030b 	orr.w	r3, r3, #11
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	e015      	b.n	8001990 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001972:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001976:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800197a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198a:	f043 030b 	orr.w	r3, r3, #11
 800198e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b4:	461a      	mov	r2, r3
 80019b6:	f003 f867 	bl	8004a88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 ff95 	bl	80048fe <USB_ReadInterrupts>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019de:	d124      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 f82b 	bl	8004a40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 f893 	bl	8003b1a <USB_GetDevSpeed>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681c      	ldr	r4, [r3, #0]
 8001a00:	f001 f92c 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8001a04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f001 fdb2 	bl	8003578 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f005 f806 	bl	8006a26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 ff65 	bl	80048fe <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d10a      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f004 ffe3 	bl	8006a0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f002 0208 	and.w	r2, r2, #8
 8001a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 ff50 	bl	80048fe <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a68:	d10f      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f005 f83b 	bl	8006af0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 ff35 	bl	80048fe <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f005 f80e 	bl	8006acc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 ff1a 	bl	80048fe <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d10a      	bne.n	8001aec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f005 f81c 	bl	8006b14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 ff04 	bl	80048fe <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d115      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f005 f80c 	bl	8006b30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	e000      	b.n	8001b2c <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b2a:	bf00      	nop
    }
  }
}
 8001b2c:	3734      	adds	r7, #52	; 0x34
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}

08001b32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_PCD_SetAddress+0x1a>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e013      	b.n	8001b74 <HAL_PCD_SetAddress+0x42>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fe62 	bl	800482e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	70fb      	strb	r3, [r7, #3]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	803b      	strh	r3, [r7, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da0f      	bge.n	8001bc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	3338      	adds	r3, #56	; 0x38
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	705a      	strb	r2, [r3, #1]
 8001bc0:	e00f      	b.n	8001be2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bee:	883a      	ldrh	r2, [r7, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	78ba      	ldrb	r2, [r7, #2]
 8001bf8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c0c:	78bb      	ldrb	r3, [r7, #2]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d102      	bne.n	8001c18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_PCD_EP_Open+0xaa>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e00e      	b.n	8001c44 <HAL_PCD_EP_Open+0xc8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 ff95 	bl	8003b64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	da0f      	bge.n	8001c80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 020f 	and.w	r2, r3, #15
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3338      	adds	r3, #56	; 0x38
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	705a      	strb	r2, [r3, #1]
 8001c7e:	e00f      	b.n	8001ca0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 020f 	and.w	r2, r3, #15
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_PCD_EP_Close+0x6e>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e00e      	b.n	8001cd8 <HAL_PCD_EP_Close+0x8c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 ffd3 	bl	8003c74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	460b      	mov	r3, r1
 8001cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d102      	bne.n	8001d3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	f002 faae 	bl	80042b4 <USB_EP0StartXfer>
 8001d58:	e008      	b.n	8001d6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	f002 f860 	bl	8003e2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 020f 	and.w	r2, r3, #15
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d98:	681b      	ldr	r3, [r3, #0]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	460b      	mov	r3, r1
 8001db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	3338      	adds	r3, #56	; 0x38
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2201      	movs	r2, #1
 8001de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	6979      	ldr	r1, [r7, #20]
 8001e18:	f002 fa4c 	bl	80042b4 <USB_EP0StartXfer>
 8001e1c:	e008      	b.n	8001e30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6979      	ldr	r1, [r7, #20]
 8001e2c:	f001 fffe 	bl	8003e2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	f003 020f 	and.w	r2, r3, #15
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d901      	bls.n	8001e58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e050      	b.n	8001efa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	da0f      	bge.n	8001e80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3338      	adds	r3, #56	; 0x38
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	705a      	strb	r2, [r3, #1]
 8001e7e:	e00d      	b.n	8001e9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_PCD_EP_SetStall+0x82>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e01e      	b.n	8001efa <HAL_PCD_EP_SetStall+0xc0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68f9      	ldr	r1, [r7, #12]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 fbdb 	bl	8004686 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	b2d9      	uxtb	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001eea:	461a      	mov	r2, r3
 8001eec:	f002 fdcc 	bl	8004a88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d901      	bls.n	8001f20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e042      	b.n	8001fa6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	da0f      	bge.n	8001f48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	3338      	adds	r3, #56	; 0x38
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e00f      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_PCD_EP_ClrStall+0x86>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e00e      	b.n	8001fa6 <HAL_PCD_EP_ClrStall+0xa4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 fbe3 	bl	8004762 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b08a      	sub	sp, #40	; 0x28
 8001fb2:	af02      	add	r7, sp, #8
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	3338      	adds	r3, #56	; 0x38
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d901      	bls.n	8001fe6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06c      	b.n	80020c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d902      	bls.n	8002002 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3303      	adds	r3, #3
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800200a:	e02b      	b.n	8002064 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	429a      	cmp	r2, r3
 8002020:	d902      	bls.n	8002028 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3303      	adds	r3, #3
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68d9      	ldr	r1, [r3, #12]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002040:	b2db      	uxtb	r3, r3
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	4603      	mov	r3, r0
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f002 fa87 	bl	800455a <USB_WritePacket>

    ep->xfer_buff  += len;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	441a      	add	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	441a      	add	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	b29b      	uxth	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	429a      	cmp	r2, r3
 8002078:	d809      	bhi.n	800208e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002082:	429a      	cmp	r2, r3
 8002084:	d203      	bcs.n	800208e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1be      	bne.n	800200c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	429a      	cmp	r2, r3
 8002098:	d811      	bhi.n	80020be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	2201      	movs	r2, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	6939      	ldr	r1, [r7, #16]
 80020b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020ba:	4013      	ands	r3, r2
 80020bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	333c      	adds	r3, #60	; 0x3c
 80020e0:	3304      	adds	r3, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	f040 80a0 	bne.w	8002240 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d015      	beq.n	8002136 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800210e:	4293      	cmp	r3, r2
 8002110:	f240 80dd 	bls.w	80022ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80d7 	beq.w	80022ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212c:	461a      	mov	r2, r3
 800212e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002132:	6093      	str	r3, [r2, #8]
 8002134:	e0cb      	b.n	80022ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	461a      	mov	r2, r3
 800214e:	2320      	movs	r3, #32
 8002150:	6093      	str	r3, [r2, #8]
 8002152:	e0bc      	b.n	80022ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 80b7 	bne.w	80022ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d90f      	bls.n	8002188 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217e:	461a      	mov	r2, r3
 8002180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002184:	6093      	str	r3, [r2, #8]
 8002186:	e0a2      	b.n	80022ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800219a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	0159      	lsls	r1, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4403      	add	r3, r0
 80021be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4403      	add	r3, r0
 80021e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4419      	add	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4403      	add	r3, r0
 80021fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002200:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d114      	bne.n	8002232 <PCD_EP_OutXfrComplete_int+0x16a>
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d108      	bne.n	8002232 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800222a:	461a      	mov	r2, r3
 800222c:	2101      	movs	r1, #1
 800222e:	f002 fc2b 	bl	8004a88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f004 fbb1 	bl	80069a0 <HAL_PCD_DataOutStageCallback>
 800223e:	e046      	b.n	80022ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a26      	ldr	r2, [pc, #152]	; (80022dc <PCD_EP_OutXfrComplete_int+0x214>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d124      	bne.n	8002292 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225e:	461a      	mov	r2, r3
 8002260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002264:	6093      	str	r3, [r2, #8]
 8002266:	e032      	b.n	80022ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227e:	461a      	mov	r2, r3
 8002280:	2320      	movs	r3, #32
 8002282:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f004 fb88 	bl	80069a0 <HAL_PCD_DataOutStageCallback>
 8002290:	e01d      	b.n	80022ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d114      	bne.n	80022c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d108      	bne.n	80022c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022ba:	461a      	mov	r2, r3
 80022bc:	2100      	movs	r1, #0
 80022be:	f002 fbe3 	bl	8004a88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f004 fb69 	bl	80069a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	4f54300a 	.word	0x4f54300a
 80022dc:	4f54310a 	.word	0x4f54310a

080022e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	333c      	adds	r3, #60	; 0x3c
 80022f8:	3304      	adds	r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <PCD_EP_OutSetupPacket_int+0x88>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d90e      	bls.n	8002334 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d009      	beq.n	8002334 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002332:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f004 fb21 	bl	800697c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <PCD_EP_OutSetupPacket_int+0x88>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d90c      	bls.n	800235c <PCD_EP_OutSetupPacket_int+0x7c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d108      	bne.n	800235c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	f002 fb96 	bl	8004a88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	4f54300a 	.word	0x4f54300a

0800236c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
 8002378:	4613      	mov	r3, r2
 800237a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d107      	bne.n	800239a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800238a:	883b      	ldrh	r3, [r7, #0]
 800238c:	0419      	lsls	r1, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	430a      	orrs	r2, r1
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
 8002398:	e028      	b.n	80023ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e00d      	b.n	80023ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	3340      	adds	r3, #64	; 0x40
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4413      	add	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	3301      	adds	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3ec      	bcc.n	80023ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023d4:	883b      	ldrh	r3, [r7, #0]
 80023d6:	0418      	lsls	r0, r3, #16
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	3b01      	subs	r3, #1
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4302      	orrs	r2, r0
 80023e4:	3340      	adds	r3, #64	; 0x40
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e264      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	4ba3      	ldr	r3, [pc, #652]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00c      	beq.n	8002478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b9d      	ldr	r3, [pc, #628]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d157      	bne.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e23f      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x74>
 800249a:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a90      	ldr	r2, [pc, #576]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8a      	ldr	r2, [pc, #552]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024cc:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a83      	ldr	r2, [pc, #524]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a80      	ldr	r2, [pc, #512]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb40 	bl	8000b70 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fb3c 	bl	8000b70 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e204      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fb2c 	bl	8000b70 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fb28 	bl	8000b70 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1f0      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c4      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4952      	ldr	r1, [pc, #328]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fae1 	bl	8000b70 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fadd 	bl	8000b70 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a5      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4940      	ldr	r1, [pc, #256]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fac0 	bl	8000b70 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fabc 	bl	8000b70 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e184      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d030      	beq.n	8002680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe faa0 	bl	8000b70 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fa9c 	bl	8000b70 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e164      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
 8002652:	e015      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe fa89 	bl	8000b70 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fa85 	bl	8000b70 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e14d      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a0 	beq.w	80027ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d121      	bne.n	800270e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fa4b 	bl	8000b70 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e011      	b.n	8002702 <HAL_RCC_OscConfig+0x2ce>
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	42470e80 	.word	0x42470e80
 80026ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fa3e 	bl	8000b70 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e106      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b85      	ldr	r3, [pc, #532]	; (8002918 <HAL_RCC_OscConfig+0x4e4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x2f0>
 8002716:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a80      	ldr	r2, [pc, #512]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x312>
 800272c:	4b7b      	ldr	r3, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a7a      	ldr	r2, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b78      	ldr	r3, [pc, #480]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a77      	ldr	r2, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002746:	4b75      	ldr	r3, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a74      	ldr	r2, [pc, #464]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b72      	ldr	r3, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a71      	ldr	r2, [pc, #452]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fa03 	bl	8000b70 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe f9ff 	bl	8000b70 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0c5      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x33a>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe f9ed 	bl	8000b70 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe f9e9 	bl	8000b70 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0af      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a55      	ldr	r2, [pc, #340]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 809b 	beq.w	800290e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d05c      	beq.n	800289e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d141      	bne.n	8002870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x4ec>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe f9bd 	bl	8000b70 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe f9b9 	bl	8000b70 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e081      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	019b      	lsls	r3, r3, #6
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x4ec>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe f992 	bl	8000b70 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe f98e 	bl	8000b70 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e056      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x41c>
 800286e:	e04e      	b.n	800290e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_OscConfig+0x4ec>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe f97b 	bl	8000b70 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe f977 	bl	8000b70 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e03f      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x44a>
 800289c:	e037      	b.n	800290e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e032      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d028      	beq.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d121      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d11a      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028da:	4013      	ands	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40007000 	.word	0x40007000
 800291c:	40023800 	.word	0x40023800
 8002920:	42470060 	.word	0x42470060

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cc      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b68      	ldr	r3, [pc, #416]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d90c      	bls.n	8002960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d044      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e067      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4934      	ldr	r1, [pc, #208]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe f8ac 	bl	8000b70 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe f8a8 	bl	8000b70 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e04f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d20c      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490a      	ldr	r1, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f820 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08007828 	.word	0x08007828
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af6:	2100      	movs	r1, #0
 8002af8:	6079      	str	r1, [r7, #4]
 8002afa:	2100      	movs	r1, #0
 8002afc:	60f9      	str	r1, [r7, #12]
 8002afe:	2100      	movs	r1, #0
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b02:	2100      	movs	r1, #0
 8002b04:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b06:	4952      	ldr	r1, [pc, #328]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b08:	6889      	ldr	r1, [r1, #8]
 8002b0a:	f001 010c 	and.w	r1, r1, #12
 8002b0e:	2908      	cmp	r1, #8
 8002b10:	d00d      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x3e>
 8002b12:	2908      	cmp	r1, #8
 8002b14:	f200 8094 	bhi.w	8002c40 <HAL_RCC_GetSysClockFreq+0x150>
 8002b18:	2900      	cmp	r1, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x32>
 8002b1c:	2904      	cmp	r1, #4
 8002b1e:	d003      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x38>
 8002b20:	e08e      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b22:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b24:	60bb      	str	r3, [r7, #8]
       break;
 8002b26:	e08e      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	e08b      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2e:	4948      	ldr	r1, [pc, #288]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b30:	6849      	ldr	r1, [r1, #4]
 8002b32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b36:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b38:	4945      	ldr	r1, [pc, #276]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b3a:	6849      	ldr	r1, [r1, #4]
 8002b3c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002b40:	2900      	cmp	r1, #0
 8002b42:	d024      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b44:	4942      	ldr	r1, [pc, #264]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b46:	6849      	ldr	r1, [r1, #4]
 8002b48:	0989      	lsrs	r1, r1, #6
 8002b4a:	4608      	mov	r0, r1
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b54:	f04f 0500 	mov.w	r5, #0
 8002b58:	ea00 0204 	and.w	r2, r0, r4
 8002b5c:	ea01 0305 	and.w	r3, r1, r5
 8002b60:	493d      	ldr	r1, [pc, #244]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b62:	fb01 f003 	mul.w	r0, r1, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	fb01 f102 	mul.w	r1, r1, r2
 8002b6c:	1844      	adds	r4, r0, r1
 8002b6e:	493a      	ldr	r1, [pc, #232]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b70:	fba2 0101 	umull	r0, r1, r2, r1
 8002b74:	1863      	adds	r3, r4, r1
 8002b76:	4619      	mov	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	f7fd fb86 	bl	8000290 <__aeabi_uldivmod>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e04a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	461a      	mov	r2, r3
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	ea02 0400 	and.w	r4, r2, r0
 8002ba6:	ea03 0501 	and.w	r5, r3, r1
 8002baa:	4620      	mov	r0, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	014b      	lsls	r3, r1, #5
 8002bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bbc:	0142      	lsls	r2, r0, #5
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	1b00      	subs	r0, r0, r4
 8002bc4:	eb61 0105 	sbc.w	r1, r1, r5
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	018b      	lsls	r3, r1, #6
 8002bd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bd6:	0182      	lsls	r2, r0, #6
 8002bd8:	1a12      	subs	r2, r2, r0
 8002bda:	eb63 0301 	sbc.w	r3, r3, r1
 8002bde:	f04f 0000 	mov.w	r0, #0
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	00d9      	lsls	r1, r3, #3
 8002be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bec:	00d0      	lsls	r0, r2, #3
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	1912      	adds	r2, r2, r4
 8002bf4:	eb45 0303 	adc.w	r3, r5, r3
 8002bf8:	f04f 0000 	mov.w	r0, #0
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	0299      	lsls	r1, r3, #10
 8002c02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c06:	0290      	lsls	r0, r2, #10
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	f7fd fb3a 	bl	8000290 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4613      	mov	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	60bb      	str	r3, [r7, #8]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c42:	60bb      	str	r3, [r7, #8]
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	68bb      	ldr	r3, [r7, #8]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	017d7840 	.word	0x017d7840

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000000 	.word	0x20000000

08002c74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d035      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c9c:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca2:	f7fd ff65 	bl	8000b70 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002caa:	f7fd ff61 	bl	8000b70 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0ba      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cbc:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	019a      	lsls	r2, r3, #6
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	071b      	lsls	r3, r3, #28
 8002cd4:	495a      	ldr	r1, [pc, #360]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cdc:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce2:	f7fd ff45 	bl	8000b70 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cea:	f7fd ff41 	bl	8000b70 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e09a      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8083 	beq.w	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a48      	ldr	r2, [pc, #288]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d32:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d3e:	f7fd ff17 	bl	8000b70 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fd ff13 	bl	8000b70 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e06c      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d58:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02f      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d82:	4b2f      	ldr	r3, [pc, #188]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d98:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d9e:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d114      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fd fee1 	bl	8000b70 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fd fedd 	bl	8000b70 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e034      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de0:	d10d      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df6:	4912      	ldr	r1, [pc, #72]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]
 8002dfc:	e005      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e08:	6093      	str	r3, [r2, #8]
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	490a      	ldr	r1, [pc, #40]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7c1a      	ldrb	r2, [r3, #16]
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e2e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	42470068 	.word	0x42470068
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470e40 	.word	0x42470e40
 8002e4c:	424711e0 	.word	0x424711e0

08002e50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e083      	b.n	8002f6a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7f5b      	ldrb	r3, [r3, #29]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fd30 	bl	80008d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	22ca      	movs	r2, #202	; 0xca
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2253      	movs	r2, #83	; 0x53
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 faa8 	bl	80033e4 <RTC_EnterInitMode>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	22ff      	movs	r2, #255	; 0xff
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e05e      	b.n	8002f6a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68d2      	ldr	r2, [r2, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6919      	ldr	r1, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	041a      	lsls	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10e      	bne.n	8002f38 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa3a 	bl	8003394 <HAL_RTC_WaitForSynchro>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	22ff      	movs	r2, #255	; 0xff
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2204      	movs	r2, #4
 8002f32:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e018      	b.n	8002f6a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	22ff      	movs	r2, #255	; 0xff
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f72:	b590      	push	{r4, r7, lr}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	7f1b      	ldrb	r3, [r3, #28]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_RTC_SetTime+0x1c>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0aa      	b.n	80030e4 <HAL_RTC_SetTime+0x172>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2202      	movs	r2, #2
 8002f98:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d126      	bne.n	8002fee <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fa3f 	bl	800343c <RTC_ByteToBcd2>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fa38 	bl	800343c <RTC_ByteToBcd2>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fd0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	789b      	ldrb	r3, [r3, #2]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fa30 	bl	800343c <RTC_ByteToBcd2>
 8002fdc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fde:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	78db      	ldrb	r3, [r3, #3]
 8002fe6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e018      	b.n	8003020 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800300e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003014:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	78db      	ldrb	r3, [r3, #3]
 800301a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	22ca      	movs	r2, #202	; 0xca
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2253      	movs	r2, #83	; 0x53
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f9d7 	bl	80033e4 <RTC_EnterInitMode>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	22ff      	movs	r2, #255	; 0xff
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2204      	movs	r2, #4
 8003048:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e047      	b.n	80030e4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800305e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003062:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003072:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6899      	ldr	r1, [r3, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d111      	bne.n	80030ce <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f972 	bl	8003394 <HAL_RTC_WaitForSynchro>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2204      	movs	r2, #4
 80030c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00a      	b.n	80030e4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	22ff      	movs	r2, #255	; 0xff
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80030e2:	2300      	movs	r3, #0
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd90      	pop	{r4, r7, pc}

080030ec <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800311e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003122:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11a      	bne.n	800319e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f983 	bl	8003478 <RTC_Bcd2ToByte>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f97a 	bl	8003478 <RTC_Bcd2ToByte>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	789b      	ldrb	r3, [r3, #2]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f971 	bl	8003478 <RTC_Bcd2ToByte>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	7f1b      	ldrb	r3, [r3, #28]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_RTC_SetDate+0x1c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e094      	b.n	80032ee <HAL_RTC_SetDate+0x146>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2202      	movs	r2, #2
 80031ce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10e      	bne.n	80031f4 <HAL_RTC_SetDate+0x4c>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	f023 0310 	bic.w	r3, r3, #16
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	330a      	adds	r3, #10
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11c      	bne.n	8003234 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	78db      	ldrb	r3, [r3, #3]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f91c 	bl	800343c <RTC_ByteToBcd2>
 8003204:	4603      	mov	r3, r0
 8003206:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f915 	bl	800343c <RTC_ByteToBcd2>
 8003212:	4603      	mov	r3, r0
 8003214:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003216:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	789b      	ldrb	r3, [r3, #2]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f90d 	bl	800343c <RTC_ByteToBcd2>
 8003222:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003224:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e00e      	b.n	8003252 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	78db      	ldrb	r3, [r3, #3]
 8003238:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003240:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003246:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	22ca      	movs	r2, #202	; 0xca
 8003258:	625a      	str	r2, [r3, #36]	; 0x24
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2253      	movs	r2, #83	; 0x53
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f8be 	bl	80033e4 <RTC_EnterInitMode>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	22ff      	movs	r2, #255	; 0xff
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2204      	movs	r2, #4
 800327a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e033      	b.n	80032ee <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003290:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003294:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d111      	bne.n	80032d8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f86d 	bl	8003394 <HAL_RTC_WaitForSynchro>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	22ff      	movs	r2, #255	; 0xff
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2204      	movs	r2, #4
 80032cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e00a      	b.n	80032ee <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd90      	pop	{r4, r7, pc}

080032f6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003310:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003314:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	b2da      	uxtb	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	0b5b      	lsrs	r3, r3, #13
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11a      	bne.n	800338a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	78db      	ldrb	r3, [r3, #3]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f88d 	bl	8003478 <RTC_Bcd2ToByte>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f884 	bl	8003478 <RTC_Bcd2ToByte>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	789b      	ldrb	r3, [r3, #2]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f87b 	bl	8003478 <RTC_Bcd2ToByte>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033b0:	f7fd fbde 	bl	8000b70 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80033b6:	e009      	b.n	80033cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033b8:	f7fd fbda 	bl	8000b70 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c6:	d901      	bls.n	80033cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e007      	b.n	80033dc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d119      	bne.n	8003432 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f04f 32ff 	mov.w	r2, #4294967295
 8003406:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003408:	f7fd fbb2 	bl	8000b70 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800340e:	e009      	b.n	8003424 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003410:	f7fd fbae 	bl	8000b70 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800341e:	d901      	bls.n	8003424 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e007      	b.n	8003434 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800344a:	e005      	b.n	8003458 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	3b0a      	subs	r3, #10
 8003456:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b09      	cmp	r3, #9
 800345c:	d8f6      	bhi.n	800344c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	b2da      	uxtb	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	4313      	orrs	r3, r2
 800346a:	b2db      	uxtb	r3, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	b2db      	uxtb	r3, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034b4:	b084      	sub	sp, #16
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	f107 001c 	add.w	r0, r7, #28
 80034c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d122      	bne.n	8003512 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f001 fb1c 	bl	8004b44 <USB_CoreReset>
 800350c:	4603      	mov	r3, r0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e01a      	b.n	8003548 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f001 fb10 	bl	8004b44 <USB_CoreReset>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
 800353a:	e005      	b.n	8003548 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10b      	bne.n	8003566 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f043 0206 	orr.w	r2, r3, #6
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003572:	b004      	add	sp, #16
 8003574:	4770      	bx	lr
	...

08003578 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d165      	bne.n	8003658 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4a41      	ldr	r2, [pc, #260]	; (8003694 <USB_SetTurnaroundTime+0x11c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d906      	bls.n	80035a2 <USB_SetTurnaroundTime+0x2a>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4a40      	ldr	r2, [pc, #256]	; (8003698 <USB_SetTurnaroundTime+0x120>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d202      	bcs.n	80035a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800359c:	230f      	movs	r3, #15
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e062      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <USB_SetTurnaroundTime+0x120>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d306      	bcc.n	80035b8 <USB_SetTurnaroundTime+0x40>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a3b      	ldr	r2, [pc, #236]	; (800369c <USB_SetTurnaroundTime+0x124>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d202      	bcs.n	80035b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035b2:	230e      	movs	r3, #14
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e057      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a38      	ldr	r2, [pc, #224]	; (800369c <USB_SetTurnaroundTime+0x124>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d306      	bcc.n	80035ce <USB_SetTurnaroundTime+0x56>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a37      	ldr	r2, [pc, #220]	; (80036a0 <USB_SetTurnaroundTime+0x128>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d202      	bcs.n	80035ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035c8:	230d      	movs	r3, #13
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e04c      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4a33      	ldr	r2, [pc, #204]	; (80036a0 <USB_SetTurnaroundTime+0x128>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d306      	bcc.n	80035e4 <USB_SetTurnaroundTime+0x6c>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a32      	ldr	r2, [pc, #200]	; (80036a4 <USB_SetTurnaroundTime+0x12c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d802      	bhi.n	80035e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035de:	230c      	movs	r3, #12
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e041      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <USB_SetTurnaroundTime+0x12c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d906      	bls.n	80035fa <USB_SetTurnaroundTime+0x82>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <USB_SetTurnaroundTime+0x130>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d802      	bhi.n	80035fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035f4:	230b      	movs	r3, #11
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e036      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <USB_SetTurnaroundTime+0x130>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d906      	bls.n	8003610 <USB_SetTurnaroundTime+0x98>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <USB_SetTurnaroundTime+0x134>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d802      	bhi.n	8003610 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800360a:	230a      	movs	r3, #10
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e02b      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4a26      	ldr	r2, [pc, #152]	; (80036ac <USB_SetTurnaroundTime+0x134>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d906      	bls.n	8003626 <USB_SetTurnaroundTime+0xae>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <USB_SetTurnaroundTime+0x138>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d202      	bcs.n	8003626 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003620:	2309      	movs	r3, #9
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e020      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <USB_SetTurnaroundTime+0x138>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d306      	bcc.n	800363c <USB_SetTurnaroundTime+0xc4>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <USB_SetTurnaroundTime+0x13c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d802      	bhi.n	800363c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003636:	2308      	movs	r3, #8
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e015      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <USB_SetTurnaroundTime+0x13c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d906      	bls.n	8003652 <USB_SetTurnaroundTime+0xda>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <USB_SetTurnaroundTime+0x140>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d202      	bcs.n	8003652 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800364c:	2307      	movs	r3, #7
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e00a      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003652:	2306      	movs	r3, #6
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e007      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800365e:	2309      	movs	r3, #9
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e001      	b.n	8003668 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003664:	2309      	movs	r3, #9
 8003666:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	00d8acbf 	.word	0x00d8acbf
 8003698:	00e4e1c0 	.word	0x00e4e1c0
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	01067380 	.word	0x01067380
 80036a4:	011a499f 	.word	0x011a499f
 80036a8:	01312cff 	.word	0x01312cff
 80036ac:	014ca43f 	.word	0x014ca43f
 80036b0:	016e3600 	.word	0x016e3600
 80036b4:	01a6ab1f 	.word	0x01a6ab1f
 80036b8:	01e84800 	.word	0x01e84800

080036bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 0201 	bic.w	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d115      	bne.n	800374e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800372e:	2001      	movs	r0, #1
 8003730:	f7fd fa2a 	bl	8000b88 <HAL_Delay>
      ms++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f001 f972 	bl	8004a24 <USB_GetMode>
 8003740:	4603      	mov	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d01e      	beq.n	8003784 <USB_SetCurrentMode+0x84>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b31      	cmp	r3, #49	; 0x31
 800374a:	d9f0      	bls.n	800372e <USB_SetCurrentMode+0x2e>
 800374c:	e01a      	b.n	8003784 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d115      	bne.n	8003780 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003760:	2001      	movs	r0, #1
 8003762:	f7fd fa11 	bl	8000b88 <HAL_Delay>
      ms++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3301      	adds	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f001 f959 	bl	8004a24 <USB_GetMode>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <USB_SetCurrentMode+0x84>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b31      	cmp	r3, #49	; 0x31
 800377c:	d9f0      	bls.n	8003760 <USB_SetCurrentMode+0x60>
 800377e:	e001      	b.n	8003784 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e005      	b.n	8003790 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b32      	cmp	r3, #50	; 0x32
 8003788:	d101      	bne.n	800378e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003798:	b084      	sub	sp, #16
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	e009      	b.n	80037cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3340      	adds	r3, #64	; 0x40
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	3301      	adds	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b0e      	cmp	r3, #14
 80037d0:	d9f2      	bls.n	80037b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d11c      	bne.n	8003812 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
 8003810:	e00b      	b.n	800382a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003830:	461a      	mov	r2, r3
 8003832:	2300      	movs	r3, #0
 8003834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383c:	4619      	mov	r1, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003844:	461a      	mov	r2, r3
 8003846:	680b      	ldr	r3, [r1, #0]
 8003848:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10c      	bne.n	800386a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003856:	2100      	movs	r1, #0
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f945 	bl	8003ae8 <USB_SetDevSpeed>
 800385e:	e008      	b.n	8003872 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003860:	2101      	movs	r1, #1
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f940 	bl	8003ae8 <USB_SetDevSpeed>
 8003868:	e003      	b.n	8003872 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800386a:	2103      	movs	r1, #3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f93b 	bl	8003ae8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003872:	2110      	movs	r1, #16
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f8f3 	bl	8003a60 <USB_FlushTxFifo>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f90f 	bl	8003aa8 <USB_FlushRxFifo>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	461a      	mov	r2, r3
 80038a8:	2300      	movs	r3, #0
 80038aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	461a      	mov	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e043      	b.n	8003946 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038d4:	d118      	bne.n	8003908 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	461a      	mov	r2, r3
 80038ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e013      	b.n	800391a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fe:	461a      	mov	r2, r3
 8003900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e008      	b.n	800391a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	2300      	movs	r3, #0
 8003918:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003938:	461a      	mov	r2, r3
 800393a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800393e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3301      	adds	r3, #1
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	429a      	cmp	r2, r3
 800394c:	d3b7      	bcc.n	80038be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e043      	b.n	80039dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800396a:	d118      	bne.n	800399e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e013      	b.n	80039b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	461a      	mov	r2, r3
 8003996:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e008      	b.n	80039b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	2300      	movs	r3, #0
 80039ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3301      	adds	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3b7      	bcc.n	8003954 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f043 0210 	orr.w	r2, r3, #16
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <USB_DevInit+0x2c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f043 0208 	orr.w	r2, r3, #8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a58:	b004      	add	sp, #16
 8003a5a:	4770      	bx	lr
 8003a5c:	803c3800 	.word	0x803c3800

08003a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <USB_FlushTxFifo+0x44>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d0f1      	beq.n	8003a7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	00030d40 	.word	0x00030d40

08003aa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2210      	movs	r2, #16
 8003ab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <USB_FlushRxFifo+0x3c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e006      	b.n	8003ad8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d0f1      	beq.n	8003aba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	00030d40 	.word	0x00030d40

08003ae8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b087      	sub	sp, #28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0306 	and.w	r3, r3, #6
 8003b32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]
 8003b3e:	e00a      	b.n	8003b56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d002      	beq.n	8003b4c <USB_GetDevSpeed+0x32>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d102      	bne.n	8003b52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	75fb      	strb	r3, [r7, #23]
 8003b50:	e001      	b.n	8003b56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b52:	230f      	movs	r3, #15
 8003b54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d13a      	bne.n	8003bf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	68f9      	ldr	r1, [r7, #12]
 8003b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d155      	bne.n	8003c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	78db      	ldrb	r3, [r3, #3]
 8003bd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	059b      	lsls	r3, r3, #22
 8003bda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e036      	b.n	8003c64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	2101      	movs	r1, #1
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11a      	bne.n	8003c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d161      	bne.n	8003d54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca6:	d11f      	bne.n	8003ce8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d08:	4013      	ands	r3, r2
 8003d0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	68f9      	ldr	r1, [r7, #12]
 8003d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	0159      	lsls	r1, r3, #5
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <USB_DeactivateEndpoint+0x1b0>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
 8003d52:	e060      	b.n	8003e16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6a:	d11f      	bne.n	8003dac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003daa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dcc:	4013      	ands	r3, r2
 8003dce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	43db      	mvns	r3, r3
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df0:	4013      	ands	r3, r2
 8003df2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	0159      	lsls	r1, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	440b      	add	r3, r1
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <USB_DeactivateEndpoint+0x1b4>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	ec337800 	.word	0xec337800
 8003e28:	eff37800 	.word	0xeff37800

08003e2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	f040 815c 	bne.w	8004106 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d132      	bne.n	8003ebc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb4:	0cdb      	lsrs	r3, r3, #19
 8003eb6:	04db      	lsls	r3, r3, #19
 8003eb8:	6113      	str	r3, [r2, #16]
 8003eba:	e074      	b.n	8003fa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed6:	0cdb      	lsrs	r3, r3, #19
 8003ed8:	04db      	lsls	r3, r3, #19
 8003eda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003efa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6959      	ldr	r1, [r3, #20]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	440b      	add	r3, r1
 8003f18:	1e59      	subs	r1, r3, #1
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f24:	4b9d      	ldr	r3, [pc, #628]	; (800419c <USB_EPStartXfer+0x370>)
 8003f26:	400b      	ands	r3, r1
 8003f28:	69b9      	ldr	r1, [r7, #24]
 8003f2a:	0148      	lsls	r0, r1, #5
 8003f2c:	69f9      	ldr	r1, [r7, #28]
 8003f2e:	4401      	add	r1, r0
 8003f30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f34:	4313      	orrs	r3, r2
 8003f36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	0148      	lsls	r0, r1, #5
 8003f52:	69f9      	ldr	r1, [r7, #28]
 8003f54:	4401      	add	r1, r0
 8003f56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	78db      	ldrb	r3, [r3, #3]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d11f      	bne.n	8003fa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d14b      	bne.n	8004044 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d009      	beq.n	8003fc8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	78db      	ldrb	r3, [r3, #3]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d128      	bne.n	8004022 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d110      	bne.n	8004002 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e00f      	b.n	8004022 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e12f      	b.n	80042a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004062:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	78db      	ldrb	r3, [r3, #3]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d015      	beq.n	8004098 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8117 	beq.w	80042a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	2101      	movs	r1, #1
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004092:	4313      	orrs	r3, r2
 8004094:	634b      	str	r3, [r1, #52]	; 0x34
 8004096:	e105      	b.n	80042a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d110      	bne.n	80040ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e00f      	b.n	80040ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	68d9      	ldr	r1, [r3, #12]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	b298      	uxth	r0, r3
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4603      	mov	r3, r0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa2b 	bl	800455a <USB_WritePacket>
 8004104:	e0ce      	b.n	80042a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	440a      	add	r2, r1
 800411c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004120:	0cdb      	lsrs	r3, r3, #19
 8004122:	04db      	lsls	r3, r3, #19
 8004124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004148:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d126      	bne.n	80041a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	0148      	lsls	r0, r1, #5
 800416c:	69f9      	ldr	r1, [r7, #28]
 800416e:	4401      	add	r1, r0
 8004170:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004174:	4313      	orrs	r3, r2
 8004176:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004196:	6113      	str	r3, [r2, #16]
 8004198:	e036      	b.n	8004208 <USB_EPStartXfer+0x3dc>
 800419a:	bf00      	nop
 800419c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4413      	add	r3, r2
 80041aa:	1e5a      	subs	r2, r3, #1
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	8afb      	ldrh	r3, [r7, #22]
 80041c6:	04d9      	lsls	r1, r3, #19
 80041c8:	4b39      	ldr	r3, [pc, #228]	; (80042b0 <USB_EPStartXfer+0x484>)
 80041ca:	400b      	ands	r3, r1
 80041cc:	69b9      	ldr	r1, [r7, #24]
 80041ce:	0148      	lsls	r0, r1, #5
 80041d0:	69f9      	ldr	r1, [r7, #28]
 80041d2:	4401      	add	r1, r0
 80041d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041d8:	4313      	orrs	r3, r2
 80041da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	8af9      	ldrh	r1, [r7, #22]
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	0148      	lsls	r0, r1, #5
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	4401      	add	r1, r0
 8004200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004204:	4313      	orrs	r3, r2
 8004206:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10d      	bne.n	800422a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	68d9      	ldr	r1, [r3, #12]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	460a      	mov	r2, r1
 8004228:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	78db      	ldrb	r3, [r3, #3]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d128      	bne.n	8004284 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d110      	bne.n	8004264 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	0151      	lsls	r1, r2, #5
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	440a      	add	r2, r1
 8004258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00f      	b.n	8004284 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004282:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	440a      	add	r2, r1
 800429a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800429e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	1ff80000 	.word	0x1ff80000

080042b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	f040 80cd 	bne.w	8004470 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d132      	bne.n	8004344 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433c:	0cdb      	lsrs	r3, r3, #19
 800433e:	04db      	lsls	r3, r3, #19
 8004340:	6113      	str	r3, [r2, #16]
 8004342:	e04e      	b.n	80043e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435e:	0cdb      	lsrs	r3, r3, #19
 8004360:	04db      	lsls	r3, r3, #19
 8004362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004382:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004386:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	d903      	bls.n	800439c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	6939      	ldr	r1, [r7, #16]
 80043d4:	0148      	lsls	r0, r1, #5
 80043d6:	6979      	ldr	r1, [r7, #20]
 80043d8:	4401      	add	r1, r0
 80043da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043de:	4313      	orrs	r3, r2
 80043e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d11e      	bne.n	8004426 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e092      	b.n	800454c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004444:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d07e      	beq.n	800454c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	2101      	movs	r1, #1
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	6979      	ldr	r1, [r7, #20]
 8004466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800446a:	4313      	orrs	r3, r2
 800446c:	634b      	str	r3, [r1, #52]	; 0x34
 800446e:	e06d      	b.n	800454c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448a:	0cdb      	lsrs	r3, r3, #19
 800448c:	04db      	lsls	r3, r3, #19
 800448e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fa:	6939      	ldr	r1, [r7, #16]
 80044fc:	0148      	lsls	r0, r1, #5
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	4401      	add	r1, r0
 8004502:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004506:	4313      	orrs	r3, r2
 8004508:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10d      	bne.n	800452c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	68d9      	ldr	r1, [r3, #12]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	460a      	mov	r2, r1
 800452a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800455a:	b480      	push	{r7}
 800455c:	b089      	sub	sp, #36	; 0x24
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	4611      	mov	r1, r2
 8004566:	461a      	mov	r2, r3
 8004568:	460b      	mov	r3, r1
 800456a:	71fb      	strb	r3, [r7, #7]
 800456c:	4613      	mov	r3, r2
 800456e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800457c:	2b00      	cmp	r3, #0
 800457e:	d123      	bne.n	80045c8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004580:	88bb      	ldrh	r3, [r7, #4]
 8004582:	3303      	adds	r3, #3
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e018      	b.n	80045c0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	031a      	lsls	r2, r3, #12
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	4413      	add	r3, r2
 8004596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459a:	461a      	mov	r2, r3
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	3301      	adds	r3, #1
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3e2      	bcc.n	800458e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b08b      	sub	sp, #44	; 0x2c
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	e014      	b.n	800462c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	601a      	str	r2, [r3, #0]
    pDest++;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	3301      	adds	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	3301      	adds	r3, #1
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	3301      	adds	r3, #1
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	3301      	adds	r3, #1
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3e6      	bcc.n	8004602 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004634:	8bfb      	ldrh	r3, [r7, #30]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01e      	beq.n	8004678 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	461a      	mov	r2, r3
 8004646:	f107 0310 	add.w	r3, r7, #16
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	701a      	strb	r2, [r3, #0]
      i++;
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	3301      	adds	r3, #1
 8004664:	623b      	str	r3, [r7, #32]
      pDest++;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	3301      	adds	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800466c:	8bfb      	ldrh	r3, [r7, #30]
 800466e:	3b01      	subs	r3, #1
 8004670:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004672:	8bfb      	ldrh	r3, [r7, #30]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ea      	bne.n	800464e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800467a:	4618      	mov	r0, r3
 800467c:	372c      	adds	r7, #44	; 0x2c
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	785b      	ldrb	r3, [r3, #1]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d12c      	bne.n	80046fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db12      	blt.n	80046da <USB_EPSetStall+0x54>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00f      	beq.n	80046da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e02b      	b.n	8004754 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	db12      	blt.n	8004734 <USB_EPSetStall+0xae>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00f      	beq.n	8004734 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004732:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d128      	bne.n	80047d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800479c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d003      	beq.n	80047ae <USB_EPClearStall+0x4c>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	78db      	ldrb	r3, [r3, #3]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d138      	bne.n	8004820 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e027      	b.n	8004820 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	0151      	lsls	r1, r2, #5
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	440a      	add	r2, r1
 80047e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	78db      	ldrb	r3, [r3, #3]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d003      	beq.n	8004800 <USB_EPClearStall+0x9e>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	78db      	ldrb	r3, [r3, #3]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d10f      	bne.n	8004820 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800484c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004850:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004894:	f023 0303 	bic.w	r3, r3, #3
 8004898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a8:	f023 0302 	bic.w	r3, r3, #2
 80048ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ea:	f043 0302 	orr.w	r3, r3, #2
 80048ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4013      	ands	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	0c1b      	lsrs	r3, r3, #16
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	b29b      	uxth	r3, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049ba:	68bb      	ldr	r3, [r7, #8]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
 80049f8:	01db      	lsls	r3, r3, #7
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4013      	ands	r3, r2
 8004a14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a16:	68bb      	ldr	r3, [r7, #8]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0301 	and.w	r3, r3, #1
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	460b      	mov	r3, r1
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	333c      	adds	r3, #60	; 0x3c
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <USB_EP0_OutStart+0xb8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d90a      	bls.n	8004ac2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004abc:	d101      	bne.n	8004ac2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e037      	b.n	8004b32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2300      	movs	r3, #0
 8004acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f043 0318 	orr.w	r3, r3, #24
 8004af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10f      	bne.n	8004b30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	4f54300a 	.word	0x4f54300a

08004b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <USB_CoreReset+0x60>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e01a      	b.n	8004b96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	daf3      	bge.n	8004b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <USB_CoreReset+0x60>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e006      	b.n	8004b96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d0f1      	beq.n	8004b78 <USB_CoreReset+0x34>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	00030d40 	.word	0x00030d40

08004ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004bb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bb8:	f002 f952 	bl	8006e60 <USBD_static_malloc>
 8004bbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e066      	b.n	8004c9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7c1b      	ldrb	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d119      	bne.n	8004c14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be4:	2202      	movs	r2, #2
 8004be6:	2181      	movs	r1, #129	; 0x81
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f002 f816 	bl	8006c1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f002 f80c 	bl	8006c1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004c12:	e016      	b.n	8004c42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	2202      	movs	r2, #2
 8004c18:	2181      	movs	r1, #129	; 0x81
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 fffd 	bl	8006c1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c26:	2340      	movs	r3, #64	; 0x40
 8004c28:	2202      	movs	r2, #2
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f001 fff4 	bl	8006c1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c42:	2308      	movs	r3, #8
 8004c44:	2203      	movs	r2, #3
 8004c46:	2182      	movs	r1, #130	; 0x82
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 ffe6 	bl	8006c1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	7c1b      	ldrb	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c82:	2101      	movs	r1, #1
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f002 f8b7 	bl	8006df8 <USBD_LL_PrepareReceive>
 8004c8a:	e007      	b.n	8004c9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c92:	2340      	movs	r3, #64	; 0x40
 8004c94:	2101      	movs	r1, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f002 f8ae 	bl	8006df8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004cb2:	2181      	movs	r1, #129	; 0x81
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 ffd6 	bl	8006c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 ffcf 	bl	8006c66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004cd0:	2182      	movs	r1, #130	; 0x82
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 ffc7 	bl	8006c66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d02:	4618      	mov	r0, r3
 8004d04:	f002 f8ba 	bl	8006e7c <USBD_static_free>
    pdev->pClassData = NULL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0af      	b.n	8004ea4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03f      	beq.n	8004dd0 <USBD_CDC_Setup+0xb4>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	f040 809f 	bne.w	8004e94 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	88db      	ldrh	r3, [r3, #6]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02e      	beq.n	8004dbc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da16      	bge.n	8004d96 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004d74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	88d2      	ldrh	r2, [r2, #6]
 8004d7a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	88db      	ldrh	r3, [r3, #6]
 8004d80:	2b07      	cmp	r3, #7
 8004d82:	bf28      	it	cs
 8004d84:	2307      	movcs	r3, #7
 8004d86:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	89fa      	ldrh	r2, [r7, #14]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 fb19 	bl	80063c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004d94:	e085      	b.n	8004ea2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	785a      	ldrb	r2, [r3, #1]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	88db      	ldrh	r3, [r3, #6]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004dac:	6939      	ldr	r1, [r7, #16]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	88db      	ldrh	r3, [r3, #6]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 fb32 	bl	800641e <USBD_CtlPrepareRx>
      break;
 8004dba:	e072      	b.n	8004ea2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	7850      	ldrb	r0, [r2, #1]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	4798      	blx	r3
      break;
 8004dce:	e068      	b.n	8004ea2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b0b      	cmp	r3, #11
 8004dd6:	d852      	bhi.n	8004e7e <USBD_CDC_Setup+0x162>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <USBD_CDC_Setup+0xc4>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e8d 	.word	0x08004e8d
 8004de8:	08004e7f 	.word	0x08004e7f
 8004dec:	08004e7f 	.word	0x08004e7f
 8004df0:	08004e7f 	.word	0x08004e7f
 8004df4:	08004e7f 	.word	0x08004e7f
 8004df8:	08004e7f 	.word	0x08004e7f
 8004dfc:	08004e7f 	.word	0x08004e7f
 8004e00:	08004e7f 	.word	0x08004e7f
 8004e04:	08004e7f 	.word	0x08004e7f
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e65 	.word	0x08004e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d107      	bne.n	8004e2c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e1c:	f107 030a 	add.w	r3, r7, #10
 8004e20:	2202      	movs	r2, #2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f001 face 	bl	80063c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e2a:	e032      	b.n	8004e92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fa58 	bl	80062e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e34:	2303      	movs	r3, #3
 8004e36:	75fb      	strb	r3, [r7, #23]
          break;
 8004e38:	e02b      	b.n	8004e92 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d107      	bne.n	8004e56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e46:	f107 030d 	add.w	r3, r7, #13
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 fab9 	bl	80063c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e54:	e01d      	b.n	8004e92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fa43 	bl	80062e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	75fb      	strb	r3, [r7, #23]
          break;
 8004e62:	e016      	b.n	8004e92 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d00f      	beq.n	8004e90 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004e70:	6839      	ldr	r1, [r7, #0]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fa36 	bl	80062e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e7c:	e008      	b.n	8004e90 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 fa2f 	bl	80062e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e86:	2303      	movs	r3, #3
 8004e88:	75fb      	strb	r3, [r7, #23]
          break;
 8004e8a:	e002      	b.n	8004e92 <USBD_CDC_Setup+0x176>
          break;
 8004e8c:	bf00      	nop
 8004e8e:	e008      	b.n	8004ea2 <USBD_CDC_Setup+0x186>
          break;
 8004e90:	bf00      	nop
      }
      break;
 8004e92:	e006      	b.n	8004ea2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fa24 	bl	80062e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea0:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e04f      	b.n	8004f6e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ed4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3318      	adds	r3, #24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d029      	beq.n	8004f40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3318      	adds	r3, #24
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	78f9      	ldrb	r1, [r7, #3]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	460b      	mov	r3, r1
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	1a5b      	subs	r3, r3, r1
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4403      	add	r3, r0
 8004f0c:	3344      	adds	r3, #68	; 0x44
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f14:	fb03 f301 	mul.w	r3, r3, r1
 8004f18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d110      	bne.n	8004f40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f32:	78f9      	ldrb	r1, [r7, #3]
 8004f34:	2300      	movs	r3, #0
 8004f36:	2200      	movs	r2, #0
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 ff3c 	bl	8006db6 <USBD_LL_Transmit>
 8004f3e:	e015      	b.n	8004f6c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e015      	b.n	8004fc4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 ff4c 	bl	8006e3a <USBD_LL_GetRxDataSize>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fda:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e01b      	b.n	800501e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d015      	beq.n	800501c <USBD_CDC_EP0_RxReady+0x50>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ff6:	2bff      	cmp	r3, #255	; 0xff
 8004ff8:	d010      	beq.n	800501c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005008:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005010:	b292      	uxth	r2, r2
 8005012:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	22ff      	movs	r2, #255	; 0xff
 8005018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2243      	movs	r2, #67	; 0x43
 8005034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005036:	4b03      	ldr	r3, [pc, #12]	; (8005044 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	20000094 	.word	0x20000094

08005048 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2243      	movs	r2, #67	; 0x43
 8005054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005056:	4b03      	ldr	r3, [pc, #12]	; (8005064 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000050 	.word	0x20000050

08005068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2243      	movs	r2, #67	; 0x43
 8005074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005076:	4b03      	ldr	r3, [pc, #12]	; (8005084 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	200000d8 	.word	0x200000d8

08005088 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	220a      	movs	r2, #10
 8005094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005096:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	2000000c 	.word	0x2000000c

080050a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e004      	b.n	80050c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e008      	b.n	8005102 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800511e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005126:	2303      	movs	r3, #3
 8005128:	e004      	b.n	8005134 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800514e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800515e:	2303      	movs	r3, #3
 8005160:	e01a      	b.n	8005198 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005168:	2b00      	cmp	r3, #0
 800516a:	d114      	bne.n	8005196 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2201      	movs	r2, #1
 8005170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800518a:	2181      	movs	r1, #129	; 0x81
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 fe12 	bl	8006db6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005196:	7bfb      	ldrb	r3, [r7, #15]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e016      	b.n	80051ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7c1b      	ldrb	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d0:	2101      	movs	r1, #1
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fe10 	bl	8006df8 <USBD_LL_PrepareReceive>
 80051d8:	e007      	b.n	80051ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	2101      	movs	r1, #1
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 fe07 	bl	8006df8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005208:	2303      	movs	r3, #3
 800520a:	e01f      	b.n	800524c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f001 fc83 	bl	8006b4c <USBD_LL_Init>
 8005246:	4603      	mov	r3, r0
 8005248:	75fb      	strb	r3, [r7, #23]

  return ret;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005268:	2303      	movs	r3, #3
 800526a:	e016      	b.n	800529a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f107 020e 	add.w	r2, r7, #14
 800528c:	4610      	mov	r0, r2
 800528e:	4798      	blx	r3
 8005290:	4602      	mov	r2, r0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fc9a 	bl	8006be4 <USBD_LL_Start>
 80052b0:	4603      	mov	r3, r0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80052dc:	2303      	movs	r3, #3
 80052de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	4611      	mov	r1, r2
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	4611      	mov	r1, r2
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
  }

  return USBD_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 ff90 	bl	8006270 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2b02      	cmp	r3, #2
 8005372:	d01a      	beq.n	80053aa <USBD_LL_SetupStage+0x72>
 8005374:	2b02      	cmp	r3, #2
 8005376:	d822      	bhi.n	80053be <USBD_LL_SetupStage+0x86>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <USBD_LL_SetupStage+0x4a>
 800537c:	2b01      	cmp	r3, #1
 800537e:	d00a      	beq.n	8005396 <USBD_LL_SetupStage+0x5e>
 8005380:	e01d      	b.n	80053be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa62 	bl	8005854 <USBD_StdDevReq>
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
      break;
 8005394:	e020      	b.n	80053d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fac6 	bl	8005930 <USBD_StdItfReq>
 80053a4:	4603      	mov	r3, r0
 80053a6:	73fb      	strb	r3, [r7, #15]
      break;
 80053a8:	e016      	b.n	80053d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb05 	bl	80059c2 <USBD_StdEPReq>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
      break;
 80053bc:	e00c      	b.n	80053d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fc69 	bl	8006ca4 <USBD_LL_StallEP>
 80053d2:	4603      	mov	r3, r0
 80053d4:	73fb      	strb	r3, [r7, #15]
      break;
 80053d6:	bf00      	nop
  }

  return ret;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	460b      	mov	r3, r1
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053f0:	7afb      	ldrb	r3, [r7, #11]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d138      	bne.n	8005468 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005404:	2b03      	cmp	r3, #3
 8005406:	d14a      	bne.n	800549e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	429a      	cmp	r2, r3
 8005412:	d913      	bls.n	800543c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	1ad2      	subs	r2, r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4293      	cmp	r3, r2
 800542c:	bf28      	it	cs
 800542e:	4613      	movcs	r3, r2
 8005430:	461a      	mov	r2, r3
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f001 f80f 	bl	8006458 <USBD_CtlContinueRx>
 800543a:	e030      	b.n	800549e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b03      	cmp	r3, #3
 8005446:	d10b      	bne.n	8005460 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f001 f80a 	bl	800647a <USBD_CtlSendStatus>
 8005466:	e01a      	b.n	800549e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d114      	bne.n	800549e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	7afa      	ldrb	r2, [r7, #11]
 800548a:	4611      	mov	r1, r2
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	4798      	blx	r3
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	e000      	b.n	80054a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	460b      	mov	r3, r1
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d16b      	bne.n	8005594 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3314      	adds	r3, #20
 80054c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d156      	bne.n	800557a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d914      	bls.n	8005502 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	1ad2      	subs	r2, r2, r3
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 ff84 	bl	80063fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054f4:	2300      	movs	r3, #0
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f001 fc7c 	bl	8006df8 <USBD_LL_PrepareReceive>
 8005500:	e03b      	b.n	800557a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d11c      	bne.n	8005548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005516:	429a      	cmp	r2, r3
 8005518:	d316      	bcc.n	8005548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005524:	429a      	cmp	r2, r3
 8005526:	d20f      	bcs.n	8005548 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005528:	2200      	movs	r2, #0
 800552a:	2100      	movs	r1, #0
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 ff65 	bl	80063fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800553a:	2300      	movs	r3, #0
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f001 fc59 	bl	8006df8 <USBD_LL_PrepareReceive>
 8005546:	e018      	b.n	800557a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b03      	cmp	r3, #3
 8005552:	d10b      	bne.n	800556c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800556c:	2180      	movs	r1, #128	; 0x80
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f001 fb98 	bl	8006ca4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 ff93 	bl	80064a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d122      	bne.n	80055ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff fe98 	bl	80052ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005592:	e01a      	b.n	80055ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d114      	bne.n	80055ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00e      	beq.n	80055ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	7afa      	ldrb	r2, [r7, #11]
 80055b6:	4611      	mov	r1, r2
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	4798      	blx	r3
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	e000      	b.n	80055cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005604:	2303      	movs	r3, #3
 8005606:	e02f      	b.n	8005668 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00f      	beq.n	8005632 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6852      	ldr	r2, [r2, #4]
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	4611      	mov	r1, r2
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	2200      	movs	r2, #0
 8005636:	2100      	movs	r1, #0
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 faee 	bl	8006c1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fae0 	bl	8006c1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2240      	movs	r2, #64	; 0x40
 8005664:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d106      	bne.n	80056de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80056fe:	2303      	movs	r3, #3
 8005700:	e012      	b.n	8005728 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d10b      	bne.n	8005726 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005746:	2303      	movs	r3, #3
 8005748:	e014      	b.n	8005774 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b03      	cmp	r3, #3
 8005754:	d10d      	bne.n	8005772 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	4611      	mov	r1, r2
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	e014      	b.n	80057c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d10d      	bne.n	80057be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	4611      	mov	r1, r2
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6852      	ldr	r2, [r2, #4]
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	4611      	mov	r1, r2
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
  }

  return USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005816:	b480      	push	{r7}
 8005818:	b087      	sub	sp, #28
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005834:	8a3b      	ldrh	r3, [r7, #16]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	b21a      	sxth	r2, r3
 800583a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800583e:	4313      	orrs	r3, r2
 8005840:	b21b      	sxth	r3, r3
 8005842:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005844:	89fb      	ldrh	r3, [r7, #14]
}
 8005846:	4618      	mov	r0, r3
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d005      	beq.n	800587a <USBD_StdDevReq+0x26>
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d853      	bhi.n	800591a <USBD_StdDevReq+0xc6>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <USBD_StdDevReq+0x3a>
 8005876:	2b20      	cmp	r3, #32
 8005878:	d14f      	bne.n	800591a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]
      break;
 800588c:	e04a      	b.n	8005924 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b09      	cmp	r3, #9
 8005894:	d83b      	bhi.n	800590e <USBD_StdDevReq+0xba>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USBD_StdDevReq+0x48>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058f1 	.word	0x080058f1
 80058a0:	08005905 	.word	0x08005905
 80058a4:	0800590f 	.word	0x0800590f
 80058a8:	080058fb 	.word	0x080058fb
 80058ac:	0800590f 	.word	0x0800590f
 80058b0:	080058cf 	.word	0x080058cf
 80058b4:	080058c5 	.word	0x080058c5
 80058b8:	0800590f 	.word	0x0800590f
 80058bc:	080058e7 	.word	0x080058e7
 80058c0:	080058d9 	.word	0x080058d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9de 	bl	8005c88 <USBD_GetDescriptor>
          break;
 80058cc:	e024      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fb43 	bl	8005f5c <USBD_SetAddress>
          break;
 80058d6:	e01f      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fb82 	bl	8005fe4 <USBD_SetConfig>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
          break;
 80058e4:	e018      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fc21 	bl	8006130 <USBD_GetConfig>
          break;
 80058ee:	e013      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fc52 	bl	800619c <USBD_GetStatus>
          break;
 80058f8:	e00e      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fc81 	bl	8006204 <USBD_SetFeature>
          break;
 8005902:	e009      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fc90 	bl	800622c <USBD_ClrFeature>
          break;
 800590c:	e004      	b.n	8005918 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fce7 	bl	80062e4 <USBD_CtlError>
          break;
 8005916:	bf00      	nop
      }
      break;
 8005918:	e004      	b.n	8005924 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fce1 	bl	80062e4 <USBD_CtlError>
      break;
 8005922:	bf00      	nop
  }

  return ret;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop

08005930 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d005      	beq.n	8005956 <USBD_StdItfReq+0x26>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d82f      	bhi.n	80059ae <USBD_StdItfReq+0x7e>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <USBD_StdItfReq+0x26>
 8005952:	2b20      	cmp	r3, #32
 8005954:	d12b      	bne.n	80059ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595c:	b2db      	uxtb	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	2b02      	cmp	r3, #2
 8005962:	d81d      	bhi.n	80059a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	889b      	ldrh	r3, [r3, #4]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	d813      	bhi.n	8005996 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	88db      	ldrh	r3, [r3, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d110      	bne.n	80059aa <USBD_StdItfReq+0x7a>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10d      	bne.n	80059aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fd73 	bl	800647a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005994:	e009      	b.n	80059aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fca3 	bl	80062e4 <USBD_CtlError>
          break;
 800599e:	e004      	b.n	80059aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fc9e 	bl	80062e4 <USBD_CtlError>
          break;
 80059a8:	e000      	b.n	80059ac <USBD_StdItfReq+0x7c>
          break;
 80059aa:	bf00      	nop
      }
      break;
 80059ac:	e004      	b.n	80059b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fc97 	bl	80062e4 <USBD_CtlError>
      break;
 80059b6:	bf00      	nop
  }

  return ret;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	889b      	ldrh	r3, [r3, #4]
 80059d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d007      	beq.n	80059f2 <USBD_StdEPReq+0x30>
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	f200 8145 	bhi.w	8005c72 <USBD_StdEPReq+0x2b0>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <USBD_StdEPReq+0x44>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	f040 8140 	bne.w	8005c72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4798      	blx	r3
 8005a00:	4603      	mov	r3, r0
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e13a      	b.n	8005c7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d007      	beq.n	8005a1e <USBD_StdEPReq+0x5c>
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	f300 8129 	bgt.w	8005c66 <USBD_StdEPReq+0x2a4>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d07f      	beq.n	8005b18 <USBD_StdEPReq+0x156>
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d03c      	beq.n	8005a96 <USBD_StdEPReq+0xd4>
 8005a1c:	e123      	b.n	8005c66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d002      	beq.n	8005a30 <USBD_StdEPReq+0x6e>
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d016      	beq.n	8005a5c <USBD_StdEPReq+0x9a>
 8005a2e:	e02c      	b.n	8005a8a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <USBD_StdEPReq+0x90>
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d00a      	beq.n	8005a52 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 f92f 	bl	8006ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 f92b 	bl	8006ca4 <USBD_LL_StallEP>
 8005a4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a50:	e020      	b.n	8005a94 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fc45 	bl	80062e4 <USBD_CtlError>
              break;
 8005a5a:	e01b      	b.n	8005a94 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	885b      	ldrh	r3, [r3, #2]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10e      	bne.n	8005a82 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <USBD_StdEPReq+0xc0>
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b80      	cmp	r3, #128	; 0x80
 8005a6e:	d008      	beq.n	8005a82 <USBD_StdEPReq+0xc0>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	88db      	ldrh	r3, [r3, #6]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 f911 	bl	8006ca4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fcf9 	bl	800647a <USBD_CtlSendStatus>

              break;
 8005a88:	e004      	b.n	8005a94 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fc29 	bl	80062e4 <USBD_CtlError>
              break;
 8005a92:	bf00      	nop
          }
          break;
 8005a94:	e0ec      	b.n	8005c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d002      	beq.n	8005aa8 <USBD_StdEPReq+0xe6>
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d016      	beq.n	8005ad4 <USBD_StdEPReq+0x112>
 8005aa6:	e030      	b.n	8005b0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <USBD_StdEPReq+0x108>
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	2b80      	cmp	r3, #128	; 0x80
 8005ab2:	d00a      	beq.n	8005aca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 f8f3 	bl	8006ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 f8ef 	bl	8006ca4 <USBD_LL_StallEP>
 8005ac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ac8:	e025      	b.n	8005b16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fc09 	bl	80062e4 <USBD_CtlError>
              break;
 8005ad2:	e020      	b.n	8005b16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	885b      	ldrh	r3, [r3, #2]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11b      	bne.n	8005b14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 f8f9 	bl	8006ce2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fcc2 	bl	800647a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005b08:	e004      	b.n	8005b14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fbe9 	bl	80062e4 <USBD_CtlError>
              break;
 8005b12:	e000      	b.n	8005b16 <USBD_StdEPReq+0x154>
              break;
 8005b14:	bf00      	nop
          }
          break;
 8005b16:	e0ab      	b.n	8005c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d002      	beq.n	8005b2a <USBD_StdEPReq+0x168>
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d032      	beq.n	8005b8e <USBD_StdEPReq+0x1cc>
 8005b28:	e097      	b.n	8005c5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <USBD_StdEPReq+0x17e>
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d004      	beq.n	8005b40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fbd3 	bl	80062e4 <USBD_CtlError>
                break;
 8005b3e:	e091      	b.n	8005c64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da0b      	bge.n	8005b60 <USBD_StdEPReq+0x19e>
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	3310      	adds	r3, #16
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	e00b      	b.n	8005b78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2202      	movs	r2, #2
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fc1d 	bl	80063c6 <USBD_CtlSendData>
              break;
 8005b8c:	e06a      	b.n	8005c64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da11      	bge.n	8005bba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3324      	adds	r3, #36	; 0x24
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d117      	bne.n	8005be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fb96 	bl	80062e4 <USBD_CtlError>
                  break;
 8005bb8:	e054      	b.n	8005c64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bba:	7bbb      	ldrb	r3, [r7, #14]
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fb83 	bl	80062e4 <USBD_CtlError>
                  break;
 8005bde:	e041      	b.n	8005c64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da0b      	bge.n	8005c00 <USBD_StdEPReq+0x23e>
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	3310      	adds	r3, #16
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	e00b      	b.n	8005c18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	3304      	adds	r3, #4
 8005c18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <USBD_StdEPReq+0x264>
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d103      	bne.n	8005c2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e00e      	b.n	8005c4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f874 	bl	8006d20 <USBD_LL_IsStallEP>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e002      	b.n	8005c4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fbb7 	bl	80063c6 <USBD_CtlSendData>
              break;
 8005c58:	e004      	b.n	8005c64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fb41 	bl	80062e4 <USBD_CtlError>
              break;
 8005c62:	bf00      	nop
          }
          break;
 8005c64:	e004      	b.n	8005c70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb3b 	bl	80062e4 <USBD_CtlError>
          break;
 8005c6e:	bf00      	nop
      }
      break;
 8005c70:	e004      	b.n	8005c7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb35 	bl	80062e4 <USBD_CtlError>
      break;
 8005c7a:	bf00      	nop
  }

  return ret;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	885b      	ldrh	r3, [r3, #2]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	f200 8128 	bhi.w	8005efe <USBD_GetDescriptor+0x276>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBD_GetDescriptor+0x2c>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cd1 	.word	0x08005cd1
 8005cb8:	08005ce9 	.word	0x08005ce9
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005eff 	.word	0x08005eff
 8005cc4:	08005eff 	.word	0x08005eff
 8005cc8:	08005e9f 	.word	0x08005e9f
 8005ccc:	08005ecb 	.word	0x08005ecb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	7c12      	ldrb	r2, [r2, #16]
 8005cdc:	f107 0108 	add.w	r1, r7, #8
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4798      	blx	r3
 8005ce4:	60f8      	str	r0, [r7, #12]
      break;
 8005ce6:	e112      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	7c1b      	ldrb	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f107 0208 	add.w	r2, r7, #8
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	2202      	movs	r2, #2
 8005d08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d0a:	e100      	b.n	8005f0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	f107 0208 	add.w	r2, r7, #8
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
 8005d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	2202      	movs	r2, #2
 8005d24:	701a      	strb	r2, [r3, #0]
      break;
 8005d26:	e0f2      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	885b      	ldrh	r3, [r3, #2]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	f200 80ac 	bhi.w	8005e8c <USBD_GetDescriptor+0x204>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <USBD_GetDescriptor+0xb4>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d55 	.word	0x08005d55
 8005d40:	08005d89 	.word	0x08005d89
 8005d44:	08005dbd 	.word	0x08005dbd
 8005d48:	08005df1 	.word	0x08005df1
 8005d4c:	08005e25 	.word	0x08005e25
 8005d50:	08005e59 	.word	0x08005e59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	7c12      	ldrb	r2, [r2, #16]
 8005d6c:	f107 0108 	add.w	r1, r7, #8
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d76:	e091      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fab2 	bl	80062e4 <USBD_CtlError>
            err++;
 8005d80:	7afb      	ldrb	r3, [r7, #11]
 8005d82:	3301      	adds	r3, #1
 8005d84:	72fb      	strb	r3, [r7, #11]
          break;
 8005d86:	e089      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	7c12      	ldrb	r2, [r2, #16]
 8005da0:	f107 0108 	add.w	r1, r7, #8
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005daa:	e077      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa98 	bl	80062e4 <USBD_CtlError>
            err++;
 8005db4:	7afb      	ldrb	r3, [r7, #11]
 8005db6:	3301      	adds	r3, #1
 8005db8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dba:	e06f      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	7c12      	ldrb	r2, [r2, #16]
 8005dd4:	f107 0108 	add.w	r1, r7, #8
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4798      	blx	r3
 8005ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dde:	e05d      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa7e 	bl	80062e4 <USBD_CtlError>
            err++;
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	3301      	adds	r3, #1
 8005dec:	72fb      	strb	r3, [r7, #11]
          break;
 8005dee:	e055      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	7c12      	ldrb	r2, [r2, #16]
 8005e08:	f107 0108 	add.w	r1, r7, #8
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4798      	blx	r3
 8005e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e12:	e043      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa64 	bl	80062e4 <USBD_CtlError>
            err++;
 8005e1c:	7afb      	ldrb	r3, [r7, #11]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	72fb      	strb	r3, [r7, #11]
          break;
 8005e22:	e03b      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	7c12      	ldrb	r2, [r2, #16]
 8005e3c:	f107 0108 	add.w	r1, r7, #8
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e46:	e029      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa4a 	bl	80062e4 <USBD_CtlError>
            err++;
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	3301      	adds	r3, #1
 8005e54:	72fb      	strb	r3, [r7, #11]
          break;
 8005e56:	e021      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	7c12      	ldrb	r2, [r2, #16]
 8005e70:	f107 0108 	add.w	r1, r7, #8
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e7a:	e00f      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa30 	bl	80062e4 <USBD_CtlError>
            err++;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	3301      	adds	r3, #1
 8005e88:	72fb      	strb	r3, [r7, #11]
          break;
 8005e8a:	e007      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa28 	bl	80062e4 <USBD_CtlError>
          err++;
 8005e94:	7afb      	ldrb	r3, [r7, #11]
 8005e96:	3301      	adds	r3, #1
 8005e98:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005e9a:	bf00      	nop
      }
      break;
 8005e9c:	e037      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	7c1b      	ldrb	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	f107 0208 	add.w	r2, r7, #8
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4798      	blx	r3
 8005eb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005eb8:	e029      	b.n	8005f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa11 	bl	80062e4 <USBD_CtlError>
        err++;
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ec8:	e021      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7c1b      	ldrb	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10d      	bne.n	8005eee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	f107 0208 	add.w	r2, r7, #8
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4798      	blx	r3
 8005ee2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	2207      	movs	r2, #7
 8005eea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005eec:	e00f      	b.n	8005f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9f7 	bl	80062e4 <USBD_CtlError>
        err++;
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	72fb      	strb	r3, [r7, #11]
      break;
 8005efc:	e007      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f9ef 	bl	80062e4 <USBD_CtlError>
      err++;
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f0c:	bf00      	nop
  }

  if (err != 0U)
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d11e      	bne.n	8005f52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	88db      	ldrh	r3, [r3, #6]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d016      	beq.n	8005f4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005f1c:	893b      	ldrh	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	88da      	ldrh	r2, [r3, #6]
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	bf28      	it	cs
 8005f2c:	4613      	movcs	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f32:	893b      	ldrh	r3, [r7, #8]
 8005f34:	461a      	mov	r2, r3
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa44 	bl	80063c6 <USBD_CtlSendData>
 8005f3e:	e009      	b.n	8005f54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f9ce 	bl	80062e4 <USBD_CtlError>
 8005f48:	e004      	b.n	8005f54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa95 	bl	800647a <USBD_CtlSendStatus>
 8005f50:	e000      	b.n	8005f54 <USBD_GetDescriptor+0x2cc>
    return;
 8005f52:	bf00      	nop
  }
}
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop

08005f5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	889b      	ldrh	r3, [r3, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d131      	bne.n	8005fd2 <USBD_SetAddress+0x76>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	88db      	ldrh	r3, [r3, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d12d      	bne.n	8005fd2 <USBD_SetAddress+0x76>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	885b      	ldrh	r3, [r3, #2]
 8005f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7c:	d829      	bhi.n	8005fd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	885b      	ldrh	r3, [r3, #2]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d104      	bne.n	8005fa0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f9a3 	bl	80062e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9e:	e01d      	b.n	8005fdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	7bfa      	ldrb	r2, [r7, #15]
 8005fa4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fee3 	bl	8006d78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa61 	bl	800647a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc6:	e009      	b.n	8005fdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd0:	e004      	b.n	8005fdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f985 	bl	80062e4 <USBD_CtlError>
  }
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	885b      	ldrh	r3, [r3, #2]
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	4b4c      	ldr	r3, [pc, #304]	; (800612c <USBD_SetConfig+0x148>)
 8005ffa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ffc:	4b4b      	ldr	r3, [pc, #300]	; (800612c <USBD_SetConfig+0x148>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d905      	bls.n	8006010 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f96c 	bl	80062e4 <USBD_CtlError>
    return USBD_FAIL;
 800600c:	2303      	movs	r3, #3
 800600e:	e088      	b.n	8006122 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d002      	beq.n	8006022 <USBD_SetConfig+0x3e>
 800601c:	2b03      	cmp	r3, #3
 800601e:	d025      	beq.n	800606c <USBD_SetConfig+0x88>
 8006020:	e071      	b.n	8006106 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006022:	4b42      	ldr	r3, [pc, #264]	; (800612c <USBD_SetConfig+0x148>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01c      	beq.n	8006064 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800602a:	4b40      	ldr	r3, [pc, #256]	; (800612c <USBD_SetConfig+0x148>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006034:	4b3d      	ldr	r3, [pc, #244]	; (800612c <USBD_SetConfig+0x148>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff f948 	bl	80052d0 <USBD_SetClassConfig>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f949 	bl	80062e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006052:	e065      	b.n	8006120 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fa10 	bl	800647a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2203      	movs	r2, #3
 800605e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006062:	e05d      	b.n	8006120 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa08 	bl	800647a <USBD_CtlSendStatus>
      break;
 800606a:	e059      	b.n	8006120 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800606c:	4b2f      	ldr	r3, [pc, #188]	; (800612c <USBD_SetConfig+0x148>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d112      	bne.n	800609a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800607c:	4b2b      	ldr	r3, [pc, #172]	; (800612c <USBD_SetConfig+0x148>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006086:	4b29      	ldr	r3, [pc, #164]	; (800612c <USBD_SetConfig+0x148>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f93b 	bl	8005308 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9f1 	bl	800647a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006098:	e042      	b.n	8006120 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <USBD_SetConfig+0x148>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d02a      	beq.n	80060fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff f929 	bl	8005308 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <USBD_SetConfig+0x148>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <USBD_SetConfig+0x148>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff f902 	bl	80052d0 <USBD_SetClassConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00f      	beq.n	80060f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f903 	bl	80062e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff f90e 	bl	8005308 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060f4:	e014      	b.n	8006120 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9bf 	bl	800647a <USBD_CtlSendStatus>
      break;
 80060fc:	e010      	b.n	8006120 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9bb 	bl	800647a <USBD_CtlSendStatus>
      break;
 8006104:	e00c      	b.n	8006120 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8eb 	bl	80062e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <USBD_SetConfig+0x148>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff f8f7 	bl	8005308 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800611a:	2303      	movs	r3, #3
 800611c:	73fb      	strb	r3, [r7, #15]
      break;
 800611e:	bf00      	nop
  }

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000224 	.word	0x20000224

08006130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d004      	beq.n	800614c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8cd 	bl	80062e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800614a:	e023      	b.n	8006194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	dc02      	bgt.n	800615e <USBD_GetConfig+0x2e>
 8006158:	2b00      	cmp	r3, #0
 800615a:	dc03      	bgt.n	8006164 <USBD_GetConfig+0x34>
 800615c:	e015      	b.n	800618a <USBD_GetConfig+0x5a>
 800615e:	2b03      	cmp	r3, #3
 8006160:	d00b      	beq.n	800617a <USBD_GetConfig+0x4a>
 8006162:	e012      	b.n	800618a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3308      	adds	r3, #8
 800616e:	2201      	movs	r2, #1
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f927 	bl	80063c6 <USBD_CtlSendData>
        break;
 8006178:	e00c      	b.n	8006194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	2201      	movs	r2, #1
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f91f 	bl	80063c6 <USBD_CtlSendData>
        break;
 8006188:	e004      	b.n	8006194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f8a9 	bl	80062e4 <USBD_CtlError>
        break;
 8006192:	bf00      	nop
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d81e      	bhi.n	80061f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	88db      	ldrh	r3, [r3, #6]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d004      	beq.n	80061c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f890 	bl	80062e4 <USBD_CtlError>
        break;
 80061c4:	e01a      	b.n	80061fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 0202 	orr.w	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	330c      	adds	r3, #12
 80061e6:	2202      	movs	r2, #2
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8eb 	bl	80063c6 <USBD_CtlSendData>
      break;
 80061f0:	e004      	b.n	80061fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f875 	bl	80062e4 <USBD_CtlError>
      break;
 80061fa:	bf00      	nop
  }
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	885b      	ldrh	r3, [r3, #2]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d106      	bne.n	8006224 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f92b 	bl	800647a <USBD_CtlSendStatus>
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623c:	b2db      	uxtb	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	2b02      	cmp	r3, #2
 8006242:	d80b      	bhi.n	800625c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	885b      	ldrh	r3, [r3, #2]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10c      	bne.n	8006266 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f910 	bl	800647a <USBD_CtlSendStatus>
      }
      break;
 800625a:	e004      	b.n	8006266 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f840 	bl	80062e4 <USBD_CtlError>
      break;
 8006264:	e000      	b.n	8006268 <USBD_ClrFeature+0x3c>
      break;
 8006266:	bf00      	nop
  }
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	781a      	ldrb	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff fabb 	bl	8005816 <SWAPBYTE>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff faae 	bl	8005816 <SWAPBYTE>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff faa1 	bl	8005816 <SWAPBYTE>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461a      	mov	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	80da      	strh	r2, [r3, #6]
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fcd7 	bl	8006ca4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062f6:	2100      	movs	r1, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fcd3 	bl	8006ca4 <USBD_LL_StallEP>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d036      	beq.n	800638a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006320:	6938      	ldr	r0, [r7, #16]
 8006322:	f000 f836 	bl	8006392 <USBD_GetLen>
 8006326:	4603      	mov	r3, r0
 8006328:	3301      	adds	r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	4413      	add	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	7812      	ldrb	r2, [r2, #0]
 800633e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	3301      	adds	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	4413      	add	r3, r2
 800634c:	2203      	movs	r2, #3
 800634e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	3301      	adds	r3, #1
 8006354:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006356:	e013      	b.n	8006380 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4413      	add	r3, r2
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	7812      	ldrb	r2, [r2, #0]
 8006362:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3301      	adds	r3, #1
 8006368:	613b      	str	r3, [r7, #16]
    idx++;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	3301      	adds	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
    idx++;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	3301      	adds	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e7      	bne.n	8006358 <USBD_GetString+0x52>
 8006388:	e000      	b.n	800638c <USBD_GetString+0x86>
    return;
 800638a:	bf00      	nop
  }
}
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063a2:	e005      	b.n	80063b0 <USBD_GetLen+0x1e>
  {
    len++;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	3301      	adds	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f5      	bne.n	80063a4 <USBD_GetLen+0x12>
  }

  return len;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	2100      	movs	r1, #0
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fce2 	bl	8006db6 <USBD_LL_Transmit>

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	2100      	movs	r1, #0
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fcd1 	bl	8006db6 <USBD_LL_Transmit>

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2203      	movs	r2, #3
 800642e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fcd5 	bl	8006df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	2100      	movs	r1, #0
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fcc4 	bl	8006df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2204      	movs	r2, #4
 8006486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800648a:	2300      	movs	r3, #0
 800648c:	2200      	movs	r2, #0
 800648e:	2100      	movs	r1, #0
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fc90 	bl	8006db6 <USBD_LL_Transmit>

  return USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2205      	movs	r2, #5
 80064ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064b0:	2300      	movs	r3, #0
 80064b2:	2200      	movs	r2, #0
 80064b4:	2100      	movs	r1, #0
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fc9e 	bl	8006df8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064cc:	2200      	movs	r2, #0
 80064ce:	4912      	ldr	r1, [pc, #72]	; (8006518 <MX_USB_DEVICE_Init+0x50>)
 80064d0:	4812      	ldr	r0, [pc, #72]	; (800651c <MX_USB_DEVICE_Init+0x54>)
 80064d2:	f7fe fe8f 	bl	80051f4 <USBD_Init>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80064dc:	f7fa f99c 	bl	8000818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80064e0:	490f      	ldr	r1, [pc, #60]	; (8006520 <MX_USB_DEVICE_Init+0x58>)
 80064e2:	480e      	ldr	r0, [pc, #56]	; (800651c <MX_USB_DEVICE_Init+0x54>)
 80064e4:	f7fe feb6 	bl	8005254 <USBD_RegisterClass>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80064ee:	f7fa f993 	bl	8000818 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80064f2:	490c      	ldr	r1, [pc, #48]	; (8006524 <MX_USB_DEVICE_Init+0x5c>)
 80064f4:	4809      	ldr	r0, [pc, #36]	; (800651c <MX_USB_DEVICE_Init+0x54>)
 80064f6:	f7fe fdd7 	bl	80050a8 <USBD_CDC_RegisterInterface>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006500:	f7fa f98a 	bl	8000818 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006504:	4805      	ldr	r0, [pc, #20]	; (800651c <MX_USB_DEVICE_Init+0x54>)
 8006506:	f7fe fecc 	bl	80052a2 <USBD_Start>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006510:	f7fa f982 	bl	8000818 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006514:	bf00      	nop
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000130 	.word	0x20000130
 800651c:	20000474 	.word	0x20000474
 8006520:	20000018 	.word	0x20000018
 8006524:	2000011c 	.word	0x2000011c

08006528 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800652c:	2200      	movs	r2, #0
 800652e:	4905      	ldr	r1, [pc, #20]	; (8006544 <CDC_Init_FS+0x1c>)
 8006530:	4805      	ldr	r0, [pc, #20]	; (8006548 <CDC_Init_FS+0x20>)
 8006532:	f7fe fdce 	bl	80050d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006536:	4905      	ldr	r1, [pc, #20]	; (800654c <CDC_Init_FS+0x24>)
 8006538:	4803      	ldr	r0, [pc, #12]	; (8006548 <CDC_Init_FS+0x20>)
 800653a:	f7fe fde8 	bl	800510e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800653e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006540:	4618      	mov	r0, r3
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000b2c 	.word	0x20000b2c
 8006548:	20000474 	.word	0x20000474
 800654c:	20000744 	.word	0x20000744

08006550 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006554:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006556:	4618      	mov	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	71fb      	strb	r3, [r7, #7]
 800656c:	4613      	mov	r3, r2
 800656e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	2b23      	cmp	r3, #35	; 0x23
 8006574:	d84a      	bhi.n	800660c <CDC_Control_FS+0xac>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <CDC_Control_FS+0x1c>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	0800660d 	.word	0x0800660d
 8006580:	0800660d 	.word	0x0800660d
 8006584:	0800660d 	.word	0x0800660d
 8006588:	0800660d 	.word	0x0800660d
 800658c:	0800660d 	.word	0x0800660d
 8006590:	0800660d 	.word	0x0800660d
 8006594:	0800660d 	.word	0x0800660d
 8006598:	0800660d 	.word	0x0800660d
 800659c:	0800660d 	.word	0x0800660d
 80065a0:	0800660d 	.word	0x0800660d
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	0800660d 	.word	0x0800660d
 80065b0:	0800660d 	.word	0x0800660d
 80065b4:	0800660d 	.word	0x0800660d
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	0800660d 	.word	0x0800660d
 80065c0:	0800660d 	.word	0x0800660d
 80065c4:	0800660d 	.word	0x0800660d
 80065c8:	0800660d 	.word	0x0800660d
 80065cc:	0800660d 	.word	0x0800660d
 80065d0:	0800660d 	.word	0x0800660d
 80065d4:	0800660d 	.word	0x0800660d
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	0800660d 	.word	0x0800660d
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	0800660d 	.word	0x0800660d
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	0800660d 	.word	0x0800660d
 80065f8:	0800660d 	.word	0x0800660d
 80065fc:	0800660d 	.word	0x0800660d
 8006600:	0800660d 	.word	0x0800660d
 8006604:	0800660d 	.word	0x0800660d
 8006608:	0800660d 	.word	0x0800660d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800660c:	bf00      	nop
  }

  return (USBD_OK);
 800660e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4805      	ldr	r0, [pc, #20]	; (8006640 <CDC_Receive_FS+0x24>)
 800662a:	f7fe fd70 	bl	800510e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800662e:	4804      	ldr	r0, [pc, #16]	; (8006640 <CDC_Receive_FS+0x24>)
 8006630:	f7fe fdb6 	bl	80051a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006634:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000474 	.word	0x20000474

08006644 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006654:	4b0d      	ldr	r3, [pc, #52]	; (800668c <CDC_Transmit_FS+0x48>)
 8006656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800665a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006666:	2301      	movs	r3, #1
 8006668:	e00b      	b.n	8006682 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800666a:	887b      	ldrh	r3, [r7, #2]
 800666c:	461a      	mov	r2, r3
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4806      	ldr	r0, [pc, #24]	; (800668c <CDC_Transmit_FS+0x48>)
 8006672:	f7fe fd2e 	bl	80050d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006676:	4805      	ldr	r0, [pc, #20]	; (800668c <CDC_Transmit_FS+0x48>)
 8006678:	f7fe fd62 	bl	8005140 <USBD_CDC_TransmitPacket>
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000474 	.word	0x20000474

08006690 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80066a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
	...

080066b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2212      	movs	r2, #18
 80066c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80066c6:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	2000014c 	.word	0x2000014c

080066d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2204      	movs	r2, #4
 80066e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066ea:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000160 	.word	0x20000160

080066fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	6039      	str	r1, [r7, #0]
 8006706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	4907      	ldr	r1, [pc, #28]	; (8006730 <USBD_FS_ProductStrDescriptor+0x34>)
 8006712:	4808      	ldr	r0, [pc, #32]	; (8006734 <USBD_FS_ProductStrDescriptor+0x38>)
 8006714:	f7ff fdf7 	bl	8006306 <USBD_GetString>
 8006718:	e004      	b.n	8006724 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	4904      	ldr	r1, [pc, #16]	; (8006730 <USBD_FS_ProductStrDescriptor+0x34>)
 800671e:	4805      	ldr	r0, [pc, #20]	; (8006734 <USBD_FS_ProductStrDescriptor+0x38>)
 8006720:	f7ff fdf1 	bl	8006306 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006724:	4b02      	ldr	r3, [pc, #8]	; (8006730 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000f14 	.word	0x20000f14
 8006734:	080077e0 	.word	0x080077e0

08006738 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	6039      	str	r1, [r7, #0]
 8006742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	4904      	ldr	r1, [pc, #16]	; (8006758 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006748:	4804      	ldr	r0, [pc, #16]	; (800675c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800674a:	f7ff fddc 	bl	8006306 <USBD_GetString>
  return USBD_StrDesc;
 800674e:	4b02      	ldr	r3, [pc, #8]	; (8006758 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000f14 	.word	0x20000f14
 800675c:	080077f8 	.word	0x080077f8

08006760 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	221a      	movs	r2, #26
 8006770:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006772:	f000 f843 	bl	80067fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006776:	4b02      	ldr	r3, [pc, #8]	; (8006780 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000164 	.word	0x20000164

08006784 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	6039      	str	r1, [r7, #0]
 800678e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4907      	ldr	r1, [pc, #28]	; (80067b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800679a:	4808      	ldr	r0, [pc, #32]	; (80067bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800679c:	f7ff fdb3 	bl	8006306 <USBD_GetString>
 80067a0:	e004      	b.n	80067ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	4904      	ldr	r1, [pc, #16]	; (80067b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067a6:	4805      	ldr	r0, [pc, #20]	; (80067bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80067a8:	f7ff fdad 	bl	8006306 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067ac:	4b02      	ldr	r3, [pc, #8]	; (80067b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000f14 	.word	0x20000f14
 80067bc:	0800780c 	.word	0x0800780c

080067c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d105      	bne.n	80067de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	4907      	ldr	r1, [pc, #28]	; (80067f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067d6:	4808      	ldr	r0, [pc, #32]	; (80067f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067d8:	f7ff fd95 	bl	8006306 <USBD_GetString>
 80067dc:	e004      	b.n	80067e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	4904      	ldr	r1, [pc, #16]	; (80067f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067e2:	4805      	ldr	r0, [pc, #20]	; (80067f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067e4:	f7ff fd8f 	bl	8006306 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000f14 	.word	0x20000f14
 80067f8:	08007818 	.word	0x08007818

080067fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006802:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <Get_SerialNum+0x44>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <Get_SerialNum+0x48>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800680e:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <Get_SerialNum+0x4c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006822:	2208      	movs	r2, #8
 8006824:	4909      	ldr	r1, [pc, #36]	; (800684c <Get_SerialNum+0x50>)
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f814 	bl	8006854 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800682c:	2204      	movs	r2, #4
 800682e:	4908      	ldr	r1, [pc, #32]	; (8006850 <Get_SerialNum+0x54>)
 8006830:	68b8      	ldr	r0, [r7, #8]
 8006832:	f000 f80f 	bl	8006854 <IntToUnicode>
  }
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	1fff7a10 	.word	0x1fff7a10
 8006844:	1fff7a14 	.word	0x1fff7a14
 8006848:	1fff7a18 	.word	0x1fff7a18
 800684c:	20000166 	.word	0x20000166
 8006850:	20000176 	.word	0x20000176

08006854 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
 800686a:	e027      	b.n	80068bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	0f1b      	lsrs	r3, r3, #28
 8006870:	2b09      	cmp	r3, #9
 8006872:	d80b      	bhi.n	800688c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	0f1b      	lsrs	r3, r3, #28
 8006878:	b2da      	uxtb	r2, r3
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	4619      	mov	r1, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	440b      	add	r3, r1
 8006884:	3230      	adds	r2, #48	; 0x30
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e00a      	b.n	80068a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	0f1b      	lsrs	r3, r3, #28
 8006890:	b2da      	uxtb	r2, r3
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4619      	mov	r1, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	440b      	add	r3, r1
 800689c:	3237      	adds	r2, #55	; 0x37
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	3301      	adds	r3, #1
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4413      	add	r3, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	3301      	adds	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
 80068bc:	7dfa      	ldrb	r2, [r7, #23]
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d3d3      	bcc.n	800686c <IntToUnicode+0x18>
  }
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068dc:	f107 0314 	add.w	r3, r7, #20
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	609a      	str	r2, [r3, #8]
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068f4:	d13a      	bne.n	800696c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	6313      	str	r3, [r2, #48]	; 0x30
 8006906:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006912:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006918:	2302      	movs	r3, #2
 800691a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691c:	2300      	movs	r3, #0
 800691e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006920:	2303      	movs	r3, #3
 8006922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006924:	230a      	movs	r3, #10
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	4619      	mov	r1, r3
 800692e:	4812      	ldr	r0, [pc, #72]	; (8006978 <HAL_PCD_MspInit+0xa4>)
 8006930:	f7fa fa60 	bl	8000df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 800693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693e:	6353      	str	r3, [r2, #52]	; 0x34
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 8006946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006948:	4a0a      	ldr	r2, [pc, #40]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 800694a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800694e:	6453      	str	r3, [r2, #68]	; 0x44
 8006950:	4b08      	ldr	r3, [pc, #32]	; (8006974 <HAL_PCD_MspInit+0xa0>)
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800695c:	2200      	movs	r2, #0
 800695e:	2100      	movs	r1, #0
 8006960:	2043      	movs	r0, #67	; 0x43
 8006962:	f7fa fa10 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006966:	2043      	movs	r0, #67	; 0x43
 8006968:	f7fa fa29 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800696c:	bf00      	nop
 800696e:	3728      	adds	r7, #40	; 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40023800 	.word	0x40023800
 8006978:	40020000 	.word	0x40020000

0800697c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f7fe fcd0 	bl	8005338 <USBD_LL_SetupStage>
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80069b2:	78fa      	ldrb	r2, [r7, #3]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	4619      	mov	r1, r3
 80069ca:	f7fe fd0a 	bl	80053e2 <USBD_LL_DataOutStage>
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	4613      	mov	r3, r2
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	3348      	adds	r3, #72	; 0x48
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	4619      	mov	r1, r3
 80069fe:	f7fe fd53 	bl	80054a8 <USBD_LL_DataInStage>
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe fe67 	bl	80056ec <USBD_LL_SOF>
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d001      	beq.n	8006a3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a3a:	f7f9 feed 	bl	8000818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a44:	7bfa      	ldrb	r2, [r7, #15]
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fe11 	bl	8005670 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fdbd 	bl	80055d4 <USBD_LL_Reset>
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fe0c 	bl	8005690 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a98:	4b04      	ldr	r3, [pc, #16]	; (8006aac <HAL_PCD_SuspendCallback+0x48>)
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	4a03      	ldr	r2, [pc, #12]	; (8006aac <HAL_PCD_SuspendCallback+0x48>)
 8006a9e:	f043 0306 	orr.w	r3, r3, #6
 8006aa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	e000ed00 	.word	0xe000ed00

08006ab0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fdfc 	bl	80056bc <USBD_LL_Resume>
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fe4a 	bl	800577c <USBD_LL_IsoOUTIncomplete>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b02:	78fa      	ldrb	r2, [r7, #3]
 8006b04:	4611      	mov	r1, r2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fe12 	bl	8005730 <USBD_LL_IsoINIncomplete>
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe fe50 	bl	80057c8 <USBD_LL_DevConnected>
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fe4d 	bl	80057de <USBD_LL_DevDisconnected>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d13c      	bne.n	8006bd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b5c:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b6c:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b76:	2204      	movs	r2, #4
 8006b78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b7a:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b86:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b88:	2202      	movs	r2, #2
 8006b8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b98:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <USBD_LL_Init+0x94>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b9e:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <USBD_LL_Init+0x94>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <USBD_LL_Init+0x94>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <USBD_LL_Init+0x94>)
 8006bac:	f7fa fabf 	bl	800112e <HAL_PCD_Init>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006bb6:	f7f9 fe2f 	bl	8000818 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006bba:	2180      	movs	r1, #128	; 0x80
 8006bbc:	4808      	ldr	r0, [pc, #32]	; (8006be0 <USBD_LL_Init+0x94>)
 8006bbe:	f7fb fc1c 	bl	80023fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006bc2:	2240      	movs	r2, #64	; 0x40
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4806      	ldr	r0, [pc, #24]	; (8006be0 <USBD_LL_Init+0x94>)
 8006bc8:	f7fb fbd0 	bl	800236c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006bcc:	2280      	movs	r2, #128	; 0x80
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4803      	ldr	r0, [pc, #12]	; (8006be0 <USBD_LL_Init+0x94>)
 8006bd2:	f7fb fbcb 	bl	800236c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20001114 	.word	0x20001114

08006be4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fa fbb4 	bl	8001368 <HAL_PCD_Start>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f942 	bl	8006e90 <USBD_Get_USB_Status>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	4608      	mov	r0, r1
 8006c24:	4611      	mov	r1, r2
 8006c26:	461a      	mov	r2, r3
 8006c28:	4603      	mov	r3, r0
 8006c2a:	70fb      	strb	r3, [r7, #3]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70bb      	strb	r3, [r7, #2]
 8006c30:	4613      	mov	r3, r2
 8006c32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c42:	78bb      	ldrb	r3, [r7, #2]
 8006c44:	883a      	ldrh	r2, [r7, #0]
 8006c46:	78f9      	ldrb	r1, [r7, #3]
 8006c48:	f7fa ff98 	bl	8001b7c <HAL_PCD_EP_Open>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f91c 	bl	8006e90 <USBD_Get_USB_Status>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c80:	78fa      	ldrb	r2, [r7, #3]
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fa ffe1 	bl	8001c4c <HAL_PCD_EP_Close>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 f8fd 	bl	8006e90 <USBD_Get_USB_Status>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fb f8b9 	bl	8001e3a <HAL_PCD_EP_SetStall>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 f8de 	bl	8006e90 <USBD_Get_USB_Status>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fb f8fe 	bl	8001f02 <HAL_PCD_EP_ClrStall>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f8bf 	bl	8006e90 <USBD_Get_USB_Status>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	da0b      	bge.n	8006d54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	333e      	adds	r3, #62	; 0x3e
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	e00b      	b.n	8006d6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fa fecb 	bl	8001b32 <HAL_PCD_SetAddress>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f874 	bl	8006e90 <USBD_Get_USB_Status>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006dd4:	7af9      	ldrb	r1, [r7, #11]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	f7fa ffe4 	bl	8001da6 <HAL_PCD_EP_Transmit>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 f853 	bl	8006e90 <USBD_Get_USB_Status>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dee:	7dbb      	ldrb	r3, [r7, #22]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	607a      	str	r2, [r7, #4]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	460b      	mov	r3, r1
 8006e06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e16:	7af9      	ldrb	r1, [r7, #11]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	f7fa ff60 	bl	8001ce0 <HAL_PCD_EP_Receive>
 8006e20:	4603      	mov	r3, r0
 8006e22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f832 	bl	8006e90 <USBD_Get_USB_Status>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e30:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fa ff90 	bl	8001d76 <HAL_PCD_EP_GetRxCount>
 8006e56:	4603      	mov	r3, r0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e68:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <USBD_static_malloc+0x18>)
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000228 	.word	0x20000228

08006e7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]

}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d817      	bhi.n	8006ed4 <USBD_Get_USB_Status+0x44>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_Get_USB_Status+0x1c>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ec3 	.word	0x08006ec3
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006ecf 	.word	0x08006ecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec0:	e00b      	b.n	8006eda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec6:	e008      	b.n	8006eda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	73fb      	strb	r3, [r7, #15]
    break;
 8006ecc:	e005      	b.n	8006eda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed2:	e002      	b.n	8006eda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed8:	bf00      	nop
  }
  return usb_status;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <__errno>:
 8006ee8:	4b01      	ldr	r3, [pc, #4]	; (8006ef0 <__errno+0x8>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000180 	.word	0x20000180

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	; (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	; (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	; (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	; (8006f38 <__libc_init_array+0x44>)
 8006f08:	f000 fc4e 	bl	80077a8 <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	08007874 	.word	0x08007874
 8006f30:	08007874 	.word	0x08007874
 8006f34:	08007874 	.word	0x08007874
 8006f38:	08007878 	.word	0x08007878

08006f3c <memset>:
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d100      	bne.n	8006f46 <memset+0xa>
 8006f44:	4770      	bx	lr
 8006f46:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4a:	e7f9      	b.n	8006f40 <memset+0x4>

08006f4c <siprintf>:
 8006f4c:	b40e      	push	{r1, r2, r3}
 8006f4e:	b500      	push	{lr}
 8006f50:	b09c      	sub	sp, #112	; 0x70
 8006f52:	ab1d      	add	r3, sp, #116	; 0x74
 8006f54:	9002      	str	r0, [sp, #8]
 8006f56:	9006      	str	r0, [sp, #24]
 8006f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f5c:	4809      	ldr	r0, [pc, #36]	; (8006f84 <siprintf+0x38>)
 8006f5e:	9107      	str	r1, [sp, #28]
 8006f60:	9104      	str	r1, [sp, #16]
 8006f62:	4909      	ldr	r1, [pc, #36]	; (8006f88 <siprintf+0x3c>)
 8006f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f68:	9105      	str	r1, [sp, #20]
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	a902      	add	r1, sp, #8
 8006f70:	f000 f868 	bl	8007044 <_svfiprintf_r>
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	b01c      	add	sp, #112	; 0x70
 8006f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f80:	b003      	add	sp, #12
 8006f82:	4770      	bx	lr
 8006f84:	20000180 	.word	0x20000180
 8006f88:	ffff0208 	.word	0xffff0208

08006f8c <__ssputs_r>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	688e      	ldr	r6, [r1, #8]
 8006f92:	429e      	cmp	r6, r3
 8006f94:	4682      	mov	sl, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	4690      	mov	r8, r2
 8006f9a:	461f      	mov	r7, r3
 8006f9c:	d838      	bhi.n	8007010 <__ssputs_r+0x84>
 8006f9e:	898a      	ldrh	r2, [r1, #12]
 8006fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fa4:	d032      	beq.n	800700c <__ssputs_r+0x80>
 8006fa6:	6825      	ldr	r5, [r4, #0]
 8006fa8:	6909      	ldr	r1, [r1, #16]
 8006faa:	eba5 0901 	sub.w	r9, r5, r1
 8006fae:	6965      	ldr	r5, [r4, #20]
 8006fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fb8:	3301      	adds	r3, #1
 8006fba:	444b      	add	r3, r9
 8006fbc:	106d      	asrs	r5, r5, #1
 8006fbe:	429d      	cmp	r5, r3
 8006fc0:	bf38      	it	cc
 8006fc2:	461d      	movcc	r5, r3
 8006fc4:	0553      	lsls	r3, r2, #21
 8006fc6:	d531      	bpl.n	800702c <__ssputs_r+0xa0>
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f000 fb47 	bl	800765c <_malloc_r>
 8006fce:	4606      	mov	r6, r0
 8006fd0:	b950      	cbnz	r0, 8006fe8 <__ssputs_r+0x5c>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	f8ca 3000 	str.w	r3, [sl]
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	6921      	ldr	r1, [r4, #16]
 8006fea:	464a      	mov	r2, r9
 8006fec:	f000 fabe 	bl	800756c <memcpy>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	6126      	str	r6, [r4, #16]
 8006ffe:	6165      	str	r5, [r4, #20]
 8007000:	444e      	add	r6, r9
 8007002:	eba5 0509 	sub.w	r5, r5, r9
 8007006:	6026      	str	r6, [r4, #0]
 8007008:	60a5      	str	r5, [r4, #8]
 800700a:	463e      	mov	r6, r7
 800700c:	42be      	cmp	r6, r7
 800700e:	d900      	bls.n	8007012 <__ssputs_r+0x86>
 8007010:	463e      	mov	r6, r7
 8007012:	4632      	mov	r2, r6
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	4641      	mov	r1, r8
 8007018:	f000 fab6 	bl	8007588 <memmove>
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	1b9b      	subs	r3, r3, r6
 8007022:	4432      	add	r2, r6
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	2000      	movs	r0, #0
 800702a:	e7db      	b.n	8006fe4 <__ssputs_r+0x58>
 800702c:	462a      	mov	r2, r5
 800702e:	f000 fb6f 	bl	8007710 <_realloc_r>
 8007032:	4606      	mov	r6, r0
 8007034:	2800      	cmp	r0, #0
 8007036:	d1e1      	bne.n	8006ffc <__ssputs_r+0x70>
 8007038:	6921      	ldr	r1, [r4, #16]
 800703a:	4650      	mov	r0, sl
 800703c:	f000 fabe 	bl	80075bc <_free_r>
 8007040:	e7c7      	b.n	8006fd2 <__ssputs_r+0x46>
	...

08007044 <_svfiprintf_r>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	4698      	mov	r8, r3
 800704a:	898b      	ldrh	r3, [r1, #12]
 800704c:	061b      	lsls	r3, r3, #24
 800704e:	b09d      	sub	sp, #116	; 0x74
 8007050:	4607      	mov	r7, r0
 8007052:	460d      	mov	r5, r1
 8007054:	4614      	mov	r4, r2
 8007056:	d50e      	bpl.n	8007076 <_svfiprintf_r+0x32>
 8007058:	690b      	ldr	r3, [r1, #16]
 800705a:	b963      	cbnz	r3, 8007076 <_svfiprintf_r+0x32>
 800705c:	2140      	movs	r1, #64	; 0x40
 800705e:	f000 fafd 	bl	800765c <_malloc_r>
 8007062:	6028      	str	r0, [r5, #0]
 8007064:	6128      	str	r0, [r5, #16]
 8007066:	b920      	cbnz	r0, 8007072 <_svfiprintf_r+0x2e>
 8007068:	230c      	movs	r3, #12
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	e0d1      	b.n	8007216 <_svfiprintf_r+0x1d2>
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	616b      	str	r3, [r5, #20]
 8007076:	2300      	movs	r3, #0
 8007078:	9309      	str	r3, [sp, #36]	; 0x24
 800707a:	2320      	movs	r3, #32
 800707c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007080:	f8cd 800c 	str.w	r8, [sp, #12]
 8007084:	2330      	movs	r3, #48	; 0x30
 8007086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007230 <_svfiprintf_r+0x1ec>
 800708a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800708e:	f04f 0901 	mov.w	r9, #1
 8007092:	4623      	mov	r3, r4
 8007094:	469a      	mov	sl, r3
 8007096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800709a:	b10a      	cbz	r2, 80070a0 <_svfiprintf_r+0x5c>
 800709c:	2a25      	cmp	r2, #37	; 0x25
 800709e:	d1f9      	bne.n	8007094 <_svfiprintf_r+0x50>
 80070a0:	ebba 0b04 	subs.w	fp, sl, r4
 80070a4:	d00b      	beq.n	80070be <_svfiprintf_r+0x7a>
 80070a6:	465b      	mov	r3, fp
 80070a8:	4622      	mov	r2, r4
 80070aa:	4629      	mov	r1, r5
 80070ac:	4638      	mov	r0, r7
 80070ae:	f7ff ff6d 	bl	8006f8c <__ssputs_r>
 80070b2:	3001      	adds	r0, #1
 80070b4:	f000 80aa 	beq.w	800720c <_svfiprintf_r+0x1c8>
 80070b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ba:	445a      	add	r2, fp
 80070bc:	9209      	str	r2, [sp, #36]	; 0x24
 80070be:	f89a 3000 	ldrb.w	r3, [sl]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80a2 	beq.w	800720c <_svfiprintf_r+0x1c8>
 80070c8:	2300      	movs	r3, #0
 80070ca:	f04f 32ff 	mov.w	r2, #4294967295
 80070ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d2:	f10a 0a01 	add.w	sl, sl, #1
 80070d6:	9304      	str	r3, [sp, #16]
 80070d8:	9307      	str	r3, [sp, #28]
 80070da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070de:	931a      	str	r3, [sp, #104]	; 0x68
 80070e0:	4654      	mov	r4, sl
 80070e2:	2205      	movs	r2, #5
 80070e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e8:	4851      	ldr	r0, [pc, #324]	; (8007230 <_svfiprintf_r+0x1ec>)
 80070ea:	f7f9 f881 	bl	80001f0 <memchr>
 80070ee:	9a04      	ldr	r2, [sp, #16]
 80070f0:	b9d8      	cbnz	r0, 800712a <_svfiprintf_r+0xe6>
 80070f2:	06d0      	lsls	r0, r2, #27
 80070f4:	bf44      	itt	mi
 80070f6:	2320      	movmi	r3, #32
 80070f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fc:	0711      	lsls	r1, r2, #28
 80070fe:	bf44      	itt	mi
 8007100:	232b      	movmi	r3, #43	; 0x2b
 8007102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007106:	f89a 3000 	ldrb.w	r3, [sl]
 800710a:	2b2a      	cmp	r3, #42	; 0x2a
 800710c:	d015      	beq.n	800713a <_svfiprintf_r+0xf6>
 800710e:	9a07      	ldr	r2, [sp, #28]
 8007110:	4654      	mov	r4, sl
 8007112:	2000      	movs	r0, #0
 8007114:	f04f 0c0a 	mov.w	ip, #10
 8007118:	4621      	mov	r1, r4
 800711a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800711e:	3b30      	subs	r3, #48	; 0x30
 8007120:	2b09      	cmp	r3, #9
 8007122:	d94e      	bls.n	80071c2 <_svfiprintf_r+0x17e>
 8007124:	b1b0      	cbz	r0, 8007154 <_svfiprintf_r+0x110>
 8007126:	9207      	str	r2, [sp, #28]
 8007128:	e014      	b.n	8007154 <_svfiprintf_r+0x110>
 800712a:	eba0 0308 	sub.w	r3, r0, r8
 800712e:	fa09 f303 	lsl.w	r3, r9, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	46a2      	mov	sl, r4
 8007138:	e7d2      	b.n	80070e0 <_svfiprintf_r+0x9c>
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	1d19      	adds	r1, r3, #4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	9103      	str	r1, [sp, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	bfbb      	ittet	lt
 8007146:	425b      	neglt	r3, r3
 8007148:	f042 0202 	orrlt.w	r2, r2, #2
 800714c:	9307      	strge	r3, [sp, #28]
 800714e:	9307      	strlt	r3, [sp, #28]
 8007150:	bfb8      	it	lt
 8007152:	9204      	strlt	r2, [sp, #16]
 8007154:	7823      	ldrb	r3, [r4, #0]
 8007156:	2b2e      	cmp	r3, #46	; 0x2e
 8007158:	d10c      	bne.n	8007174 <_svfiprintf_r+0x130>
 800715a:	7863      	ldrb	r3, [r4, #1]
 800715c:	2b2a      	cmp	r3, #42	; 0x2a
 800715e:	d135      	bne.n	80071cc <_svfiprintf_r+0x188>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	1d1a      	adds	r2, r3, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	9203      	str	r2, [sp, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	bfb8      	it	lt
 800716c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007170:	3402      	adds	r4, #2
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007240 <_svfiprintf_r+0x1fc>
 8007178:	7821      	ldrb	r1, [r4, #0]
 800717a:	2203      	movs	r2, #3
 800717c:	4650      	mov	r0, sl
 800717e:	f7f9 f837 	bl	80001f0 <memchr>
 8007182:	b140      	cbz	r0, 8007196 <_svfiprintf_r+0x152>
 8007184:	2340      	movs	r3, #64	; 0x40
 8007186:	eba0 000a 	sub.w	r0, r0, sl
 800718a:	fa03 f000 	lsl.w	r0, r3, r0
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	4303      	orrs	r3, r0
 8007192:	3401      	adds	r4, #1
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719a:	4826      	ldr	r0, [pc, #152]	; (8007234 <_svfiprintf_r+0x1f0>)
 800719c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071a0:	2206      	movs	r2, #6
 80071a2:	f7f9 f825 	bl	80001f0 <memchr>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d038      	beq.n	800721c <_svfiprintf_r+0x1d8>
 80071aa:	4b23      	ldr	r3, [pc, #140]	; (8007238 <_svfiprintf_r+0x1f4>)
 80071ac:	bb1b      	cbnz	r3, 80071f6 <_svfiprintf_r+0x1b2>
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	3307      	adds	r3, #7
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	3308      	adds	r3, #8
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071bc:	4433      	add	r3, r6
 80071be:	9309      	str	r3, [sp, #36]	; 0x24
 80071c0:	e767      	b.n	8007092 <_svfiprintf_r+0x4e>
 80071c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c6:	460c      	mov	r4, r1
 80071c8:	2001      	movs	r0, #1
 80071ca:	e7a5      	b.n	8007118 <_svfiprintf_r+0xd4>
 80071cc:	2300      	movs	r3, #0
 80071ce:	3401      	adds	r4, #1
 80071d0:	9305      	str	r3, [sp, #20]
 80071d2:	4619      	mov	r1, r3
 80071d4:	f04f 0c0a 	mov.w	ip, #10
 80071d8:	4620      	mov	r0, r4
 80071da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071de:	3a30      	subs	r2, #48	; 0x30
 80071e0:	2a09      	cmp	r2, #9
 80071e2:	d903      	bls.n	80071ec <_svfiprintf_r+0x1a8>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0c5      	beq.n	8007174 <_svfiprintf_r+0x130>
 80071e8:	9105      	str	r1, [sp, #20]
 80071ea:	e7c3      	b.n	8007174 <_svfiprintf_r+0x130>
 80071ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80071f0:	4604      	mov	r4, r0
 80071f2:	2301      	movs	r3, #1
 80071f4:	e7f0      	b.n	80071d8 <_svfiprintf_r+0x194>
 80071f6:	ab03      	add	r3, sp, #12
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	462a      	mov	r2, r5
 80071fc:	4b0f      	ldr	r3, [pc, #60]	; (800723c <_svfiprintf_r+0x1f8>)
 80071fe:	a904      	add	r1, sp, #16
 8007200:	4638      	mov	r0, r7
 8007202:	f3af 8000 	nop.w
 8007206:	1c42      	adds	r2, r0, #1
 8007208:	4606      	mov	r6, r0
 800720a:	d1d6      	bne.n	80071ba <_svfiprintf_r+0x176>
 800720c:	89ab      	ldrh	r3, [r5, #12]
 800720e:	065b      	lsls	r3, r3, #25
 8007210:	f53f af2c 	bmi.w	800706c <_svfiprintf_r+0x28>
 8007214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007216:	b01d      	add	sp, #116	; 0x74
 8007218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	ab03      	add	r3, sp, #12
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	462a      	mov	r2, r5
 8007222:	4b06      	ldr	r3, [pc, #24]	; (800723c <_svfiprintf_r+0x1f8>)
 8007224:	a904      	add	r1, sp, #16
 8007226:	4638      	mov	r0, r7
 8007228:	f000 f87a 	bl	8007320 <_printf_i>
 800722c:	e7eb      	b.n	8007206 <_svfiprintf_r+0x1c2>
 800722e:	bf00      	nop
 8007230:	08007838 	.word	0x08007838
 8007234:	08007842 	.word	0x08007842
 8007238:	00000000 	.word	0x00000000
 800723c:	08006f8d 	.word	0x08006f8d
 8007240:	0800783e 	.word	0x0800783e

08007244 <_printf_common>:
 8007244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007248:	4616      	mov	r6, r2
 800724a:	4699      	mov	r9, r3
 800724c:	688a      	ldr	r2, [r1, #8]
 800724e:	690b      	ldr	r3, [r1, #16]
 8007250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007254:	4293      	cmp	r3, r2
 8007256:	bfb8      	it	lt
 8007258:	4613      	movlt	r3, r2
 800725a:	6033      	str	r3, [r6, #0]
 800725c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007260:	4607      	mov	r7, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b10a      	cbz	r2, 800726a <_printf_common+0x26>
 8007266:	3301      	adds	r3, #1
 8007268:	6033      	str	r3, [r6, #0]
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	0699      	lsls	r1, r3, #26
 800726e:	bf42      	ittt	mi
 8007270:	6833      	ldrmi	r3, [r6, #0]
 8007272:	3302      	addmi	r3, #2
 8007274:	6033      	strmi	r3, [r6, #0]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	f015 0506 	ands.w	r5, r5, #6
 800727c:	d106      	bne.n	800728c <_printf_common+0x48>
 800727e:	f104 0a19 	add.w	sl, r4, #25
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	6832      	ldr	r2, [r6, #0]
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	42ab      	cmp	r3, r5
 800728a:	dc26      	bgt.n	80072da <_printf_common+0x96>
 800728c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007290:	1e13      	subs	r3, r2, #0
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	bf18      	it	ne
 8007296:	2301      	movne	r3, #1
 8007298:	0692      	lsls	r2, r2, #26
 800729a:	d42b      	bmi.n	80072f4 <_printf_common+0xb0>
 800729c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a0:	4649      	mov	r1, r9
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c0      	blx	r8
 80072a6:	3001      	adds	r0, #1
 80072a8:	d01e      	beq.n	80072e8 <_printf_common+0xa4>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	68e5      	ldr	r5, [r4, #12]
 80072ae:	6832      	ldr	r2, [r6, #0]
 80072b0:	f003 0306 	and.w	r3, r3, #6
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	bf08      	it	eq
 80072b8:	1aad      	subeq	r5, r5, r2
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	bf0c      	ite	eq
 80072c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c4:	2500      	movne	r5, #0
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bfc4      	itt	gt
 80072ca:	1a9b      	subgt	r3, r3, r2
 80072cc:	18ed      	addgt	r5, r5, r3
 80072ce:	2600      	movs	r6, #0
 80072d0:	341a      	adds	r4, #26
 80072d2:	42b5      	cmp	r5, r6
 80072d4:	d11a      	bne.n	800730c <_printf_common+0xc8>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e008      	b.n	80072ec <_printf_common+0xa8>
 80072da:	2301      	movs	r3, #1
 80072dc:	4652      	mov	r2, sl
 80072de:	4649      	mov	r1, r9
 80072e0:	4638      	mov	r0, r7
 80072e2:	47c0      	blx	r8
 80072e4:	3001      	adds	r0, #1
 80072e6:	d103      	bne.n	80072f0 <_printf_common+0xac>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f0:	3501      	adds	r5, #1
 80072f2:	e7c6      	b.n	8007282 <_printf_common+0x3e>
 80072f4:	18e1      	adds	r1, r4, r3
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	2030      	movs	r0, #48	; 0x30
 80072fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072fe:	4422      	add	r2, r4
 8007300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007308:	3302      	adds	r3, #2
 800730a:	e7c7      	b.n	800729c <_printf_common+0x58>
 800730c:	2301      	movs	r3, #1
 800730e:	4622      	mov	r2, r4
 8007310:	4649      	mov	r1, r9
 8007312:	4638      	mov	r0, r7
 8007314:	47c0      	blx	r8
 8007316:	3001      	adds	r0, #1
 8007318:	d0e6      	beq.n	80072e8 <_printf_common+0xa4>
 800731a:	3601      	adds	r6, #1
 800731c:	e7d9      	b.n	80072d2 <_printf_common+0x8e>
	...

08007320 <_printf_i>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	4691      	mov	r9, r2
 8007328:	7e27      	ldrb	r7, [r4, #24]
 800732a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800732c:	2f78      	cmp	r7, #120	; 0x78
 800732e:	4680      	mov	r8, r0
 8007330:	469a      	mov	sl, r3
 8007332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007336:	d807      	bhi.n	8007348 <_printf_i+0x28>
 8007338:	2f62      	cmp	r7, #98	; 0x62
 800733a:	d80a      	bhi.n	8007352 <_printf_i+0x32>
 800733c:	2f00      	cmp	r7, #0
 800733e:	f000 80d8 	beq.w	80074f2 <_printf_i+0x1d2>
 8007342:	2f58      	cmp	r7, #88	; 0x58
 8007344:	f000 80a3 	beq.w	800748e <_printf_i+0x16e>
 8007348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800734c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007350:	e03a      	b.n	80073c8 <_printf_i+0xa8>
 8007352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007356:	2b15      	cmp	r3, #21
 8007358:	d8f6      	bhi.n	8007348 <_printf_i+0x28>
 800735a:	a001      	add	r0, pc, #4	; (adr r0, 8007360 <_printf_i+0x40>)
 800735c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073cd 	.word	0x080073cd
 8007368:	08007349 	.word	0x08007349
 800736c:	08007349 	.word	0x08007349
 8007370:	08007349 	.word	0x08007349
 8007374:	08007349 	.word	0x08007349
 8007378:	080073cd 	.word	0x080073cd
 800737c:	08007349 	.word	0x08007349
 8007380:	08007349 	.word	0x08007349
 8007384:	08007349 	.word	0x08007349
 8007388:	08007349 	.word	0x08007349
 800738c:	080074d9 	.word	0x080074d9
 8007390:	080073fd 	.word	0x080073fd
 8007394:	080074bb 	.word	0x080074bb
 8007398:	08007349 	.word	0x08007349
 800739c:	08007349 	.word	0x08007349
 80073a0:	080074fb 	.word	0x080074fb
 80073a4:	08007349 	.word	0x08007349
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	08007349 	.word	0x08007349
 80073b0:	08007349 	.word	0x08007349
 80073b4:	080074c3 	.word	0x080074c3
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	600a      	str	r2, [r1, #0]
 80073c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c8:	2301      	movs	r3, #1
 80073ca:	e0a3      	b.n	8007514 <_printf_i+0x1f4>
 80073cc:	6825      	ldr	r5, [r4, #0]
 80073ce:	6808      	ldr	r0, [r1, #0]
 80073d0:	062e      	lsls	r6, r5, #24
 80073d2:	f100 0304 	add.w	r3, r0, #4
 80073d6:	d50a      	bpl.n	80073ee <_printf_i+0xce>
 80073d8:	6805      	ldr	r5, [r0, #0]
 80073da:	600b      	str	r3, [r1, #0]
 80073dc:	2d00      	cmp	r5, #0
 80073de:	da03      	bge.n	80073e8 <_printf_i+0xc8>
 80073e0:	232d      	movs	r3, #45	; 0x2d
 80073e2:	426d      	negs	r5, r5
 80073e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e8:	485e      	ldr	r0, [pc, #376]	; (8007564 <_printf_i+0x244>)
 80073ea:	230a      	movs	r3, #10
 80073ec:	e019      	b.n	8007422 <_printf_i+0x102>
 80073ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073f2:	6805      	ldr	r5, [r0, #0]
 80073f4:	600b      	str	r3, [r1, #0]
 80073f6:	bf18      	it	ne
 80073f8:	b22d      	sxthne	r5, r5
 80073fa:	e7ef      	b.n	80073dc <_printf_i+0xbc>
 80073fc:	680b      	ldr	r3, [r1, #0]
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	1d18      	adds	r0, r3, #4
 8007402:	6008      	str	r0, [r1, #0]
 8007404:	0628      	lsls	r0, r5, #24
 8007406:	d501      	bpl.n	800740c <_printf_i+0xec>
 8007408:	681d      	ldr	r5, [r3, #0]
 800740a:	e002      	b.n	8007412 <_printf_i+0xf2>
 800740c:	0669      	lsls	r1, r5, #25
 800740e:	d5fb      	bpl.n	8007408 <_printf_i+0xe8>
 8007410:	881d      	ldrh	r5, [r3, #0]
 8007412:	4854      	ldr	r0, [pc, #336]	; (8007564 <_printf_i+0x244>)
 8007414:	2f6f      	cmp	r7, #111	; 0x6f
 8007416:	bf0c      	ite	eq
 8007418:	2308      	moveq	r3, #8
 800741a:	230a      	movne	r3, #10
 800741c:	2100      	movs	r1, #0
 800741e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007422:	6866      	ldr	r6, [r4, #4]
 8007424:	60a6      	str	r6, [r4, #8]
 8007426:	2e00      	cmp	r6, #0
 8007428:	bfa2      	ittt	ge
 800742a:	6821      	ldrge	r1, [r4, #0]
 800742c:	f021 0104 	bicge.w	r1, r1, #4
 8007430:	6021      	strge	r1, [r4, #0]
 8007432:	b90d      	cbnz	r5, 8007438 <_printf_i+0x118>
 8007434:	2e00      	cmp	r6, #0
 8007436:	d04d      	beq.n	80074d4 <_printf_i+0x1b4>
 8007438:	4616      	mov	r6, r2
 800743a:	fbb5 f1f3 	udiv	r1, r5, r3
 800743e:	fb03 5711 	mls	r7, r3, r1, r5
 8007442:	5dc7      	ldrb	r7, [r0, r7]
 8007444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007448:	462f      	mov	r7, r5
 800744a:	42bb      	cmp	r3, r7
 800744c:	460d      	mov	r5, r1
 800744e:	d9f4      	bls.n	800743a <_printf_i+0x11a>
 8007450:	2b08      	cmp	r3, #8
 8007452:	d10b      	bne.n	800746c <_printf_i+0x14c>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	07df      	lsls	r7, r3, #31
 8007458:	d508      	bpl.n	800746c <_printf_i+0x14c>
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	4299      	cmp	r1, r3
 8007460:	bfde      	ittt	le
 8007462:	2330      	movle	r3, #48	; 0x30
 8007464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800746c:	1b92      	subs	r2, r2, r6
 800746e:	6122      	str	r2, [r4, #16]
 8007470:	f8cd a000 	str.w	sl, [sp]
 8007474:	464b      	mov	r3, r9
 8007476:	aa03      	add	r2, sp, #12
 8007478:	4621      	mov	r1, r4
 800747a:	4640      	mov	r0, r8
 800747c:	f7ff fee2 	bl	8007244 <_printf_common>
 8007480:	3001      	adds	r0, #1
 8007482:	d14c      	bne.n	800751e <_printf_i+0x1fe>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	b004      	add	sp, #16
 800748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748e:	4835      	ldr	r0, [pc, #212]	; (8007564 <_printf_i+0x244>)
 8007490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	680e      	ldr	r6, [r1, #0]
 8007498:	061f      	lsls	r7, r3, #24
 800749a:	f856 5b04 	ldr.w	r5, [r6], #4
 800749e:	600e      	str	r6, [r1, #0]
 80074a0:	d514      	bpl.n	80074cc <_printf_i+0x1ac>
 80074a2:	07d9      	lsls	r1, r3, #31
 80074a4:	bf44      	itt	mi
 80074a6:	f043 0320 	orrmi.w	r3, r3, #32
 80074aa:	6023      	strmi	r3, [r4, #0]
 80074ac:	b91d      	cbnz	r5, 80074b6 <_printf_i+0x196>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f023 0320 	bic.w	r3, r3, #32
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2310      	movs	r3, #16
 80074b8:	e7b0      	b.n	800741c <_printf_i+0xfc>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2378      	movs	r3, #120	; 0x78
 80074c4:	4828      	ldr	r0, [pc, #160]	; (8007568 <_printf_i+0x248>)
 80074c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ca:	e7e3      	b.n	8007494 <_printf_i+0x174>
 80074cc:	065e      	lsls	r6, r3, #25
 80074ce:	bf48      	it	mi
 80074d0:	b2ad      	uxthmi	r5, r5
 80074d2:	e7e6      	b.n	80074a2 <_printf_i+0x182>
 80074d4:	4616      	mov	r6, r2
 80074d6:	e7bb      	b.n	8007450 <_printf_i+0x130>
 80074d8:	680b      	ldr	r3, [r1, #0]
 80074da:	6826      	ldr	r6, [r4, #0]
 80074dc:	6960      	ldr	r0, [r4, #20]
 80074de:	1d1d      	adds	r5, r3, #4
 80074e0:	600d      	str	r5, [r1, #0]
 80074e2:	0635      	lsls	r5, r6, #24
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	d501      	bpl.n	80074ec <_printf_i+0x1cc>
 80074e8:	6018      	str	r0, [r3, #0]
 80074ea:	e002      	b.n	80074f2 <_printf_i+0x1d2>
 80074ec:	0671      	lsls	r1, r6, #25
 80074ee:	d5fb      	bpl.n	80074e8 <_printf_i+0x1c8>
 80074f0:	8018      	strh	r0, [r3, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	4616      	mov	r6, r2
 80074f8:	e7ba      	b.n	8007470 <_printf_i+0x150>
 80074fa:	680b      	ldr	r3, [r1, #0]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	600a      	str	r2, [r1, #0]
 8007500:	681e      	ldr	r6, [r3, #0]
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	2100      	movs	r1, #0
 8007506:	4630      	mov	r0, r6
 8007508:	f7f8 fe72 	bl	80001f0 <memchr>
 800750c:	b108      	cbz	r0, 8007512 <_printf_i+0x1f2>
 800750e:	1b80      	subs	r0, r0, r6
 8007510:	6060      	str	r0, [r4, #4]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	2300      	movs	r3, #0
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751c:	e7a8      	b.n	8007470 <_printf_i+0x150>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	4632      	mov	r2, r6
 8007522:	4649      	mov	r1, r9
 8007524:	4640      	mov	r0, r8
 8007526:	47d0      	blx	sl
 8007528:	3001      	adds	r0, #1
 800752a:	d0ab      	beq.n	8007484 <_printf_i+0x164>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	079b      	lsls	r3, r3, #30
 8007530:	d413      	bmi.n	800755a <_printf_i+0x23a>
 8007532:	68e0      	ldr	r0, [r4, #12]
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	4298      	cmp	r0, r3
 8007538:	bfb8      	it	lt
 800753a:	4618      	movlt	r0, r3
 800753c:	e7a4      	b.n	8007488 <_printf_i+0x168>
 800753e:	2301      	movs	r3, #1
 8007540:	4632      	mov	r2, r6
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d09b      	beq.n	8007484 <_printf_i+0x164>
 800754c:	3501      	adds	r5, #1
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	9903      	ldr	r1, [sp, #12]
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	42ab      	cmp	r3, r5
 8007556:	dcf2      	bgt.n	800753e <_printf_i+0x21e>
 8007558:	e7eb      	b.n	8007532 <_printf_i+0x212>
 800755a:	2500      	movs	r5, #0
 800755c:	f104 0619 	add.w	r6, r4, #25
 8007560:	e7f5      	b.n	800754e <_printf_i+0x22e>
 8007562:	bf00      	nop
 8007564:	08007849 	.word	0x08007849
 8007568:	0800785a 	.word	0x0800785a

0800756c <memcpy>:
 800756c:	440a      	add	r2, r1
 800756e:	4291      	cmp	r1, r2
 8007570:	f100 33ff 	add.w	r3, r0, #4294967295
 8007574:	d100      	bne.n	8007578 <memcpy+0xc>
 8007576:	4770      	bx	lr
 8007578:	b510      	push	{r4, lr}
 800757a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800757e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007582:	4291      	cmp	r1, r2
 8007584:	d1f9      	bne.n	800757a <memcpy+0xe>
 8007586:	bd10      	pop	{r4, pc}

08007588 <memmove>:
 8007588:	4288      	cmp	r0, r1
 800758a:	b510      	push	{r4, lr}
 800758c:	eb01 0402 	add.w	r4, r1, r2
 8007590:	d902      	bls.n	8007598 <memmove+0x10>
 8007592:	4284      	cmp	r4, r0
 8007594:	4623      	mov	r3, r4
 8007596:	d807      	bhi.n	80075a8 <memmove+0x20>
 8007598:	1e43      	subs	r3, r0, #1
 800759a:	42a1      	cmp	r1, r4
 800759c:	d008      	beq.n	80075b0 <memmove+0x28>
 800759e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075a6:	e7f8      	b.n	800759a <memmove+0x12>
 80075a8:	4402      	add	r2, r0
 80075aa:	4601      	mov	r1, r0
 80075ac:	428a      	cmp	r2, r1
 80075ae:	d100      	bne.n	80075b2 <memmove+0x2a>
 80075b0:	bd10      	pop	{r4, pc}
 80075b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ba:	e7f7      	b.n	80075ac <memmove+0x24>

080075bc <_free_r>:
 80075bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075be:	2900      	cmp	r1, #0
 80075c0:	d048      	beq.n	8007654 <_free_r+0x98>
 80075c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c6:	9001      	str	r0, [sp, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f1a1 0404 	sub.w	r4, r1, #4
 80075ce:	bfb8      	it	lt
 80075d0:	18e4      	addlt	r4, r4, r3
 80075d2:	f000 f8d3 	bl	800777c <__malloc_lock>
 80075d6:	4a20      	ldr	r2, [pc, #128]	; (8007658 <_free_r+0x9c>)
 80075d8:	9801      	ldr	r0, [sp, #4]
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	4615      	mov	r5, r2
 80075de:	b933      	cbnz	r3, 80075ee <_free_r+0x32>
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	6014      	str	r4, [r2, #0]
 80075e4:	b003      	add	sp, #12
 80075e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075ea:	f000 b8cd 	b.w	8007788 <__malloc_unlock>
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	d90b      	bls.n	800760a <_free_r+0x4e>
 80075f2:	6821      	ldr	r1, [r4, #0]
 80075f4:	1862      	adds	r2, r4, r1
 80075f6:	4293      	cmp	r3, r2
 80075f8:	bf04      	itt	eq
 80075fa:	681a      	ldreq	r2, [r3, #0]
 80075fc:	685b      	ldreq	r3, [r3, #4]
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	bf04      	itt	eq
 8007602:	1852      	addeq	r2, r2, r1
 8007604:	6022      	streq	r2, [r4, #0]
 8007606:	602c      	str	r4, [r5, #0]
 8007608:	e7ec      	b.n	80075e4 <_free_r+0x28>
 800760a:	461a      	mov	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b10b      	cbz	r3, 8007614 <_free_r+0x58>
 8007610:	42a3      	cmp	r3, r4
 8007612:	d9fa      	bls.n	800760a <_free_r+0x4e>
 8007614:	6811      	ldr	r1, [r2, #0]
 8007616:	1855      	adds	r5, r2, r1
 8007618:	42a5      	cmp	r5, r4
 800761a:	d10b      	bne.n	8007634 <_free_r+0x78>
 800761c:	6824      	ldr	r4, [r4, #0]
 800761e:	4421      	add	r1, r4
 8007620:	1854      	adds	r4, r2, r1
 8007622:	42a3      	cmp	r3, r4
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	d1dd      	bne.n	80075e4 <_free_r+0x28>
 8007628:	681c      	ldr	r4, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	6053      	str	r3, [r2, #4]
 800762e:	4421      	add	r1, r4
 8007630:	6011      	str	r1, [r2, #0]
 8007632:	e7d7      	b.n	80075e4 <_free_r+0x28>
 8007634:	d902      	bls.n	800763c <_free_r+0x80>
 8007636:	230c      	movs	r3, #12
 8007638:	6003      	str	r3, [r0, #0]
 800763a:	e7d3      	b.n	80075e4 <_free_r+0x28>
 800763c:	6825      	ldr	r5, [r4, #0]
 800763e:	1961      	adds	r1, r4, r5
 8007640:	428b      	cmp	r3, r1
 8007642:	bf04      	itt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	bf04      	itt	eq
 800764c:	1949      	addeq	r1, r1, r5
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	6054      	str	r4, [r2, #4]
 8007652:	e7c7      	b.n	80075e4 <_free_r+0x28>
 8007654:	b003      	add	sp, #12
 8007656:	bd30      	pop	{r4, r5, pc}
 8007658:	20000448 	.word	0x20000448

0800765c <_malloc_r>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	1ccd      	adds	r5, r1, #3
 8007660:	f025 0503 	bic.w	r5, r5, #3
 8007664:	3508      	adds	r5, #8
 8007666:	2d0c      	cmp	r5, #12
 8007668:	bf38      	it	cc
 800766a:	250c      	movcc	r5, #12
 800766c:	2d00      	cmp	r5, #0
 800766e:	4606      	mov	r6, r0
 8007670:	db01      	blt.n	8007676 <_malloc_r+0x1a>
 8007672:	42a9      	cmp	r1, r5
 8007674:	d903      	bls.n	800767e <_malloc_r+0x22>
 8007676:	230c      	movs	r3, #12
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	2000      	movs	r0, #0
 800767c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800767e:	f000 f87d 	bl	800777c <__malloc_lock>
 8007682:	4921      	ldr	r1, [pc, #132]	; (8007708 <_malloc_r+0xac>)
 8007684:	680a      	ldr	r2, [r1, #0]
 8007686:	4614      	mov	r4, r2
 8007688:	b99c      	cbnz	r4, 80076b2 <_malloc_r+0x56>
 800768a:	4f20      	ldr	r7, [pc, #128]	; (800770c <_malloc_r+0xb0>)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	b923      	cbnz	r3, 800769a <_malloc_r+0x3e>
 8007690:	4621      	mov	r1, r4
 8007692:	4630      	mov	r0, r6
 8007694:	f000 f862 	bl	800775c <_sbrk_r>
 8007698:	6038      	str	r0, [r7, #0]
 800769a:	4629      	mov	r1, r5
 800769c:	4630      	mov	r0, r6
 800769e:	f000 f85d 	bl	800775c <_sbrk_r>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	d123      	bne.n	80076ee <_malloc_r+0x92>
 80076a6:	230c      	movs	r3, #12
 80076a8:	6033      	str	r3, [r6, #0]
 80076aa:	4630      	mov	r0, r6
 80076ac:	f000 f86c 	bl	8007788 <__malloc_unlock>
 80076b0:	e7e3      	b.n	800767a <_malloc_r+0x1e>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	1b5b      	subs	r3, r3, r5
 80076b6:	d417      	bmi.n	80076e8 <_malloc_r+0x8c>
 80076b8:	2b0b      	cmp	r3, #11
 80076ba:	d903      	bls.n	80076c4 <_malloc_r+0x68>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	441c      	add	r4, r3
 80076c0:	6025      	str	r5, [r4, #0]
 80076c2:	e004      	b.n	80076ce <_malloc_r+0x72>
 80076c4:	6863      	ldr	r3, [r4, #4]
 80076c6:	42a2      	cmp	r2, r4
 80076c8:	bf0c      	ite	eq
 80076ca:	600b      	streq	r3, [r1, #0]
 80076cc:	6053      	strne	r3, [r2, #4]
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 f85a 	bl	8007788 <__malloc_unlock>
 80076d4:	f104 000b 	add.w	r0, r4, #11
 80076d8:	1d23      	adds	r3, r4, #4
 80076da:	f020 0007 	bic.w	r0, r0, #7
 80076de:	1ac2      	subs	r2, r0, r3
 80076e0:	d0cc      	beq.n	800767c <_malloc_r+0x20>
 80076e2:	1a1b      	subs	r3, r3, r0
 80076e4:	50a3      	str	r3, [r4, r2]
 80076e6:	e7c9      	b.n	800767c <_malloc_r+0x20>
 80076e8:	4622      	mov	r2, r4
 80076ea:	6864      	ldr	r4, [r4, #4]
 80076ec:	e7cc      	b.n	8007688 <_malloc_r+0x2c>
 80076ee:	1cc4      	adds	r4, r0, #3
 80076f0:	f024 0403 	bic.w	r4, r4, #3
 80076f4:	42a0      	cmp	r0, r4
 80076f6:	d0e3      	beq.n	80076c0 <_malloc_r+0x64>
 80076f8:	1a21      	subs	r1, r4, r0
 80076fa:	4630      	mov	r0, r6
 80076fc:	f000 f82e 	bl	800775c <_sbrk_r>
 8007700:	3001      	adds	r0, #1
 8007702:	d1dd      	bne.n	80076c0 <_malloc_r+0x64>
 8007704:	e7cf      	b.n	80076a6 <_malloc_r+0x4a>
 8007706:	bf00      	nop
 8007708:	20000448 	.word	0x20000448
 800770c:	2000044c 	.word	0x2000044c

08007710 <_realloc_r>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	4607      	mov	r7, r0
 8007714:	4614      	mov	r4, r2
 8007716:	460e      	mov	r6, r1
 8007718:	b921      	cbnz	r1, 8007724 <_realloc_r+0x14>
 800771a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800771e:	4611      	mov	r1, r2
 8007720:	f7ff bf9c 	b.w	800765c <_malloc_r>
 8007724:	b922      	cbnz	r2, 8007730 <_realloc_r+0x20>
 8007726:	f7ff ff49 	bl	80075bc <_free_r>
 800772a:	4625      	mov	r5, r4
 800772c:	4628      	mov	r0, r5
 800772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007730:	f000 f830 	bl	8007794 <_malloc_usable_size_r>
 8007734:	42a0      	cmp	r0, r4
 8007736:	d20f      	bcs.n	8007758 <_realloc_r+0x48>
 8007738:	4621      	mov	r1, r4
 800773a:	4638      	mov	r0, r7
 800773c:	f7ff ff8e 	bl	800765c <_malloc_r>
 8007740:	4605      	mov	r5, r0
 8007742:	2800      	cmp	r0, #0
 8007744:	d0f2      	beq.n	800772c <_realloc_r+0x1c>
 8007746:	4631      	mov	r1, r6
 8007748:	4622      	mov	r2, r4
 800774a:	f7ff ff0f 	bl	800756c <memcpy>
 800774e:	4631      	mov	r1, r6
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ff33 	bl	80075bc <_free_r>
 8007756:	e7e9      	b.n	800772c <_realloc_r+0x1c>
 8007758:	4635      	mov	r5, r6
 800775a:	e7e7      	b.n	800772c <_realloc_r+0x1c>

0800775c <_sbrk_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d06      	ldr	r5, [pc, #24]	; (8007778 <_sbrk_r+0x1c>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	f7f9 f93e 	bl	80009e8 <_sbrk>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_sbrk_r+0x1a>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_sbrk_r+0x1a>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	2000151c 	.word	0x2000151c

0800777c <__malloc_lock>:
 800777c:	4801      	ldr	r0, [pc, #4]	; (8007784 <__malloc_lock+0x8>)
 800777e:	f000 b811 	b.w	80077a4 <__retarget_lock_acquire_recursive>
 8007782:	bf00      	nop
 8007784:	20001524 	.word	0x20001524

08007788 <__malloc_unlock>:
 8007788:	4801      	ldr	r0, [pc, #4]	; (8007790 <__malloc_unlock+0x8>)
 800778a:	f000 b80c 	b.w	80077a6 <__retarget_lock_release_recursive>
 800778e:	bf00      	nop
 8007790:	20001524 	.word	0x20001524

08007794 <_malloc_usable_size_r>:
 8007794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007798:	1f18      	subs	r0, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfbc      	itt	lt
 800779e:	580b      	ldrlt	r3, [r1, r0]
 80077a0:	18c0      	addlt	r0, r0, r3
 80077a2:	4770      	bx	lr

080077a4 <__retarget_lock_acquire_recursive>:
 80077a4:	4770      	bx	lr

080077a6 <__retarget_lock_release_recursive>:
 80077a6:	4770      	bx	lr

080077a8 <_init>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr

080077b4 <_fini>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	bf00      	nop
 80077b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	469e      	mov	lr, r3
 80077be:	4770      	bx	lr
