
7_I2C_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d8  080075d8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e0  080075e0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080075e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000137c  200001e4  080077cc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001560  080077cc  00021560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001688f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034aa  00000000  00000000  00036aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  0003ad60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e7d  00000000  00000000  0003ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001377c  00000000  00000000  0005489d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891cb  00000000  00000000  00068019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f11e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c88  00000000  00000000  000f1238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800750c 	.word	0x0800750c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800750c 	.word	0x0800750c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_GPIO_Init+0x8c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80005f2:	2301      	movs	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0x90>)
 8000606:	f000 fbeb 	bl	8000de0 <HAL_GPIO_Init>

}
 800060a:	bf00      	nop
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000

0800061c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f000 fd5d 	bl	8001118 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f940 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000450 	.word	0x20000450
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <HAL_I2C_MspInit+0x84>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d12c      	bne.n	80006f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_I2C_MspInit+0x88>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <HAL_I2C_MspInit+0x88>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_I2C_MspInit+0x88>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006bc:	2312      	movs	r3, #18
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c8:	2304      	movs	r3, #4
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <HAL_I2C_MspInit+0x8c>)
 80006d4:	f000 fb84 	bl	8000de0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <HAL_I2C_MspInit+0x88>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_I2C_MspInit+0x88>)
 80006e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_I2C_MspInit+0x88>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40005400 	.word	0x40005400
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400

08000708 <I2C_Scan>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	while (CDC_Transmit_FS("I2C-Scanning!\r\n", 15) == USBD_OK) {}
 800070e:	bf00      	nop
 8000710:	210f      	movs	r1, #15
 8000712:	481f      	ldr	r0, [pc, #124]	; (8000790 <I2C_Scan+0x88>)
 8000714:	f005 fe48 	bl	80063a8 <CDC_Transmit_FS>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f8      	beq.n	8000710 <I2C_Scan+0x8>
	__asm volatile("NOP");
 800071e:	bf00      	nop

	HAL_StatusTypeDef res;

	for (uint8_t i = 0; i < 128; i++) {
 8000720:	2300      	movs	r3, #0
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	e02d      	b.n	8000782 <I2C_Scan+0x7a>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	b29b      	uxth	r3, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	b299      	uxth	r1, r3
 800072e:	230a      	movs	r3, #10
 8000730:	2201      	movs	r2, #1
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <I2C_Scan+0x8c>)
 8000734:	f000 fe34 	bl	80013a0 <HAL_I2C_IsDeviceReady>
 8000738:	4603      	mov	r3, r0
 800073a:	71bb      	strb	r3, [r7, #6]

		if (res == HAL_OK) {
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d113      	bne.n	800076a <I2C_Scan+0x62>
			sprintf(MSG, "0x%02X\r\n", i);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	461a      	mov	r2, r3
 8000746:	4914      	ldr	r1, [pc, #80]	; (8000798 <I2C_Scan+0x90>)
 8000748:	4814      	ldr	r0, [pc, #80]	; (800079c <I2C_Scan+0x94>)
 800074a:	f006 fab1 	bl	8006cb0 <siprintf>

			while (CDC_Transmit_FS(MSG, strlen(MSG)) == USBD_OK) {}
 800074e:	bf00      	nop
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <I2C_Scan+0x94>)
 8000752:	f7ff fd45 	bl	80001e0 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	4619      	mov	r1, r3
 800075a:	4810      	ldr	r0, [pc, #64]	; (800079c <I2C_Scan+0x94>)
 800075c:	f005 fe24 	bl	80063a8 <CDC_Transmit_FS>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f4      	beq.n	8000750 <I2C_Scan+0x48>
			__NOP();
 8000766:	bf00      	nop

			return;
 8000768:	e00f      	b.n	800078a <I2C_Scan+0x82>
		} else {
			while (CDC_Transmit_FS(".", 1) == USBD_OK) {}
 800076a:	bf00      	nop
 800076c:	2101      	movs	r1, #1
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <I2C_Scan+0x98>)
 8000770:	f005 fe1a 	bl	80063a8 <CDC_Transmit_FS>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f8      	beq.n	800076c <I2C_Scan+0x64>
			__NOP();
 800077a:	bf00      	nop
	for (uint8_t i = 0; i < 128; i++) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	3301      	adds	r3, #1
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	dacd      	bge.n	8000726 <I2C_Scan+0x1e>
		}
	}
}
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	08007524 	.word	0x08007524
 8000794:	20000450 	.word	0x20000450
 8000798:	08007534 	.word	0x08007534
 800079c:	20000200 	.word	0x20000200
 80007a0:	08007540 	.word	0x08007540

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 f972 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f832 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f7ff feea 	bl	8000588 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b4:	f7ff ff32 	bl	800061c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80007b8:	f005 fd38 	bl	800622c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((KEY != oldKey) && KEY) {
 80007bc:	2101      	movs	r1, #1
 80007be:	4813      	ldr	r0, [pc, #76]	; (800080c <main+0x68>)
 80007c0:	f000 fc92 	bl	80010e8 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <main+0x6c>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d009      	beq.n	80007ee <main+0x4a>
 80007da:	2101      	movs	r1, #1
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <main+0x68>)
 80007de:	f000 fc83 	bl	80010e8 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <main+0x4a>
		  __NOP();
 80007e8:	bf00      	nop
		  I2C_Scan();
 80007ea:	f7ff ff8d 	bl	8000708 <I2C_Scan>
	  }

	  oldKey = KEY;
 80007ee:	2101      	movs	r1, #1
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <main+0x68>)
 80007f2:	f000 fc79 	bl	80010e8 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf0c      	ite	eq
 80007fc:	2301      	moveq	r3, #1
 80007fe:	2300      	movne	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <main+0x6c>)
 8000806:	701a      	strb	r2, [r3, #0]
	  if ((KEY != oldKey) && KEY) {
 8000808:	e7d8      	b.n	80007bc <main+0x18>
 800080a:	bf00      	nop
 800080c:	40020000 	.word	0x40020000
 8000810:	2000021e 	.word	0x2000021e

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 fa3c 	bl	8006ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <SystemClock_Config+0xcc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <SystemClock_Config+0xd0>)
 8000862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000888:	2319      	movs	r3, #25
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800088c:	23c0      	movs	r3, #192	; 0xc0
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000890:	2306      	movs	r3, #6
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f002 f887 	bl	80029b0 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a8:	f000 f81e 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 faea 	bl	8002ea0 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d2:	f000 f809 	bl	80008e8 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3750      	adds	r7, #80	; 0x50
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8d0 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <OTG_FS_IRQHandler+0x10>)
 800099e:	f000 ffd4 	bl	800194a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20001148 	.word	0x20001148

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d207      	bcs.n	80009ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009dc:	f006 f936 	bl	8006c4c <__errno>
 80009e0:	4603      	mov	r3, r0
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <_sbrk+0x64>)
 80009fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20010000 	.word	0x20010000
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	20000220 	.word	0x20000220
 8000a14:	20001560 	.word	0x20001560

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffd7 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f006 f8f5 	bl	8006c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fe99 	bl	80007a4 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000a80:	080075e8 	.word	0x080075e8
  ldr r2, =_sbss
 8000a84:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000a88:	20001560 	.word	0x20001560

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_Init+0x40>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_Init+0x40>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x40>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f94f 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff ff16 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023c00 	.word	0x40023c00

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f967 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f92f 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200004a4 	.word	0x200004a4

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200004a4 	.word	0x200004a4

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff29 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff3e 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff31 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e159      	b.n	80010b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8148 	bne.w	80010aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a2 	beq.w	80010aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a56      	ldr	r2, [pc, #344]	; (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f82:	4a52      	ldr	r2, [pc, #328]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a49      	ldr	r2, [pc, #292]	; (80010d0 <HAL_GPIO_Init+0x2f0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d019      	beq.n	8000fe2 <HAL_GPIO_Init+0x202>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_GPIO_Init+0x2f4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0x1fe>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a47      	ldr	r2, [pc, #284]	; (80010d8 <HAL_GPIO_Init+0x2f8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00d      	beq.n	8000fda <HAL_GPIO_Init+0x1fa>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a46      	ldr	r2, [pc, #280]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x1f6>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <HAL_GPIO_Init+0x300>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_GPIO_Init+0x1f2>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_GPIO_Init+0x304>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001026:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x304>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_GPIO_Init+0x304>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <HAL_GPIO_Init+0x304>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <HAL_GPIO_Init+0x304>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <HAL_GPIO_Init+0x304>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x304>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <HAL_GPIO_Init+0x304>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f aea2 	bls.w	8000dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e001      	b.n	800110a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e12b      	b.n	8001382 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fa9a 	bl	8000678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800116a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800117a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800117c:	f002 f838 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8001180:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a81      	ldr	r2, [pc, #516]	; (800138c <HAL_I2C_Init+0x274>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d807      	bhi.n	800119c <HAL_I2C_Init+0x84>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a80      	ldr	r2, [pc, #512]	; (8001390 <HAL_I2C_Init+0x278>)
 8001190:	4293      	cmp	r3, r2
 8001192:	bf94      	ite	ls
 8001194:	2301      	movls	r3, #1
 8001196:	2300      	movhi	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	e006      	b.n	80011aa <HAL_I2C_Init+0x92>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a7d      	ldr	r2, [pc, #500]	; (8001394 <HAL_I2C_Init+0x27c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf94      	ite	ls
 80011a4:	2301      	movls	r3, #1
 80011a6:	2300      	movhi	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0e7      	b.n	8001382 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4a78      	ldr	r2, [pc, #480]	; (8001398 <HAL_I2C_Init+0x280>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9b      	lsrs	r3, r3, #18
 80011bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a6a      	ldr	r2, [pc, #424]	; (800138c <HAL_I2C_Init+0x274>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d802      	bhi.n	80011ec <HAL_I2C_Init+0xd4>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3301      	adds	r3, #1
 80011ea:	e009      	b.n	8001200 <HAL_I2C_Init+0xe8>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	4a69      	ldr	r2, [pc, #420]	; (800139c <HAL_I2C_Init+0x284>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	099b      	lsrs	r3, r3, #6
 80011fe:	3301      	adds	r3, #1
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	430b      	orrs	r3, r1
 8001206:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001212:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	495c      	ldr	r1, [pc, #368]	; (800138c <HAL_I2C_Init+0x274>)
 800121c:	428b      	cmp	r3, r1
 800121e:	d819      	bhi.n	8001254 <HAL_I2C_Init+0x13c>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1e59      	subs	r1, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fbb1 f3f3 	udiv	r3, r1, r3
 800122e:	1c59      	adds	r1, r3, #1
 8001230:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001234:	400b      	ands	r3, r1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <HAL_I2C_Init+0x138>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1e59      	subs	r1, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fbb1 f3f3 	udiv	r3, r1, r3
 8001248:	3301      	adds	r3, #1
 800124a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124e:	e051      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 8001250:	2304      	movs	r3, #4
 8001252:	e04f      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d111      	bne.n	8001280 <HAL_I2C_Init+0x168>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e58      	subs	r0, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	440b      	add	r3, r1
 800126a:	fbb0 f3f3 	udiv	r3, r0, r3
 800126e:	3301      	adds	r3, #1
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	e012      	b.n	80012a6 <HAL_I2C_Init+0x18e>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1e58      	subs	r0, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	0099      	lsls	r1, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	fbb0 f3f3 	udiv	r3, r0, r3
 8001296:	3301      	adds	r3, #1
 8001298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Init+0x196>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e022      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10e      	bne.n	80012d4 <HAL_I2C_Init+0x1bc>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1e58      	subs	r0, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	440b      	add	r3, r1
 80012c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d2:	e00f      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1e58      	subs	r0, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	0099      	lsls	r1, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	6809      	ldr	r1, [r1, #0]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6911      	ldr	r1, [r2, #16]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68d2      	ldr	r2, [r2, #12]
 800132e:	4311      	orrs	r1, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	430b      	orrs	r3, r1
 8001336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	000186a0 	.word	0x000186a0
 8001390:	001e847f 	.word	0x001e847f
 8001394:	003d08ff 	.word	0x003d08ff
 8001398:	431bde83 	.word	0x431bde83
 800139c:	10624dd3 	.word	0x10624dd3

080013a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	460b      	mov	r3, r1
 80013ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fbd4 	bl	8000b5c <HAL_GetTick>
 80013b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	f040 8111 	bne.w	80015ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2319      	movs	r3, #25
 80013ce:	2201      	movs	r2, #1
 80013d0:	4988      	ldr	r1, [pc, #544]	; (80015f4 <HAL_I2C_IsDeviceReady+0x254>)
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f912 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80013de:	2302      	movs	r3, #2
 80013e0:	e104      	b.n	80015ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_I2C_IsDeviceReady+0x50>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e0fd      	b.n	80015ec <HAL_I2C_IsDeviceReady+0x24c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b01      	cmp	r3, #1
 8001404:	d007      	beq.n	8001416 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0201 	orr.w	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001424:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2224      	movs	r2, #36	; 0x24
 800142a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a70      	ldr	r2, [pc, #448]	; (80015f8 <HAL_I2C_IsDeviceReady+0x258>)
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001448:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f8d0 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00d      	beq.n	800147e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001470:	d103      	bne.n	800147a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0b6      	b.n	80015ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800147e:	897b      	ldrh	r3, [r7, #10]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800148c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb65 	bl	8000b5c <HAL_GetTick>
 8001492:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	bf0c      	ite	eq
 80014a2:	2301      	moveq	r3, #1
 80014a4:	2300      	movne	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	bf0c      	ite	eq
 80014ba:	2301      	moveq	r3, #1
 80014bc:	2300      	movne	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80014c2:	e025      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014c4:	f7ff fb4a 	bl	8000b5c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d302      	bcc.n	80014da <HAL_I2C_IsDeviceReady+0x13a>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	22a0      	movs	r2, #160	; 0xa0
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2ba0      	cmp	r3, #160	; 0xa0
 800151a:	d005      	beq.n	8001528 <HAL_I2C_IsDeviceReady+0x188>
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_I2C_IsDeviceReady+0x188>
 8001522:	7dbb      	ldrb	r3, [r7, #22]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0cd      	beq.n	80014c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2220      	movs	r2, #32
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b02      	cmp	r3, #2
 800153c:	d129      	bne.n	8001592 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800154c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2319      	movs	r3, #25
 800156a:	2201      	movs	r2, #1
 800156c:	4921      	ldr	r1, [pc, #132]	; (80015f4 <HAL_I2C_IsDeviceReady+0x254>)
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f000 f844 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e036      	b.n	80015ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2220      	movs	r2, #32
 8001582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e02c      	b.n	80015ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2319      	movs	r3, #25
 80015b2:	2201      	movs	r2, #1
 80015b4:	490f      	ldr	r1, [pc, #60]	; (80015f4 <HAL_I2C_IsDeviceReady+0x254>)
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f820 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e012      	b.n	80015ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f4ff af32 	bcc.w	800143a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2220      	movs	r2, #32
 80015da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80015ea:	2302      	movs	r3, #2
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	00100002 	.word	0x00100002
 80015f8:	ffff0000 	.word	0xffff0000

080015fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160c:	e025      	b.n	800165a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d021      	beq.n	800165a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001616:	f7ff faa1 	bl	8000b5c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d116      	bne.n	800165a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2220      	movs	r2, #32
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f043 0220 	orr.w	r2, r3, #32
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e023      	b.n	80016a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10d      	bne.n	8001680 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4013      	ands	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	e00c      	b.n	800169a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4013      	ands	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf0c      	ite	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	2300      	movne	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	429a      	cmp	r2, r3
 800169e:	d0b6      	beq.n	800160e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ac:	b08f      	sub	sp, #60	; 0x3c
 80016ae:	af0a      	add	r7, sp, #40	; 0x28
 80016b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e10f      	b.n	80018dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f004 ffae 	bl	8006638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fea1 	bl	8003442 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	687e      	ldr	r6, [r7, #4]
 8001708:	466d      	mov	r5, sp
 800170a:	f106 0410 	add.w	r4, r6, #16
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800171a:	e885 0003 	stmia.w	r5, {r0, r1}
 800171e:	1d33      	adds	r3, r6, #4
 8001720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f001 fd78 	bl	8003218 <USB_CoreInit>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2202      	movs	r2, #2
 8001732:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0d0      	b.n	80018dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fe8f 	bl	8003464 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e04a      	b.n	80017e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	333d      	adds	r3, #61	; 0x3d
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	333c      	adds	r3, #60	; 0x3c
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	b298      	uxth	r0, r3
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3342      	adds	r3, #66	; 0x42
 8001788:	4602      	mov	r2, r0
 800178a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	333f      	adds	r3, #63	; 0x3f
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3344      	adds	r3, #68	; 0x44
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3348      	adds	r3, #72	; 0x48
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3350      	adds	r3, #80	; 0x50
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	3301      	adds	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3af      	bcc.n	800174c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e044      	b.n	800187c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	3301      	adds	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3b5      	bcc.n	80017f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	687e      	ldr	r6, [r7, #4]
 800188e:	466d      	mov	r5, sp
 8001890:	f106 0410 	add.w	r4, r6, #16
 8001894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80018a4:	1d33      	adds	r3, r6, #4
 80018a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a8:	6838      	ldr	r0, [r7, #0]
 80018aa:	f001 fe27 	bl	80034fc <USB_DevInit>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e00d      	b.n	80018dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fea3 	bl	8004620 <USB_DevDisconnect>

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_PCD_Start+0x1c>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e020      	b.n	8001942 <HAL_PCD_Start+0x5e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	2b01      	cmp	r3, #1
 800190e:	d109      	bne.n	8001924 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001914:	2b01      	cmp	r3, #1
 8001916:	d005      	beq.n	8001924 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fd79 	bl	8003420 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f002 fe53 	bl	80045de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800194a:	b590      	push	{r4, r7, lr}
 800194c:	b08d      	sub	sp, #52	; 0x34
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 ff11 	bl	8004788 <USB_GetMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 839d 	bne.w	80020a8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fe75 	bl	8004662 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8393 	beq.w	80020a6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fe6c 	bl	8004662 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b02      	cmp	r3, #2
 8001992:	d107      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f002 0202 	and.w	r2, r2, #2
 80019a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fe5a 	bl	8004662 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b10      	cmp	r3, #16
 80019b6:	d161      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0210 	bic.w	r2, r2, #16
 80019c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 020f 	and.w	r2, r3, #15
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	3304      	adds	r3, #4
 80019e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	0c5b      	lsrs	r3, r3, #17
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d124      	bne.n	8001a3e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d035      	beq.n	8001a6c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	6a38      	ldr	r0, [r7, #32]
 8001a14:	f002 fc91 	bl	800433a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a24:	441a      	add	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a36:	441a      	add	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	619a      	str	r2, [r3, #24]
 8001a3c:	e016      	b.n	8001a6c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	0c5b      	lsrs	r3, r3, #17
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d110      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a50:	2208      	movs	r2, #8
 8001a52:	4619      	mov	r1, r3
 8001a54:	6a38      	ldr	r0, [r7, #32]
 8001a56:	f002 fc70 	bl	800433a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a66:	441a      	add	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0210 	orr.w	r2, r2, #16
 8001a7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fdee 	bl	8004662 <USB_ReadInterrupts>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a90:	d16e      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fdf4 	bl	8004688 <USB_ReadDevAllOutEpInterrupt>
 8001aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001aa2:	e062      	b.n	8001b6a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d057      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fe19 	bl	80046f0 <USB_ReadDevOutEPInterrupt>
 8001abe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2301      	movs	r3, #1
 8001ada:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fdb0 	bl	8002644 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afa:	461a      	mov	r2, r3
 8001afc:	2308      	movs	r3, #8
 8001afe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 feaa 	bl	800285c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2310      	movs	r3, #16
 8001b22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2320      	movs	r3, #32
 8001b3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	015a      	lsls	r2, r3, #5
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b56:	461a      	mov	r2, r3
 8001b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	3301      	adds	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d199      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fd74 	bl	8004662 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b84:	f040 80c0 	bne.w	8001d08 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fd95 	bl	80046bc <USB_ReadDevAllInEpInterrupt>
 8001b92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b98:	e0b2      	b.n	8001d00 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a7 	beq.w	8001cf4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fdbb 	bl	800472c <USB_ReadDevInEPInterrupt>
 8001bb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d057      	beq.n	8001c72 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	2201      	movs	r2, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69f9      	ldr	r1, [r7, #28]
 8001bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001be2:	4013      	ands	r3, r2
 8001be4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d132      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3348      	adds	r3, #72	; 0x48
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4403      	add	r3, r0
 8001c20:	3344      	adds	r3, #68	; 0x44
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4419      	add	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4403      	add	r3, r0
 8001c34:	3348      	adds	r3, #72	; 0x48
 8001c36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x31c>
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3350      	adds	r3, #80	; 0x50
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2101      	movs	r1, #1
 8001c62:	f002 fdc3 	bl	80047ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f004 fd64 	bl	800673a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2302      	movs	r3, #2
 8001ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fc1b 	bl	800252a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f47f af49 	bne.w	8001b9a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fca8 	bl	8004662 <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d1c:	d122      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d108      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d44:	2100      	movs	r1, #0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fe26 	bl	8002998 <HAL_PCDEx_LPM_Callback>
 8001d4c:	e002      	b.n	8001d54 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f004 fd60 	bl	8006814 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fc7a 	bl	8004662 <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d78:	d112      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f004 fd1c 	bl	80067c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d9e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fc5c 	bl	8004662 <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db4:	f040 80c7 	bne.w	8001f46 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fcf6 	bl	80037c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ddc:	e056      	b.n	8001e8c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dea:	461a      	mov	r2, r3
 8001dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001df0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e02:	0151      	lsls	r1, r2, #5
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	440a      	add	r2, r1
 8001e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e10:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e22:	0151      	lsls	r1, r2, #5
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	440a      	add	r2, r1
 8001e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e56:	0151      	lsls	r1, r2, #5
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	440a      	add	r2, r1
 8001e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e76:	0151      	lsls	r1, r2, #5
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	440a      	add	r2, r1
 8001e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	3301      	adds	r3, #1
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3a3      	bcc.n	8001dde <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ea8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec2:	f043 030b 	orr.w	r3, r3, #11
 8001ec6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed8:	f043 030b 	orr.w	r3, r3, #11
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	e015      	b.n	8001f0c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ef2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ef6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f06:	f043 030b 	orr.w	r3, r3, #11
 8001f0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f30:	461a      	mov	r2, r3
 8001f32:	f002 fc5b 	bl	80047ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fb89 	bl	8004662 <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f5a:	d124      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fc1f 	bl	80047a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 fc87 	bl	800387e <USB_GetDevSpeed>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681c      	ldr	r4, [r3, #0]
 8001f7c:	f001 f92c 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 8001f80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f001 f9a6 	bl	80032dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f004 fbfa 	bl	800678a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fb59 	bl	8004662 <USB_ReadInterrupts>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f004 fbd7 	bl	800676e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f002 0208 	and.w	r2, r2, #8
 8001fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fb44 	bl	8004662 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fe4:	d10f      	bne.n	8002006 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f004 fc2f 	bl	8006854 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fb29 	bl	8004662 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800201a:	d10f      	bne.n	800203c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f004 fc02 	bl	8006830 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800203a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f002 fb0e 	bl	8004662 <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002050:	d10a      	bne.n	8002068 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f004 fc10 	bl	8006878 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f002 faf8 	bl	8004662 <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d115      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f004 fc00 	bl	8006894 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	e000      	b.n	80020a8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80020a6:	bf00      	nop
    }
  }
}
 80020a8:	3734      	adds	r7, #52	; 0x34
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_PCD_SetAddress+0x1a>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e013      	b.n	80020f0 <HAL_PCD_SetAddress+0x42>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fa56 	bl	8004592 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	70fb      	strb	r3, [r7, #3]
 800210a:	460b      	mov	r3, r1
 800210c:	803b      	strh	r3, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da0f      	bge.n	800213e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 020f 	and.w	r2, r3, #15
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3338      	adds	r3, #56	; 0x38
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	705a      	strb	r2, [r3, #1]
 800213c:	e00f      	b.n	800215e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800216a:	883a      	ldrh	r2, [r7, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	78ba      	ldrb	r2, [r7, #2]
 8002174:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002188:	78bb      	ldrb	r3, [r7, #2]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d102      	bne.n	8002194 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_PCD_EP_Open+0xaa>
 800219e:	2302      	movs	r3, #2
 80021a0:	e00e      	b.n	80021c0 <HAL_PCD_EP_Open+0xc8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 fb89 	bl	80038c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80021be:	7afb      	ldrb	r3, [r7, #11]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da0f      	bge.n	80021fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3338      	adds	r3, #56	; 0x38
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
 80021fa:	e00f      	b.n	800221c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	3304      	adds	r3, #4
 8002214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	b2da      	uxtb	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_PCD_EP_Close+0x6e>
 8002232:	2302      	movs	r3, #2
 8002234:	e00e      	b.n	8002254 <HAL_PCD_EP_Close+0x8c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68f9      	ldr	r1, [r7, #12]
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fbc7 	bl	80039d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	460b      	mov	r3, r1
 800226a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800226c:	7afb      	ldrb	r3, [r7, #11]
 800226e:	f003 020f 	and.w	r2, r3, #15
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4413      	add	r3, r2
 8002282:	3304      	adds	r3, #4
 8002284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2200      	movs	r2, #0
 800229c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229e:	7afb      	ldrb	r3, [r7, #11]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022b8:	7afb      	ldrb	r3, [r7, #11]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6979      	ldr	r1, [r7, #20]
 80022d0:	f001 fea2 	bl	8004018 <USB_EP0StartXfer>
 80022d4:	e008      	b.n	80022e8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	6979      	ldr	r1, [r7, #20]
 80022e4:	f001 fc54 	bl	8003b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 020f 	and.w	r2, r3, #15
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002314:	681b      	ldr	r3, [r3, #0]
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	460b      	mov	r3, r1
 8002330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	f003 020f 	and.w	r2, r3, #15
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3338      	adds	r3, #56	; 0x38
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2201      	movs	r2, #1
 8002360:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	b2da      	uxtb	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	f001 fe40 	bl	8004018 <USB_EP0StartXfer>
 8002398:	e008      	b.n	80023ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	f001 fbf2 	bl	8003b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 020f 	and.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d901      	bls.n	80023d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e050      	b.n	8002476 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da0f      	bge.n	80023fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 020f 	and.w	r2, r3, #15
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	3338      	adds	r3, #56	; 0x38
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	705a      	strb	r2, [r3, #1]
 80023fa:	e00d      	b.n	8002418 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	3304      	adds	r3, #4
 8002410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_PCD_EP_SetStall+0x82>
 8002434:	2302      	movs	r3, #2
 8002436:	e01e      	b.n	8002476 <HAL_PCD_EP_SetStall+0xc0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	4618      	mov	r0, r3
 8002448:	f001 ffcf 	bl	80043ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	b2d9      	uxtb	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002466:	461a      	mov	r2, r3
 8002468:	f002 f9c0 	bl	80047ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d901      	bls.n	800249c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e042      	b.n	8002522 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800249c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0f      	bge.n	80024c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 020f 	and.w	r2, r3, #15
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	3338      	adds	r3, #56	; 0x38
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	705a      	strb	r2, [r3, #1]
 80024c2:	e00f      	b.n	80024e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 020f 	and.w	r2, r3, #15
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_PCD_EP_ClrStall+0x86>
 8002500:	2302      	movs	r3, #2
 8002502:	e00e      	b.n	8002522 <HAL_PCD_EP_ClrStall+0xa4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68f9      	ldr	r1, [r7, #12]
 8002512:	4618      	mov	r0, r3
 8002514:	f001 ffd7 	bl	80044c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b08a      	sub	sp, #40	; 0x28
 800252e:	af02      	add	r7, sp, #8
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	3338      	adds	r3, #56	; 0x38
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	429a      	cmp	r2, r3
 800255c:	d901      	bls.n	8002562 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06c      	b.n	800263c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	429a      	cmp	r2, r3
 8002576:	d902      	bls.n	800257e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3303      	adds	r3, #3
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002586:	e02b      	b.n	80025e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	429a      	cmp	r2, r3
 800259c:	d902      	bls.n	80025a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3303      	adds	r3, #3
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	68d9      	ldr	r1, [r3, #12]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4603      	mov	r3, r0
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f001 fe7b 	bl	80042be <USB_WritePacket>

    ep->xfer_buff  += len;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	441a      	add	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	441a      	add	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d809      	bhi.n	800260a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025fe:	429a      	cmp	r2, r3
 8002600:	d203      	bcs.n	800260a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1be      	bne.n	8002588 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	429a      	cmp	r2, r3
 8002614:	d811      	bhi.n	800263a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	2201      	movs	r2, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	43db      	mvns	r3, r3
 8002630:	6939      	ldr	r1, [r7, #16]
 8002632:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002636:	4013      	ands	r3, r2
 8002638:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	333c      	adds	r3, #60	; 0x3c
 800265c:	3304      	adds	r3, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 80a0 	bne.w	80027bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4a72      	ldr	r2, [pc, #456]	; (8002854 <PCD_EP_OutXfrComplete_int+0x210>)
 800268a:	4293      	cmp	r3, r2
 800268c:	f240 80dd 	bls.w	800284a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80d7 	beq.w	800284a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a8:	461a      	mov	r2, r3
 80026aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ae:	6093      	str	r3, [r2, #8]
 80026b0:	e0cb      	b.n	800284a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c8:	461a      	mov	r2, r3
 80026ca:	2320      	movs	r3, #32
 80026cc:	6093      	str	r3, [r2, #8]
 80026ce:	e0bc      	b.n	800284a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 80b7 	bne.w	800284a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a5d      	ldr	r2, [pc, #372]	; (8002854 <PCD_EP_OutXfrComplete_int+0x210>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d90f      	bls.n	8002704 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fa:	461a      	mov	r2, r3
 80026fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002700:	6093      	str	r3, [r2, #8]
 8002702:	e0a2      	b.n	800284a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002716:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	0159      	lsls	r1, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	440b      	add	r3, r1
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800272a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4403      	add	r3, r0
 800273a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800273e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4403      	add	r3, r0
 8002762:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4419      	add	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4403      	add	r3, r0
 8002778:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800277c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d114      	bne.n	80027ae <PCD_EP_OutXfrComplete_int+0x16a>
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d108      	bne.n	80027ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027a6:	461a      	mov	r2, r3
 80027a8:	2101      	movs	r1, #1
 80027aa:	f002 f81f 	bl	80047ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	4619      	mov	r1, r3
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f003 ffa5 	bl	8006704 <HAL_PCD_DataOutStageCallback>
 80027ba:	e046      	b.n	800284a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a26      	ldr	r2, [pc, #152]	; (8002858 <PCD_EP_OutXfrComplete_int+0x214>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d124      	bne.n	800280e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e0:	6093      	str	r3, [r2, #8]
 80027e2:	e032      	b.n	800284a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	2320      	movs	r3, #32
 80027fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f003 ff7c 	bl	8006704 <HAL_PCD_DataOutStageCallback>
 800280c:	e01d      	b.n	800284a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d114      	bne.n	800283e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002836:	461a      	mov	r2, r3
 8002838:	2100      	movs	r1, #0
 800283a:	f001 ffd7 	bl	80047ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f003 ff5d 	bl	8006704 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	4f54300a 	.word	0x4f54300a
 8002858:	4f54310a 	.word	0x4f54310a

0800285c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	333c      	adds	r3, #60	; 0x3c
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d90e      	bls.n	80028b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a8:	461a      	mov	r2, r3
 80028aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f003 ff15 	bl	80066e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d90c      	bls.n	80028d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028d0:	461a      	mov	r2, r3
 80028d2:	2101      	movs	r1, #1
 80028d4:	f001 ff8a 	bl	80047ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	4f54300a 	.word	0x4f54300a

080028e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
 80028f4:	4613      	mov	r3, r2
 80028f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002906:	883b      	ldrh	r3, [r7, #0]
 8002908:	0419      	lsls	r1, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	430a      	orrs	r2, r1
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
 8002914:	e028      	b.n	8002968 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e00d      	b.n	8002946 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	3340      	adds	r3, #64	; 0x40
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	4413      	add	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	3301      	adds	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	3b01      	subs	r3, #1
 800294c:	429a      	cmp	r2, r3
 800294e:	d3ec      	bcc.n	800292a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002950:	883b      	ldrh	r3, [r7, #0]
 8002952:	0418      	lsls	r0, r3, #16
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	3b01      	subs	r3, #1
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4302      	orrs	r2, r0
 8002960:	3340      	adds	r3, #64	; 0x40
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e264      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d075      	beq.n	8002aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ce:	4ba3      	ldr	r3, [pc, #652]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d00c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4ba0      	ldr	r3, [pc, #640]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d112      	bne.n	8002a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	4b9d      	ldr	r3, [pc, #628]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b99      	ldr	r3, [pc, #612]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05b      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x108>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d157      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e23f      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x74>
 8002a16:	4b91      	ldr	r3, [pc, #580]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a90      	ldr	r2, [pc, #576]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e01d      	b.n	8002a60 <HAL_RCC_OscConfig+0xb0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x98>
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a8a      	ldr	r2, [pc, #552]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a87      	ldr	r2, [pc, #540]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0xb0>
 8002a48:	4b84      	ldr	r3, [pc, #528]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a83      	ldr	r2, [pc, #524]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a80      	ldr	r2, [pc, #512]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe f878 	bl	8000b5c <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe f874 	bl	8000b5c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e204      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0xc0>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe f864 	bl	8000b5c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe f860 	bl	8000b5c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e1f0      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0xe8>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d063      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d11c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d116      	bne.n	8002b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_RCC_OscConfig+0x152>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e1c4      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4952      	ldr	r1, [pc, #328]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b16:	e03a      	b.n	8002b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCC_OscConfig+0x2b0>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe f819 	bl	8000b5c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7fe f815 	bl	8000b5c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e1a5      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	4b46      	ldr	r3, [pc, #280]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4940      	ldr	r1, [pc, #256]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
 8002b60:	e015      	b.n	8002b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b62:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCC_OscConfig+0x2b0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fd fff8 	bl	8000b5c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b70:	f7fd fff4 	bl	8000b5c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e184      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d030      	beq.n	8002bfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba2:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x2b4>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fd ffd8 	bl	8000b5c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7fd ffd4 	bl	8000b5c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e164      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x200>
 8002bce:	e015      	b.n	8002bfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_OscConfig+0x2b4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fd ffc1 	bl	8000b5c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fd ffbd 	bl	8000b5c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e14d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a0 	beq.w	8002d4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x2b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d121      	bne.n	8002c8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <HAL_RCC_OscConfig+0x2b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <HAL_RCC_OscConfig+0x2b8>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7fd ff83 	bl	8000b5c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e011      	b.n	8002c7e <HAL_RCC_OscConfig+0x2ce>
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	42470000 	.word	0x42470000
 8002c64:	42470e80 	.word	0x42470e80
 8002c68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6c:	f7fd ff76 	bl	8000b5c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e106      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b85      	ldr	r3, [pc, #532]	; (8002e94 <HAL_RCC_OscConfig+0x4e4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
 8002c92:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a80      	ldr	r2, [pc, #512]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	e01c      	b.n	8002cda <HAL_RCC_OscConfig+0x32a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x312>
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a7a      	ldr	r2, [pc, #488]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	4b78      	ldr	r3, [pc, #480]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a77      	ldr	r2, [pc, #476]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	e00b      	b.n	8002cda <HAL_RCC_OscConfig+0x32a>
 8002cc2:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a74      	ldr	r2, [pc, #464]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a71      	ldr	r2, [pc, #452]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fd ff3b 	bl	8000b5c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fd ff37 	bl	8000b5c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0c5      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <HAL_RCC_OscConfig+0x33a>
 8002d0c:	e014      	b.n	8002d38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7fd ff25 	bl	8000b5c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fd ff21 	bl	8000b5c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0af      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	4b5a      	ldr	r3, [pc, #360]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ee      	bne.n	8002d16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3e:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4a55      	ldr	r2, [pc, #340]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 809b 	beq.w	8002e8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d05c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d141      	bne.n	8002dec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <HAL_RCC_OscConfig+0x4ec>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fd fef5 	bl	8000b5c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fd fef1 	bl	8000b5c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e081      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d88:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	019b      	lsls	r3, r3, #6
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	4937      	ldr	r1, [pc, #220]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <HAL_RCC_OscConfig+0x4ec>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fd feca 	bl	8000b5c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fd fec6 	bl	8000b5c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e056      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x41c>
 8002dea:	e04e      	b.n	8002e8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x4ec>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fd feb3 	bl	8000b5c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fd feaf 	bl	8000b5c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e03f      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x44a>
 8002e18:	e037      	b.n	8002e8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e032      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_RCC_OscConfig+0x4e8>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d028      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d121      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d11a      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e56:	4013      	ands	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d111      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40007000 	.word	0x40007000
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	42470060 	.word	0x42470060

08002ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0cc      	b.n	800304e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d90c      	bls.n	8002edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b65      	ldr	r3, [pc, #404]	; (8003058 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b63      	ldr	r3, [pc, #396]	; (8003058 <HAL_RCC_ClockConfig+0x1b8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b8      	b.n	800304e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef4:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a58      	ldr	r2, [pc, #352]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a52      	ldr	r2, [pc, #328]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b50      	ldr	r3, [pc, #320]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	494d      	ldr	r1, [pc, #308]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d044      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d119      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07f      	b.n	800304e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	4b3f      	ldr	r3, [pc, #252]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e06f      	b.n	800304e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e067      	b.n	800304e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7e:	4b37      	ldr	r3, [pc, #220]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4934      	ldr	r1, [pc, #208]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f90:	f7fd fde4 	bl	8000b5c <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fd fde0 	bl	8000b5c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e04f      	b.n	800304e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 020c 	and.w	r2, r3, #12
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d1eb      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d20c      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e032      	b.n	800304e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4916      	ldr	r1, [pc, #88]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	490e      	ldr	r1, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003026:	f000 f821 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	490a      	ldr	r1, [pc, #40]	; (8003060 <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	5ccb      	ldrb	r3, [r1, r3]
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fd44 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023c00 	.word	0x40023c00
 800305c:	40023800 	.word	0x40023800
 8003060:	0800758c 	.word	0x0800758c
 8003064:	20000000 	.word	0x20000000
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003072:	2100      	movs	r1, #0
 8003074:	6079      	str	r1, [r7, #4]
 8003076:	2100      	movs	r1, #0
 8003078:	60f9      	str	r1, [r7, #12]
 800307a:	2100      	movs	r1, #0
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800307e:	2100      	movs	r1, #0
 8003080:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003082:	4952      	ldr	r1, [pc, #328]	; (80031cc <HAL_RCC_GetSysClockFreq+0x160>)
 8003084:	6889      	ldr	r1, [r1, #8]
 8003086:	f001 010c 	and.w	r1, r1, #12
 800308a:	2908      	cmp	r1, #8
 800308c:	d00d      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x3e>
 800308e:	2908      	cmp	r1, #8
 8003090:	f200 8094 	bhi.w	80031bc <HAL_RCC_GetSysClockFreq+0x150>
 8003094:	2900      	cmp	r1, #0
 8003096:	d002      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x32>
 8003098:	2904      	cmp	r1, #4
 800309a:	d003      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x38>
 800309c:	e08e      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800309e:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80030a0:	60bb      	str	r3, [r7, #8]
       break;
 80030a2:	e08e      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80030a6:	60bb      	str	r3, [r7, #8]
      break;
 80030a8:	e08b      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030aa:	4948      	ldr	r1, [pc, #288]	; (80031cc <HAL_RCC_GetSysClockFreq+0x160>)
 80030ac:	6849      	ldr	r1, [r1, #4]
 80030ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80030b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030b4:	4945      	ldr	r1, [pc, #276]	; (80031cc <HAL_RCC_GetSysClockFreq+0x160>)
 80030b6:	6849      	ldr	r1, [r1, #4]
 80030b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80030bc:	2900      	cmp	r1, #0
 80030be:	d024      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c0:	4942      	ldr	r1, [pc, #264]	; (80031cc <HAL_RCC_GetSysClockFreq+0x160>)
 80030c2:	6849      	ldr	r1, [r1, #4]
 80030c4:	0989      	lsrs	r1, r1, #6
 80030c6:	4608      	mov	r0, r1
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80030d0:	f04f 0500 	mov.w	r5, #0
 80030d4:	ea00 0204 	and.w	r2, r0, r4
 80030d8:	ea01 0305 	and.w	r3, r1, r5
 80030dc:	493d      	ldr	r1, [pc, #244]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80030de:	fb01 f003 	mul.w	r0, r1, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	fb01 f102 	mul.w	r1, r1, r2
 80030e8:	1844      	adds	r4, r0, r1
 80030ea:	493a      	ldr	r1, [pc, #232]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80030ec:	fba2 0101 	umull	r0, r1, r2, r1
 80030f0:	1863      	adds	r3, r4, r1
 80030f2:	4619      	mov	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f7fd f8c8 	bl	8000290 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e04a      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_GetSysClockFreq+0x160>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	461a      	mov	r2, r3
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	f240 10ff 	movw	r0, #511	; 0x1ff
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	ea02 0400 	and.w	r4, r2, r0
 8003122:	ea03 0501 	and.w	r5, r3, r1
 8003126:	4620      	mov	r0, r4
 8003128:	4629      	mov	r1, r5
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	014b      	lsls	r3, r1, #5
 8003134:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003138:	0142      	lsls	r2, r0, #5
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	1b00      	subs	r0, r0, r4
 8003140:	eb61 0105 	sbc.w	r1, r1, r5
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	018b      	lsls	r3, r1, #6
 800314e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003152:	0182      	lsls	r2, r0, #6
 8003154:	1a12      	subs	r2, r2, r0
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	00d9      	lsls	r1, r3, #3
 8003164:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003168:	00d0      	lsls	r0, r2, #3
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	1912      	adds	r2, r2, r4
 8003170:	eb45 0303 	adc.w	r3, r5, r3
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	0299      	lsls	r1, r3, #10
 800317e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003182:	0290      	lsls	r0, r2, #10
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	461a      	mov	r2, r3
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	f7fd f87c 	bl	8000290 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCC_GetSysClockFreq+0x160>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	3301      	adds	r3, #1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	60bb      	str	r3, [r7, #8]
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80031be:	60bb      	str	r3, [r7, #8]
      break;
 80031c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c2:	68bb      	ldr	r3, [r7, #8]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bdb0      	pop	{r4, r5, r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	017d7840 	.word	0x017d7840

080031d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RCC_GetHCLKFreq+0x14>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000000 	.word	0x20000000

080031f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031f4:	f7ff fff0 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0a9b      	lsrs	r3, r3, #10
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	0800759c 	.word	0x0800759c

08003218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003218:	b084      	sub	sp, #16
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	f107 001c 	add.w	r0, r7, #28
 8003226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	2b01      	cmp	r3, #1
 800322e:	d122      	bne.n	8003276 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f001 fb1c 	bl	80048a8 <USB_CoreReset>
 8003270:	4603      	mov	r3, r0
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e01a      	b.n	80032ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 fb10 	bl	80048a8 <USB_CoreReset>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
 800329e:	e005      	b.n	80032ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10b      	bne.n	80032ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f043 0206 	orr.w	r2, r3, #6
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032d6:	b004      	add	sp, #16
 80032d8:	4770      	bx	lr
	...

080032dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	4613      	mov	r3, r2
 80032e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d165      	bne.n	80033bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4a41      	ldr	r2, [pc, #260]	; (80033f8 <USB_SetTurnaroundTime+0x11c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d906      	bls.n	8003306 <USB_SetTurnaroundTime+0x2a>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4a40      	ldr	r2, [pc, #256]	; (80033fc <USB_SetTurnaroundTime+0x120>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d202      	bcs.n	8003306 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003300:	230f      	movs	r3, #15
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	e062      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <USB_SetTurnaroundTime+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d306      	bcc.n	800331c <USB_SetTurnaroundTime+0x40>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <USB_SetTurnaroundTime+0x124>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d202      	bcs.n	800331c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003316:	230e      	movs	r3, #14
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e057      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4a38      	ldr	r2, [pc, #224]	; (8003400 <USB_SetTurnaroundTime+0x124>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d306      	bcc.n	8003332 <USB_SetTurnaroundTime+0x56>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4a37      	ldr	r2, [pc, #220]	; (8003404 <USB_SetTurnaroundTime+0x128>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d202      	bcs.n	8003332 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800332c:	230d      	movs	r3, #13
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e04c      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4a33      	ldr	r2, [pc, #204]	; (8003404 <USB_SetTurnaroundTime+0x128>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d306      	bcc.n	8003348 <USB_SetTurnaroundTime+0x6c>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <USB_SetTurnaroundTime+0x12c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d802      	bhi.n	8003348 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003342:	230c      	movs	r3, #12
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e041      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <USB_SetTurnaroundTime+0x12c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d906      	bls.n	800335e <USB_SetTurnaroundTime+0x82>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4a2e      	ldr	r2, [pc, #184]	; (800340c <USB_SetTurnaroundTime+0x130>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d802      	bhi.n	800335e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003358:	230b      	movs	r3, #11
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e036      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4a2a      	ldr	r2, [pc, #168]	; (800340c <USB_SetTurnaroundTime+0x130>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d906      	bls.n	8003374 <USB_SetTurnaroundTime+0x98>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4a29      	ldr	r2, [pc, #164]	; (8003410 <USB_SetTurnaroundTime+0x134>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d802      	bhi.n	8003374 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800336e:	230a      	movs	r3, #10
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e02b      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4a26      	ldr	r2, [pc, #152]	; (8003410 <USB_SetTurnaroundTime+0x134>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d906      	bls.n	800338a <USB_SetTurnaroundTime+0xae>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a25      	ldr	r2, [pc, #148]	; (8003414 <USB_SetTurnaroundTime+0x138>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d202      	bcs.n	800338a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003384:	2309      	movs	r3, #9
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e020      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <USB_SetTurnaroundTime+0x138>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d306      	bcc.n	80033a0 <USB_SetTurnaroundTime+0xc4>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <USB_SetTurnaroundTime+0x13c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d802      	bhi.n	80033a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800339a:	2308      	movs	r3, #8
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e015      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <USB_SetTurnaroundTime+0x13c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d906      	bls.n	80033b6 <USB_SetTurnaroundTime+0xda>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <USB_SetTurnaroundTime+0x140>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d202      	bcs.n	80033b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80033b0:	2307      	movs	r3, #7
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	e00a      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033b6:	2306      	movs	r3, #6
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e007      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80033c2:	2309      	movs	r3, #9
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e001      	b.n	80033cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033c8:	2309      	movs	r3, #9
 80033ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	00d8acbf 	.word	0x00d8acbf
 80033fc:	00e4e1c0 	.word	0x00e4e1c0
 8003400:	00f42400 	.word	0x00f42400
 8003404:	01067380 	.word	0x01067380
 8003408:	011a499f 	.word	0x011a499f
 800340c:	01312cff 	.word	0x01312cff
 8003410:	014ca43f 	.word	0x014ca43f
 8003414:	016e3600 	.word	0x016e3600
 8003418:	01a6ab1f 	.word	0x01a6ab1f
 800341c:	01e84800 	.word	0x01e84800

08003420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0201 	bic.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d115      	bne.n	80034b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003492:	2001      	movs	r0, #1
 8003494:	f7fd fb6e 	bl	8000b74 <HAL_Delay>
      ms++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f001 f972 	bl	8004788 <USB_GetMode>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d01e      	beq.n	80034e8 <USB_SetCurrentMode+0x84>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b31      	cmp	r3, #49	; 0x31
 80034ae:	d9f0      	bls.n	8003492 <USB_SetCurrentMode+0x2e>
 80034b0:	e01a      	b.n	80034e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f7fd fb55 	bl	8000b74 <HAL_Delay>
      ms++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 f959 	bl	8004788 <USB_GetMode>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <USB_SetCurrentMode+0x84>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b31      	cmp	r3, #49	; 0x31
 80034e0:	d9f0      	bls.n	80034c4 <USB_SetCurrentMode+0x60>
 80034e2:	e001      	b.n	80034e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e005      	b.n	80034f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b32      	cmp	r3, #50	; 0x32
 80034ec:	d101      	bne.n	80034f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034fc:	b084      	sub	sp, #16
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800350a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e009      	b.n	8003530 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	3340      	adds	r3, #64	; 0x40
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	2200      	movs	r2, #0
 8003528:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	3301      	adds	r3, #1
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b0e      	cmp	r3, #14
 8003534:	d9f2      	bls.n	800351c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11c      	bne.n	8003576 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
 8003574:	e00b      	b.n	800358e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003594:	461a      	mov	r2, r3
 8003596:	2300      	movs	r3, #0
 8003598:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a0:	4619      	mov	r1, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	461a      	mov	r2, r3
 80035aa:	680b      	ldr	r3, [r1, #0]
 80035ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10c      	bne.n	80035ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035ba:	2100      	movs	r1, #0
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f945 	bl	800384c <USB_SetDevSpeed>
 80035c2:	e008      	b.n	80035d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035c4:	2101      	movs	r1, #1
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f940 	bl	800384c <USB_SetDevSpeed>
 80035cc:	e003      	b.n	80035d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035ce:	2103      	movs	r1, #3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f93b 	bl	800384c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035d6:	2110      	movs	r1, #16
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8f3 	bl	80037c4 <USB_FlushTxFifo>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f90f 	bl	800380c <USB_FlushRxFifo>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fe:	461a      	mov	r2, r3
 8003600:	2300      	movs	r3, #0
 8003602:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	e043      	b.n	80036aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003638:	d118      	bne.n	800366c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	461a      	mov	r2, r3
 800364e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e013      	b.n	800367e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003662:	461a      	mov	r2, r3
 8003664:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e008      	b.n	800367e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003678:	461a      	mov	r2, r3
 800367a:	2300      	movs	r3, #0
 800367c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368a:	461a      	mov	r2, r3
 800368c:	2300      	movs	r3, #0
 800368e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369c:	461a      	mov	r2, r3
 800369e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	3301      	adds	r3, #1
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d3b7      	bcc.n	8003622 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e043      	b.n	8003740 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ce:	d118      	bne.n	8003702 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	461a      	mov	r2, r3
 80036e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e013      	b.n	8003714 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e008      	b.n	8003714 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	461a      	mov	r2, r3
 8003710:	2300      	movs	r3, #0
 8003712:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	461a      	mov	r2, r3
 8003722:	2300      	movs	r3, #0
 8003724:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003732:	461a      	mov	r2, r3
 8003734:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3301      	adds	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d3b7      	bcc.n	80036b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003768:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f043 0210 	orr.w	r2, r3, #16
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <USB_DevInit+0x2c4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f043 0208 	orr.w	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d107      	bne.n	80037b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037bc:	b004      	add	sp, #16
 80037be:	4770      	bx	lr
 80037c0:	803c3800 	.word	0x803c3800

080037c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3301      	adds	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	4a08      	ldr	r2, [pc, #32]	; (8003808 <USB_FlushTxFifo+0x44>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e006      	b.n	80037fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d0f1      	beq.n	80037de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	00030d40 	.word	0x00030d40

0800380c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2210      	movs	r2, #16
 800381c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <USB_FlushRxFifo+0x3c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e006      	b.n	800383c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d0f1      	beq.n	800381e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	00030d40 	.word	0x00030d40

0800384c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800387e:	b480      	push	{r7}
 8003880:	b087      	sub	sp, #28
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
 80038a2:	e00a      	b.n	80038ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d002      	beq.n	80038b0 <USB_GetDevSpeed+0x32>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b06      	cmp	r3, #6
 80038ae:	d102      	bne.n	80038b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80038b0:	2302      	movs	r3, #2
 80038b2:	75fb      	strb	r3, [r7, #23]
 80038b4:	e001      	b.n	80038ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80038b6:	230f      	movs	r3, #15
 80038b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d13a      	bne.n	800395a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	2101      	movs	r1, #1
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003902:	4313      	orrs	r3, r2
 8003904:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d155      	bne.n	80039c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	78db      	ldrb	r3, [r3, #3]
 8003936:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003938:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	059b      	lsls	r3, r3, #22
 800393e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003940:	4313      	orrs	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e036      	b.n	80039c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003978:	4313      	orrs	r3, r2
 800397a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11a      	bne.n	80039c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	78db      	ldrb	r3, [r3, #3]
 80039ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039ae:	430b      	orrs	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d161      	bne.n	8003ab8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a0a:	d11f      	bne.n	8003a4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a90:	4013      	ands	r3, r2
 8003a92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	0159      	lsls	r1, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4b35      	ldr	r3, [pc, #212]	; (8003b88 <USB_DeactivateEndpoint+0x1b0>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
 8003ab6:	e060      	b.n	8003b7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ace:	d11f      	bne.n	8003b10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b30:	4013      	ands	r3, r2
 8003b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b54:	4013      	ands	r3, r2
 8003b56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	0159      	lsls	r1, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	4619      	mov	r1, r3
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <USB_DeactivateEndpoint+0x1b4>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	ec337800 	.word	0xec337800
 8003b8c:	eff37800 	.word	0xeff37800

08003b90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	f040 815c 	bne.w	8003e6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d132      	bne.n	8003c20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	0cdb      	lsrs	r3, r3, #19
 8003c1a:	04db      	lsls	r3, r3, #19
 8003c1c:	6113      	str	r3, [r2, #16]
 8003c1e:	e074      	b.n	8003d0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3a:	0cdb      	lsrs	r3, r3, #19
 8003c3c:	04db      	lsls	r3, r3, #19
 8003c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6959      	ldr	r1, [r3, #20]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	440b      	add	r3, r1
 8003c7c:	1e59      	subs	r1, r3, #1
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c88:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <USB_EPStartXfer+0x370>)
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	0148      	lsls	r0, r1, #5
 8003c90:	69f9      	ldr	r1, [r7, #28]
 8003c92:	4401      	add	r1, r0
 8003c94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	0148      	lsls	r0, r1, #5
 8003cb6:	69f9      	ldr	r1, [r7, #28]
 8003cb8:	4401      	add	r1, r0
 8003cba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d11f      	bne.n	8003d0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ce8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d14b      	bne.n	8003da8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	78db      	ldrb	r3, [r3, #3]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d128      	bne.n	8003d86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d110      	bne.n	8003d66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e00f      	b.n	8003d86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	0151      	lsls	r1, r2, #5
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	440a      	add	r2, r1
 8003d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e12f      	b.n	8004008 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	78db      	ldrb	r3, [r3, #3]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d015      	beq.n	8003dfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8117 	beq.w	8004008 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df6:	4313      	orrs	r3, r2
 8003df8:	634b      	str	r3, [r1, #52]	; 0x34
 8003dfa:	e105      	b.n	8004008 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d110      	bne.n	8003e2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e00f      	b.n	8003e4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	68d9      	ldr	r1, [r3, #12]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	b298      	uxth	r0, r3
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fa2b 	bl	80042be <USB_WritePacket>
 8003e68:	e0ce      	b.n	8004008 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e84:	0cdb      	lsrs	r3, r3, #19
 8003e86:	04db      	lsls	r3, r3, #19
 8003e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ea8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d126      	bne.n	8003f04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	0148      	lsls	r0, r1, #5
 8003ed0:	69f9      	ldr	r1, [r7, #28]
 8003ed2:	4401      	add	r1, r0
 8003ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003efa:	6113      	str	r3, [r2, #16]
 8003efc:	e036      	b.n	8003f6c <USB_EPStartXfer+0x3dc>
 8003efe:	bf00      	nop
 8003f00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	8afb      	ldrh	r3, [r7, #22]
 8003f2a:	04d9      	lsls	r1, r3, #19
 8003f2c:	4b39      	ldr	r3, [pc, #228]	; (8004014 <USB_EPStartXfer+0x484>)
 8003f2e:	400b      	ands	r3, r1
 8003f30:	69b9      	ldr	r1, [r7, #24]
 8003f32:	0148      	lsls	r0, r1, #5
 8003f34:	69f9      	ldr	r1, [r7, #28]
 8003f36:	4401      	add	r1, r0
 8003f38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	8af9      	ldrh	r1, [r7, #22]
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	0148      	lsls	r0, r1, #5
 8003f60:	69f9      	ldr	r1, [r7, #28]
 8003f62:	4401      	add	r1, r0
 8003f64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10d      	bne.n	8003f8e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	68d9      	ldr	r1, [r3, #12]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	460a      	mov	r2, r1
 8003f8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	78db      	ldrb	r3, [r3, #3]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d128      	bne.n	8003fe8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d110      	bne.n	8003fc8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00f      	b.n	8003fe8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004002:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004006:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	1ff80000 	.word	0x1ff80000

08004018 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	2b01      	cmp	r3, #1
 8004036:	f040 80cd 	bne.w	80041d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d132      	bne.n	80040a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004060:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004084:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a0:	0cdb      	lsrs	r3, r3, #19
 80040a2:	04db      	lsls	r3, r3, #19
 80040a4:	6113      	str	r3, [r2, #16]
 80040a6:	e04e      	b.n	8004146 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c2:	0cdb      	lsrs	r3, r3, #19
 80040c4:	04db      	lsls	r3, r3, #19
 80040c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d903      	bls.n	8004100 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800411e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004136:	6939      	ldr	r1, [r7, #16]
 8004138:	0148      	lsls	r0, r1, #5
 800413a:	6979      	ldr	r1, [r7, #20]
 800413c:	4401      	add	r1, r0
 800413e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004142:	4313      	orrs	r3, r2
 8004144:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d11e      	bne.n	800418a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e092      	b.n	80042b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d07e      	beq.n	80042b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	2101      	movs	r1, #1
 80041c4:	fa01 f303 	lsl.w	r3, r1, r3
 80041c8:	6979      	ldr	r1, [r7, #20]
 80041ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ce:	4313      	orrs	r3, r2
 80041d0:	634b      	str	r3, [r1, #52]	; 0x34
 80041d2:	e06d      	b.n	80042b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ee:	0cdb      	lsrs	r3, r3, #19
 80041f0:	04db      	lsls	r3, r3, #19
 80041f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004216:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	440a      	add	r2, r1
 800423e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004246:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425e:	6939      	ldr	r1, [r7, #16]
 8004260:	0148      	lsls	r0, r1, #5
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	4401      	add	r1, r0
 8004266:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10d      	bne.n	8004290 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	68d9      	ldr	r1, [r3, #12]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	460a      	mov	r2, r1
 800428e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80042be:	b480      	push	{r7}
 80042c0:	b089      	sub	sp, #36	; 0x24
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	4611      	mov	r1, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	460b      	mov	r3, r1
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	4613      	mov	r3, r2
 80042d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80042dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d123      	bne.n	800432c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80042e4:	88bb      	ldrh	r3, [r7, #4]
 80042e6:	3303      	adds	r3, #3
 80042e8:	089b      	lsrs	r3, r3, #2
 80042ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	e018      	b.n	8004324 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	031a      	lsls	r2, r3, #12
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fe:	461a      	mov	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	3301      	adds	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3301      	adds	r3, #1
 8004310:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3301      	adds	r3, #1
 8004316:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	3301      	adds	r3, #1
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d3e2      	bcc.n	80042f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3724      	adds	r7, #36	; 0x24
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800433a:	b480      	push	{r7}
 800433c:	b08b      	sub	sp, #44	; 0x2c
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	4613      	mov	r3, r2
 8004346:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	b29b      	uxth	r3, r3
 8004356:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004360:	2300      	movs	r3, #0
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	e014      	b.n	8004390 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	601a      	str	r2, [r3, #0]
    pDest++;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	3301      	adds	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	3301      	adds	r3, #1
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	3301      	adds	r3, #1
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	3301      	adds	r3, #1
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	3301      	adds	r3, #1
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	d3e6      	bcc.n	8004366 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004398:	8bfb      	ldrh	r3, [r7, #30]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01e      	beq.n	80043dc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a8:	461a      	mov	r2, r3
 80043aa:	f107 0310 	add.w	r3, r7, #16
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	701a      	strb	r2, [r3, #0]
      i++;
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	3301      	adds	r3, #1
 80043c8:	623b      	str	r3, [r7, #32]
      pDest++;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	3301      	adds	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80043d0:	8bfb      	ldrh	r3, [r7, #30]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80043d6:	8bfb      	ldrh	r3, [r7, #30]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ea      	bne.n	80043b2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043de:	4618      	mov	r0, r3
 80043e0:	372c      	adds	r7, #44	; 0x2c
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d12c      	bne.n	8004460 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	db12      	blt.n	800443e <USB_EPSetStall+0x54>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00f      	beq.n	800443e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004438:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800443c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	440a      	add	r2, r1
 8004454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e02b      	b.n	80044b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	db12      	blt.n	8004498 <USB_EPSetStall+0xae>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00f      	beq.n	8004498 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004496:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d128      	bne.n	8004534 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004500:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	78db      	ldrb	r3, [r3, #3]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d003      	beq.n	8004512 <USB_EPClearStall+0x4c>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	78db      	ldrb	r3, [r3, #3]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d138      	bne.n	8004584 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	0151      	lsls	r1, r2, #5
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	440a      	add	r2, r1
 8004528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e027      	b.n	8004584 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800454e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004552:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	78db      	ldrb	r3, [r3, #3]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d003      	beq.n	8004564 <USB_EPClearStall+0x9e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	78db      	ldrb	r3, [r3, #3]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d10f      	bne.n	8004584 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80045b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045cc:	4313      	orrs	r3, r2
 80045ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045f8:	f023 0303 	bic.w	r3, r3, #3
 80045fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460c:	f023 0302 	bic.w	r3, r3, #2
 8004610:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464e:	f043 0302 	orr.w	r3, r3, #2
 8004652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	0c1b      	lsrs	r3, r3, #16
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	b29b      	uxth	r3, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800471e:	68bb      	ldr	r3, [r7, #8]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	b2db      	uxtb	r3, r3
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800477a:	68bb      	ldr	r3, [r7, #8]
}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0301 	and.w	r3, r3, #1
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	460b      	mov	r3, r1
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	333c      	adds	r3, #60	; 0x3c
 8004802:	3304      	adds	r3, #4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4a26      	ldr	r2, [pc, #152]	; (80048a4 <USB_EP0_OutStart+0xb8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d90a      	bls.n	8004826 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004820:	d101      	bne.n	8004826 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e037      	b.n	8004896 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004854:	f043 0318 	orr.w	r3, r3, #24
 8004858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004868:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800486c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800486e:	7afb      	ldrb	r3, [r7, #11]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d10f      	bne.n	8004894 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004892:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	4f54300a 	.word	0x4f54300a

080048a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <USB_CoreReset+0x60>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e01a      	b.n	80048fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	daf3      	bge.n	80048b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <USB_CoreReset+0x60>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e006      	b.n	80048fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d0f1      	beq.n	80048dc <USB_CoreReset+0x34>

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	00030d40 	.word	0x00030d40

0800490c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004918:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800491c:	f002 f952 	bl	8006bc4 <USBD_static_malloc>
 8004920:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004930:	2302      	movs	r3, #2
 8004932:	e066      	b.n	8004a02 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	7c1b      	ldrb	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d119      	bne.n	8004978 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004948:	2202      	movs	r2, #2
 800494a:	2181      	movs	r1, #129	; 0x81
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f002 f816 	bl	800697e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800495c:	2202      	movs	r2, #2
 800495e:	2101      	movs	r1, #1
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f002 f80c 	bl	800697e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2210      	movs	r2, #16
 8004972:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004976:	e016      	b.n	80049a6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	2202      	movs	r2, #2
 800497c:	2181      	movs	r1, #129	; 0x81
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f001 fffd 	bl	800697e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	2202      	movs	r2, #2
 800498e:	2101      	movs	r1, #1
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 fff4 	bl	800697e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2210      	movs	r2, #16
 80049a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80049a6:	2308      	movs	r3, #8
 80049a8:	2203      	movs	r2, #3
 80049aa:	2182      	movs	r1, #130	; 0x82
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f001 ffe6 	bl	800697e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	7c1b      	ldrb	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049e6:	2101      	movs	r1, #1
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f002 f8b7 	bl	8006b5c <USBD_LL_PrepareReceive>
 80049ee:	e007      	b.n	8004a00 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	2101      	movs	r1, #1
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f002 f8ae 	bl	8006b5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004a16:	2181      	movs	r1, #129	; 0x81
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 ffd6 	bl	80069ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004a24:	2101      	movs	r1, #1
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 ffcf 	bl	80069ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004a34:	2182      	movs	r1, #130	; 0x82
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 ffc7 	bl	80069ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a66:	4618      	mov	r0, r3
 8004a68:	f002 f8ba 	bl	8006be0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0af      	b.n	8004c08 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03f      	beq.n	8004b34 <USBD_CDC_Setup+0xb4>
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 809f 	bne.w	8004bf8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	88db      	ldrh	r3, [r3, #6]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02e      	beq.n	8004b20 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da16      	bge.n	8004afa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004ad8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	88d2      	ldrh	r2, [r2, #6]
 8004ade:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	88db      	ldrh	r3, [r3, #6]
 8004ae4:	2b07      	cmp	r3, #7
 8004ae6:	bf28      	it	cs
 8004ae8:	2307      	movcs	r3, #7
 8004aea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	89fa      	ldrh	r2, [r7, #14]
 8004af0:	4619      	mov	r1, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f001 fb19 	bl	800612a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004af8:	e085      	b.n	8004c06 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	785a      	ldrb	r2, [r3, #1]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	88db      	ldrh	r3, [r3, #6]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004b10:	6939      	ldr	r1, [r7, #16]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	88db      	ldrh	r3, [r3, #6]
 8004b16:	461a      	mov	r2, r3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f001 fb32 	bl	8006182 <USBD_CtlPrepareRx>
      break;
 8004b1e:	e072      	b.n	8004c06 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	7850      	ldrb	r0, [r2, #1]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	4798      	blx	r3
      break;
 8004b32:	e068      	b.n	8004c06 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	2b0b      	cmp	r3, #11
 8004b3a:	d852      	bhi.n	8004be2 <USBD_CDC_Setup+0x162>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <USBD_CDC_Setup+0xc4>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b75 	.word	0x08004b75
 8004b48:	08004bf1 	.word	0x08004bf1
 8004b4c:	08004be3 	.word	0x08004be3
 8004b50:	08004be3 	.word	0x08004be3
 8004b54:	08004be3 	.word	0x08004be3
 8004b58:	08004be3 	.word	0x08004be3
 8004b5c:	08004be3 	.word	0x08004be3
 8004b60:	08004be3 	.word	0x08004be3
 8004b64:	08004be3 	.word	0x08004be3
 8004b68:	08004be3 	.word	0x08004be3
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004bc9 	.word	0x08004bc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d107      	bne.n	8004b90 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004b80:	f107 030a 	add.w	r3, r7, #10
 8004b84:	2202      	movs	r2, #2
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f001 face 	bl	800612a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b8e:	e032      	b.n	8004bf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 fa58 	bl	8006048 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	75fb      	strb	r3, [r7, #23]
          break;
 8004b9c:	e02b      	b.n	8004bf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d107      	bne.n	8004bba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004baa:	f107 030d 	add.w	r3, r7, #13
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f001 fab9 	bl	800612a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004bb8:	e01d      	b.n	8004bf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004bba:	6839      	ldr	r1, [r7, #0]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f001 fa43 	bl	8006048 <USBD_CtlError>
            ret = USBD_FAIL;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004bc6:	e016      	b.n	8004bf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d00f      	beq.n	8004bf4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f001 fa36 	bl	8006048 <USBD_CtlError>
            ret = USBD_FAIL;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004be0:	e008      	b.n	8004bf4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fa2f 	bl	8006048 <USBD_CtlError>
          ret = USBD_FAIL;
 8004bea:	2303      	movs	r3, #3
 8004bec:	75fb      	strb	r3, [r7, #23]
          break;
 8004bee:	e002      	b.n	8004bf6 <USBD_CDC_Setup+0x176>
          break;
 8004bf0:	bf00      	nop
 8004bf2:	e008      	b.n	8004c06 <USBD_CDC_Setup+0x186>
          break;
 8004bf4:	bf00      	nop
      }
      break;
 8004bf6:	e006      	b.n	8004c06 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 fa24 	bl	8006048 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c00:	2303      	movs	r3, #3
 8004c02:	75fb      	strb	r3, [r7, #23]
      break;
 8004c04:	bf00      	nop
  }

  return (uint8_t)ret;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004c22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e04f      	b.n	8004cd2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3318      	adds	r3, #24
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d029      	beq.n	8004ca4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3318      	adds	r3, #24
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	78f9      	ldrb	r1, [r7, #3]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	460b      	mov	r3, r1
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	1a5b      	subs	r3, r3, r1
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4403      	add	r3, r0
 8004c70:	3344      	adds	r3, #68	; 0x44
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	fbb2 f1f3 	udiv	r1, r2, r3
 8004c78:	fb03 f301 	mul.w	r3, r3, r1
 8004c7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d110      	bne.n	8004ca4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3318      	adds	r3, #24
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004c96:	78f9      	ldrb	r1, [r7, #3]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 ff3c 	bl	8006b1a <USBD_LL_Transmit>
 8004ca2:	e015      	b.n	8004cd0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e015      	b.n	8004d28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 ff4c 	bl	8006b9e <USBD_LL_GetRxDataSize>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004d22:	4611      	mov	r1, r2
 8004d24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e01b      	b.n	8004d82 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <USBD_CDC_EP0_RxReady+0x50>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d5a:	2bff      	cmp	r3, #255	; 0xff
 8004d5c:	d010      	beq.n	8004d80 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004d6c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004d74:	b292      	uxth	r2, r2
 8004d76:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2243      	movs	r2, #67	; 0x43
 8004d98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004d9a:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000094 	.word	0x20000094

08004dac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2243      	movs	r2, #67	; 0x43
 8004db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004dba:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	20000050 	.word	0x20000050

08004dcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2243      	movs	r2, #67	; 0x43
 8004dd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004dda:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	200000d8 	.word	0x200000d8

08004dec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	220a      	movs	r2, #10
 8004df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004dfa:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	2000000c 	.word	0x2000000c

08004e0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e004      	b.n	8004e2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e48:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e008      	b.n	8004e66 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e004      	b.n	8004e98 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e01a      	b.n	8004efc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d114      	bne.n	8004efa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004eee:	2181      	movs	r1, #129	; 0x81
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 fe12 	bl	8006b1a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e016      	b.n	8004f50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	7c1b      	ldrb	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f34:	2101      	movs	r1, #1
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fe10 	bl	8006b5c <USBD_LL_PrepareReceive>
 8004f3c:	e007      	b.n	8004f4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	2101      	movs	r1, #1
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 fe07 	bl	8006b5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e01f      	b.n	8004fb0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	79fa      	ldrb	r2, [r7, #7]
 8004fa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f001 fc83 	bl	80068b0 <USBD_LL_Init>
 8004faa:	4603      	mov	r3, r0
 8004fac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e016      	b.n	8004ffe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	f107 020e 	add.w	r2, r7, #14
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4798      	blx	r3
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 fc9a 	bl	8006948 <USBD_LL_Start>
 8005014:	4603      	mov	r3, r0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005040:	2303      	movs	r3, #3
 8005042:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	4611      	mov	r1, r2
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	4611      	mov	r1, r2
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
  }

  return USBD_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 ff90 	bl	8005fd4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80050c2:	461a      	mov	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d01a      	beq.n	800510e <USBD_LL_SetupStage+0x72>
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d822      	bhi.n	8005122 <USBD_LL_SetupStage+0x86>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <USBD_LL_SetupStage+0x4a>
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d00a      	beq.n	80050fa <USBD_LL_SetupStage+0x5e>
 80050e4:	e01d      	b.n	8005122 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa62 	bl	80055b8 <USBD_StdDevReq>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]
      break;
 80050f8:	e020      	b.n	800513c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fac6 	bl	8005694 <USBD_StdItfReq>
 8005108:	4603      	mov	r3, r0
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e016      	b.n	800513c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fb05 	bl	8005726 <USBD_StdEPReq>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
      break;
 8005120:	e00c      	b.n	800513c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800512c:	b2db      	uxtb	r3, r3
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 fc69 	bl	8006a08 <USBD_LL_StallEP>
 8005136:	4603      	mov	r3, r0
 8005138:	73fb      	strb	r3, [r7, #15]
      break;
 800513a:	bf00      	nop
  }

  return ret;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b086      	sub	sp, #24
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	460b      	mov	r3, r1
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005154:	7afb      	ldrb	r3, [r7, #11]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d138      	bne.n	80051cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005160:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005168:	2b03      	cmp	r3, #3
 800516a:	d14a      	bne.n	8005202 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d913      	bls.n	80051a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	1ad2      	subs	r2, r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4293      	cmp	r3, r2
 8005190:	bf28      	it	cs
 8005192:	4613      	movcs	r3, r2
 8005194:	461a      	mov	r2, r3
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f001 f80f 	bl	80061bc <USBD_CtlContinueRx>
 800519e:	e030      	b.n	8005202 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d10b      	bne.n	80051c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f001 f80a 	bl	80061de <USBD_CtlSendStatus>
 80051ca:	e01a      	b.n	8005202 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d114      	bne.n	8005202 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00e      	beq.n	8005202 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	7afa      	ldrb	r2, [r7, #11]
 80051ee:	4611      	mov	r1, r2
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	4798      	blx	r3
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	e000      	b.n	8005204 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	460b      	mov	r3, r1
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800521a:	7afb      	ldrb	r3, [r7, #11]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d16b      	bne.n	80052f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3314      	adds	r3, #20
 8005224:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800522c:	2b02      	cmp	r3, #2
 800522e:	d156      	bne.n	80052de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	429a      	cmp	r2, r3
 800523a:	d914      	bls.n	8005266 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	1ad2      	subs	r2, r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	461a      	mov	r2, r3
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 ff84 	bl	8006160 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005258:	2300      	movs	r3, #0
 800525a:	2200      	movs	r2, #0
 800525c:	2100      	movs	r1, #0
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f001 fc7c 	bl	8006b5c <USBD_LL_PrepareReceive>
 8005264:	e03b      	b.n	80052de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d11c      	bne.n	80052ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800527a:	429a      	cmp	r2, r3
 800527c:	d316      	bcc.n	80052ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005288:	429a      	cmp	r2, r3
 800528a:	d20f      	bcs.n	80052ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800528c:	2200      	movs	r2, #0
 800528e:	2100      	movs	r1, #0
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 ff65 	bl	8006160 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800529e:	2300      	movs	r3, #0
 80052a0:	2200      	movs	r2, #0
 80052a2:	2100      	movs	r1, #0
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f001 fc59 	bl	8006b5c <USBD_LL_PrepareReceive>
 80052aa:	e018      	b.n	80052de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d10b      	bne.n	80052d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f001 fb98 	bl	8006a08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 ff93 	bl	8006204 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d122      	bne.n	800532e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff fe98 	bl	800501e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80052f6:	e01a      	b.n	800532e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b03      	cmp	r3, #3
 8005302:	d114      	bne.n	800532e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00e      	beq.n	800532e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	7afa      	ldrb	r2, [r7, #11]
 800531a:	4611      	mov	r1, r2
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	4798      	blx	r3
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800532a:	7dfb      	ldrb	r3, [r7, #23]
 800532c:	e000      	b.n	8005330 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005368:	2303      	movs	r3, #3
 800536a:	e02f      	b.n	80053cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00f      	beq.n	8005396 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6852      	ldr	r2, [r2, #4]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	4611      	mov	r1, r2
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005396:	2340      	movs	r3, #64	; 0x40
 8005398:	2200      	movs	r2, #0
 800539a:	2100      	movs	r1, #0
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 faee 	bl	800697e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2240      	movs	r2, #64	; 0x40
 80053ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053b2:	2340      	movs	r3, #64	; 0x40
 80053b4:	2200      	movs	r2, #0
 80053b6:	2180      	movs	r1, #128	; 0x80
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 fae0 	bl	800697e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005402:	b2da      	uxtb	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b04      	cmp	r3, #4
 8005432:	d106      	bne.n	8005442 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800543a:	b2da      	uxtb	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005462:	2303      	movs	r3, #3
 8005464:	e012      	b.n	800548c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b03      	cmp	r3, #3
 8005470:	d10b      	bne.n	800548a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e014      	b.n	80054d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d10d      	bne.n	80054d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	4611      	mov	r1, r2
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e014      	b.n	8005524 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b03      	cmp	r3, #3
 8005504:	d10d      	bne.n	8005522 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	4611      	mov	r1, r2
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6852      	ldr	r2, [r2, #4]
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	4611      	mov	r1, r2
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4798      	blx	r3
  }

  return USBD_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3301      	adds	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005598:	8a3b      	ldrh	r3, [r7, #16]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	b21a      	sxth	r2, r3
 800559e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	b21b      	sxth	r3, r3
 80055a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055a8:	89fb      	ldrh	r3, [r7, #14]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d005      	beq.n	80055de <USBD_StdDevReq+0x26>
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d853      	bhi.n	800567e <USBD_StdDevReq+0xc6>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <USBD_StdDevReq+0x3a>
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d14f      	bne.n	800567e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e04a      	b.n	8005688 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b09      	cmp	r3, #9
 80055f8:	d83b      	bhi.n	8005672 <USBD_StdDevReq+0xba>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <USBD_StdDevReq+0x48>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005655 	.word	0x08005655
 8005604:	08005669 	.word	0x08005669
 8005608:	08005673 	.word	0x08005673
 800560c:	0800565f 	.word	0x0800565f
 8005610:	08005673 	.word	0x08005673
 8005614:	08005633 	.word	0x08005633
 8005618:	08005629 	.word	0x08005629
 800561c:	08005673 	.word	0x08005673
 8005620:	0800564b 	.word	0x0800564b
 8005624:	0800563d 	.word	0x0800563d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9de 	bl	80059ec <USBD_GetDescriptor>
          break;
 8005630:	e024      	b.n	800567c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb43 	bl	8005cc0 <USBD_SetAddress>
          break;
 800563a:	e01f      	b.n	800567c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fb82 	bl	8005d48 <USBD_SetConfig>
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]
          break;
 8005648:	e018      	b.n	800567c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fc21 	bl	8005e94 <USBD_GetConfig>
          break;
 8005652:	e013      	b.n	800567c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fc52 	bl	8005f00 <USBD_GetStatus>
          break;
 800565c:	e00e      	b.n	800567c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fc81 	bl	8005f68 <USBD_SetFeature>
          break;
 8005666:	e009      	b.n	800567c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fc90 	bl	8005f90 <USBD_ClrFeature>
          break;
 8005670:	e004      	b.n	800567c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fce7 	bl	8006048 <USBD_CtlError>
          break;
 800567a:	bf00      	nop
      }
      break;
 800567c:	e004      	b.n	8005688 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fce1 	bl	8006048 <USBD_CtlError>
      break;
 8005686:	bf00      	nop
  }

  return ret;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop

08005694 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d005      	beq.n	80056ba <USBD_StdItfReq+0x26>
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d82f      	bhi.n	8005712 <USBD_StdItfReq+0x7e>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <USBD_StdItfReq+0x26>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d12b      	bne.n	8005712 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d81d      	bhi.n	8005704 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	889b      	ldrh	r3, [r3, #4]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d813      	bhi.n	80056fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	88db      	ldrh	r3, [r3, #6]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d110      	bne.n	800570e <USBD_StdItfReq+0x7a>
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fd73 	bl	80061de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056f8:	e009      	b.n	800570e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fca3 	bl	8006048 <USBD_CtlError>
          break;
 8005702:	e004      	b.n	800570e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fc9e 	bl	8006048 <USBD_CtlError>
          break;
 800570c:	e000      	b.n	8005710 <USBD_StdItfReq+0x7c>
          break;
 800570e:	bf00      	nop
      }
      break;
 8005710:	e004      	b.n	800571c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fc97 	bl	8006048 <USBD_CtlError>
      break;
 800571a:	bf00      	nop
  }

  return ret;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	889b      	ldrh	r3, [r3, #4]
 8005738:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d007      	beq.n	8005756 <USBD_StdEPReq+0x30>
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	f200 8145 	bhi.w	80059d6 <USBD_StdEPReq+0x2b0>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <USBD_StdEPReq+0x44>
 8005750:	2b20      	cmp	r3, #32
 8005752:	f040 8140 	bne.w	80059d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	4798      	blx	r3
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
      break;
 8005768:	e13a      	b.n	80059e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d007      	beq.n	8005782 <USBD_StdEPReq+0x5c>
 8005772:	2b03      	cmp	r3, #3
 8005774:	f300 8129 	bgt.w	80059ca <USBD_StdEPReq+0x2a4>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d07f      	beq.n	800587c <USBD_StdEPReq+0x156>
 800577c:	2b01      	cmp	r3, #1
 800577e:	d03c      	beq.n	80057fa <USBD_StdEPReq+0xd4>
 8005780:	e123      	b.n	80059ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d002      	beq.n	8005794 <USBD_StdEPReq+0x6e>
 800578e:	2b03      	cmp	r3, #3
 8005790:	d016      	beq.n	80057c0 <USBD_StdEPReq+0x9a>
 8005792:	e02c      	b.n	80057ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005794:	7bbb      	ldrb	r3, [r7, #14]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <USBD_StdEPReq+0x90>
 800579a:	7bbb      	ldrb	r3, [r7, #14]
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d00a      	beq.n	80057b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 f92f 	bl	8006a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 f92b 	bl	8006a08 <USBD_LL_StallEP>
 80057b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057b4:	e020      	b.n	80057f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fc45 	bl	8006048 <USBD_CtlError>
              break;
 80057be:	e01b      	b.n	80057f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	885b      	ldrh	r3, [r3, #2]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10e      	bne.n	80057e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00b      	beq.n	80057e6 <USBD_StdEPReq+0xc0>
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d008      	beq.n	80057e6 <USBD_StdEPReq+0xc0>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	88db      	ldrh	r3, [r3, #6]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80057dc:	7bbb      	ldrb	r3, [r7, #14]
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 f911 	bl	8006a08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fcf9 	bl	80061de <USBD_CtlSendStatus>

              break;
 80057ec:	e004      	b.n	80057f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fc29 	bl	8006048 <USBD_CtlError>
              break;
 80057f6:	bf00      	nop
          }
          break;
 80057f8:	e0ec      	b.n	80059d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d002      	beq.n	800580c <USBD_StdEPReq+0xe6>
 8005806:	2b03      	cmp	r3, #3
 8005808:	d016      	beq.n	8005838 <USBD_StdEPReq+0x112>
 800580a:	e030      	b.n	800586e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00d      	beq.n	800582e <USBD_StdEPReq+0x108>
 8005812:	7bbb      	ldrb	r3, [r7, #14]
 8005814:	2b80      	cmp	r3, #128	; 0x80
 8005816:	d00a      	beq.n	800582e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 f8f3 	bl	8006a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 f8ef 	bl	8006a08 <USBD_LL_StallEP>
 800582a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800582c:	e025      	b.n	800587a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fc09 	bl	8006048 <USBD_CtlError>
              break;
 8005836:	e020      	b.n	800587a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	885b      	ldrh	r3, [r3, #2]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11b      	bne.n	8005878 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800584a:	7bbb      	ldrb	r3, [r7, #14]
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 f8f9 	bl	8006a46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fcc2 	bl	80061de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800586c:	e004      	b.n	8005878 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fbe9 	bl	8006048 <USBD_CtlError>
              break;
 8005876:	e000      	b.n	800587a <USBD_StdEPReq+0x154>
              break;
 8005878:	bf00      	nop
          }
          break;
 800587a:	e0ab      	b.n	80059d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d002      	beq.n	800588e <USBD_StdEPReq+0x168>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d032      	beq.n	80058f2 <USBD_StdEPReq+0x1cc>
 800588c:	e097      	b.n	80059be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <USBD_StdEPReq+0x17e>
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d004      	beq.n	80058a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fbd3 	bl	8006048 <USBD_CtlError>
                break;
 80058a2:	e091      	b.n	80059c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da0b      	bge.n	80058c4 <USBD_StdEPReq+0x19e>
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	3310      	adds	r3, #16
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	3304      	adds	r3, #4
 80058c2:	e00b      	b.n	80058dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	3304      	adds	r3, #4
 80058dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2202      	movs	r2, #2
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fc1d 	bl	800612a <USBD_CtlSendData>
              break;
 80058f0:	e06a      	b.n	80059c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da11      	bge.n	800591e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3324      	adds	r3, #36	; 0x24
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d117      	bne.n	8005944 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb96 	bl	8006048 <USBD_CtlError>
                  break;
 800591c:	e054      	b.n	80059c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	f003 020f 	and.w	r2, r3, #15
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fb83 	bl	8006048 <USBD_CtlError>
                  break;
 8005942:	e041      	b.n	80059c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005948:	2b00      	cmp	r3, #0
 800594a:	da0b      	bge.n	8005964 <USBD_StdEPReq+0x23e>
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	3310      	adds	r3, #16
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	3304      	adds	r3, #4
 8005962:	e00b      	b.n	800597c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	3304      	adds	r3, #4
 800597c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <USBD_StdEPReq+0x264>
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	d103      	bne.n	8005992 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e00e      	b.n	80059b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 f874 	bl	8006a84 <USBD_LL_IsStallEP>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e002      	b.n	80059b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2202      	movs	r2, #2
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fbb7 	bl	800612a <USBD_CtlSendData>
              break;
 80059bc:	e004      	b.n	80059c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fb41 	bl	8006048 <USBD_CtlError>
              break;
 80059c6:	bf00      	nop
          }
          break;
 80059c8:	e004      	b.n	80059d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb3b 	bl	8006048 <USBD_CtlError>
          break;
 80059d2:	bf00      	nop
      }
      break;
 80059d4:	e004      	b.n	80059e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb35 	bl	8006048 <USBD_CtlError>
      break;
 80059de:	bf00      	nop
  }

  return ret;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	885b      	ldrh	r3, [r3, #2]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	f200 8128 	bhi.w	8005c62 <USBD_GetDescriptor+0x276>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USBD_GetDescriptor+0x2c>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a35 	.word	0x08005a35
 8005a1c:	08005a4d 	.word	0x08005a4d
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005c63 	.word	0x08005c63
 8005a28:	08005c63 	.word	0x08005c63
 8005a2c:	08005c03 	.word	0x08005c03
 8005a30:	08005c2f 	.word	0x08005c2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	7c12      	ldrb	r2, [r2, #16]
 8005a40:	f107 0108 	add.w	r1, r7, #8
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	60f8      	str	r0, [r7, #12]
      break;
 8005a4a:	e112      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7c1b      	ldrb	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f107 0208 	add.w	r2, r7, #8
 8005a60:	4610      	mov	r0, r2
 8005a62:	4798      	blx	r3
 8005a64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a6e:	e100      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f107 0208 	add.w	r2, r7, #8
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	2202      	movs	r2, #2
 8005a88:	701a      	strb	r2, [r3, #0]
      break;
 8005a8a:	e0f2      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	885b      	ldrh	r3, [r3, #2]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	f200 80ac 	bhi.w	8005bf0 <USBD_GetDescriptor+0x204>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <USBD_GetDescriptor+0xb4>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab9 	.word	0x08005ab9
 8005aa4:	08005aed 	.word	0x08005aed
 8005aa8:	08005b21 	.word	0x08005b21
 8005aac:	08005b55 	.word	0x08005b55
 8005ab0:	08005b89 	.word	0x08005b89
 8005ab4:	08005bbd 	.word	0x08005bbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	7c12      	ldrb	r2, [r2, #16]
 8005ad0:	f107 0108 	add.w	r1, r7, #8
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
 8005ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ada:	e091      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fab2 	bl	8006048 <USBD_CtlError>
            err++;
 8005ae4:	7afb      	ldrb	r3, [r7, #11]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aea:	e089      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	7c12      	ldrb	r2, [r2, #16]
 8005b04:	f107 0108 	add.w	r1, r7, #8
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b0e:	e077      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa98 	bl	8006048 <USBD_CtlError>
            err++;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b1e:	e06f      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7c12      	ldrb	r2, [r2, #16]
 8005b38:	f107 0108 	add.w	r1, r7, #8
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
 8005b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b42:	e05d      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa7e 	bl	8006048 <USBD_CtlError>
            err++;
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	72fb      	strb	r3, [r7, #11]
          break;
 8005b52:	e055      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	7c12      	ldrb	r2, [r2, #16]
 8005b6c:	f107 0108 	add.w	r1, r7, #8
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b76:	e043      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa64 	bl	8006048 <USBD_CtlError>
            err++;
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	3301      	adds	r3, #1
 8005b84:	72fb      	strb	r3, [r7, #11]
          break;
 8005b86:	e03b      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	7c12      	ldrb	r2, [r2, #16]
 8005ba0:	f107 0108 	add.w	r1, r7, #8
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005baa:	e029      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa4a 	bl	8006048 <USBD_CtlError>
            err++;
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bba:	e021      	b.n	8005c00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	7c12      	ldrb	r2, [r2, #16]
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4798      	blx	r3
 8005bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bde:	e00f      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa30 	bl	8006048 <USBD_CtlError>
            err++;
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	3301      	adds	r3, #1
 8005bec:	72fb      	strb	r3, [r7, #11]
          break;
 8005bee:	e007      	b.n	8005c00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa28 	bl	8006048 <USBD_CtlError>
          err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005bfe:	bf00      	nop
      }
      break;
 8005c00:	e037      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	7c1b      	ldrb	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	f107 0208 	add.w	r2, r7, #8
 8005c16:	4610      	mov	r0, r2
 8005c18:	4798      	blx	r3
 8005c1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c1c:	e029      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fa11 	bl	8006048 <USBD_CtlError>
        err++;
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c2c:	e021      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7c1b      	ldrb	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10d      	bne.n	8005c52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	f107 0208 	add.w	r2, r7, #8
 8005c42:	4610      	mov	r0, r2
 8005c44:	4798      	blx	r3
 8005c46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	2207      	movs	r2, #7
 8005c4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c50:	e00f      	b.n	8005c72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f9f7 	bl	8006048 <USBD_CtlError>
        err++;
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c60:	e007      	b.n	8005c72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9ef 	bl	8006048 <USBD_CtlError>
      err++;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c70:	bf00      	nop
  }

  if (err != 0U)
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11e      	bne.n	8005cb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	88db      	ldrh	r3, [r3, #6]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d016      	beq.n	8005cae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	88da      	ldrh	r2, [r3, #6]
 8005c8a:	893b      	ldrh	r3, [r7, #8]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf28      	it	cs
 8005c90:	4613      	movcs	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa44 	bl	800612a <USBD_CtlSendData>
 8005ca2:	e009      	b.n	8005cb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f9ce 	bl	8006048 <USBD_CtlError>
 8005cac:	e004      	b.n	8005cb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa95 	bl	80061de <USBD_CtlSendStatus>
 8005cb4:	e000      	b.n	8005cb8 <USBD_GetDescriptor+0x2cc>
    return;
 8005cb6:	bf00      	nop
  }
}
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	889b      	ldrh	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d131      	bne.n	8005d36 <USBD_SetAddress+0x76>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	88db      	ldrh	r3, [r3, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d12d      	bne.n	8005d36 <USBD_SetAddress+0x76>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	885b      	ldrh	r3, [r3, #2]
 8005cde:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce0:	d829      	bhi.n	8005d36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	885b      	ldrh	r3, [r3, #2]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d104      	bne.n	8005d04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f9a3 	bl	8006048 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d02:	e01d      	b.n	8005d40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fee3 	bl	8006adc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa61 	bl	80061de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2a:	e009      	b.n	8005d40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d34:	e004      	b.n	8005d40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f985 	bl	8006048 <USBD_CtlError>
  }
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	885b      	ldrh	r3, [r3, #2]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b4c      	ldr	r3, [pc, #304]	; (8005e90 <USBD_SetConfig+0x148>)
 8005d5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d60:	4b4b      	ldr	r3, [pc, #300]	; (8005e90 <USBD_SetConfig+0x148>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d905      	bls.n	8005d74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f96c 	bl	8006048 <USBD_CtlError>
    return USBD_FAIL;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e088      	b.n	8005e86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d002      	beq.n	8005d86 <USBD_SetConfig+0x3e>
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d025      	beq.n	8005dd0 <USBD_SetConfig+0x88>
 8005d84:	e071      	b.n	8005e6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d86:	4b42      	ldr	r3, [pc, #264]	; (8005e90 <USBD_SetConfig+0x148>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01c      	beq.n	8005dc8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005d8e:	4b40      	ldr	r3, [pc, #256]	; (8005e90 <USBD_SetConfig+0x148>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d98:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <USBD_SetConfig+0x148>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff f948 	bl	8005034 <USBD_SetClassConfig>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f949 	bl	8006048 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005db6:	e065      	b.n	8005e84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa10 	bl	80061de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005dc6:	e05d      	b.n	8005e84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fa08 	bl	80061de <USBD_CtlSendStatus>
      break;
 8005dce:	e059      	b.n	8005e84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005dd0:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <USBD_SetConfig+0x148>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d112      	bne.n	8005dfe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005de0:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <USBD_SetConfig+0x148>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dea:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <USBD_SetConfig+0x148>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff f93b 	bl	800506c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9f1 	bl	80061de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005dfc:	e042      	b.n	8005e84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005dfe:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <USBD_SetConfig+0x148>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d02a      	beq.n	8005e62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff f929 	bl	800506c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <USBD_SetConfig+0x148>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e24:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <USBD_SetConfig+0x148>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff f902 	bl	8005034 <USBD_SetClassConfig>
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00f      	beq.n	8005e5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f903 	bl	8006048 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff f90e 	bl	800506c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e58:	e014      	b.n	8005e84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f9bf 	bl	80061de <USBD_CtlSendStatus>
      break;
 8005e60:	e010      	b.n	8005e84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9bb 	bl	80061de <USBD_CtlSendStatus>
      break;
 8005e68:	e00c      	b.n	8005e84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8eb 	bl	8006048 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e72:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <USBD_SetConfig+0x148>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff f8f7 	bl	800506c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	73fb      	strb	r3, [r7, #15]
      break;
 8005e82:	bf00      	nop
  }

  return ret;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000224 	.word	0x20000224

08005e94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	88db      	ldrh	r3, [r3, #6]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d004      	beq.n	8005eb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f8cd 	bl	8006048 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005eae:	e023      	b.n	8005ef8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	dc02      	bgt.n	8005ec2 <USBD_GetConfig+0x2e>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dc03      	bgt.n	8005ec8 <USBD_GetConfig+0x34>
 8005ec0:	e015      	b.n	8005eee <USBD_GetConfig+0x5a>
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d00b      	beq.n	8005ede <USBD_GetConfig+0x4a>
 8005ec6:	e012      	b.n	8005eee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f927 	bl	800612a <USBD_CtlSendData>
        break;
 8005edc:	e00c      	b.n	8005ef8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f91f 	bl	800612a <USBD_CtlSendData>
        break;
 8005eec:	e004      	b.n	8005ef8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8a9 	bl	8006048 <USBD_CtlError>
        break;
 8005ef6:	bf00      	nop
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d81e      	bhi.n	8005f56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	88db      	ldrh	r3, [r3, #6]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d004      	beq.n	8005f2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f890 	bl	8006048 <USBD_CtlError>
        break;
 8005f28:	e01a      	b.n	8005f60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f043 0202 	orr.w	r2, r3, #2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8eb 	bl	800612a <USBD_CtlSendData>
      break;
 8005f54:	e004      	b.n	8005f60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f875 	bl	8006048 <USBD_CtlError>
      break;
 8005f5e:	bf00      	nop
  }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	885b      	ldrh	r3, [r3, #2]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d106      	bne.n	8005f88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f92b 	bl	80061de <USBD_CtlSendStatus>
  }
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d80b      	bhi.n	8005fc0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	885b      	ldrh	r3, [r3, #2]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10c      	bne.n	8005fca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f910 	bl	80061de <USBD_CtlSendStatus>
      }
      break;
 8005fbe:	e004      	b.n	8005fca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f840 	bl	8006048 <USBD_CtlError>
      break;
 8005fc8:	e000      	b.n	8005fcc <USBD_ClrFeature+0x3c>
      break;
 8005fca:	bf00      	nop
  }
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781a      	ldrb	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff fabb 	bl	800557a <SWAPBYTE>
 8006004:	4603      	mov	r3, r0
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff faae 	bl	800557a <SWAPBYTE>
 800601e:	4603      	mov	r3, r0
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff faa1 	bl	800557a <SWAPBYTE>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	80da      	strh	r2, [r3, #6]
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fcd7 	bl	8006a08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800605a:	2100      	movs	r1, #0
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fcd3 	bl	8006a08 <USBD_LL_StallEP>
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d036      	beq.n	80060ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006084:	6938      	ldr	r0, [r7, #16]
 8006086:	f000 f836 	bl	80060f6 <USBD_GetLen>
 800608a:	4603      	mov	r3, r0
 800608c:	3301      	adds	r3, #1
 800608e:	b29b      	uxth	r3, r3
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	7812      	ldrb	r2, [r2, #0]
 80060a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	3301      	adds	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	2203      	movs	r2, #3
 80060b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	3301      	adds	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060ba:	e013      	b.n	80060e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	7812      	ldrb	r2, [r2, #0]
 80060c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	3301      	adds	r3, #1
 80060cc:	613b      	str	r3, [r7, #16]
    idx++;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	3301      	adds	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4413      	add	r3, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	3301      	adds	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e7      	bne.n	80060bc <USBD_GetString+0x52>
 80060ec:	e000      	b.n	80060f0 <USBD_GetString+0x86>
    return;
 80060ee:	bf00      	nop
  }
}
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006106:	e005      	b.n	8006114 <USBD_GetLen+0x1e>
  {
    len++;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	3301      	adds	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	3301      	adds	r3, #1
 8006112:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f5      	bne.n	8006108 <USBD_GetLen+0x12>
  }

  return len;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2202      	movs	r2, #2
 800613a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	2100      	movs	r1, #0
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fce2 	bl	8006b1a <USBD_LL_Transmit>

  return USBD_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fcd1 	bl	8006b1a <USBD_LL_Transmit>

  return USBD_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2203      	movs	r2, #3
 8006192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	2100      	movs	r1, #0
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fcd5 	bl	8006b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	2100      	movs	r1, #0
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fcc4 	bl	8006b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80061ee:	2300      	movs	r3, #0
 80061f0:	2200      	movs	r2, #0
 80061f2:	2100      	movs	r1, #0
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fc90 	bl	8006b1a <USBD_LL_Transmit>

  return USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2205      	movs	r2, #5
 8006210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006214:	2300      	movs	r3, #0
 8006216:	2200      	movs	r2, #0
 8006218:	2100      	movs	r1, #0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fc9e 	bl	8006b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006230:	2200      	movs	r2, #0
 8006232:	4912      	ldr	r1, [pc, #72]	; (800627c <MX_USB_DEVICE_Init+0x50>)
 8006234:	4812      	ldr	r0, [pc, #72]	; (8006280 <MX_USB_DEVICE_Init+0x54>)
 8006236:	f7fe fe8f 	bl	8004f58 <USBD_Init>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006240:	f7fa fb52 	bl	80008e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006244:	490f      	ldr	r1, [pc, #60]	; (8006284 <MX_USB_DEVICE_Init+0x58>)
 8006246:	480e      	ldr	r0, [pc, #56]	; (8006280 <MX_USB_DEVICE_Init+0x54>)
 8006248:	f7fe feb6 	bl	8004fb8 <USBD_RegisterClass>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006252:	f7fa fb49 	bl	80008e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006256:	490c      	ldr	r1, [pc, #48]	; (8006288 <MX_USB_DEVICE_Init+0x5c>)
 8006258:	4809      	ldr	r0, [pc, #36]	; (8006280 <MX_USB_DEVICE_Init+0x54>)
 800625a:	f7fe fdd7 	bl	8004e0c <USBD_CDC_RegisterInterface>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006264:	f7fa fb40 	bl	80008e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006268:	4805      	ldr	r0, [pc, #20]	; (8006280 <MX_USB_DEVICE_Init+0x54>)
 800626a:	f7fe fecc 	bl	8005006 <USBD_Start>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006274:	f7fa fb38 	bl	80008e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006278:	bf00      	nop
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000130 	.word	0x20000130
 8006280:	200004a8 	.word	0x200004a8
 8006284:	20000018 	.word	0x20000018
 8006288:	2000011c 	.word	0x2000011c

0800628c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006290:	2200      	movs	r2, #0
 8006292:	4905      	ldr	r1, [pc, #20]	; (80062a8 <CDC_Init_FS+0x1c>)
 8006294:	4805      	ldr	r0, [pc, #20]	; (80062ac <CDC_Init_FS+0x20>)
 8006296:	f7fe fdce 	bl	8004e36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800629a:	4905      	ldr	r1, [pc, #20]	; (80062b0 <CDC_Init_FS+0x24>)
 800629c:	4803      	ldr	r0, [pc, #12]	; (80062ac <CDC_Init_FS+0x20>)
 800629e:	f7fe fde8 	bl	8004e72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80062a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000b60 	.word	0x20000b60
 80062ac:	200004a8 	.word	0x200004a8
 80062b0:	20000778 	.word	0x20000778

080062b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	2b23      	cmp	r3, #35	; 0x23
 80062d8:	d84a      	bhi.n	8006370 <CDC_Control_FS+0xac>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <CDC_Control_FS+0x1c>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006371 	.word	0x08006371
 80062e4:	08006371 	.word	0x08006371
 80062e8:	08006371 	.word	0x08006371
 80062ec:	08006371 	.word	0x08006371
 80062f0:	08006371 	.word	0x08006371
 80062f4:	08006371 	.word	0x08006371
 80062f8:	08006371 	.word	0x08006371
 80062fc:	08006371 	.word	0x08006371
 8006300:	08006371 	.word	0x08006371
 8006304:	08006371 	.word	0x08006371
 8006308:	08006371 	.word	0x08006371
 800630c:	08006371 	.word	0x08006371
 8006310:	08006371 	.word	0x08006371
 8006314:	08006371 	.word	0x08006371
 8006318:	08006371 	.word	0x08006371
 800631c:	08006371 	.word	0x08006371
 8006320:	08006371 	.word	0x08006371
 8006324:	08006371 	.word	0x08006371
 8006328:	08006371 	.word	0x08006371
 800632c:	08006371 	.word	0x08006371
 8006330:	08006371 	.word	0x08006371
 8006334:	08006371 	.word	0x08006371
 8006338:	08006371 	.word	0x08006371
 800633c:	08006371 	.word	0x08006371
 8006340:	08006371 	.word	0x08006371
 8006344:	08006371 	.word	0x08006371
 8006348:	08006371 	.word	0x08006371
 800634c:	08006371 	.word	0x08006371
 8006350:	08006371 	.word	0x08006371
 8006354:	08006371 	.word	0x08006371
 8006358:	08006371 	.word	0x08006371
 800635c:	08006371 	.word	0x08006371
 8006360:	08006371 	.word	0x08006371
 8006364:	08006371 	.word	0x08006371
 8006368:	08006371 	.word	0x08006371
 800636c:	08006371 	.word	0x08006371
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006370:	bf00      	nop
  }

  return (USBD_OK);
 8006372:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4805      	ldr	r0, [pc, #20]	; (80063a4 <CDC_Receive_FS+0x24>)
 800638e:	f7fe fd70 	bl	8004e72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006392:	4804      	ldr	r0, [pc, #16]	; (80063a4 <CDC_Receive_FS+0x24>)
 8006394:	f7fe fdb6 	bl	8004f04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006398:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200004a8 	.word	0x200004a8

080063a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <CDC_Transmit_FS+0x48>)
 80063ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e00b      	b.n	80063e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063ce:	887b      	ldrh	r3, [r7, #2]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4806      	ldr	r0, [pc, #24]	; (80063f0 <CDC_Transmit_FS+0x48>)
 80063d6:	f7fe fd2e 	bl	8004e36 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063da:	4805      	ldr	r0, [pc, #20]	; (80063f0 <CDC_Transmit_FS+0x48>)
 80063dc:	f7fe fd62 	bl	8004ea4 <USBD_CDC_TransmitPacket>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200004a8 	.word	0x200004a8

080063f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800640a:	4618      	mov	r0, r3
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2212      	movs	r2, #18
 8006428:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <USBD_FS_DeviceDescriptor+0x20>)
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	2000014c 	.word	0x2000014c

0800643c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	6039      	str	r1, [r7, #0]
 8006446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2204      	movs	r2, #4
 800644c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800644e:	4b03      	ldr	r3, [pc, #12]	; (800645c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000160 	.word	0x20000160

08006460 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	6039      	str	r1, [r7, #0]
 800646a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	4907      	ldr	r1, [pc, #28]	; (8006494 <USBD_FS_ProductStrDescriptor+0x34>)
 8006476:	4808      	ldr	r0, [pc, #32]	; (8006498 <USBD_FS_ProductStrDescriptor+0x38>)
 8006478:	f7ff fdf7 	bl	800606a <USBD_GetString>
 800647c:	e004      	b.n	8006488 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	4904      	ldr	r1, [pc, #16]	; (8006494 <USBD_FS_ProductStrDescriptor+0x34>)
 8006482:	4805      	ldr	r0, [pc, #20]	; (8006498 <USBD_FS_ProductStrDescriptor+0x38>)
 8006484:	f7ff fdf1 	bl	800606a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006488:	4b02      	ldr	r3, [pc, #8]	; (8006494 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000f48 	.word	0x20000f48
 8006498:	08007544 	.word	0x08007544

0800649c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	6039      	str	r1, [r7, #0]
 80064a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	4904      	ldr	r1, [pc, #16]	; (80064bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064ac:	4804      	ldr	r0, [pc, #16]	; (80064c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064ae:	f7ff fddc 	bl	800606a <USBD_GetString>
  return USBD_StrDesc;
 80064b2:	4b02      	ldr	r3, [pc, #8]	; (80064bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000f48 	.word	0x20000f48
 80064c0:	0800755c 	.word	0x0800755c

080064c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	6039      	str	r1, [r7, #0]
 80064ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	221a      	movs	r2, #26
 80064d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064d6:	f000 f843 	bl	8006560 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80064da:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000164 	.word	0x20000164

080064e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4907      	ldr	r1, [pc, #28]	; (800651c <USBD_FS_ConfigStrDescriptor+0x34>)
 80064fe:	4808      	ldr	r0, [pc, #32]	; (8006520 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006500:	f7ff fdb3 	bl	800606a <USBD_GetString>
 8006504:	e004      	b.n	8006510 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4904      	ldr	r1, [pc, #16]	; (800651c <USBD_FS_ConfigStrDescriptor+0x34>)
 800650a:	4805      	ldr	r0, [pc, #20]	; (8006520 <USBD_FS_ConfigStrDescriptor+0x38>)
 800650c:	f7ff fdad 	bl	800606a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006510:	4b02      	ldr	r3, [pc, #8]	; (800651c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000f48 	.word	0x20000f48
 8006520:	08007570 	.word	0x08007570

08006524 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d105      	bne.n	8006542 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	4907      	ldr	r1, [pc, #28]	; (8006558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800653a:	4808      	ldr	r0, [pc, #32]	; (800655c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800653c:	f7ff fd95 	bl	800606a <USBD_GetString>
 8006540:	e004      	b.n	800654c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	4904      	ldr	r1, [pc, #16]	; (8006558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006546:	4805      	ldr	r0, [pc, #20]	; (800655c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006548:	f7ff fd8f 	bl	800606a <USBD_GetString>
  }
  return USBD_StrDesc;
 800654c:	4b02      	ldr	r3, [pc, #8]	; (8006558 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000f48 	.word	0x20000f48
 800655c:	0800757c 	.word	0x0800757c

08006560 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006566:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <Get_SerialNum+0x44>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800656c:	4b0e      	ldr	r3, [pc, #56]	; (80065a8 <Get_SerialNum+0x48>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006572:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <Get_SerialNum+0x4c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006586:	2208      	movs	r2, #8
 8006588:	4909      	ldr	r1, [pc, #36]	; (80065b0 <Get_SerialNum+0x50>)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f814 	bl	80065b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006590:	2204      	movs	r2, #4
 8006592:	4908      	ldr	r1, [pc, #32]	; (80065b4 <Get_SerialNum+0x54>)
 8006594:	68b8      	ldr	r0, [r7, #8]
 8006596:	f000 f80f 	bl	80065b8 <IntToUnicode>
  }
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	1fff7a10 	.word	0x1fff7a10
 80065a8:	1fff7a14 	.word	0x1fff7a14
 80065ac:	1fff7a18 	.word	0x1fff7a18
 80065b0:	20000166 	.word	0x20000166
 80065b4:	20000176 	.word	0x20000176

080065b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]
 80065ce:	e027      	b.n	8006620 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	0f1b      	lsrs	r3, r3, #28
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d80b      	bhi.n	80065f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	0f1b      	lsrs	r3, r3, #28
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4619      	mov	r1, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	440b      	add	r3, r1
 80065e8:	3230      	adds	r2, #48	; 0x30
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e00a      	b.n	8006606 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	0f1b      	lsrs	r3, r3, #28
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4619      	mov	r1, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	440b      	add	r3, r1
 8006600:	3237      	adds	r2, #55	; 0x37
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	3301      	adds	r3, #1
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4413      	add	r3, r2
 8006616:	2200      	movs	r2, #0
 8006618:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	3301      	adds	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
 8006620:	7dfa      	ldrb	r2, [r7, #23]
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	429a      	cmp	r2, r3
 8006626:	d3d3      	bcc.n	80065d0 <IntToUnicode+0x18>
  }
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006640:	f107 0314 	add.w	r3, r7, #20
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	605a      	str	r2, [r3, #4]
 800664a:	609a      	str	r2, [r3, #8]
 800664c:	60da      	str	r2, [r3, #12]
 800664e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006658:	d13a      	bne.n	80066d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	4b1e      	ldr	r3, [pc, #120]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6313      	str	r3, [r2, #48]	; 0x30
 800666a:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006676:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800667a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800667c:	2302      	movs	r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006684:	2303      	movs	r3, #3
 8006686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006688:	230a      	movs	r3, #10
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	4619      	mov	r1, r3
 8006692:	4812      	ldr	r0, [pc, #72]	; (80066dc <HAL_PCD_MspInit+0xa4>)
 8006694:	f7fa fba4 	bl	8000de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	4a0e      	ldr	r2, [pc, #56]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 800669e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a2:	6353      	str	r3, [r2, #52]	; 0x34
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 80066aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ac:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 80066ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066b2:	6453      	str	r3, [r2, #68]	; 0x44
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_PCD_MspInit+0xa0>)
 80066b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066c0:	2200      	movs	r2, #0
 80066c2:	2100      	movs	r1, #0
 80066c4:	2043      	movs	r0, #67	; 0x43
 80066c6:	f7fa fb54 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066ca:	2043      	movs	r0, #67	; 0x43
 80066cc:	f7fa fb6d 	bl	8000daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066d0:	bf00      	nop
 80066d2:	3728      	adds	r7, #40	; 0x28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40020000 	.word	0x40020000

080066e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f7fe fcd0 	bl	800509c <USBD_LL_SetupStage>
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	4619      	mov	r1, r3
 800672e:	f7fe fd0a 	bl	8005146 <USBD_LL_DataOutStage>
}
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800674c:	78fa      	ldrb	r2, [r7, #3]
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4613      	mov	r3, r2
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	440b      	add	r3, r1
 800675a:	3348      	adds	r3, #72	; 0x48
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	4619      	mov	r1, r3
 8006762:	f7fe fd53 	bl	800520c <USBD_LL_DataInStage>
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fe67 	bl	8005450 <USBD_LL_SOF>
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006792:	2301      	movs	r3, #1
 8006794:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d001      	beq.n	80067a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800679e:	f7fa f8a3 	bl	80008e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067a8:	7bfa      	ldrb	r2, [r7, #15]
 80067aa:	4611      	mov	r1, r2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fe11 	bl	80053d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe fdbd 	bl	8005338 <USBD_LL_Reset>
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fe0c 	bl	80053f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067fc:	4b04      	ldr	r3, [pc, #16]	; (8006810 <HAL_PCD_SuspendCallback+0x48>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	4a03      	ldr	r2, [pc, #12]	; (8006810 <HAL_PCD_SuspendCallback+0x48>)
 8006802:	f043 0306 	orr.w	r3, r3, #6
 8006806:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	e000ed00 	.word	0xe000ed00

08006814 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fdfc 	bl	8005420 <USBD_LL_Resume>
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fe4a 	bl	80054e0 <USBD_LL_IsoOUTIncomplete>
}
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	4611      	mov	r1, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fe12 	bl	8005494 <USBD_LL_IsoINIncomplete>
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fe50 	bl	800552c <USBD_LL_DevConnected>
}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fe4d 	bl	8005542 <USBD_LL_DevDisconnected>
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d13c      	bne.n	800693a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068c0:	4a20      	ldr	r2, [pc, #128]	; (8006944 <USBD_LL_Init+0x94>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <USBD_LL_Init+0x94>)
 80068cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068d0:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <USBD_LL_Init+0x94>)
 80068d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80068d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80068d8:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <USBD_LL_Init+0x94>)
 80068da:	2204      	movs	r2, #4
 80068dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <USBD_LL_Init+0x94>)
 80068e0:	2202      	movs	r2, #2
 80068e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80068e4:	4b17      	ldr	r3, [pc, #92]	; (8006944 <USBD_LL_Init+0x94>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <USBD_LL_Init+0x94>)
 80068ec:	2202      	movs	r2, #2
 80068ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80068f0:	4b14      	ldr	r3, [pc, #80]	; (8006944 <USBD_LL_Init+0x94>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80068f6:	4b13      	ldr	r3, [pc, #76]	; (8006944 <USBD_LL_Init+0x94>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80068fc:	4b11      	ldr	r3, [pc, #68]	; (8006944 <USBD_LL_Init+0x94>)
 80068fe:	2200      	movs	r2, #0
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006902:	4b10      	ldr	r3, [pc, #64]	; (8006944 <USBD_LL_Init+0x94>)
 8006904:	2200      	movs	r2, #0
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <USBD_LL_Init+0x94>)
 800690a:	2200      	movs	r2, #0
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800690e:	480d      	ldr	r0, [pc, #52]	; (8006944 <USBD_LL_Init+0x94>)
 8006910:	f7fa fecb 	bl	80016aa <HAL_PCD_Init>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800691a:	f7f9 ffe5 	bl	80008e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	4808      	ldr	r0, [pc, #32]	; (8006944 <USBD_LL_Init+0x94>)
 8006922:	f7fc f828 	bl	8002976 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006926:	2240      	movs	r2, #64	; 0x40
 8006928:	2100      	movs	r1, #0
 800692a:	4806      	ldr	r0, [pc, #24]	; (8006944 <USBD_LL_Init+0x94>)
 800692c:	f7fb ffdc 	bl	80028e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006930:	2280      	movs	r2, #128	; 0x80
 8006932:	2101      	movs	r1, #1
 8006934:	4803      	ldr	r0, [pc, #12]	; (8006944 <USBD_LL_Init+0x94>)
 8006936:	f7fb ffd7 	bl	80028e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20001148 	.word	0x20001148

08006948 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800695e:	4618      	mov	r0, r3
 8006960:	f7fa ffc0 	bl	80018e4 <HAL_PCD_Start>
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f942 	bl	8006bf4 <USBD_Get_USB_Status>
 8006970:	4603      	mov	r3, r0
 8006972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006974:	7bbb      	ldrb	r3, [r7, #14]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	4608      	mov	r0, r1
 8006988:	4611      	mov	r1, r2
 800698a:	461a      	mov	r2, r3
 800698c:	4603      	mov	r3, r0
 800698e:	70fb      	strb	r3, [r7, #3]
 8006990:	460b      	mov	r3, r1
 8006992:	70bb      	strb	r3, [r7, #2]
 8006994:	4613      	mov	r3, r2
 8006996:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069a6:	78bb      	ldrb	r3, [r7, #2]
 80069a8:	883a      	ldrh	r2, [r7, #0]
 80069aa:	78f9      	ldrb	r1, [r7, #3]
 80069ac:	f7fb fba4 	bl	80020f8 <HAL_PCD_EP_Open>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f91c 	bl	8006bf4 <USBD_Get_USB_Status>
 80069bc:	4603      	mov	r3, r0
 80069be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069e4:	78fa      	ldrb	r2, [r7, #3]
 80069e6:	4611      	mov	r1, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fb fbed 	bl	80021c8 <HAL_PCD_EP_Close>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 f8fd 	bl	8006bf4 <USBD_Get_USB_Status>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a22:	78fa      	ldrb	r2, [r7, #3]
 8006a24:	4611      	mov	r1, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fb fcc5 	bl	80023b6 <HAL_PCD_EP_SetStall>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f8de 	bl	8006bf4 <USBD_Get_USB_Status>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a60:	78fa      	ldrb	r2, [r7, #3]
 8006a62:	4611      	mov	r1, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fb fd0a 	bl	800247e <HAL_PCD_EP_ClrStall>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f8bf 	bl	8006bf4 <USBD_Get_USB_Status>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	da0b      	bge.n	8006ab8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	333e      	adds	r3, #62	; 0x3e
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	e00b      	b.n	8006ad0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ace:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	4611      	mov	r1, r2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fb fad7 	bl	80020ae <HAL_PCD_SetAddress>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f874 	bl	8006bf4 <USBD_Get_USB_Status>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	460b      	mov	r3, r1
 8006b28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b38:	7af9      	ldrb	r1, [r7, #11]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	f7fb fbf0 	bl	8002322 <HAL_PCD_EP_Transmit>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 f853 	bl	8006bf4 <USBD_Get_USB_Status>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b52:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b7a:	7af9      	ldrb	r1, [r7, #11]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	f7fb fb6c 	bl	800225c <HAL_PCD_EP_Receive>
 8006b84:	4603      	mov	r3, r0
 8006b86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f832 	bl	8006bf4 <USBD_Get_USB_Status>
 8006b90:	4603      	mov	r3, r0
 8006b92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b94:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fb fb9c 	bl	80022f2 <HAL_PCD_EP_GetRxCount>
 8006bba:	4603      	mov	r3, r0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <USBD_static_malloc+0x18>)
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	20000228 	.word	0x20000228

08006be0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d817      	bhi.n	8006c38 <USBD_Get_USB_Status+0x44>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <USBD_Get_USB_Status+0x1c>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c27 	.word	0x08006c27
 8006c18:	08006c2d 	.word	0x08006c2d
 8006c1c:	08006c33 	.word	0x08006c33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
    break;
 8006c24:	e00b      	b.n	8006c3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c26:	2303      	movs	r3, #3
 8006c28:	73fb      	strb	r3, [r7, #15]
    break;
 8006c2a:	e008      	b.n	8006c3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c30:	e005      	b.n	8006c3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c32:	2303      	movs	r3, #3
 8006c34:	73fb      	strb	r3, [r7, #15]
    break;
 8006c36:	e002      	b.n	8006c3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c3c:	bf00      	nop
  }
  return usb_status;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <__errno>:
 8006c4c:	4b01      	ldr	r3, [pc, #4]	; (8006c54 <__errno+0x8>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000180 	.word	0x20000180

08006c58 <__libc_init_array>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4d0d      	ldr	r5, [pc, #52]	; (8006c90 <__libc_init_array+0x38>)
 8006c5c:	4c0d      	ldr	r4, [pc, #52]	; (8006c94 <__libc_init_array+0x3c>)
 8006c5e:	1b64      	subs	r4, r4, r5
 8006c60:	10a4      	asrs	r4, r4, #2
 8006c62:	2600      	movs	r6, #0
 8006c64:	42a6      	cmp	r6, r4
 8006c66:	d109      	bne.n	8006c7c <__libc_init_array+0x24>
 8006c68:	4d0b      	ldr	r5, [pc, #44]	; (8006c98 <__libc_init_array+0x40>)
 8006c6a:	4c0c      	ldr	r4, [pc, #48]	; (8006c9c <__libc_init_array+0x44>)
 8006c6c:	f000 fc4e 	bl	800750c <_init>
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	2600      	movs	r6, #0
 8006c76:	42a6      	cmp	r6, r4
 8006c78:	d105      	bne.n	8006c86 <__libc_init_array+0x2e>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c80:	4798      	blx	r3
 8006c82:	3601      	adds	r6, #1
 8006c84:	e7ee      	b.n	8006c64 <__libc_init_array+0xc>
 8006c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8a:	4798      	blx	r3
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	e7f2      	b.n	8006c76 <__libc_init_array+0x1e>
 8006c90:	080075e0 	.word	0x080075e0
 8006c94:	080075e0 	.word	0x080075e0
 8006c98:	080075e0 	.word	0x080075e0
 8006c9c:	080075e4 	.word	0x080075e4

08006ca0 <memset>:
 8006ca0:	4402      	add	r2, r0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d100      	bne.n	8006caa <memset+0xa>
 8006ca8:	4770      	bx	lr
 8006caa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cae:	e7f9      	b.n	8006ca4 <memset+0x4>

08006cb0 <siprintf>:
 8006cb0:	b40e      	push	{r1, r2, r3}
 8006cb2:	b500      	push	{lr}
 8006cb4:	b09c      	sub	sp, #112	; 0x70
 8006cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cb8:	9002      	str	r0, [sp, #8]
 8006cba:	9006      	str	r0, [sp, #24]
 8006cbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cc0:	4809      	ldr	r0, [pc, #36]	; (8006ce8 <siprintf+0x38>)
 8006cc2:	9107      	str	r1, [sp, #28]
 8006cc4:	9104      	str	r1, [sp, #16]
 8006cc6:	4909      	ldr	r1, [pc, #36]	; (8006cec <siprintf+0x3c>)
 8006cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ccc:	9105      	str	r1, [sp, #20]
 8006cce:	6800      	ldr	r0, [r0, #0]
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	a902      	add	r1, sp, #8
 8006cd4:	f000 f868 	bl	8006da8 <_svfiprintf_r>
 8006cd8:	9b02      	ldr	r3, [sp, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	b01c      	add	sp, #112	; 0x70
 8006ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce4:	b003      	add	sp, #12
 8006ce6:	4770      	bx	lr
 8006ce8:	20000180 	.word	0x20000180
 8006cec:	ffff0208 	.word	0xffff0208

08006cf0 <__ssputs_r>:
 8006cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	688e      	ldr	r6, [r1, #8]
 8006cf6:	429e      	cmp	r6, r3
 8006cf8:	4682      	mov	sl, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	461f      	mov	r7, r3
 8006d00:	d838      	bhi.n	8006d74 <__ssputs_r+0x84>
 8006d02:	898a      	ldrh	r2, [r1, #12]
 8006d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d08:	d032      	beq.n	8006d70 <__ssputs_r+0x80>
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	6909      	ldr	r1, [r1, #16]
 8006d0e:	eba5 0901 	sub.w	r9, r5, r1
 8006d12:	6965      	ldr	r5, [r4, #20]
 8006d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	444b      	add	r3, r9
 8006d20:	106d      	asrs	r5, r5, #1
 8006d22:	429d      	cmp	r5, r3
 8006d24:	bf38      	it	cc
 8006d26:	461d      	movcc	r5, r3
 8006d28:	0553      	lsls	r3, r2, #21
 8006d2a:	d531      	bpl.n	8006d90 <__ssputs_r+0xa0>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	f000 fb47 	bl	80073c0 <_malloc_r>
 8006d32:	4606      	mov	r6, r0
 8006d34:	b950      	cbnz	r0, 8006d4c <__ssputs_r+0x5c>
 8006d36:	230c      	movs	r3, #12
 8006d38:	f8ca 3000 	str.w	r3, [sl]
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d42:	81a3      	strh	r3, [r4, #12]
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4c:	6921      	ldr	r1, [r4, #16]
 8006d4e:	464a      	mov	r2, r9
 8006d50:	f000 fabe 	bl	80072d0 <memcpy>
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5e:	81a3      	strh	r3, [r4, #12]
 8006d60:	6126      	str	r6, [r4, #16]
 8006d62:	6165      	str	r5, [r4, #20]
 8006d64:	444e      	add	r6, r9
 8006d66:	eba5 0509 	sub.w	r5, r5, r9
 8006d6a:	6026      	str	r6, [r4, #0]
 8006d6c:	60a5      	str	r5, [r4, #8]
 8006d6e:	463e      	mov	r6, r7
 8006d70:	42be      	cmp	r6, r7
 8006d72:	d900      	bls.n	8006d76 <__ssputs_r+0x86>
 8006d74:	463e      	mov	r6, r7
 8006d76:	4632      	mov	r2, r6
 8006d78:	6820      	ldr	r0, [r4, #0]
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	f000 fab6 	bl	80072ec <memmove>
 8006d80:	68a3      	ldr	r3, [r4, #8]
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	1b9b      	subs	r3, r3, r6
 8006d86:	4432      	add	r2, r6
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	e7db      	b.n	8006d48 <__ssputs_r+0x58>
 8006d90:	462a      	mov	r2, r5
 8006d92:	f000 fb6f 	bl	8007474 <_realloc_r>
 8006d96:	4606      	mov	r6, r0
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d1e1      	bne.n	8006d60 <__ssputs_r+0x70>
 8006d9c:	6921      	ldr	r1, [r4, #16]
 8006d9e:	4650      	mov	r0, sl
 8006da0:	f000 fabe 	bl	8007320 <_free_r>
 8006da4:	e7c7      	b.n	8006d36 <__ssputs_r+0x46>
	...

08006da8 <_svfiprintf_r>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	4698      	mov	r8, r3
 8006dae:	898b      	ldrh	r3, [r1, #12]
 8006db0:	061b      	lsls	r3, r3, #24
 8006db2:	b09d      	sub	sp, #116	; 0x74
 8006db4:	4607      	mov	r7, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	4614      	mov	r4, r2
 8006dba:	d50e      	bpl.n	8006dda <_svfiprintf_r+0x32>
 8006dbc:	690b      	ldr	r3, [r1, #16]
 8006dbe:	b963      	cbnz	r3, 8006dda <_svfiprintf_r+0x32>
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	f000 fafd 	bl	80073c0 <_malloc_r>
 8006dc6:	6028      	str	r0, [r5, #0]
 8006dc8:	6128      	str	r0, [r5, #16]
 8006dca:	b920      	cbnz	r0, 8006dd6 <_svfiprintf_r+0x2e>
 8006dcc:	230c      	movs	r3, #12
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	e0d1      	b.n	8006f7a <_svfiprintf_r+0x1d2>
 8006dd6:	2340      	movs	r3, #64	; 0x40
 8006dd8:	616b      	str	r3, [r5, #20]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dde:	2320      	movs	r3, #32
 8006de0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de8:	2330      	movs	r3, #48	; 0x30
 8006dea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f94 <_svfiprintf_r+0x1ec>
 8006dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006df2:	f04f 0901 	mov.w	r9, #1
 8006df6:	4623      	mov	r3, r4
 8006df8:	469a      	mov	sl, r3
 8006dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dfe:	b10a      	cbz	r2, 8006e04 <_svfiprintf_r+0x5c>
 8006e00:	2a25      	cmp	r2, #37	; 0x25
 8006e02:	d1f9      	bne.n	8006df8 <_svfiprintf_r+0x50>
 8006e04:	ebba 0b04 	subs.w	fp, sl, r4
 8006e08:	d00b      	beq.n	8006e22 <_svfiprintf_r+0x7a>
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4629      	mov	r1, r5
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff ff6d 	bl	8006cf0 <__ssputs_r>
 8006e16:	3001      	adds	r0, #1
 8006e18:	f000 80aa 	beq.w	8006f70 <_svfiprintf_r+0x1c8>
 8006e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e1e:	445a      	add	r2, fp
 8006e20:	9209      	str	r2, [sp, #36]	; 0x24
 8006e22:	f89a 3000 	ldrb.w	r3, [sl]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80a2 	beq.w	8006f70 <_svfiprintf_r+0x1c8>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e36:	f10a 0a01 	add.w	sl, sl, #1
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	9307      	str	r3, [sp, #28]
 8006e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e42:	931a      	str	r3, [sp, #104]	; 0x68
 8006e44:	4654      	mov	r4, sl
 8006e46:	2205      	movs	r2, #5
 8006e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4c:	4851      	ldr	r0, [pc, #324]	; (8006f94 <_svfiprintf_r+0x1ec>)
 8006e4e:	f7f9 f9cf 	bl	80001f0 <memchr>
 8006e52:	9a04      	ldr	r2, [sp, #16]
 8006e54:	b9d8      	cbnz	r0, 8006e8e <_svfiprintf_r+0xe6>
 8006e56:	06d0      	lsls	r0, r2, #27
 8006e58:	bf44      	itt	mi
 8006e5a:	2320      	movmi	r3, #32
 8006e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e60:	0711      	lsls	r1, r2, #28
 8006e62:	bf44      	itt	mi
 8006e64:	232b      	movmi	r3, #43	; 0x2b
 8006e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e70:	d015      	beq.n	8006e9e <_svfiprintf_r+0xf6>
 8006e72:	9a07      	ldr	r2, [sp, #28]
 8006e74:	4654      	mov	r4, sl
 8006e76:	2000      	movs	r0, #0
 8006e78:	f04f 0c0a 	mov.w	ip, #10
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e82:	3b30      	subs	r3, #48	; 0x30
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d94e      	bls.n	8006f26 <_svfiprintf_r+0x17e>
 8006e88:	b1b0      	cbz	r0, 8006eb8 <_svfiprintf_r+0x110>
 8006e8a:	9207      	str	r2, [sp, #28]
 8006e8c:	e014      	b.n	8006eb8 <_svfiprintf_r+0x110>
 8006e8e:	eba0 0308 	sub.w	r3, r0, r8
 8006e92:	fa09 f303 	lsl.w	r3, r9, r3
 8006e96:	4313      	orrs	r3, r2
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	46a2      	mov	sl, r4
 8006e9c:	e7d2      	b.n	8006e44 <_svfiprintf_r+0x9c>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	1d19      	adds	r1, r3, #4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	9103      	str	r1, [sp, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bfbb      	ittet	lt
 8006eaa:	425b      	neglt	r3, r3
 8006eac:	f042 0202 	orrlt.w	r2, r2, #2
 8006eb0:	9307      	strge	r3, [sp, #28]
 8006eb2:	9307      	strlt	r3, [sp, #28]
 8006eb4:	bfb8      	it	lt
 8006eb6:	9204      	strlt	r2, [sp, #16]
 8006eb8:	7823      	ldrb	r3, [r4, #0]
 8006eba:	2b2e      	cmp	r3, #46	; 0x2e
 8006ebc:	d10c      	bne.n	8006ed8 <_svfiprintf_r+0x130>
 8006ebe:	7863      	ldrb	r3, [r4, #1]
 8006ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec2:	d135      	bne.n	8006f30 <_svfiprintf_r+0x188>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	1d1a      	adds	r2, r3, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	9203      	str	r2, [sp, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	bfb8      	it	lt
 8006ed0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ed4:	3402      	adds	r4, #2
 8006ed6:	9305      	str	r3, [sp, #20]
 8006ed8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fa4 <_svfiprintf_r+0x1fc>
 8006edc:	7821      	ldrb	r1, [r4, #0]
 8006ede:	2203      	movs	r2, #3
 8006ee0:	4650      	mov	r0, sl
 8006ee2:	f7f9 f985 	bl	80001f0 <memchr>
 8006ee6:	b140      	cbz	r0, 8006efa <_svfiprintf_r+0x152>
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	eba0 000a 	sub.w	r0, r0, sl
 8006eee:	fa03 f000 	lsl.w	r0, r3, r0
 8006ef2:	9b04      	ldr	r3, [sp, #16]
 8006ef4:	4303      	orrs	r3, r0
 8006ef6:	3401      	adds	r4, #1
 8006ef8:	9304      	str	r3, [sp, #16]
 8006efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006efe:	4826      	ldr	r0, [pc, #152]	; (8006f98 <_svfiprintf_r+0x1f0>)
 8006f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f04:	2206      	movs	r2, #6
 8006f06:	f7f9 f973 	bl	80001f0 <memchr>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d038      	beq.n	8006f80 <_svfiprintf_r+0x1d8>
 8006f0e:	4b23      	ldr	r3, [pc, #140]	; (8006f9c <_svfiprintf_r+0x1f4>)
 8006f10:	bb1b      	cbnz	r3, 8006f5a <_svfiprintf_r+0x1b2>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	3307      	adds	r3, #7
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	9303      	str	r3, [sp, #12]
 8006f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f20:	4433      	add	r3, r6
 8006f22:	9309      	str	r3, [sp, #36]	; 0x24
 8006f24:	e767      	b.n	8006df6 <_svfiprintf_r+0x4e>
 8006f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	e7a5      	b.n	8006e7c <_svfiprintf_r+0xd4>
 8006f30:	2300      	movs	r3, #0
 8006f32:	3401      	adds	r4, #1
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	4619      	mov	r1, r3
 8006f38:	f04f 0c0a 	mov.w	ip, #10
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f42:	3a30      	subs	r2, #48	; 0x30
 8006f44:	2a09      	cmp	r2, #9
 8006f46:	d903      	bls.n	8006f50 <_svfiprintf_r+0x1a8>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0c5      	beq.n	8006ed8 <_svfiprintf_r+0x130>
 8006f4c:	9105      	str	r1, [sp, #20]
 8006f4e:	e7c3      	b.n	8006ed8 <_svfiprintf_r+0x130>
 8006f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f54:	4604      	mov	r4, r0
 8006f56:	2301      	movs	r3, #1
 8006f58:	e7f0      	b.n	8006f3c <_svfiprintf_r+0x194>
 8006f5a:	ab03      	add	r3, sp, #12
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <_svfiprintf_r+0x1f8>)
 8006f62:	a904      	add	r1, sp, #16
 8006f64:	4638      	mov	r0, r7
 8006f66:	f3af 8000 	nop.w
 8006f6a:	1c42      	adds	r2, r0, #1
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	d1d6      	bne.n	8006f1e <_svfiprintf_r+0x176>
 8006f70:	89ab      	ldrh	r3, [r5, #12]
 8006f72:	065b      	lsls	r3, r3, #25
 8006f74:	f53f af2c 	bmi.w	8006dd0 <_svfiprintf_r+0x28>
 8006f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f7a:	b01d      	add	sp, #116	; 0x74
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	ab03      	add	r3, sp, #12
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	462a      	mov	r2, r5
 8006f86:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <_svfiprintf_r+0x1f8>)
 8006f88:	a904      	add	r1, sp, #16
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f000 f87a 	bl	8007084 <_printf_i>
 8006f90:	e7eb      	b.n	8006f6a <_svfiprintf_r+0x1c2>
 8006f92:	bf00      	nop
 8006f94:	080075a4 	.word	0x080075a4
 8006f98:	080075ae 	.word	0x080075ae
 8006f9c:	00000000 	.word	0x00000000
 8006fa0:	08006cf1 	.word	0x08006cf1
 8006fa4:	080075aa 	.word	0x080075aa

08006fa8 <_printf_common>:
 8006fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	4616      	mov	r6, r2
 8006fae:	4699      	mov	r9, r3
 8006fb0:	688a      	ldr	r2, [r1, #8]
 8006fb2:	690b      	ldr	r3, [r1, #16]
 8006fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	bfb8      	it	lt
 8006fbc:	4613      	movlt	r3, r2
 8006fbe:	6033      	str	r3, [r6, #0]
 8006fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	b10a      	cbz	r2, 8006fce <_printf_common+0x26>
 8006fca:	3301      	adds	r3, #1
 8006fcc:	6033      	str	r3, [r6, #0]
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	0699      	lsls	r1, r3, #26
 8006fd2:	bf42      	ittt	mi
 8006fd4:	6833      	ldrmi	r3, [r6, #0]
 8006fd6:	3302      	addmi	r3, #2
 8006fd8:	6033      	strmi	r3, [r6, #0]
 8006fda:	6825      	ldr	r5, [r4, #0]
 8006fdc:	f015 0506 	ands.w	r5, r5, #6
 8006fe0:	d106      	bne.n	8006ff0 <_printf_common+0x48>
 8006fe2:	f104 0a19 	add.w	sl, r4, #25
 8006fe6:	68e3      	ldr	r3, [r4, #12]
 8006fe8:	6832      	ldr	r2, [r6, #0]
 8006fea:	1a9b      	subs	r3, r3, r2
 8006fec:	42ab      	cmp	r3, r5
 8006fee:	dc26      	bgt.n	800703e <_printf_common+0x96>
 8006ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ff4:	1e13      	subs	r3, r2, #0
 8006ff6:	6822      	ldr	r2, [r4, #0]
 8006ff8:	bf18      	it	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	0692      	lsls	r2, r2, #26
 8006ffe:	d42b      	bmi.n	8007058 <_printf_common+0xb0>
 8007000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007004:	4649      	mov	r1, r9
 8007006:	4638      	mov	r0, r7
 8007008:	47c0      	blx	r8
 800700a:	3001      	adds	r0, #1
 800700c:	d01e      	beq.n	800704c <_printf_common+0xa4>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	68e5      	ldr	r5, [r4, #12]
 8007012:	6832      	ldr	r2, [r6, #0]
 8007014:	f003 0306 	and.w	r3, r3, #6
 8007018:	2b04      	cmp	r3, #4
 800701a:	bf08      	it	eq
 800701c:	1aad      	subeq	r5, r5, r2
 800701e:	68a3      	ldr	r3, [r4, #8]
 8007020:	6922      	ldr	r2, [r4, #16]
 8007022:	bf0c      	ite	eq
 8007024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007028:	2500      	movne	r5, #0
 800702a:	4293      	cmp	r3, r2
 800702c:	bfc4      	itt	gt
 800702e:	1a9b      	subgt	r3, r3, r2
 8007030:	18ed      	addgt	r5, r5, r3
 8007032:	2600      	movs	r6, #0
 8007034:	341a      	adds	r4, #26
 8007036:	42b5      	cmp	r5, r6
 8007038:	d11a      	bne.n	8007070 <_printf_common+0xc8>
 800703a:	2000      	movs	r0, #0
 800703c:	e008      	b.n	8007050 <_printf_common+0xa8>
 800703e:	2301      	movs	r3, #1
 8007040:	4652      	mov	r2, sl
 8007042:	4649      	mov	r1, r9
 8007044:	4638      	mov	r0, r7
 8007046:	47c0      	blx	r8
 8007048:	3001      	adds	r0, #1
 800704a:	d103      	bne.n	8007054 <_printf_common+0xac>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007054:	3501      	adds	r5, #1
 8007056:	e7c6      	b.n	8006fe6 <_printf_common+0x3e>
 8007058:	18e1      	adds	r1, r4, r3
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	2030      	movs	r0, #48	; 0x30
 800705e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007062:	4422      	add	r2, r4
 8007064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800706c:	3302      	adds	r3, #2
 800706e:	e7c7      	b.n	8007000 <_printf_common+0x58>
 8007070:	2301      	movs	r3, #1
 8007072:	4622      	mov	r2, r4
 8007074:	4649      	mov	r1, r9
 8007076:	4638      	mov	r0, r7
 8007078:	47c0      	blx	r8
 800707a:	3001      	adds	r0, #1
 800707c:	d0e6      	beq.n	800704c <_printf_common+0xa4>
 800707e:	3601      	adds	r6, #1
 8007080:	e7d9      	b.n	8007036 <_printf_common+0x8e>
	...

08007084 <_printf_i>:
 8007084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	460c      	mov	r4, r1
 800708a:	4691      	mov	r9, r2
 800708c:	7e27      	ldrb	r7, [r4, #24]
 800708e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007090:	2f78      	cmp	r7, #120	; 0x78
 8007092:	4680      	mov	r8, r0
 8007094:	469a      	mov	sl, r3
 8007096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800709a:	d807      	bhi.n	80070ac <_printf_i+0x28>
 800709c:	2f62      	cmp	r7, #98	; 0x62
 800709e:	d80a      	bhi.n	80070b6 <_printf_i+0x32>
 80070a0:	2f00      	cmp	r7, #0
 80070a2:	f000 80d8 	beq.w	8007256 <_printf_i+0x1d2>
 80070a6:	2f58      	cmp	r7, #88	; 0x58
 80070a8:	f000 80a3 	beq.w	80071f2 <_printf_i+0x16e>
 80070ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070b4:	e03a      	b.n	800712c <_printf_i+0xa8>
 80070b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070ba:	2b15      	cmp	r3, #21
 80070bc:	d8f6      	bhi.n	80070ac <_printf_i+0x28>
 80070be:	a001      	add	r0, pc, #4	; (adr r0, 80070c4 <_printf_i+0x40>)
 80070c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070c4:	0800711d 	.word	0x0800711d
 80070c8:	08007131 	.word	0x08007131
 80070cc:	080070ad 	.word	0x080070ad
 80070d0:	080070ad 	.word	0x080070ad
 80070d4:	080070ad 	.word	0x080070ad
 80070d8:	080070ad 	.word	0x080070ad
 80070dc:	08007131 	.word	0x08007131
 80070e0:	080070ad 	.word	0x080070ad
 80070e4:	080070ad 	.word	0x080070ad
 80070e8:	080070ad 	.word	0x080070ad
 80070ec:	080070ad 	.word	0x080070ad
 80070f0:	0800723d 	.word	0x0800723d
 80070f4:	08007161 	.word	0x08007161
 80070f8:	0800721f 	.word	0x0800721f
 80070fc:	080070ad 	.word	0x080070ad
 8007100:	080070ad 	.word	0x080070ad
 8007104:	0800725f 	.word	0x0800725f
 8007108:	080070ad 	.word	0x080070ad
 800710c:	08007161 	.word	0x08007161
 8007110:	080070ad 	.word	0x080070ad
 8007114:	080070ad 	.word	0x080070ad
 8007118:	08007227 	.word	0x08007227
 800711c:	680b      	ldr	r3, [r1, #0]
 800711e:	1d1a      	adds	r2, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	600a      	str	r2, [r1, #0]
 8007124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800712c:	2301      	movs	r3, #1
 800712e:	e0a3      	b.n	8007278 <_printf_i+0x1f4>
 8007130:	6825      	ldr	r5, [r4, #0]
 8007132:	6808      	ldr	r0, [r1, #0]
 8007134:	062e      	lsls	r6, r5, #24
 8007136:	f100 0304 	add.w	r3, r0, #4
 800713a:	d50a      	bpl.n	8007152 <_printf_i+0xce>
 800713c:	6805      	ldr	r5, [r0, #0]
 800713e:	600b      	str	r3, [r1, #0]
 8007140:	2d00      	cmp	r5, #0
 8007142:	da03      	bge.n	800714c <_printf_i+0xc8>
 8007144:	232d      	movs	r3, #45	; 0x2d
 8007146:	426d      	negs	r5, r5
 8007148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714c:	485e      	ldr	r0, [pc, #376]	; (80072c8 <_printf_i+0x244>)
 800714e:	230a      	movs	r3, #10
 8007150:	e019      	b.n	8007186 <_printf_i+0x102>
 8007152:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007156:	6805      	ldr	r5, [r0, #0]
 8007158:	600b      	str	r3, [r1, #0]
 800715a:	bf18      	it	ne
 800715c:	b22d      	sxthne	r5, r5
 800715e:	e7ef      	b.n	8007140 <_printf_i+0xbc>
 8007160:	680b      	ldr	r3, [r1, #0]
 8007162:	6825      	ldr	r5, [r4, #0]
 8007164:	1d18      	adds	r0, r3, #4
 8007166:	6008      	str	r0, [r1, #0]
 8007168:	0628      	lsls	r0, r5, #24
 800716a:	d501      	bpl.n	8007170 <_printf_i+0xec>
 800716c:	681d      	ldr	r5, [r3, #0]
 800716e:	e002      	b.n	8007176 <_printf_i+0xf2>
 8007170:	0669      	lsls	r1, r5, #25
 8007172:	d5fb      	bpl.n	800716c <_printf_i+0xe8>
 8007174:	881d      	ldrh	r5, [r3, #0]
 8007176:	4854      	ldr	r0, [pc, #336]	; (80072c8 <_printf_i+0x244>)
 8007178:	2f6f      	cmp	r7, #111	; 0x6f
 800717a:	bf0c      	ite	eq
 800717c:	2308      	moveq	r3, #8
 800717e:	230a      	movne	r3, #10
 8007180:	2100      	movs	r1, #0
 8007182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007186:	6866      	ldr	r6, [r4, #4]
 8007188:	60a6      	str	r6, [r4, #8]
 800718a:	2e00      	cmp	r6, #0
 800718c:	bfa2      	ittt	ge
 800718e:	6821      	ldrge	r1, [r4, #0]
 8007190:	f021 0104 	bicge.w	r1, r1, #4
 8007194:	6021      	strge	r1, [r4, #0]
 8007196:	b90d      	cbnz	r5, 800719c <_printf_i+0x118>
 8007198:	2e00      	cmp	r6, #0
 800719a:	d04d      	beq.n	8007238 <_printf_i+0x1b4>
 800719c:	4616      	mov	r6, r2
 800719e:	fbb5 f1f3 	udiv	r1, r5, r3
 80071a2:	fb03 5711 	mls	r7, r3, r1, r5
 80071a6:	5dc7      	ldrb	r7, [r0, r7]
 80071a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071ac:	462f      	mov	r7, r5
 80071ae:	42bb      	cmp	r3, r7
 80071b0:	460d      	mov	r5, r1
 80071b2:	d9f4      	bls.n	800719e <_printf_i+0x11a>
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d10b      	bne.n	80071d0 <_printf_i+0x14c>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	07df      	lsls	r7, r3, #31
 80071bc:	d508      	bpl.n	80071d0 <_printf_i+0x14c>
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	6861      	ldr	r1, [r4, #4]
 80071c2:	4299      	cmp	r1, r3
 80071c4:	bfde      	ittt	le
 80071c6:	2330      	movle	r3, #48	; 0x30
 80071c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071d0:	1b92      	subs	r2, r2, r6
 80071d2:	6122      	str	r2, [r4, #16]
 80071d4:	f8cd a000 	str.w	sl, [sp]
 80071d8:	464b      	mov	r3, r9
 80071da:	aa03      	add	r2, sp, #12
 80071dc:	4621      	mov	r1, r4
 80071de:	4640      	mov	r0, r8
 80071e0:	f7ff fee2 	bl	8006fa8 <_printf_common>
 80071e4:	3001      	adds	r0, #1
 80071e6:	d14c      	bne.n	8007282 <_printf_i+0x1fe>
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	b004      	add	sp, #16
 80071ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f2:	4835      	ldr	r0, [pc, #212]	; (80072c8 <_printf_i+0x244>)
 80071f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	680e      	ldr	r6, [r1, #0]
 80071fc:	061f      	lsls	r7, r3, #24
 80071fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007202:	600e      	str	r6, [r1, #0]
 8007204:	d514      	bpl.n	8007230 <_printf_i+0x1ac>
 8007206:	07d9      	lsls	r1, r3, #31
 8007208:	bf44      	itt	mi
 800720a:	f043 0320 	orrmi.w	r3, r3, #32
 800720e:	6023      	strmi	r3, [r4, #0]
 8007210:	b91d      	cbnz	r5, 800721a <_printf_i+0x196>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	f023 0320 	bic.w	r3, r3, #32
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	2310      	movs	r3, #16
 800721c:	e7b0      	b.n	8007180 <_printf_i+0xfc>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	f043 0320 	orr.w	r3, r3, #32
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	2378      	movs	r3, #120	; 0x78
 8007228:	4828      	ldr	r0, [pc, #160]	; (80072cc <_printf_i+0x248>)
 800722a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800722e:	e7e3      	b.n	80071f8 <_printf_i+0x174>
 8007230:	065e      	lsls	r6, r3, #25
 8007232:	bf48      	it	mi
 8007234:	b2ad      	uxthmi	r5, r5
 8007236:	e7e6      	b.n	8007206 <_printf_i+0x182>
 8007238:	4616      	mov	r6, r2
 800723a:	e7bb      	b.n	80071b4 <_printf_i+0x130>
 800723c:	680b      	ldr	r3, [r1, #0]
 800723e:	6826      	ldr	r6, [r4, #0]
 8007240:	6960      	ldr	r0, [r4, #20]
 8007242:	1d1d      	adds	r5, r3, #4
 8007244:	600d      	str	r5, [r1, #0]
 8007246:	0635      	lsls	r5, r6, #24
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	d501      	bpl.n	8007250 <_printf_i+0x1cc>
 800724c:	6018      	str	r0, [r3, #0]
 800724e:	e002      	b.n	8007256 <_printf_i+0x1d2>
 8007250:	0671      	lsls	r1, r6, #25
 8007252:	d5fb      	bpl.n	800724c <_printf_i+0x1c8>
 8007254:	8018      	strh	r0, [r3, #0]
 8007256:	2300      	movs	r3, #0
 8007258:	6123      	str	r3, [r4, #16]
 800725a:	4616      	mov	r6, r2
 800725c:	e7ba      	b.n	80071d4 <_printf_i+0x150>
 800725e:	680b      	ldr	r3, [r1, #0]
 8007260:	1d1a      	adds	r2, r3, #4
 8007262:	600a      	str	r2, [r1, #0]
 8007264:	681e      	ldr	r6, [r3, #0]
 8007266:	6862      	ldr	r2, [r4, #4]
 8007268:	2100      	movs	r1, #0
 800726a:	4630      	mov	r0, r6
 800726c:	f7f8 ffc0 	bl	80001f0 <memchr>
 8007270:	b108      	cbz	r0, 8007276 <_printf_i+0x1f2>
 8007272:	1b80      	subs	r0, r0, r6
 8007274:	6060      	str	r0, [r4, #4]
 8007276:	6863      	ldr	r3, [r4, #4]
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	2300      	movs	r3, #0
 800727c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007280:	e7a8      	b.n	80071d4 <_printf_i+0x150>
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	4632      	mov	r2, r6
 8007286:	4649      	mov	r1, r9
 8007288:	4640      	mov	r0, r8
 800728a:	47d0      	blx	sl
 800728c:	3001      	adds	r0, #1
 800728e:	d0ab      	beq.n	80071e8 <_printf_i+0x164>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	079b      	lsls	r3, r3, #30
 8007294:	d413      	bmi.n	80072be <_printf_i+0x23a>
 8007296:	68e0      	ldr	r0, [r4, #12]
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	4298      	cmp	r0, r3
 800729c:	bfb8      	it	lt
 800729e:	4618      	movlt	r0, r3
 80072a0:	e7a4      	b.n	80071ec <_printf_i+0x168>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4632      	mov	r2, r6
 80072a6:	4649      	mov	r1, r9
 80072a8:	4640      	mov	r0, r8
 80072aa:	47d0      	blx	sl
 80072ac:	3001      	adds	r0, #1
 80072ae:	d09b      	beq.n	80071e8 <_printf_i+0x164>
 80072b0:	3501      	adds	r5, #1
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	9903      	ldr	r1, [sp, #12]
 80072b6:	1a5b      	subs	r3, r3, r1
 80072b8:	42ab      	cmp	r3, r5
 80072ba:	dcf2      	bgt.n	80072a2 <_printf_i+0x21e>
 80072bc:	e7eb      	b.n	8007296 <_printf_i+0x212>
 80072be:	2500      	movs	r5, #0
 80072c0:	f104 0619 	add.w	r6, r4, #25
 80072c4:	e7f5      	b.n	80072b2 <_printf_i+0x22e>
 80072c6:	bf00      	nop
 80072c8:	080075b5 	.word	0x080075b5
 80072cc:	080075c6 	.word	0x080075c6

080072d0 <memcpy>:
 80072d0:	440a      	add	r2, r1
 80072d2:	4291      	cmp	r1, r2
 80072d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072d8:	d100      	bne.n	80072dc <memcpy+0xc>
 80072da:	4770      	bx	lr
 80072dc:	b510      	push	{r4, lr}
 80072de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e6:	4291      	cmp	r1, r2
 80072e8:	d1f9      	bne.n	80072de <memcpy+0xe>
 80072ea:	bd10      	pop	{r4, pc}

080072ec <memmove>:
 80072ec:	4288      	cmp	r0, r1
 80072ee:	b510      	push	{r4, lr}
 80072f0:	eb01 0402 	add.w	r4, r1, r2
 80072f4:	d902      	bls.n	80072fc <memmove+0x10>
 80072f6:	4284      	cmp	r4, r0
 80072f8:	4623      	mov	r3, r4
 80072fa:	d807      	bhi.n	800730c <memmove+0x20>
 80072fc:	1e43      	subs	r3, r0, #1
 80072fe:	42a1      	cmp	r1, r4
 8007300:	d008      	beq.n	8007314 <memmove+0x28>
 8007302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800730a:	e7f8      	b.n	80072fe <memmove+0x12>
 800730c:	4402      	add	r2, r0
 800730e:	4601      	mov	r1, r0
 8007310:	428a      	cmp	r2, r1
 8007312:	d100      	bne.n	8007316 <memmove+0x2a>
 8007314:	bd10      	pop	{r4, pc}
 8007316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800731a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800731e:	e7f7      	b.n	8007310 <memmove+0x24>

08007320 <_free_r>:
 8007320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007322:	2900      	cmp	r1, #0
 8007324:	d048      	beq.n	80073b8 <_free_r+0x98>
 8007326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800732a:	9001      	str	r0, [sp, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f1a1 0404 	sub.w	r4, r1, #4
 8007332:	bfb8      	it	lt
 8007334:	18e4      	addlt	r4, r4, r3
 8007336:	f000 f8d3 	bl	80074e0 <__malloc_lock>
 800733a:	4a20      	ldr	r2, [pc, #128]	; (80073bc <_free_r+0x9c>)
 800733c:	9801      	ldr	r0, [sp, #4]
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	4615      	mov	r5, r2
 8007342:	b933      	cbnz	r3, 8007352 <_free_r+0x32>
 8007344:	6063      	str	r3, [r4, #4]
 8007346:	6014      	str	r4, [r2, #0]
 8007348:	b003      	add	sp, #12
 800734a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800734e:	f000 b8cd 	b.w	80074ec <__malloc_unlock>
 8007352:	42a3      	cmp	r3, r4
 8007354:	d90b      	bls.n	800736e <_free_r+0x4e>
 8007356:	6821      	ldr	r1, [r4, #0]
 8007358:	1862      	adds	r2, r4, r1
 800735a:	4293      	cmp	r3, r2
 800735c:	bf04      	itt	eq
 800735e:	681a      	ldreq	r2, [r3, #0]
 8007360:	685b      	ldreq	r3, [r3, #4]
 8007362:	6063      	str	r3, [r4, #4]
 8007364:	bf04      	itt	eq
 8007366:	1852      	addeq	r2, r2, r1
 8007368:	6022      	streq	r2, [r4, #0]
 800736a:	602c      	str	r4, [r5, #0]
 800736c:	e7ec      	b.n	8007348 <_free_r+0x28>
 800736e:	461a      	mov	r2, r3
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	b10b      	cbz	r3, 8007378 <_free_r+0x58>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d9fa      	bls.n	800736e <_free_r+0x4e>
 8007378:	6811      	ldr	r1, [r2, #0]
 800737a:	1855      	adds	r5, r2, r1
 800737c:	42a5      	cmp	r5, r4
 800737e:	d10b      	bne.n	8007398 <_free_r+0x78>
 8007380:	6824      	ldr	r4, [r4, #0]
 8007382:	4421      	add	r1, r4
 8007384:	1854      	adds	r4, r2, r1
 8007386:	42a3      	cmp	r3, r4
 8007388:	6011      	str	r1, [r2, #0]
 800738a:	d1dd      	bne.n	8007348 <_free_r+0x28>
 800738c:	681c      	ldr	r4, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	6053      	str	r3, [r2, #4]
 8007392:	4421      	add	r1, r4
 8007394:	6011      	str	r1, [r2, #0]
 8007396:	e7d7      	b.n	8007348 <_free_r+0x28>
 8007398:	d902      	bls.n	80073a0 <_free_r+0x80>
 800739a:	230c      	movs	r3, #12
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	e7d3      	b.n	8007348 <_free_r+0x28>
 80073a0:	6825      	ldr	r5, [r4, #0]
 80073a2:	1961      	adds	r1, r4, r5
 80073a4:	428b      	cmp	r3, r1
 80073a6:	bf04      	itt	eq
 80073a8:	6819      	ldreq	r1, [r3, #0]
 80073aa:	685b      	ldreq	r3, [r3, #4]
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	bf04      	itt	eq
 80073b0:	1949      	addeq	r1, r1, r5
 80073b2:	6021      	streq	r1, [r4, #0]
 80073b4:	6054      	str	r4, [r2, #4]
 80073b6:	e7c7      	b.n	8007348 <_free_r+0x28>
 80073b8:	b003      	add	sp, #12
 80073ba:	bd30      	pop	{r4, r5, pc}
 80073bc:	20000448 	.word	0x20000448

080073c0 <_malloc_r>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	1ccd      	adds	r5, r1, #3
 80073c4:	f025 0503 	bic.w	r5, r5, #3
 80073c8:	3508      	adds	r5, #8
 80073ca:	2d0c      	cmp	r5, #12
 80073cc:	bf38      	it	cc
 80073ce:	250c      	movcc	r5, #12
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	4606      	mov	r6, r0
 80073d4:	db01      	blt.n	80073da <_malloc_r+0x1a>
 80073d6:	42a9      	cmp	r1, r5
 80073d8:	d903      	bls.n	80073e2 <_malloc_r+0x22>
 80073da:	230c      	movs	r3, #12
 80073dc:	6033      	str	r3, [r6, #0]
 80073de:	2000      	movs	r0, #0
 80073e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e2:	f000 f87d 	bl	80074e0 <__malloc_lock>
 80073e6:	4921      	ldr	r1, [pc, #132]	; (800746c <_malloc_r+0xac>)
 80073e8:	680a      	ldr	r2, [r1, #0]
 80073ea:	4614      	mov	r4, r2
 80073ec:	b99c      	cbnz	r4, 8007416 <_malloc_r+0x56>
 80073ee:	4f20      	ldr	r7, [pc, #128]	; (8007470 <_malloc_r+0xb0>)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	b923      	cbnz	r3, 80073fe <_malloc_r+0x3e>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 f862 	bl	80074c0 <_sbrk_r>
 80073fc:	6038      	str	r0, [r7, #0]
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	f000 f85d 	bl	80074c0 <_sbrk_r>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d123      	bne.n	8007452 <_malloc_r+0x92>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	4630      	mov	r0, r6
 8007410:	f000 f86c 	bl	80074ec <__malloc_unlock>
 8007414:	e7e3      	b.n	80073de <_malloc_r+0x1e>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	1b5b      	subs	r3, r3, r5
 800741a:	d417      	bmi.n	800744c <_malloc_r+0x8c>
 800741c:	2b0b      	cmp	r3, #11
 800741e:	d903      	bls.n	8007428 <_malloc_r+0x68>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	441c      	add	r4, r3
 8007424:	6025      	str	r5, [r4, #0]
 8007426:	e004      	b.n	8007432 <_malloc_r+0x72>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	42a2      	cmp	r2, r4
 800742c:	bf0c      	ite	eq
 800742e:	600b      	streq	r3, [r1, #0]
 8007430:	6053      	strne	r3, [r2, #4]
 8007432:	4630      	mov	r0, r6
 8007434:	f000 f85a 	bl	80074ec <__malloc_unlock>
 8007438:	f104 000b 	add.w	r0, r4, #11
 800743c:	1d23      	adds	r3, r4, #4
 800743e:	f020 0007 	bic.w	r0, r0, #7
 8007442:	1ac2      	subs	r2, r0, r3
 8007444:	d0cc      	beq.n	80073e0 <_malloc_r+0x20>
 8007446:	1a1b      	subs	r3, r3, r0
 8007448:	50a3      	str	r3, [r4, r2]
 800744a:	e7c9      	b.n	80073e0 <_malloc_r+0x20>
 800744c:	4622      	mov	r2, r4
 800744e:	6864      	ldr	r4, [r4, #4]
 8007450:	e7cc      	b.n	80073ec <_malloc_r+0x2c>
 8007452:	1cc4      	adds	r4, r0, #3
 8007454:	f024 0403 	bic.w	r4, r4, #3
 8007458:	42a0      	cmp	r0, r4
 800745a:	d0e3      	beq.n	8007424 <_malloc_r+0x64>
 800745c:	1a21      	subs	r1, r4, r0
 800745e:	4630      	mov	r0, r6
 8007460:	f000 f82e 	bl	80074c0 <_sbrk_r>
 8007464:	3001      	adds	r0, #1
 8007466:	d1dd      	bne.n	8007424 <_malloc_r+0x64>
 8007468:	e7cf      	b.n	800740a <_malloc_r+0x4a>
 800746a:	bf00      	nop
 800746c:	20000448 	.word	0x20000448
 8007470:	2000044c 	.word	0x2000044c

08007474 <_realloc_r>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	4607      	mov	r7, r0
 8007478:	4614      	mov	r4, r2
 800747a:	460e      	mov	r6, r1
 800747c:	b921      	cbnz	r1, 8007488 <_realloc_r+0x14>
 800747e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007482:	4611      	mov	r1, r2
 8007484:	f7ff bf9c 	b.w	80073c0 <_malloc_r>
 8007488:	b922      	cbnz	r2, 8007494 <_realloc_r+0x20>
 800748a:	f7ff ff49 	bl	8007320 <_free_r>
 800748e:	4625      	mov	r5, r4
 8007490:	4628      	mov	r0, r5
 8007492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007494:	f000 f830 	bl	80074f8 <_malloc_usable_size_r>
 8007498:	42a0      	cmp	r0, r4
 800749a:	d20f      	bcs.n	80074bc <_realloc_r+0x48>
 800749c:	4621      	mov	r1, r4
 800749e:	4638      	mov	r0, r7
 80074a0:	f7ff ff8e 	bl	80073c0 <_malloc_r>
 80074a4:	4605      	mov	r5, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d0f2      	beq.n	8007490 <_realloc_r+0x1c>
 80074aa:	4631      	mov	r1, r6
 80074ac:	4622      	mov	r2, r4
 80074ae:	f7ff ff0f 	bl	80072d0 <memcpy>
 80074b2:	4631      	mov	r1, r6
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ff33 	bl	8007320 <_free_r>
 80074ba:	e7e9      	b.n	8007490 <_realloc_r+0x1c>
 80074bc:	4635      	mov	r5, r6
 80074be:	e7e7      	b.n	8007490 <_realloc_r+0x1c>

080074c0 <_sbrk_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d06      	ldr	r5, [pc, #24]	; (80074dc <_sbrk_r+0x1c>)
 80074c4:	2300      	movs	r3, #0
 80074c6:	4604      	mov	r4, r0
 80074c8:	4608      	mov	r0, r1
 80074ca:	602b      	str	r3, [r5, #0]
 80074cc:	f7f9 fa6e 	bl	80009ac <_sbrk>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_sbrk_r+0x1a>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_sbrk_r+0x1a>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20001550 	.word	0x20001550

080074e0 <__malloc_lock>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__malloc_lock+0x8>)
 80074e2:	f000 b811 	b.w	8007508 <__retarget_lock_acquire_recursive>
 80074e6:	bf00      	nop
 80074e8:	20001558 	.word	0x20001558

080074ec <__malloc_unlock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__malloc_unlock+0x8>)
 80074ee:	f000 b80c 	b.w	800750a <__retarget_lock_release_recursive>
 80074f2:	bf00      	nop
 80074f4:	20001558 	.word	0x20001558

080074f8 <_malloc_usable_size_r>:
 80074f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074fc:	1f18      	subs	r0, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfbc      	itt	lt
 8007502:	580b      	ldrlt	r3, [r1, r0]
 8007504:	18c0      	addlt	r0, r0, r3
 8007506:	4770      	bx	lr

08007508 <__retarget_lock_acquire_recursive>:
 8007508:	4770      	bx	lr

0800750a <__retarget_lock_release_recursive>:
 800750a:	4770      	bx	lr

0800750c <_init>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	bf00      	nop
 8007510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007512:	bc08      	pop	{r3}
 8007514:	469e      	mov	lr, r3
 8007516:	4770      	bx	lr

08007518 <_fini>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	bf00      	nop
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr
