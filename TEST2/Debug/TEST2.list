
TEST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000870c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080088ac  080088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008998  08008998  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a0  080089a0  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  080089a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e8  2000025c  08008c04  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08008c04  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001948f  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc7  00000000  00000000  0003971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0003d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  0003e340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a31e  00000000  00000000  0003f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b51  00000000  00000000  00059526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4bd  00000000  00000000  00070077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000453c  00000000  00000000  000ff588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008894 	.word	0x08008894

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	08008894 	.word	0x08008894

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_GPIO_Init+0xd0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <MX_GPIO_Init+0xd0>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a25      	ldr	r2, [pc, #148]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <MX_GPIO_Init+0xd4>)
 8000606:	f001 f907 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_Pin|GC_Pin|GB_Pin|GA_Pin;
 800060a:	23e1      	movs	r3, #225	; 0xe1
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000612:	2301      	movs	r3, #1
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_GPIO_Init+0xd8>)
 800061e:	f000 ff5f 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8000622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0xd4>)
 800063c:	f000 ff50 	bl	80014e0 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40020400 	.word	0x40020400
 8000650:	40020000 	.word	0x40020000

08000654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f001 f8db 	bl	800184c <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 fc1e 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000500 	.word	0x20000500
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a19      	ldr	r2, [pc, #100]	; (8000734 <HAL_I2C_MspInit+0x84>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d12c      	bne.n	800072c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <HAL_I2C_MspInit+0x88>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	; (8000738 <HAL_I2C_MspInit+0x88>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_I2C_MspInit+0x88>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <HAL_I2C_MspInit+0x8c>)
 800070c:	f000 fee8 	bl	80014e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_I2C_MspInit+0x88>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_I2C_MspInit+0x88>)
 800071a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_I2C_MspInit+0x88>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40005400 	.word	0x40005400
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400

08000740 <LCD_SendInternal>:
        0b00110,
        0b00000
};


HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af02      	add	r7, sp, #8
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	460b      	mov	r3, r1
 800074c:	71bb      	strb	r3, [r7, #6]
 800074e:	4613      	mov	r3, r2
 8000750:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	b299      	uxth	r1, r3
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	2201      	movs	r2, #1
 800075c:	4822      	ldr	r0, [pc, #136]	; (80007e8 <LCD_SendInternal+0xa8>)
 800075e:	f001 fab7 	bl	8001cd0 <HAL_I2C_IsDeviceReady>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d000      	beq.n	800076e <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800076c:	e7f1      	b.n	8000752 <LCD_SendInternal+0x12>
            break;
 800076e:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	f023 030f 	bic.w	r3, r3, #15
 8000776:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800077e:	7bba      	ldrb	r2, [r7, #14]
 8000780:	797b      	ldrb	r3, [r7, #5]
 8000782:	4313      	orrs	r3, r2
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f043 030c 	orr.w	r3, r3, #12
 800078a:	b2db      	uxtb	r3, r3
 800078c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800078e:	7bba      	ldrb	r2, [r7, #14]
 8000790:	797b      	ldrb	r3, [r7, #5]
 8000792:	4313      	orrs	r3, r2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	b2db      	uxtb	r3, r3
 800079c:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800079e:	7b7a      	ldrb	r2, [r7, #13]
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f043 030c 	orr.w	r3, r3, #12
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80007ae:	7b7a      	ldrb	r2, [r7, #13]
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	b299      	uxth	r1, r3
 80007c2:	f107 0208 	add.w	r2, r7, #8
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2304      	movs	r3, #4
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <LCD_SendInternal+0xa8>)
 80007d0:	f001 f980 	bl	8001ad4 <HAL_I2C_Master_Transmit>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
    LCD_Delay_ms(5);
 80007d8:	2005      	movs	r0, #5
 80007da:	f000 f91f 	bl	8000a1c <LCD_Delay_ms>
    return res;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000500 	.word	0x20000500

080007ec <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, cmd, 0);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	204e      	movs	r0, #78	; 0x4e
 80007fe:	f7ff ff9f 	bl	8000740 <LCD_SendInternal>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, data, PIN_RS);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	204e      	movs	r0, #78	; 0x4e
 800081c:	f7ff ff90 	bl	8000740 <LCD_SendInternal>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_Init>:

void LCD_Init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	LCD_Opt.CurrentX = 0;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <LCD_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	70da      	strb	r2, [r3, #3]
	LCD_Opt.CurrentY = 0;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <LCD_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	711a      	strb	r2, [r3, #4]
	LCD_Opt.DisplayFunction = LCD_8BITMODE | LCD_5x8DOTS | LCD_2LINE;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <LCD_Init+0x74>)
 800083a:	2218      	movs	r2, #24
 800083c:	705a      	strb	r2, [r3, #1]
	LCD_Opt.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <LCD_Init+0x74>)
 8000840:	2204      	movs	r2, #4
 8000842:	701a      	strb	r2, [r3, #0]
	LCD_Opt.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <LCD_Init+0x74>)
 8000846:	2202      	movs	r2, #2
 8000848:	709a      	strb	r2, [r3, #2]

    // 8-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(LCD_FUNCTIONSET | LCD_Opt.DisplayFunction);//0x38
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <LCD_Init+0x74>)
 800084c:	785b      	ldrb	r3, [r3, #1]
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffc9 	bl	80007ec <LCD_SendCommand>
    // display & cursor home
    LCD_SendCommand(LCD_RETURNHOME); //0x02
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff ffc6 	bl	80007ec <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(LCD_DISPLAYCONTROL | LCD_Opt.DisplayControl);//0x0c
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <LCD_Init+0x74>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ffbe 	bl	80007ec <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(LCD_CLEARDISPLAY); //0x01
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff ffbb 	bl	80007ec <LCD_SendCommand>

    LCD_SendCommand(LCD_ENTRYMODESET | LCD_Opt.DisplayMode); //0x06
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <LCD_Init+0x74>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffb3 	bl	80007ec <LCD_SendCommand>

    LCD_CreateSpecialChar(0, special1);
 8000886:	4906      	ldr	r1, [pc, #24]	; (80008a0 <LCD_Init+0x78>)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f841 	bl	8000910 <LCD_CreateSpecialChar>
    LCD_CreateSpecialChar(1, special2);
 800088e:	4905      	ldr	r1, [pc, #20]	; (80008a4 <LCD_Init+0x7c>)
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f83d 	bl	8000910 <LCD_CreateSpecialChar>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000278 	.word	0x20000278
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000008 	.word	0x20000008

080008a8 <LCD_SetCursor>:
	LCD_SendCommand(LCD_RETURNHOME);
	LCD_Delay_ms(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <LCD_SetCursor+0x60>)
 80008ba:	f107 0408 	add.w	r4, r7, #8
 80008be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= _LCD_ROWS)
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d901      	bls.n	80008ce <LCD_SetCursor+0x26>
		row = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	71bb      	strb	r3, [r7, #6]
	LCD_Opt.CurrentX = col;
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <LCD_SetCursor+0x64>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	70d3      	strb	r3, [r2, #3]
	LCD_Opt.CurrentY = row;
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LCD_SetCursor+0x64>)
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	7113      	strb	r3, [r2, #4]
	LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80008da:	79bb      	ldrb	r3, [r7, #6]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	f107 0218 	add.w	r2, r7, #24
 80008e2:	4413      	add	r3, r2
 80008e4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4413      	add	r3, r2
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff76 	bl	80007ec <LCD_SendCommand>
}
 8000900:	bf00      	nop
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	080088ac 	.word	0x080088ac
 800090c:	20000278 	.word	0x20000278

08000910 <LCD_CreateSpecialChar>:
	LCD_Opt.DisplayMode &= ~LCD_ENTRYSHIFTINC;
	LCD_SendCommand(LCD_ENTRYMODESET | LCD_Opt.DisplayMode);
}

void LCD_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	71fb      	strb	r3, [r7, #7]
  LCD_SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092e:	b25b      	sxtb	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff5a 	bl	80007ec <LCD_SendCommand>
  for (int i=0; i<8; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e009      	b.n	8000952 <LCD_CreateSpecialChar+0x42>
  {
    LCD_SendData(charmap[i]);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff5f 	bl	800080a <LCD_SendData>
  for (int i=0; i<8; i++)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3301      	adds	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b07      	cmp	r3, #7
 8000956:	ddf2      	ble.n	800093e <LCD_CreateSpecialChar+0x2e>
  }
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <LCD_Puts>:
{
  while(*c) LCD_SendData(*c++);
}

void LCD_Puts(uint8_t x, uint8_t y, char* str)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	603a      	str	r2, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	460b      	mov	r3, r1
 8000972:	71bb      	strb	r3, [r7, #6]
	LCD_SetCursor(x, y);
 8000974:	79ba      	ldrb	r2, [r7, #6]
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff94 	bl	80008a8 <LCD_SetCursor>
	while (*str)
 8000980:	e040      	b.n	8000a04 <LCD_Puts+0xa0>
	{
		if (LCD_Opt.CurrentX >= _LCD_COLS)
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <LCD_Puts+0xb4>)
 8000984:	78db      	ldrb	r3, [r3, #3]
 8000986:	2b0f      	cmp	r3, #15
 8000988:	d910      	bls.n	80009ac <LCD_Puts+0x48>
		{
			LCD_Opt.CurrentX = 0;
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <LCD_Puts+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	70da      	strb	r2, [r3, #3]
			LCD_Opt.CurrentY++;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <LCD_Puts+0xb4>)
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <LCD_Puts+0xb4>)
 800099a:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <LCD_Puts+0xb4>)
 800099e:	78db      	ldrb	r3, [r3, #3]
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <LCD_Puts+0xb4>)
 80009a2:	7912      	ldrb	r2, [r2, #4]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff7e 	bl	80008a8 <LCD_SetCursor>
		}
		if (*str == '\n')
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b0a      	cmp	r3, #10
 80009b2:	d10e      	bne.n	80009d2 <LCD_Puts+0x6e>
		{
			LCD_Opt.CurrentY++;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <LCD_Puts+0xb4>)
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <LCD_Puts+0xb4>)
 80009be:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <LCD_Puts+0xb4>)
 80009c2:	78db      	ldrb	r3, [r3, #3]
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <LCD_Puts+0xb4>)
 80009c6:	7912      	ldrb	r2, [r2, #4]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff6c 	bl	80008a8 <LCD_SetCursor>
 80009d0:	e015      	b.n	80009fe <LCD_Puts+0x9a>
		}
		else if (*str == '\r')
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b0d      	cmp	r3, #13
 80009d8:	d106      	bne.n	80009e8 <LCD_Puts+0x84>
		{
			LCD_SetCursor(0, LCD_Opt.CurrentY);
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <LCD_Puts+0xb4>)
 80009dc:	791b      	ldrb	r3, [r3, #4]
 80009de:	4619      	mov	r1, r3
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff ff61 	bl	80008a8 <LCD_SetCursor>
 80009e6:	e00a      	b.n	80009fe <LCD_Puts+0x9a>
		}
		else
		{
			LCD_SendData(*str);//LCD_Print(*str);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff0c 	bl	800080a <LCD_SendData>
			LCD_Opt.CurrentX++;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <LCD_Puts+0xb4>)
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	3301      	adds	r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <LCD_Puts+0xb4>)
 80009fc:	70da      	strb	r2, [r3, #3]
		}
		str++;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
	while (*str)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1ba      	bne.n	8000982 <LCD_Puts+0x1e>
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000278 	.word	0x20000278

08000a1c <LCD_Delay_ms>:
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));
}

void LCD_Delay_ms(uint8_t ms)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  #if _LCD_USE_FREERTOS==1
  osDelay(ms);
  #else
  HAL_Delay(ms);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fc23 	bl	8001274 <HAL_Delay>
  #endif
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <rotaryEnc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rotaryEnc(void)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t nowEnc = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71bb      	strb	r3, [r7, #6]
	uint8_t returnEnc = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	71fb      	strb	r3, [r7, #7]
	static uint8_t oldEnc = 0;

	nowEnc = (SWB << 1) + SWA;
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <rotaryEnc+0x70>)
 8000a4a:	f000 fecd 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <rotaryEnc+0x20>
 8000a54:	2402      	movs	r4, #2
 8000a56:	e000      	b.n	8000a5a <rotaryEnc+0x22>
 8000a58:	2400      	movs	r4, #0
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <rotaryEnc+0x70>)
 8000a5e:	f000 fec3 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4423      	add	r3, r4
 8000a70:	71bb      	strb	r3, [r7, #6]

	if (oldEnc == 0 && nowEnc == 1) {
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <rotaryEnc+0x74>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d105      	bne.n	8000a86 <rotaryEnc+0x4e>
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d102      	bne.n	8000a86 <rotaryEnc+0x4e>
		returnEnc = 1; // CW
 8000a80:	2301      	movs	r3, #1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	e008      	b.n	8000a98 <rotaryEnc+0x60>
	} else if (oldEnc == 0 && nowEnc == 2) {
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <rotaryEnc+0x74>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d104      	bne.n	8000a98 <rotaryEnc+0x60>
 8000a8e:	79bb      	ldrb	r3, [r7, #6]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d101      	bne.n	8000a98 <rotaryEnc+0x60>
		returnEnc = 2; // CCW
 8000a94:	2302      	movs	r3, #2
 8000a96:	71fb      	strb	r3, [r7, #7]
	}

	oldEnc = nowEnc;
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <rotaryEnc+0x74>)
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	7013      	strb	r3, [r2, #0]

	return returnEnc;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	200002ce 	.word	0x200002ce

08000ab0 <get_time>:

void get_time(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	490a      	ldr	r1, [pc, #40]	; (8000ae4 <get_time+0x34>)
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <get_time+0x38>)
 8000abc:	f003 fc32 	bl	8004324 <HAL_RTC_GetTime>

	sprintf((char *)showTime, "%02d:%02d:%02d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <get_time+0x34>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <get_time+0x34>)
 8000ac8:	785b      	ldrb	r3, [r3, #1]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <get_time+0x34>)
 8000ace:	789b      	ldrb	r3, [r3, #2]
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	4905      	ldr	r1, [pc, #20]	; (8000aec <get_time+0x3c>)
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <get_time+0x40>)
 8000ad8:	f007 faae 	bl	8008038 <siprintf>
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000554 	.word	0x20000554
 8000ae8:	20000568 	.word	0x20000568
 8000aec:	080088bc 	.word	0x080088bc
 8000af0:	200002b0 	.word	0x200002b0

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fb49 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f981 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f7ff fd39 	bl	8000578 <MX_GPIO_Init>
  MX_RTC_Init();
 8000b06:	f000 f9ef 	bl	8000ee8 <MX_RTC_Init>
  MX_I2C1_Init();
 8000b0a:	f7ff fda3 	bl	8000654 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000b0e:	f006 fd77 	bl	8007600 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000b12:	f7ff fe89 	bl	8000828 <LCD_Init>

  LCD_SetCursor(0, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff fec5 	bl	80008a8 <LCD_SetCursor>
  LCD_Puts(0, 0, status[4]);
 8000b1e:	4a9c      	ldr	r2, [pc, #624]	; (8000d90 <main+0x29c>)
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff1e 	bl	8000964 <LCD_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  enc = rotaryEnc();
 8000b28:	f7ff ff86 	bl	8000a38 <rotaryEnc>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b98      	ldr	r3, [pc, #608]	; (8000d94 <main+0x2a0>)
 8000b32:	701a      	strb	r2, [r3, #0]
	  static int index = 4;

	  if (index != 4) {
 8000b34:	4b98      	ldr	r3, [pc, #608]	; (8000d98 <main+0x2a4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	f000 80c4 	beq.w	8000cc6 <main+0x1d2>
		if (index == 0) {
 8000b3e:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <main+0x2a4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d110      	bne.n	8000b68 <main+0x74>
		  sprintf(lcd_alarm_time, "%02d:%02d:%02d", alarm_hour, alarm_minute, alarm_second);
 8000b46:	4b95      	ldr	r3, [pc, #596]	; (8000d9c <main+0x2a8>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b95      	ldr	r3, [pc, #596]	; (8000da0 <main+0x2ac>)
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	4b95      	ldr	r3, [pc, #596]	; (8000da4 <main+0x2b0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	460b      	mov	r3, r1
 8000b56:	4994      	ldr	r1, [pc, #592]	; (8000da8 <main+0x2b4>)
 8000b58:	4894      	ldr	r0, [pc, #592]	; (8000dac <main+0x2b8>)
 8000b5a:	f007 fa6d 	bl	8008038 <siprintf>
		  LCD_Puts(0, 1, lcd_alarm_time);
 8000b5e:	4a93      	ldr	r2, [pc, #588]	; (8000dac <main+0x2b8>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fefe 	bl	8000964 <LCD_Puts>
		}

		if (enc == 1) {
 8000b68:	4b8a      	ldr	r3, [pc, #552]	; (8000d94 <main+0x2a0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d130      	bne.n	8000bd2 <main+0xde>
			if (index == 1) {
 8000b70:	4b89      	ldr	r3, [pc, #548]	; (8000d98 <main+0x2a4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d10b      	bne.n	8000b90 <main+0x9c>
				alarm_hour++;
 8000b78:	4b88      	ldr	r3, [pc, #544]	; (8000d9c <main+0x2a8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a87      	ldr	r2, [pc, #540]	; (8000d9c <main+0x2a8>)
 8000b80:	6013      	str	r3, [r2, #0]
				if (alarm_hour == 24)
 8000b82:	4b86      	ldr	r3, [pc, #536]	; (8000d9c <main+0x2a8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b18      	cmp	r3, #24
 8000b88:	d102      	bne.n	8000b90 <main+0x9c>
					alarm_hour = 0;
 8000b8a:	4b84      	ldr	r3, [pc, #528]	; (8000d9c <main+0x2a8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
			}
			if (index == 2) {
 8000b90:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <main+0x2a4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d10b      	bne.n	8000bb0 <main+0xbc>
				alarm_minute++;
 8000b98:	4b81      	ldr	r3, [pc, #516]	; (8000da0 <main+0x2ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a80      	ldr	r2, [pc, #512]	; (8000da0 <main+0x2ac>)
 8000ba0:	6013      	str	r3, [r2, #0]
				if (alarm_minute == 60)
 8000ba2:	4b7f      	ldr	r3, [pc, #508]	; (8000da0 <main+0x2ac>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b3c      	cmp	r3, #60	; 0x3c
 8000ba8:	d102      	bne.n	8000bb0 <main+0xbc>
					alarm_minute = 0;
 8000baa:	4b7d      	ldr	r3, [pc, #500]	; (8000da0 <main+0x2ac>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
			}
			if (index == 3) {
 8000bb0:	4b79      	ldr	r3, [pc, #484]	; (8000d98 <main+0x2a4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d143      	bne.n	8000c40 <main+0x14c>
				alarm_second++;
 8000bb8:	4b7a      	ldr	r3, [pc, #488]	; (8000da4 <main+0x2b0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a79      	ldr	r2, [pc, #484]	; (8000da4 <main+0x2b0>)
 8000bc0:	6013      	str	r3, [r2, #0]
				if (alarm_second == 60)
 8000bc2:	4b78      	ldr	r3, [pc, #480]	; (8000da4 <main+0x2b0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8000bc8:	d13a      	bne.n	8000c40 <main+0x14c>
					alarm_second = 0;
 8000bca:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <main+0x2b0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e036      	b.n	8000c40 <main+0x14c>
			}
		} else if (enc == 2) {
 8000bd2:	4b70      	ldr	r3, [pc, #448]	; (8000d94 <main+0x2a0>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d132      	bne.n	8000c40 <main+0x14c>
			if (index == 1) {
 8000bda:	4b6f      	ldr	r3, [pc, #444]	; (8000d98 <main+0x2a4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d10c      	bne.n	8000bfc <main+0x108>
				alarm_hour--;
 8000be2:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <main+0x2a8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	4a6c      	ldr	r2, [pc, #432]	; (8000d9c <main+0x2a8>)
 8000bea:	6013      	str	r3, [r2, #0]
				if (alarm_hour == -1)
 8000bec:	4b6b      	ldr	r3, [pc, #428]	; (8000d9c <main+0x2a8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d102      	bne.n	8000bfc <main+0x108>
					alarm_hour = 23;
 8000bf6:	4b69      	ldr	r3, [pc, #420]	; (8000d9c <main+0x2a8>)
 8000bf8:	2217      	movs	r2, #23
 8000bfa:	601a      	str	r2, [r3, #0]
			}
			if (index == 2) {
 8000bfc:	4b66      	ldr	r3, [pc, #408]	; (8000d98 <main+0x2a4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d10c      	bne.n	8000c1e <main+0x12a>
				alarm_minute--;
 8000c04:	4b66      	ldr	r3, [pc, #408]	; (8000da0 <main+0x2ac>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4a65      	ldr	r2, [pc, #404]	; (8000da0 <main+0x2ac>)
 8000c0c:	6013      	str	r3, [r2, #0]
				if (alarm_minute == -1)
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <main+0x2ac>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c16:	d102      	bne.n	8000c1e <main+0x12a>
					alarm_minute = 59;
 8000c18:	4b61      	ldr	r3, [pc, #388]	; (8000da0 <main+0x2ac>)
 8000c1a:	223b      	movs	r2, #59	; 0x3b
 8000c1c:	601a      	str	r2, [r3, #0]
			}
			if (index == 3) {
 8000c1e:	4b5e      	ldr	r3, [pc, #376]	; (8000d98 <main+0x2a4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d10c      	bne.n	8000c40 <main+0x14c>
				alarm_second--;
 8000c26:	4b5f      	ldr	r3, [pc, #380]	; (8000da4 <main+0x2b0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a5d      	ldr	r2, [pc, #372]	; (8000da4 <main+0x2b0>)
 8000c2e:	6013      	str	r3, [r2, #0]
				if (alarm_second == -1)
 8000c30:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <main+0x2b0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d102      	bne.n	8000c40 <main+0x14c>
					alarm_second = 59;
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <main+0x2b0>)
 8000c3c:	223b      	movs	r2, #59	; 0x3b
 8000c3e:	601a      	str	r2, [r3, #0]
			}
		}

		if (alarm_hour != old_alarm_hour) {
 8000c40:	4b56      	ldr	r3, [pc, #344]	; (8000d9c <main+0x2a8>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <main+0x2bc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d00f      	beq.n	8000c6c <main+0x178>
			sprintf(lcd_alarm_hour, "%02d", alarm_hour);
 8000c4c:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <main+0x2a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4958      	ldr	r1, [pc, #352]	; (8000db4 <main+0x2c0>)
 8000c54:	4858      	ldr	r0, [pc, #352]	; (8000db8 <main+0x2c4>)
 8000c56:	f007 f9ef 	bl	8008038 <siprintf>
			LCD_Puts(0, 1, lcd_alarm_hour);
 8000c5a:	4a57      	ldr	r2, [pc, #348]	; (8000db8 <main+0x2c4>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fe80 	bl	8000964 <LCD_Puts>
			old_alarm_hour = alarm_hour;
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <main+0x2a8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a51      	ldr	r2, [pc, #324]	; (8000db0 <main+0x2bc>)
 8000c6a:	6013      	str	r3, [r2, #0]
		}

		if (alarm_minute != old_alarm_minute) {
 8000c6c:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <main+0x2ac>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <main+0x2c8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d00f      	beq.n	8000c98 <main+0x1a4>
			sprintf(lcd_alarm_minute, ":%02d", alarm_minute);
 8000c78:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <main+0x2ac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4950      	ldr	r1, [pc, #320]	; (8000dc0 <main+0x2cc>)
 8000c80:	4850      	ldr	r0, [pc, #320]	; (8000dc4 <main+0x2d0>)
 8000c82:	f007 f9d9 	bl	8008038 <siprintf>
			LCD_Puts(2, 1, lcd_alarm_minute);
 8000c86:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <main+0x2d0>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff fe6a 	bl	8000964 <LCD_Puts>
			old_alarm_minute = alarm_minute;
 8000c90:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <main+0x2ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a49      	ldr	r2, [pc, #292]	; (8000dbc <main+0x2c8>)
 8000c96:	6013      	str	r3, [r2, #0]
		}

		if (alarm_second != old_alarm_second) {
 8000c98:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <main+0x2b0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <main+0x2d4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d015      	beq.n	8000cd0 <main+0x1dc>
			sprintf(lcd_alarm_second, ":%02d", alarm_second);
 8000ca4:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <main+0x2b0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4945      	ldr	r1, [pc, #276]	; (8000dc0 <main+0x2cc>)
 8000cac:	4847      	ldr	r0, [pc, #284]	; (8000dcc <main+0x2d8>)
 8000cae:	f007 f9c3 	bl	8008038 <siprintf>
			LCD_Puts(5, 1, lcd_alarm_second);
 8000cb2:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <main+0x2d8>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2005      	movs	r0, #5
 8000cb8:	f7ff fe54 	bl	8000964 <LCD_Puts>
			old_alarm_second = alarm_second;
 8000cbc:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <main+0x2b0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a41      	ldr	r2, [pc, #260]	; (8000dc8 <main+0x2d4>)
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e004      	b.n	8000cd0 <main+0x1dc>
		}
	  } else {
		  LCD_Puts(0, 1, showTime);
 8000cc6:	4a42      	ldr	r2, [pc, #264]	; (8000dd0 <main+0x2dc>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fe4a 	bl	8000964 <LCD_Puts>
	  }

	  if (KEY != oldBt && KEY) {
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4840      	ldr	r0, [pc, #256]	; (8000dd4 <main+0x2e0>)
 8000cd4:	f000 fd88 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <main+0x2e4>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d024      	beq.n	8000d38 <main+0x244>
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4838      	ldr	r0, [pc, #224]	; (8000dd4 <main+0x2e0>)
 8000cf2:	f000 fd79 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d11d      	bne.n	8000d38 <main+0x244>
		  index++;
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <main+0x2a4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <main+0x2a4>)
 8000d04:	6013      	str	r3, [r2, #0]
		  if (index == 5) index = 0;
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <main+0x2a4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	d102      	bne.n	8000d14 <main+0x220>
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <main+0x2a4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]

		  LCD_Puts(0, 0, "                ");
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <main+0x2e8>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fe23 	bl	8000964 <LCD_Puts>
		  LCD_Puts(0, 0, status[index]);
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <main+0x2a4>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <main+0x2ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fe16 	bl	8000964 <LCD_Puts>
	  }

	  oldBt = KEY;
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <main+0x2e0>)
 8000d3c:	f000 fd54 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf0c      	ite	eq
 8000d46:	2301      	moveq	r3, #1
 8000d48:	2300      	movne	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <main+0x2e4>)
 8000d50:	701a      	strb	r2, [r3, #0]

	  get_time();
 8000d52:	f7ff fead 	bl	8000ab0 <get_time>

	  if (sTime.Hours == alarm_hour && sTime.Minutes == alarm_minute && sTime.Seconds == alarm_second) {
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <main+0x2f0>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <main+0x2a8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d143      	bne.n	8000dec <main+0x2f8>
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <main+0x2f0>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <main+0x2ac>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d13c      	bne.n	8000dec <main+0x2f8>
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <main+0x2f0>)
 8000d74:	789b      	ldrb	r3, [r3, #2]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <main+0x2b0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d135      	bne.n	8000dec <main+0x2f8>
		  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <main+0x2f4>)
 8000d88:	f000 fd46 	bl	8001818 <HAL_GPIO_WritePin>
 8000d8c:	e034      	b.n	8000df8 <main+0x304>
 8000d8e:	bf00      	nop
 8000d90:	20000060 	.word	0x20000060
 8000d94:	2000027d 	.word	0x2000027d
 8000d98:	20000074 	.word	0x20000074
 8000d9c:	20000280 	.word	0x20000280
 8000da0:	20000284 	.word	0x20000284
 8000da4:	20000288 	.word	0x20000288
 8000da8:	080088d0 	.word	0x080088d0
 8000dac:	2000028c 	.word	0x2000028c
 8000db0:	200002a0 	.word	0x200002a0
 8000db4:	080088e0 	.word	0x080088e0
 8000db8:	20000294 	.word	0x20000294
 8000dbc:	200002a4 	.word	0x200002a4
 8000dc0:	080088e8 	.word	0x080088e8
 8000dc4:	20000298 	.word	0x20000298
 8000dc8:	200002a8 	.word	0x200002a8
 8000dcc:	2000029c 	.word	0x2000029c
 8000dd0:	200002b0 	.word	0x200002b0
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	200002ac 	.word	0x200002ac
 8000ddc:	080088f0 	.word	0x080088f0
 8000de0:	20000010 	.word	0x20000010
 8000de4:	20000554 	.word	0x20000554
 8000de8:	40020400 	.word	0x40020400
	  } else {
		  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <main+0x30c>)
 8000df4:	f000 fd10 	bl	8001818 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(10);
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f000 fa3b 	bl	8001274 <HAL_Delay>
  {
 8000dfe:	e693      	b.n	8000b28 <main+0x34>
 8000e00:	40020400 	.word	0x40020400

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2230      	movs	r2, #48	; 0x30
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f007 f908 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <SystemClock_Config+0xd0>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <SystemClock_Config+0xd4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <SystemClock_Config+0xd4>)
 8000e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <SystemClock_Config+0xd4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e64:	2305      	movs	r3, #5
 8000e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e7c:	2319      	movs	r3, #25
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e80:	23c0      	movs	r3, #192	; 0xc0
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000e84:	2306      	movs	r3, #6
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 fbd7 	bl	8003644 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e9c:	f000 f81e 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fe39 	bl	8003b34 <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ec8:	f000 f808 	bl	8000edc <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3750      	adds	r7, #80	; 0x50
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <MX_RTC_Init+0xb0>)
 8000f04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f0e:	227f      	movs	r2, #127	; 0x7f
 8000f10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f14:	22ff      	movs	r2, #255	; 0xff
 8000f16:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f2c:	f003 f8ac 	bl	8004088 <HAL_RTC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f36:	f7ff ffd1 	bl	8000edc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2201      	movs	r2, #1
 8000f52:	4619      	mov	r1, r3
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f56:	f003 f928 	bl	80041aa <HAL_RTC_SetTime>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f60:	f7ff ffbc 	bl	8000edc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000f64:	2305      	movs	r3, #5
 8000f66:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x18;
 8000f6c:	2318      	movs	r3, #24
 8000f6e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000f70:	2322      	movs	r3, #34	; 0x22
 8000f72:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_RTC_Init+0xac>)
 8000f7c:	f003 fa30 	bl	80043e0 <HAL_RTC_SetDate>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f86:	f7ff ffa9 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000568 	.word	0x20000568
 8000f98:	40002800 	.word	0x40002800

08000f9c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_RTC_MspInit+0x50>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d111      	bne.n	8000fe2 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 ff6d 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000fd8:	f7ff ff80 	bl	8000edc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_RTC_MspInit+0x54>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40002800 	.word	0x40002800
 8000ff0:	42470e3c 	.word	0x42470e3c

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_MspInit+0x4c>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	; 0x40
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f8d0 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <OTG_FS_IRQHandler+0x10>)
 800109e:	f001 fa9e 	bl	80025de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000122c 	.word	0x2000122c

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f006 ff7a 	bl	8007fd4 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20010000 	.word	0x20010000
 800110c:	00000400 	.word	0x00000400
 8001110:	200002d0 	.word	0x200002d0
 8001114:	20001648 	.word	0x20001648

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	; (8001188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001166:	f7ff ffd7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f006 ff39 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fcc1 	bl	8000af4 <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8001180:	080089a8 	.word	0x080089a8
  ldr r2, =_sbss
 8001184:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8001188:	20001644 	.word	0x20001644

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f94f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff ff16 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f967 	bl	80014c6 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f92f 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000078 	.word	0x20000078
 800122c:	20000080 	.word	0x20000080
 8001230:	2000007c 	.word	0x2000007c

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000080 	.word	0x20000080
 8001258:	20000588 	.word	0x20000588

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000588 	.word	0x20000588

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000080 	.word	0x20000080

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff3e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e159      	b.n	80017b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8148 	bne.w	80017aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	2b02      	cmp	r3, #2
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a2 	beq.w	80017aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <HAL_GPIO_Init+0x2e8>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a56      	ldr	r2, [pc, #344]	; (80017c8 <HAL_GPIO_Init+0x2e8>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b54      	ldr	r3, [pc, #336]	; (80017c8 <HAL_GPIO_Init+0x2e8>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_GPIO_Init+0x2ec>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a49      	ldr	r2, [pc, #292]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x202>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a48      	ldr	r2, [pc, #288]	; (80017d4 <HAL_GPIO_Init+0x2f4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x1fe>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a47      	ldr	r2, [pc, #284]	; (80017d8 <HAL_GPIO_Init+0x2f8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x1fa>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a46      	ldr	r2, [pc, #280]	; (80017dc <HAL_GPIO_Init+0x2fc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x1f6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_GPIO_Init+0x300>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x1f2>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x204>
 80016e2:	2300      	movs	r3, #0
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f4:	4935      	ldr	r1, [pc, #212]	; (80017cc <HAL_GPIO_Init+0x2ec>)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_GPIO_Init+0x304>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001726:	4a2f      	ldr	r2, [pc, #188]	; (80017e4 <HAL_GPIO_Init+0x304>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_GPIO_Init+0x304>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001750:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <HAL_GPIO_Init+0x304>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_GPIO_Init+0x304>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177a:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_GPIO_Init+0x304>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_GPIO_Init+0x304>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	f67f aea2 	bls.w	80014fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40013800 	.word	0x40013800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e001      	b.n	800180a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e12b      	b.n	8001ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ff1c 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800189e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018b0:	f002 fae8 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a81      	ldr	r2, [pc, #516]	; (8001ac0 <HAL_I2C_Init+0x274>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d807      	bhi.n	80018d0 <HAL_I2C_Init+0x84>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a80      	ldr	r2, [pc, #512]	; (8001ac4 <HAL_I2C_Init+0x278>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	bf94      	ite	ls
 80018c8:	2301      	movls	r3, #1
 80018ca:	2300      	movhi	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e006      	b.n	80018de <HAL_I2C_Init+0x92>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a7d      	ldr	r2, [pc, #500]	; (8001ac8 <HAL_I2C_Init+0x27c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bf94      	ite	ls
 80018d8:	2301      	movls	r3, #1
 80018da:	2300      	movhi	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0e7      	b.n	8001ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a78      	ldr	r2, [pc, #480]	; (8001acc <HAL_I2C_Init+0x280>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_I2C_Init+0x274>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d802      	bhi.n	8001920 <HAL_I2C_Init+0xd4>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3301      	adds	r3, #1
 800191e:	e009      	b.n	8001934 <HAL_I2C_Init+0xe8>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a69      	ldr	r2, [pc, #420]	; (8001ad0 <HAL_I2C_Init+0x284>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	3301      	adds	r3, #1
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	430b      	orrs	r3, r1
 800193a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	495c      	ldr	r1, [pc, #368]	; (8001ac0 <HAL_I2C_Init+0x274>)
 8001950:	428b      	cmp	r3, r1
 8001952:	d819      	bhi.n	8001988 <HAL_I2C_Init+0x13c>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e59      	subs	r1, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001962:	1c59      	adds	r1, r3, #1
 8001964:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001968:	400b      	ands	r3, r1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <HAL_I2C_Init+0x138>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e59      	subs	r1, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fbb1 f3f3 	udiv	r3, r1, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001982:	e051      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001984:	2304      	movs	r3, #4
 8001986:	e04f      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d111      	bne.n	80019b4 <HAL_I2C_Init+0x168>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1e58      	subs	r0, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	440b      	add	r3, r1
 800199e:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e012      	b.n	80019da <HAL_I2C_Init+0x18e>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	0099      	lsls	r1, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Init+0x196>
 80019de:	2301      	movs	r3, #1
 80019e0:	e022      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10e      	bne.n	8001a08 <HAL_I2C_Init+0x1bc>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1e58      	subs	r0, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	440b      	add	r3, r1
 80019f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a06:	e00f      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	0099      	lsls	r1, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	6809      	ldr	r1, [r1, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6911      	ldr	r1, [r2, #16]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68d2      	ldr	r2, [r2, #12]
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	000186a0 	.word	0x000186a0
 8001ac4:	001e847f 	.word	0x001e847f
 8001ac8:	003d08ff 	.word	0x003d08ff
 8001acc:	431bde83 	.word	0x431bde83
 8001ad0:	10624dd3 	.word	0x10624dd3

08001ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff fbb8 	bl	800125c <HAL_GetTick>
 8001aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	f040 80e0 	bne.w	8001cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2319      	movs	r3, #25
 8001b02:	2201      	movs	r2, #1
 8001b04:	4970      	ldr	r1, [pc, #448]	; (8001cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fa92 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
 8001b14:	e0d3      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2C_Master_Transmit+0x50>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0cc      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d007      	beq.n	8001b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2221      	movs	r2, #33	; 0x21
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2210      	movs	r2, #16
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	893a      	ldrh	r2, [r7, #8]
 8001b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6a3a      	ldr	r2, [r7, #32]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f9ca 	bl	8001f2c <I2C_MasterRequestWrite>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e08d      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bb8:	e066      	b.n	8001c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fb0c 	bl	80021dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00d      	beq.n	8001be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d107      	bne.n	8001be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06b      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d11b      	bne.n	8001c5c <HAL_I2C_Master_Transmit+0x188>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d017      	beq.n	8001c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	6a39      	ldr	r1, [r7, #32]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fafc 	bl	800225e <I2C_WaitOnBTFFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e01a      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d194      	bne.n	8001bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00100002 	.word	0x00100002
 8001ccc:	ffff0000 	.word	0xffff0000

08001cd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff fabc 	bl	800125c <HAL_GetTick>
 8001ce4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	f040 8111 	bne.w	8001f1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2319      	movs	r3, #25
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4988      	ldr	r1, [pc, #544]	; (8001f24 <HAL_I2C_IsDeviceReady+0x254>)
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f994 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e104      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_I2C_IsDeviceReady+0x50>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0fd      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d007      	beq.n	8001d46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a70      	ldr	r2, [pc, #448]	; (8001f28 <HAL_I2C_IsDeviceReady+0x258>)
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f952 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da0:	d103      	bne.n	8001daa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0b6      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa4d 	bl	800125c <HAL_GetTick>
 8001dc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001df2:	e025      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001df4:	f7ff fa32 	bl	800125c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d302      	bcc.n	8001e0a <HAL_I2C_IsDeviceReady+0x13a>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	22a0      	movs	r2, #160	; 0xa0
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2ba0      	cmp	r3, #160	; 0xa0
 8001e4a:	d005      	beq.n	8001e58 <HAL_I2C_IsDeviceReady+0x188>
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <HAL_I2C_IsDeviceReady+0x188>
 8001e52:	7dbb      	ldrb	r3, [r7, #22]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0cd      	beq.n	8001df4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d129      	bne.n	8001ec2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2319      	movs	r3, #25
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4921      	ldr	r1, [pc, #132]	; (8001f24 <HAL_I2C_IsDeviceReady+0x254>)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f8c6 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e036      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e02c      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2319      	movs	r3, #25
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	490f      	ldr	r1, [pc, #60]	; (8001f24 <HAL_I2C_IsDeviceReady+0x254>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f8a2 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e012      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f4ff af32 	bcc.w	8001d6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	00100002 	.word	0x00100002
 8001f28:	ffff0000 	.word	0xffff0000

08001f2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d006      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00b      	b.n	8001f80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d107      	bne.n	8001f80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f84f 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa6:	d103      	bne.n	8001fb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e035      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fbc:	d108      	bne.n	8001fd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e01b      	b.n	8002008 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	11db      	asrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0306 	and.w	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f063 030f 	orn	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <I2C_MasterRequestWrite+0xfc>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f875 	bl	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e010      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <I2C_MasterRequestWrite+0x100>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f865 	bl	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	00010008 	.word	0x00010008
 800202c:	00010002 	.word	0x00010002

08002030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002040:	e025      	b.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d021      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7ff f907 	bl	800125c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d116      	bne.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e023      	b.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10d      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	e00c      	b.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4013      	ands	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d0b6      	beq.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ec:	e051      	b.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fc:	d123      	bne.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e046      	b.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d021      	beq.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7ff f885 	bl	800125c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e020      	b.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10c      	bne.n	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e00b      	b.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d18d      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e8:	e02d      	b.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f878 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e02d      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d021      	beq.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7ff f82b 	bl	800125c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d116      	bne.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f043 0220 	orr.w	r2, r3, #32
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e007      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d1ca      	bne.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226a:	e02d      	b.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f837 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e02d      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d021      	beq.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7fe ffea 	bl	800125c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d1ca      	bne.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d11b      	bne.n	8002330 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002300:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800233e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002340:	b08f      	sub	sp, #60	; 0x3c
 8002342:	af0a      	add	r7, sp, #40	; 0x28
 8002344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e10f      	b.n	8002570 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f005 fb28 	bl	80079c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f002 fa71 	bl	8004876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	687e      	ldr	r6, [r7, #4]
 800239c:	466d      	mov	r5, sp
 800239e:	f106 0410 	add.w	r4, r6, #16
 80023a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80023b2:	1d33      	adds	r3, r6, #4
 80023b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b6:	6838      	ldr	r0, [r7, #0]
 80023b8:	f002 f949 	bl	800464e <USB_CoreInit>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0d0      	b.n	8002570 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fa5f 	bl	8004898 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e04a      	b.n	8002476 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	333d      	adds	r3, #61	; 0x3d
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	333c      	adds	r3, #60	; 0x3c
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	b298      	uxth	r0, r3
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3342      	adds	r3, #66	; 0x42
 800241c:	4602      	mov	r2, r0
 800241e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	333f      	adds	r3, #63	; 0x3f
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3344      	adds	r3, #68	; 0x44
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3348      	adds	r3, #72	; 0x48
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3350      	adds	r3, #80	; 0x50
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	3301      	adds	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3af      	bcc.n	80023e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e044      	b.n	8002510 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	3301      	adds	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	429a      	cmp	r2, r3
 8002518:	d3b5      	bcc.n	8002486 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	687e      	ldr	r6, [r7, #4]
 8002522:	466d      	mov	r5, sp
 8002524:	f106 0410 	add.w	r4, r6, #16
 8002528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002530:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002534:	e885 0003 	stmia.w	r5, {r0, r1}
 8002538:	1d33      	adds	r3, r6, #4
 800253a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253c:	6838      	ldr	r0, [r7, #0]
 800253e:	f002 f9f7 	bl	8004930 <USB_DevInit>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e00d      	b.n	8002570 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fa73 	bl	8005a54 <USB_DevDisconnect>

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002578 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_PCD_Start+0x1c>
 8002590:	2302      	movs	r3, #2
 8002592:	e020      	b.n	80025d6 <HAL_PCD_Start+0x5e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d109      	bne.n	80025b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d005      	beq.n	80025b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 f949 	bl	8004854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fa23 	bl	8005a12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025de:	b590      	push	{r4, r7, lr}
 80025e0:	b08d      	sub	sp, #52	; 0x34
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fae1 	bl	8005bbc <USB_GetMode>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 839d 	bne.w	8002d3c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fa45 	bl	8005a96 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8393 	beq.w	8002d3a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fa3c 	bl	8005a96 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d107      	bne.n	8002638 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f002 0202 	and.w	r2, r2, #2
 8002636:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fa2a 	bl	8005a96 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b10      	cmp	r3, #16
 800264a:	d161      	bne.n	8002710 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0210 	bic.w	r2, r2, #16
 800265a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	0c5b      	lsrs	r3, r3, #17
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	2b02      	cmp	r3, #2
 8002686:	d124      	bne.n	80026d2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d035      	beq.n	8002700 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800269e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	6a38      	ldr	r0, [r7, #32]
 80026a8:	f003 f861 	bl	800576e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b8:	441a      	add	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ca:	441a      	add	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	619a      	str	r2, [r3, #24]
 80026d0:	e016      	b.n	8002700 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	0c5b      	lsrs	r3, r3, #17
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d110      	bne.n	8002700 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026e4:	2208      	movs	r2, #8
 80026e6:	4619      	mov	r1, r3
 80026e8:	6a38      	ldr	r0, [r7, #32]
 80026ea:	f003 f840 	bl	800576e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026fa:	441a      	add	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0210 	orr.w	r2, r2, #16
 800270e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f003 f9be 	bl	8005a96 <USB_ReadInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002720:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002724:	d16e      	bne.n	8002804 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 f9c4 	bl	8005abc <USB_ReadDevAllOutEpInterrupt>
 8002734:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002736:	e062      	b.n	80027fe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d057      	beq.n	80027f2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 f9e9 	bl	8005b24 <USB_ReadDevOutEPInterrupt>
 8002752:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00c      	beq.n	8002778 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276a:	461a      	mov	r2, r3
 800276c:	2301      	movs	r3, #1
 800276e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fdb0 	bl	80032d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278e:	461a      	mov	r2, r3
 8002790:	2308      	movs	r3, #8
 8002792:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 feaa 	bl	80034f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b2:	461a      	mov	r2, r3
 80027b4:	2310      	movs	r3, #16
 80027b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ce:	461a      	mov	r2, r3
 80027d0:	2320      	movs	r3, #32
 80027d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ea:	461a      	mov	r2, r3
 80027ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	3301      	adds	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d199      	bne.n	8002738 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 f944 	bl	8005a96 <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002818:	f040 80c0 	bne.w	800299c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 f965 	bl	8005af0 <USB_ReadDevAllInEpInterrupt>
 8002826:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800282c:	e0b2      	b.n	8002994 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a7 	beq.w	8002988 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f003 f98b 	bl	8005b60 <USB_ReadDevInEPInterrupt>
 800284a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d057      	beq.n	8002906 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	2201      	movs	r2, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	69f9      	ldr	r1, [r7, #28]
 8002872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002876:	4013      	ands	r3, r2
 8002878:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d132      	bne.n	80028fa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3348      	adds	r3, #72	; 0x48
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4403      	add	r3, r0
 80028b4:	3344      	adds	r3, #68	; 0x44
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4419      	add	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4403      	add	r3, r0
 80028c8:	3348      	adds	r3, #72	; 0x48
 80028ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d113      	bne.n	80028fa <HAL_PCD_IRQHandler+0x31c>
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3350      	adds	r3, #80	; 0x50
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d108      	bne.n	80028fa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028f2:	461a      	mov	r2, r3
 80028f4:	2101      	movs	r1, #1
 80028f6:	f003 f993 	bl	8005c20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f005 f8de 	bl	8007ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291c:	461a      	mov	r2, r3
 800291e:	2308      	movs	r3, #8
 8002920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	4413      	add	r3, r2
 8002934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002938:	461a      	mov	r2, r3
 800293a:	2310      	movs	r3, #16
 800293c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002954:	461a      	mov	r2, r3
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002970:	461a      	mov	r2, r3
 8002972:	2302      	movs	r3, #2
 8002974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fc1b 	bl	80031be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	3301      	adds	r3, #1
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	f47f af49 	bne.w	800282e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 f878 	bl	8005a96 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b0:	d122      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029d8:	2100      	movs	r1, #0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fe26 	bl	800362c <HAL_PCDEx_LPM_Callback>
 80029e0:	e002      	b.n	80029e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f005 f8da 	bl	8007b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 f84a 	bl	8005a96 <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0c:	d112      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f005 f896 	bl	8007b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a32:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 f82c 	bl	8005a96 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a48:	f040 80c7 	bne.w	8002bda <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2110      	movs	r1, #16
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 f8c6 	bl	8004bf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a70:	e056      	b.n	8002b20 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a96:	0151      	lsls	r1, r2, #5
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	440a      	add	r2, r1
 8002a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aa4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab6:	0151      	lsls	r1, r2, #5
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	440a      	add	r2, r1
 8002abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ac0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ad8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aea:	0151      	lsls	r1, r2, #5
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	440a      	add	r2, r1
 8002af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002af8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0a:	0151      	lsls	r1, r2, #5
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	440a      	add	r2, r1
 8002b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3a3      	bcc.n	8002a72 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b56:	f043 030b 	orr.w	r3, r3, #11
 8002b5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b6c:	f043 030b 	orr.w	r3, r3, #11
 8002b70:	6453      	str	r3, [r2, #68]	; 0x44
 8002b72:	e015      	b.n	8002ba0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9a:	f043 030b 	orr.w	r3, r3, #11
 8002b9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f003 f82b 	bl	8005c20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f002 ff59 	bl	8005a96 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bee:	d124      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 ffef 	bl	8005bd8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 f857 	bl	8004cb2 <USB_GetDevSpeed>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681c      	ldr	r4, [r3, #0]
 8002c10:	f001 f92c 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8002c14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f001 fd76 	bl	8004710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f004 ff74 	bl	8007b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 ff29 	bl	8005a96 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d10a      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f004 ff51 	bl	8007af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f002 0208 	and.w	r2, r2, #8
 8002c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 ff14 	bl	8005a96 <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c78:	d10f      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f004 ffa9 	bl	8007bdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 fef9 	bl	8005a96 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cae:	d10f      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f004 ff7c 	bl	8007bb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fede 	bl	8005a96 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d10a      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f004 ff8a 	bl	8007c00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fec8 	bl	8005a96 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d115      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f004 ff7a 	bl	8007c1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	e000      	b.n	8002d3c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d3a:	bf00      	nop
    }
  }
}
 8002d3c:	3734      	adds	r7, #52	; 0x34
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}

08002d42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_PCD_SetAddress+0x1a>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e013      	b.n	8002d84 <HAL_PCD_SetAddress+0x42>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 fe26 	bl	80059c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	70fb      	strb	r3, [r7, #3]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	803b      	strh	r3, [r7, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da0f      	bge.n	8002dd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	f003 020f 	and.w	r2, r3, #15
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3338      	adds	r3, #56	; 0x38
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	705a      	strb	r2, [r3, #1]
 8002dd0:	e00f      	b.n	8002df2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dfe:	883a      	ldrh	r2, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	78ba      	ldrb	r2, [r7, #2]
 8002e08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e1c:	78bb      	ldrb	r3, [r7, #2]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_Open+0xaa>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00e      	b.n	8002e54 <HAL_PCD_EP_Open+0xc8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 ff59 	bl	8004cfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da0f      	bge.n	8002e90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3338      	adds	r3, #56	; 0x38
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	705a      	strb	r2, [r3, #1]
 8002e8e:	e00f      	b.n	8002eb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_PCD_EP_Close+0x6e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e00e      	b.n	8002ee8 <HAL_PCD_EP_Close+0x8c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68f9      	ldr	r1, [r7, #12]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 ff97 	bl	8004e0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	460b      	mov	r3, r1
 8002efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	7afb      	ldrb	r3, [r7, #11]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4c:	7afb      	ldrb	r3, [r7, #11]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	f002 fa72 	bl	800544c <USB_EP0StartXfer>
 8002f68:	e008      	b.n	8002f7c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	f002 f824 	bl	8004fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fa8:	681b      	ldr	r3, [r3, #0]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	3338      	adds	r3, #56	; 0x38
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3304      	adds	r3, #4
 8002fdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6979      	ldr	r1, [r7, #20]
 8003028:	f002 fa10 	bl	800544c <USB_EP0StartXfer>
 800302c:	e008      	b.n	8003040 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6979      	ldr	r1, [r7, #20]
 800303c:	f001 ffc2 	bl	8004fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d901      	bls.n	8003068 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e050      	b.n	800310a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306c:	2b00      	cmp	r3, #0
 800306e:	da0f      	bge.n	8003090 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	3338      	adds	r3, #56	; 0x38
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	3304      	adds	r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	705a      	strb	r2, [r3, #1]
 800308e:	e00d      	b.n	80030ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_PCD_EP_SetStall+0x82>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e01e      	b.n	800310a <HAL_PCD_EP_SetStall+0xc0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68f9      	ldr	r1, [r7, #12]
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fb9f 	bl	800581e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	b2d9      	uxtb	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030fa:	461a      	mov	r2, r3
 80030fc:	f002 fd90 	bl	8005c20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 020f 	and.w	r2, r3, #15
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	d901      	bls.n	8003130 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e042      	b.n	80031b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	da0f      	bge.n	8003158 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	3338      	adds	r3, #56	; 0x38
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	705a      	strb	r2, [r3, #1]
 8003156:	e00f      	b.n	8003178 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_PCD_EP_ClrStall+0x86>
 8003194:	2302      	movs	r3, #2
 8003196:	e00e      	b.n	80031b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fba7 	bl	80058fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b08a      	sub	sp, #40	; 0x28
 80031c2:	af02      	add	r7, sp, #8
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	3338      	adds	r3, #56	; 0x38
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d901      	bls.n	80031f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06c      	b.n	80032d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	429a      	cmp	r2, r3
 800320a:	d902      	bls.n	8003212 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3303      	adds	r3, #3
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321a:	e02b      	b.n	8003274 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	429a      	cmp	r2, r3
 8003230:	d902      	bls.n	8003238 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3303      	adds	r3, #3
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68d9      	ldr	r1, [r3, #12]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003250:	b2db      	uxtb	r3, r3
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	6978      	ldr	r0, [r7, #20]
 8003258:	f002 fa4b 	bl	80056f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	441a      	add	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	441a      	add	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	b29b      	uxth	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	429a      	cmp	r2, r3
 8003288:	d809      	bhi.n	800329e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003292:	429a      	cmp	r2, r3
 8003294:	d203      	bcs.n	800329e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1be      	bne.n	800321c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d811      	bhi.n	80032ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	6939      	ldr	r1, [r7, #16]
 80032c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ca:	4013      	ands	r3, r2
 80032cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	333c      	adds	r3, #60	; 0x3c
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	f040 80a0 	bne.w	8003450 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d015      	beq.n	8003346 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a72      	ldr	r2, [pc, #456]	; (80034e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800331e:	4293      	cmp	r3, r2
 8003320:	f240 80dd 	bls.w	80034de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80d7 	beq.w	80034de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	461a      	mov	r2, r3
 800333e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	e0cb      	b.n	80034de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	2320      	movs	r3, #32
 8003360:	6093      	str	r3, [r2, #8]
 8003362:	e0bc      	b.n	80034de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80b7 	bne.w	80034de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d90f      	bls.n	8003398 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338e:	461a      	mov	r2, r3
 8003390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003394:	6093      	str	r3, [r2, #8]
 8003396:	e0a2      	b.n	80034de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	0159      	lsls	r1, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4403      	add	r3, r0
 80033ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033e6:	6819      	ldr	r1, [r3, #0]
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4403      	add	r3, r0
 80033f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4419      	add	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4403      	add	r3, r0
 800340c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003410:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d114      	bne.n	8003442 <PCD_EP_OutXfrComplete_int+0x16a>
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800343a:	461a      	mov	r2, r3
 800343c:	2101      	movs	r1, #1
 800343e:	f002 fbef 	bl	8005c20 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f004 fb1f 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
 800344e:	e046      	b.n	80034de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a26      	ldr	r2, [pc, #152]	; (80034ec <PCD_EP_OutXfrComplete_int+0x214>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d124      	bne.n	80034a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	461a      	mov	r2, r3
 8003470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003474:	6093      	str	r3, [r2, #8]
 8003476:	e032      	b.n	80034de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	461a      	mov	r2, r3
 8003490:	2320      	movs	r3, #32
 8003492:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f004 faf6 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
 80034a0:	e01d      	b.n	80034de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d114      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ca:	461a      	mov	r2, r3
 80034cc:	2100      	movs	r1, #0
 80034ce:	f002 fba7 	bl	8005c20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f004 fad7 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	4f54300a 	.word	0x4f54300a
 80034ec:	4f54310a 	.word	0x4f54310a

080034f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	333c      	adds	r3, #60	; 0x3c
 8003508:	3304      	adds	r3, #4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a15      	ldr	r2, [pc, #84]	; (8003578 <PCD_EP_OutSetupPacket_int+0x88>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d90e      	bls.n	8003544 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f004 fa8f 	bl	8007a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <PCD_EP_OutSetupPacket_int+0x88>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d90c      	bls.n	800356c <PCD_EP_OutSetupPacket_int+0x7c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d108      	bne.n	800356c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003564:	461a      	mov	r2, r3
 8003566:	2101      	movs	r1, #1
 8003568:	f002 fb5a 	bl	8005c20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	4f54300a 	.word	0x4f54300a

0800357c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
 8003588:	4613      	mov	r3, r2
 800358a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800359a:	883b      	ldrh	r3, [r7, #0]
 800359c:	0419      	lsls	r1, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
 80035a8:	e028      	b.n	80035fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4413      	add	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e00d      	b.n	80035da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	3340      	adds	r3, #64	; 0x40
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4413      	add	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	3301      	adds	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	3b01      	subs	r3, #1
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3ec      	bcc.n	80035be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035e4:	883b      	ldrh	r3, [r7, #0]
 80035e6:	0418      	lsls	r0, r3, #16
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4302      	orrs	r2, r0
 80035f4:	3340      	adds	r3, #64	; 0x40
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e264      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d075      	beq.n	800374e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003662:	4ba3      	ldr	r3, [pc, #652]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b04      	cmp	r3, #4
 800366c:	d00c      	beq.n	8003688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4ba0      	ldr	r3, [pc, #640]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003676:	2b08      	cmp	r3, #8
 8003678:	d112      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b9d      	ldr	r3, [pc, #628]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003686:	d10b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	4b99      	ldr	r3, [pc, #612]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05b      	beq.n	800374c <HAL_RCC_OscConfig+0x108>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d157      	bne.n	800374c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e23f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x74>
 80036aa:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a90      	ldr	r2, [pc, #576]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a8a      	ldr	r2, [pc, #552]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a87      	ldr	r2, [pc, #540]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036dc:	4b84      	ldr	r3, [pc, #528]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a83      	ldr	r2, [pc, #524]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b81      	ldr	r3, [pc, #516]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a80      	ldr	r2, [pc, #512]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd fdae 	bl	800125c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7fd fdaa 	bl	800125c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e204      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xc0>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fd fd9a 	bl	800125c <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7fd fd96 	bl	800125c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1f0      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0xe8>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1c4      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b56      	ldr	r3, [pc, #344]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4952      	ldr	r1, [pc, #328]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e03a      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCC_OscConfig+0x2b0>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fd fd4f 	bl	800125c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c2:	f7fd fd4b 	bl	800125c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1a5      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4940      	ldr	r1, [pc, #256]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <HAL_RCC_OscConfig+0x2b0>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd fd2e 	bl	800125c <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003804:	f7fd fd2a 	bl	800125c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e184      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d030      	beq.n	8003890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_RCC_OscConfig+0x2b4>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fd fd0e 	bl	800125c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003844:	f7fd fd0a 	bl	800125c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e164      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x200>
 8003862:	e015      	b.n	8003890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_OscConfig+0x2b4>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7fd fcf7 	bl	800125c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003872:	f7fd fcf3 	bl	800125c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e14d      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a0 	beq.w	80039de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_OscConfig+0x2b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d121      	bne.n	800391e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_RCC_OscConfig+0x2b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a07      	ldr	r2, [pc, #28]	; (80038fc <HAL_RCC_OscConfig+0x2b8>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7fd fcb9 	bl	800125c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e011      	b.n	8003912 <HAL_RCC_OscConfig+0x2ce>
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	42470000 	.word	0x42470000
 80038f8:	42470e80 	.word	0x42470e80
 80038fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7fd fcac 	bl	800125c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e106      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <HAL_RCC_OscConfig+0x4e4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x2f0>
 8003926:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a80      	ldr	r2, [pc, #512]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x32a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x312>
 800393c:	4b7b      	ldr	r3, [pc, #492]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a7a      	ldr	r2, [pc, #488]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	4b78      	ldr	r3, [pc, #480]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a77      	ldr	r2, [pc, #476]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x32a>
 8003956:	4b75      	ldr	r3, [pc, #468]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a74      	ldr	r2, [pc, #464]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	4b72      	ldr	r3, [pc, #456]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a71      	ldr	r2, [pc, #452]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fd fc71 	bl	800125c <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd fc6d 	bl	800125c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0c5      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x33a>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fc5b 	bl	800125c <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fd fc57 	bl	800125c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0af      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b5a      	ldr	r3, [pc, #360]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a55      	ldr	r2, [pc, #340]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 809b 	beq.w	8003b1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d05c      	beq.n	8003aae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d141      	bne.n	8003a80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fd fc2b 	bl	800125c <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd fc27 	bl	800125c <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e081      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	019b      	lsls	r3, r3, #6
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	3b01      	subs	r3, #1
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	061b      	lsls	r3, r3, #24
 8003a4c:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fc00 	bl	800125c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd fbfc 	bl	800125c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e056      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x41c>
 8003a7e:	e04e      	b.n	8003b1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fd fbe9 	bl	800125c <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd fbe5 	bl	800125c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e03f      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa0:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x44a>
 8003aac:	e037      	b.n	8003b1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e032      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d028      	beq.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d121      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d11a      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aea:	4013      	ands	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003af0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d111      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470060 	.word	0x42470060

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cc      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b68      	ldr	r3, [pc, #416]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d90c      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d044      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d119      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e067      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4934      	ldr	r1, [pc, #208]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c24:	f7fd fb1a 	bl	800125c <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fd fb16 	bl	800125c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e04f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d20c      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fa7a 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	0800894c 	.word	0x0800894c
 8003cf8:	20000078 	.word	0x20000078
 8003cfc:	2000007c 	.word	0x2000007c

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d06:	2100      	movs	r1, #0
 8003d08:	6079      	str	r1, [r7, #4]
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	60f9      	str	r1, [r7, #12]
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d12:	2100      	movs	r1, #0
 8003d14:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d16:	4952      	ldr	r1, [pc, #328]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d18:	6889      	ldr	r1, [r1, #8]
 8003d1a:	f001 010c 	and.w	r1, r1, #12
 8003d1e:	2908      	cmp	r1, #8
 8003d20:	d00d      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x3e>
 8003d22:	2908      	cmp	r1, #8
 8003d24:	f200 8094 	bhi.w	8003e50 <HAL_RCC_GetSysClockFreq+0x150>
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x32>
 8003d2c:	2904      	cmp	r1, #4
 8003d2e:	d003      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x38>
 8003d30:	e08e      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d32:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d34:	60bb      	str	r3, [r7, #8]
       break;
 8003d36:	e08e      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d38:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d3a:	60bb      	str	r3, [r7, #8]
      break;
 8003d3c:	e08b      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d3e:	4948      	ldr	r1, [pc, #288]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d40:	6849      	ldr	r1, [r1, #4]
 8003d42:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d46:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d48:	4945      	ldr	r1, [pc, #276]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d4a:	6849      	ldr	r1, [r1, #4]
 8003d4c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d024      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d54:	4942      	ldr	r1, [pc, #264]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d56:	6849      	ldr	r1, [r1, #4]
 8003d58:	0989      	lsrs	r1, r1, #6
 8003d5a:	4608      	mov	r0, r1
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d64:	f04f 0500 	mov.w	r5, #0
 8003d68:	ea00 0204 	and.w	r2, r0, r4
 8003d6c:	ea01 0305 	and.w	r3, r1, r5
 8003d70:	493d      	ldr	r1, [pc, #244]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d72:	fb01 f003 	mul.w	r0, r1, r3
 8003d76:	2100      	movs	r1, #0
 8003d78:	fb01 f102 	mul.w	r1, r1, r2
 8003d7c:	1844      	adds	r4, r0, r1
 8003d7e:	493a      	ldr	r1, [pc, #232]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d80:	fba2 0101 	umull	r0, r1, r2, r1
 8003d84:	1863      	adds	r3, r4, r1
 8003d86:	4619      	mov	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	f7fc fa76 	bl	8000280 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e04a      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	461a      	mov	r2, r3
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dae:	f04f 0100 	mov.w	r1, #0
 8003db2:	ea02 0400 	and.w	r4, r2, r0
 8003db6:	ea03 0501 	and.w	r5, r3, r1
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	014b      	lsls	r3, r1, #5
 8003dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dcc:	0142      	lsls	r2, r0, #5
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	1b00      	subs	r0, r0, r4
 8003dd4:	eb61 0105 	sbc.w	r1, r1, r5
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	018b      	lsls	r3, r1, #6
 8003de2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003de6:	0182      	lsls	r2, r0, #6
 8003de8:	1a12      	subs	r2, r2, r0
 8003dea:	eb63 0301 	sbc.w	r3, r3, r1
 8003dee:	f04f 0000 	mov.w	r0, #0
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	00d9      	lsls	r1, r3, #3
 8003df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dfc:	00d0      	lsls	r0, r2, #3
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	1912      	adds	r2, r2, r4
 8003e04:	eb45 0303 	adc.w	r3, r5, r3
 8003e08:	f04f 0000 	mov.w	r0, #0
 8003e0c:	f04f 0100 	mov.w	r1, #0
 8003e10:	0299      	lsls	r1, r3, #10
 8003e12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e16:	0290      	lsls	r0, r2, #10
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	f7fc fa2a 	bl	8000280 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4613      	mov	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	60bb      	str	r3, [r7, #8]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e52:	60bb      	str	r3, [r7, #8]
      break;
 8003e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e56:	68bb      	ldr	r3, [r7, #8]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	00f42400 	.word	0x00f42400
 8003e68:	017d7840 	.word	0x017d7840

08003e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000078 	.word	0x20000078

08003e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e88:	f7ff fff0 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	0800895c 	.word	0x0800895c

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d035      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ed4:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eda:	f7fd f9bf 	bl	800125c <HAL_GetTick>
 8003ede:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ee2:	f7fd f9bb 	bl	800125c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0ba      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef4:	4b60      	ldr	r3, [pc, #384]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	019a      	lsls	r2, r3, #6
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	071b      	lsls	r3, r3, #28
 8003f0c:	495a      	ldr	r1, [pc, #360]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f14:	4b57      	ldr	r3, [pc, #348]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f1a:	f7fd f99f 	bl	800125c <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f22:	f7fd f99b 	bl	800125c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e09a      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8083 	beq.w	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b49      	ldr	r3, [pc, #292]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a48      	ldr	r2, [pc, #288]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5e:	4b46      	ldr	r3, [pc, #280]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f6a:	4b44      	ldr	r3, [pc, #272]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a43      	ldr	r2, [pc, #268]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f76:	f7fd f971 	bl	800125c <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fd f96d 	bl	800125c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e06c      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f90:	4b3a      	ldr	r3, [pc, #232]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f9c:	4b36      	ldr	r3, [pc, #216]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d028      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fba:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fca:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fd0:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d114      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fd f93b 	bl	800125c <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd f937 	bl	800125c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e034      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ee      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004018:	d10d      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402e:	4912      	ldr	r1, [pc, #72]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
 8004034:	e005      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800403c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004040:	6093      	str	r3, [r2, #8]
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404e:	490a      	ldr	r1, [pc, #40]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	7c1a      	ldrb	r2, [r3, #16]
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004066:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	42470068 	.word	0x42470068
 8004078:	40023800 	.word	0x40023800
 800407c:	40007000 	.word	0x40007000
 8004080:	42470e40 	.word	0x42470e40
 8004084:	424711e0 	.word	0x424711e0

08004088 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e083      	b.n	80041a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7f5b      	ldrb	r3, [r3, #29]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc ff76 	bl	8000f9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	22ca      	movs	r2, #202	; 0xca
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2253      	movs	r2, #83	; 0x53
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa59 	bl	800457e <RTC_EnterInitMode>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	22ff      	movs	r2, #255	; 0xff
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2204      	movs	r2, #4
 80040de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e05e      	b.n	80041a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6919      	ldr	r1, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	041a      	lsls	r2, r3, #16
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004142:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10e      	bne.n	8004170 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9eb 	bl	800452e <HAL_RTC_WaitForSynchro>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	22ff      	movs	r2, #255	; 0xff
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2204      	movs	r2, #4
 800416a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e018      	b.n	80041a2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	22ff      	movs	r2, #255	; 0xff
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041aa:	b590      	push	{r4, r7, lr}
 80041ac:	b087      	sub	sp, #28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	7f1b      	ldrb	r3, [r3, #28]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_RTC_SetTime+0x1c>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0aa      	b.n	800431c <HAL_RTC_SetTime+0x172>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2202      	movs	r2, #2
 80041d0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d126      	bne.n	8004226 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2200      	movs	r2, #0
 80041ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f9f0 	bl	80045d6 <RTC_ByteToBcd2>
 80041f6:	4603      	mov	r3, r0
 80041f8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f9e9 	bl	80045d6 <RTC_ByteToBcd2>
 8004204:	4603      	mov	r3, r0
 8004206:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004208:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	789b      	ldrb	r3, [r3, #2]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f9e1 	bl	80045d6 <RTC_ByteToBcd2>
 8004214:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004216:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	78db      	ldrb	r3, [r3, #3]
 800421e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e018      	b.n	8004258 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2200      	movs	r2, #0
 8004238:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004246:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800424c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	78db      	ldrb	r3, [r3, #3]
 8004252:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	22ca      	movs	r2, #202	; 0xca
 800425e:	625a      	str	r2, [r3, #36]	; 0x24
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2253      	movs	r2, #83	; 0x53
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f988 	bl	800457e <RTC_EnterInitMode>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2204      	movs	r2, #4
 8004280:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e047      	b.n	800431c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004296:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800429a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042aa:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6899      	ldr	r1, [r3, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d111      	bne.n	8004306 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f923 	bl	800452e <HAL_RTC_WaitForSynchro>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	22ff      	movs	r2, #255	; 0xff
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2204      	movs	r2, #4
 80042fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e00a      	b.n	800431c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	22ff      	movs	r2, #255	; 0xff
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800431a:	2300      	movs	r3, #0
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}

08004324 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004356:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800435a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f934 	bl	8004612 <RTC_Bcd2ToByte>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f92b 	bl	8004612 <RTC_Bcd2ToByte>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	789b      	ldrb	r3, [r3, #2]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f922 	bl	8004612 <RTC_Bcd2ToByte>
 80043ce:	4603      	mov	r3, r0
 80043d0:	461a      	mov	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	7f1b      	ldrb	r3, [r3, #28]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_RTC_SetDate+0x1c>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e094      	b.n	8004526 <HAL_RTC_SetDate+0x146>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10e      	bne.n	800442c <HAL_RTC_SetDate+0x4c>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	b2db      	uxtb	r3, r3
 8004424:	330a      	adds	r3, #10
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11c      	bne.n	800446c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	78db      	ldrb	r3, [r3, #3]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f8cd 	bl	80045d6 <RTC_ByteToBcd2>
 800443c:	4603      	mov	r3, r0
 800443e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f8c6 	bl	80045d6 <RTC_ByteToBcd2>
 800444a:	4603      	mov	r3, r0
 800444c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800444e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	789b      	ldrb	r3, [r3, #2]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 f8be 	bl	80045d6 <RTC_ByteToBcd2>
 800445a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800445c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e00e      	b.n	800448a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	78db      	ldrb	r3, [r3, #3]
 8004470:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004478:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800447e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	22ca      	movs	r2, #202	; 0xca
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2253      	movs	r2, #83	; 0x53
 8004498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f86f 	bl	800457e <RTC_EnterInitMode>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	22ff      	movs	r2, #255	; 0xff
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2204      	movs	r2, #4
 80044b2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e033      	b.n	8004526 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d111      	bne.n	8004510 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f81e 	bl	800452e <HAL_RTC_WaitForSynchro>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	22ff      	movs	r2, #255	; 0xff
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2204      	movs	r2, #4
 8004504:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e00a      	b.n	8004526 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	22ff      	movs	r2, #255	; 0xff
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004524:	2300      	movs	r3, #0
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	bd90      	pop	{r4, r7, pc}

0800452e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004548:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800454a:	f7fc fe87 	bl	800125c <HAL_GetTick>
 800454e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004550:	e009      	b.n	8004566 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004552:	f7fc fe83 	bl	800125c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004560:	d901      	bls.n	8004566 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e007      	b.n	8004576 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ee      	beq.n	8004552 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d119      	bne.n	80045cc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f04f 32ff 	mov.w	r2, #4294967295
 80045a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045a2:	f7fc fe5b 	bl	800125c <HAL_GetTick>
 80045a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045a8:	e009      	b.n	80045be <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045aa:	f7fc fe57 	bl	800125c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b8:	d901      	bls.n	80045be <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e007      	b.n	80045ce <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80045e4:	e005      	b.n	80045f2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	3b0a      	subs	r3, #10
 80045f0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b09      	cmp	r3, #9
 80045f6:	d8f6      	bhi.n	80045e6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	4313      	orrs	r3, r2
 8004604:	b2db      	uxtb	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	4413      	add	r3, r2
 8004640:	b2db      	uxtb	r3, r3
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800464e:	b084      	sub	sp, #16
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	f107 001c 	add.w	r0, r7, #28
 800465c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	2b01      	cmp	r3, #1
 8004664:	d122      	bne.n	80046ac <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800467a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f001 fb1b 	bl	8005cdc <USB_CoreReset>
 80046a6:	4603      	mov	r3, r0
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	e01a      	b.n	80046e2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 fb0f 	bl	8005cdc <USB_CoreReset>
 80046be:	4603      	mov	r3, r0
 80046c0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
 80046d4:	e005      	b.n	80046e2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10b      	bne.n	8004700 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f043 0206 	orr.w	r2, r3, #6
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800470c:	b004      	add	sp, #16
 800470e:	4770      	bx	lr

08004710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d165      	bne.n	80047f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a41      	ldr	r2, [pc, #260]	; (800482c <USB_SetTurnaroundTime+0x11c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d906      	bls.n	800473a <USB_SetTurnaroundTime+0x2a>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a40      	ldr	r2, [pc, #256]	; (8004830 <USB_SetTurnaroundTime+0x120>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d202      	bcs.n	800473a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004734:	230f      	movs	r3, #15
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e062      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <USB_SetTurnaroundTime+0x120>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d306      	bcc.n	8004750 <USB_SetTurnaroundTime+0x40>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <USB_SetTurnaroundTime+0x124>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d202      	bcs.n	8004750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800474a:	230e      	movs	r3, #14
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e057      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a38      	ldr	r2, [pc, #224]	; (8004834 <USB_SetTurnaroundTime+0x124>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d306      	bcc.n	8004766 <USB_SetTurnaroundTime+0x56>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a37      	ldr	r2, [pc, #220]	; (8004838 <USB_SetTurnaroundTime+0x128>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d202      	bcs.n	8004766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004760:	230d      	movs	r3, #13
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e04c      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a33      	ldr	r2, [pc, #204]	; (8004838 <USB_SetTurnaroundTime+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d306      	bcc.n	800477c <USB_SetTurnaroundTime+0x6c>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a32      	ldr	r2, [pc, #200]	; (800483c <USB_SetTurnaroundTime+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d802      	bhi.n	800477c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004776:	230c      	movs	r3, #12
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e041      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a2f      	ldr	r2, [pc, #188]	; (800483c <USB_SetTurnaroundTime+0x12c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d906      	bls.n	8004792 <USB_SetTurnaroundTime+0x82>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a2e      	ldr	r2, [pc, #184]	; (8004840 <USB_SetTurnaroundTime+0x130>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d802      	bhi.n	8004792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800478c:	230b      	movs	r3, #11
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e036      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <USB_SetTurnaroundTime+0x130>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d906      	bls.n	80047a8 <USB_SetTurnaroundTime+0x98>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a29      	ldr	r2, [pc, #164]	; (8004844 <USB_SetTurnaroundTime+0x134>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d802      	bhi.n	80047a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047a2:	230a      	movs	r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e02b      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a26      	ldr	r2, [pc, #152]	; (8004844 <USB_SetTurnaroundTime+0x134>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d906      	bls.n	80047be <USB_SetTurnaroundTime+0xae>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4a25      	ldr	r2, [pc, #148]	; (8004848 <USB_SetTurnaroundTime+0x138>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d202      	bcs.n	80047be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047b8:	2309      	movs	r3, #9
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e020      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <USB_SetTurnaroundTime+0x138>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d306      	bcc.n	80047d4 <USB_SetTurnaroundTime+0xc4>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <USB_SetTurnaroundTime+0x13c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d802      	bhi.n	80047d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047ce:	2308      	movs	r3, #8
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e015      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <USB_SetTurnaroundTime+0x13c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d906      	bls.n	80047ea <USB_SetTurnaroundTime+0xda>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <USB_SetTurnaroundTime+0x140>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d202      	bcs.n	80047ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047e4:	2307      	movs	r3, #7
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e00a      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047ea:	2306      	movs	r3, #6
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e007      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047f6:	2309      	movs	r3, #9
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	e001      	b.n	8004800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047fc:	2309      	movs	r3, #9
 80047fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004818:	431a      	orrs	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	00d8acbf 	.word	0x00d8acbf
 8004830:	00e4e1c0 	.word	0x00e4e1c0
 8004834:	00f42400 	.word	0x00f42400
 8004838:	01067380 	.word	0x01067380
 800483c:	011a499f 	.word	0x011a499f
 8004840:	01312cff 	.word	0x01312cff
 8004844:	014ca43f 	.word	0x014ca43f
 8004848:	016e3600 	.word	0x016e3600
 800484c:	01a6ab1f 	.word	0x01a6ab1f
 8004850:	01e84800 	.word	0x01e84800

08004854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d115      	bne.n	80048e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f7fc fcd4 	bl	8001274 <HAL_Delay>
      ms++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 f972 	bl	8005bbc <USB_GetMode>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d01e      	beq.n	800491c <USB_SetCurrentMode+0x84>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b31      	cmp	r3, #49	; 0x31
 80048e2:	d9f0      	bls.n	80048c6 <USB_SetCurrentMode+0x2e>
 80048e4:	e01a      	b.n	800491c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d115      	bne.n	8004918 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fc fcbb 	bl	8001274 <HAL_Delay>
      ms++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 f959 	bl	8005bbc <USB_GetMode>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <USB_SetCurrentMode+0x84>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b31      	cmp	r3, #49	; 0x31
 8004914:	d9f0      	bls.n	80048f8 <USB_SetCurrentMode+0x60>
 8004916:	e001      	b.n	800491c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e005      	b.n	8004928 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b32      	cmp	r3, #50	; 0x32
 8004920:	d101      	bne.n	8004926 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004930:	b084      	sub	sp, #16
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800493e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e009      	b.n	8004964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3340      	adds	r3, #64	; 0x40
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	2200      	movs	r2, #0
 800495c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3301      	adds	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b0e      	cmp	r3, #14
 8004968:	d9f2      	bls.n	8004950 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d11c      	bne.n	80049aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497e:	f043 0302 	orr.w	r3, r3, #2
 8004982:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
 80049a8:	e00b      	b.n	80049c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	4619      	mov	r1, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049dc:	461a      	mov	r2, r3
 80049de:	680b      	ldr	r3, [r1, #0]
 80049e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10c      	bne.n	8004a02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ee:	2100      	movs	r1, #0
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f945 	bl	8004c80 <USB_SetDevSpeed>
 80049f6:	e008      	b.n	8004a0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049f8:	2101      	movs	r1, #1
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f940 	bl	8004c80 <USB_SetDevSpeed>
 8004a00:	e003      	b.n	8004a0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a02:	2103      	movs	r1, #3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f93b 	bl	8004c80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a0a:	2110      	movs	r1, #16
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f8f3 	bl	8004bf8 <USB_FlushTxFifo>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f90f 	bl	8004c40 <USB_FlushRxFifo>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	461a      	mov	r2, r3
 8004a34:	2300      	movs	r3, #0
 8004a36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2300      	movs	r3, #0
 8004a42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	e043      	b.n	8004ade <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a6c:	d118      	bne.n	8004aa0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	461a      	mov	r2, r3
 8004a82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e013      	b.n	8004ab2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	461a      	mov	r2, r3
 8004a98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e008      	b.n	8004ab2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	461a      	mov	r2, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3301      	adds	r3, #1
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3b7      	bcc.n	8004a56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e043      	b.n	8004b74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b02:	d118      	bne.n	8004b36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	461a      	mov	r2, r3
 8004b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e013      	b.n	8004b48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e008      	b.n	8004b48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	461a      	mov	r2, r3
 8004b68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3301      	adds	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d3b7      	bcc.n	8004aec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f043 0210 	orr.w	r2, r3, #16
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <USB_DevInit+0x2c4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f043 0208 	orr.w	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bf0:	b004      	add	sp, #16
 8004bf2:	4770      	bx	lr
 8004bf4:	803c3800 	.word	0x803c3800

08004bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3301      	adds	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <USB_FlushTxFifo+0x44>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e006      	b.n	8004c30 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d0f1      	beq.n	8004c12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	00030d40 	.word	0x00030d40

08004c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <USB_FlushRxFifo+0x3c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e006      	b.n	8004c70 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d0f1      	beq.n	8004c52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	00030d40 	.word	0x00030d40

08004c80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0306 	and.w	r3, r3, #6
 8004cca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	75fb      	strb	r3, [r7, #23]
 8004cd6:	e00a      	b.n	8004cee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d002      	beq.n	8004ce4 <USB_GetDevSpeed+0x32>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d102      	bne.n	8004cea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	75fb      	strb	r3, [r7, #23]
 8004ce8:	e001      	b.n	8004cee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cea:	230f      	movs	r3, #15
 8004cec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d13a      	bne.n	8004d8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d155      	bne.n	8004dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	78db      	ldrb	r3, [r3, #3]
 8004d6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	059b      	lsls	r3, r3, #22
 8004d72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d74:	4313      	orrs	r3, r2
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e036      	b.n	8004dfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2101      	movs	r1, #1
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11a      	bne.n	8004dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	78db      	ldrb	r3, [r3, #3]
 8004de0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004de2:	430b      	orrs	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d161      	bne.n	8004eec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3e:	d11f      	bne.n	8004e80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	2101      	movs	r1, #1
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	0159      	lsls	r1, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	440b      	add	r3, r1
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <USB_DeactivateEndpoint+0x1b0>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]
 8004eea:	e060      	b.n	8004fae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f02:	d11f      	bne.n	8004f44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2101      	movs	r1, #1
 8004f56:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f64:	4013      	ands	r3, r2
 8004f66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	440b      	add	r3, r1
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <USB_DeactivateEndpoint+0x1b4>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	ec337800 	.word	0xec337800
 8004fc0:	eff37800 	.word	0xeff37800

08004fc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f040 815c 	bne.w	800529e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d132      	bne.n	8005054 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800500c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504c:	0cdb      	lsrs	r3, r3, #19
 800504e:	04db      	lsls	r3, r3, #19
 8005050:	6113      	str	r3, [r2, #16]
 8005052:	e074      	b.n	800513e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	0cdb      	lsrs	r3, r3, #19
 8005070:	04db      	lsls	r3, r3, #19
 8005072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005092:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6959      	ldr	r1, [r3, #20]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	440b      	add	r3, r1
 80050b0:	1e59      	subs	r1, r3, #1
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050bc:	4b9d      	ldr	r3, [pc, #628]	; (8005334 <USB_EPStartXfer+0x370>)
 80050be:	400b      	ands	r3, r1
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	0148      	lsls	r0, r1, #5
 80050c4:	69f9      	ldr	r1, [r7, #28]
 80050c6:	4401      	add	r1, r0
 80050c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050cc:	4313      	orrs	r3, r2
 80050ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	0148      	lsls	r0, r1, #5
 80050ea:	69f9      	ldr	r1, [r7, #28]
 80050ec:	4401      	add	r1, r0
 80050ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d11f      	bne.n	800513e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005118:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800511c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800513c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d14b      	bne.n	80051dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	78db      	ldrb	r3, [r3, #3]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d128      	bne.n	80051ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d110      	bne.n	800519a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e00f      	b.n	80051ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e12f      	b.n	800543c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d015      	beq.n	8005230 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8117 	beq.w	800543c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800522a:	4313      	orrs	r3, r2
 800522c:	634b      	str	r3, [r1, #52]	; 0x34
 800522e:	e105      	b.n	800543c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e00f      	b.n	8005282 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68d9      	ldr	r1, [r3, #12]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	b298      	uxth	r0, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fa2b 	bl	80056f2 <USB_WritePacket>
 800529c:	e0ce      	b.n	800543c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b8:	0cdb      	lsrs	r3, r3, #19
 80052ba:	04db      	lsls	r3, r3, #19
 80052bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d126      	bne.n	8005338 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	0148      	lsls	r0, r1, #5
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	4401      	add	r1, r0
 8005308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800530c:	4313      	orrs	r3, r2
 800530e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800532e:	6113      	str	r3, [r2, #16]
 8005330:	e036      	b.n	80053a0 <USB_EPStartXfer+0x3dc>
 8005332:	bf00      	nop
 8005334:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4413      	add	r3, r2
 8005342:	1e5a      	subs	r2, r3, #1
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	8afb      	ldrh	r3, [r7, #22]
 800535e:	04d9      	lsls	r1, r3, #19
 8005360:	4b39      	ldr	r3, [pc, #228]	; (8005448 <USB_EPStartXfer+0x484>)
 8005362:	400b      	ands	r3, r1
 8005364:	69b9      	ldr	r1, [r7, #24]
 8005366:	0148      	lsls	r0, r1, #5
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	4401      	add	r1, r0
 800536c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005370:	4313      	orrs	r3, r2
 8005372:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	8af9      	ldrh	r1, [r7, #22]
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	0148      	lsls	r0, r1, #5
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	4401      	add	r1, r0
 8005398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800539c:	4313      	orrs	r3, r2
 800539e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d10d      	bne.n	80053c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	68d9      	ldr	r1, [r3, #12]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	460a      	mov	r2, r1
 80053c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	78db      	ldrb	r3, [r3, #3]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d128      	bne.n	800541c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d110      	bne.n	80053fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e00f      	b.n	800541c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	440a      	add	r2, r1
 8005432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800543a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	1ff80000 	.word	0x1ff80000

0800544c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 80cd 	bne.w	8005608 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d132      	bne.n	80054dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005490:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005494:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005498:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d4:	0cdb      	lsrs	r3, r3, #19
 80054d6:	04db      	lsls	r3, r3, #19
 80054d8:	6113      	str	r3, [r2, #16]
 80054da:	e04e      	b.n	800557a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	0cdb      	lsrs	r3, r3, #19
 80054f8:	04db      	lsls	r3, r3, #19
 80054fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005516:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800551a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800551e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	d903      	bls.n	8005534 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005552:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556a:	6939      	ldr	r1, [r7, #16]
 800556c:	0148      	lsls	r0, r1, #5
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	4401      	add	r1, r0
 8005572:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d11e      	bne.n	80055be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e092      	b.n	80056e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d07e      	beq.n	80056e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	2101      	movs	r1, #1
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	6979      	ldr	r1, [r7, #20]
 80055fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005602:	4313      	orrs	r3, r2
 8005604:	634b      	str	r3, [r1, #52]	; 0x34
 8005606:	e06d      	b.n	80056e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005622:	0cdb      	lsrs	r3, r3, #19
 8005624:	04db      	lsls	r3, r3, #19
 8005626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005642:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005646:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800564a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800567a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005692:	6939      	ldr	r1, [r7, #16]
 8005694:	0148      	lsls	r0, r1, #5
 8005696:	6979      	ldr	r1, [r7, #20]
 8005698:	4401      	add	r1, r0
 800569a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800569e:	4313      	orrs	r3, r2
 80056a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10d      	bne.n	80056c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	68d9      	ldr	r1, [r3, #12]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	460a      	mov	r2, r1
 80056c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b089      	sub	sp, #36	; 0x24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	4611      	mov	r1, r2
 80056fe:	461a      	mov	r2, r3
 8005700:	460b      	mov	r3, r1
 8005702:	71fb      	strb	r3, [r7, #7]
 8005704:	4613      	mov	r3, r2
 8005706:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005710:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005714:	2b00      	cmp	r3, #0
 8005716:	d123      	bne.n	8005760 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005718:	88bb      	ldrh	r3, [r7, #4]
 800571a:	3303      	adds	r3, #3
 800571c:	089b      	lsrs	r3, r3, #2
 800571e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e018      	b.n	8005758 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	031a      	lsls	r2, r3, #12
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4413      	add	r3, r2
 800572e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005732:	461a      	mov	r2, r3
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6013      	str	r3, [r2, #0]
      pSrc++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3301      	adds	r3, #1
 800574a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3301      	adds	r3, #1
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	d3e2      	bcc.n	8005726 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800576e:	b480      	push	{r7}
 8005770:	b08b      	sub	sp, #44	; 0x2c
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	b29b      	uxth	r3, r3
 800578a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005794:	2300      	movs	r3, #0
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	e014      	b.n	80057c4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	601a      	str	r2, [r3, #0]
    pDest++;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	3301      	adds	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	3301      	adds	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	3301      	adds	r3, #1
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	3301      	adds	r3, #1
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	3301      	adds	r3, #1
 80057c2:	623b      	str	r3, [r7, #32]
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d3e6      	bcc.n	800579a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057cc:	8bfb      	ldrh	r3, [r7, #30]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01e      	beq.n	8005810 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057dc:	461a      	mov	r2, r3
 80057de:	f107 0310 	add.w	r3, r7, #16
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	701a      	strb	r2, [r3, #0]
      i++;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	3301      	adds	r3, #1
 80057fc:	623b      	str	r3, [r7, #32]
      pDest++;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	3301      	adds	r3, #1
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005804:	8bfb      	ldrh	r3, [r7, #30]
 8005806:	3b01      	subs	r3, #1
 8005808:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800580a:	8bfb      	ldrh	r3, [r7, #30]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ea      	bne.n	80057e6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005812:	4618      	mov	r0, r3
 8005814:	372c      	adds	r7, #44	; 0x2c
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d12c      	bne.n	8005894 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	db12      	blt.n	8005872 <USB_EPSetStall+0x54>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00f      	beq.n	8005872 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005870:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e02b      	b.n	80058ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	db12      	blt.n	80058cc <USB_EPSetStall+0xae>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00f      	beq.n	80058cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d128      	bne.n	8005968 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005934:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	78db      	ldrb	r3, [r3, #3]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d003      	beq.n	8005946 <USB_EPClearStall+0x4c>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	78db      	ldrb	r3, [r3, #3]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d138      	bne.n	80059b8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	e027      	b.n	80059b8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005982:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005986:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d003      	beq.n	8005998 <USB_EPClearStall+0x9e>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	78db      	ldrb	r3, [r3, #3]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d10f      	bne.n	80059b8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a2c:	f023 0303 	bic.w	r3, r3, #3
 8005a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a40:	f023 0302 	bic.w	r3, r3, #2
 8005a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a82:	f043 0302 	orr.w	r3, r3, #2
 8005a86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005aae:	68fb      	ldr	r3, [r7, #12]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4013      	ands	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	0c1b      	lsrs	r3, r3, #16
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4013      	ands	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	b29b      	uxth	r3, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b52:	68bb      	ldr	r3, [r7, #8]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	01db      	lsls	r3, r3, #7
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4013      	ands	r3, r2
 8005bac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bae:	68bb      	ldr	r3, [r7, #8]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	333c      	adds	r3, #60	; 0x3c
 8005c36:	3304      	adds	r3, #4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <USB_EP0_OutStart+0xb8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d90a      	bls.n	8005c5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c54:	d101      	bne.n	8005c5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e037      	b.n	8005cca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	461a      	mov	r2, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f043 0318 	orr.w	r3, r3, #24
 8005c8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ca0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d10f      	bne.n	8005cc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	461a      	mov	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	4f54300a 	.word	0x4f54300a

08005cdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <USB_CoreReset+0x60>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d901      	bls.n	8005cf8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e01a      	b.n	8005d2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	daf3      	bge.n	8005ce8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f043 0201 	orr.w	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <USB_CoreReset+0x60>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e006      	b.n	8005d2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d0f1      	beq.n	8005d10 <USB_CoreReset+0x34>

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	00030d40 	.word	0x00030d40

08005d40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d50:	f002 f8fc 	bl	8007f4c <USBD_static_malloc>
 8005d54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d64:	2302      	movs	r3, #2
 8005d66:	e066      	b.n	8005e36 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	7c1b      	ldrb	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d119      	bne.n	8005dac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	2181      	movs	r1, #129	; 0x81
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 ffc0 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d90:	2202      	movs	r2, #2
 8005d92:	2101      	movs	r1, #1
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 ffb6 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2210      	movs	r2, #16
 8005da6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005daa:	e016      	b.n	8005dda <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dac:	2340      	movs	r3, #64	; 0x40
 8005dae:	2202      	movs	r2, #2
 8005db0:	2181      	movs	r1, #129	; 0x81
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 ffa7 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 ff9e 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dda:	2308      	movs	r3, #8
 8005ddc:	2203      	movs	r2, #3
 8005dde:	2182      	movs	r1, #130	; 0x82
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 ff90 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7c1b      	ldrb	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 f861 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8005e22:	e007      	b.n	8005e34 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e2a:	2340      	movs	r3, #64	; 0x40
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f002 f858 	bl	8007ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e4a:	2181      	movs	r1, #129	; 0x81
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 ff80 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e58:	2101      	movs	r1, #1
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 ff79 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e68:	2182      	movs	r1, #130	; 0x82
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 ff71 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00e      	beq.n	8005ea8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f002 f864 	bl	8007f68 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e0af      	b.n	800603c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d03f      	beq.n	8005f68 <USBD_CDC_Setup+0xb4>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	f040 809f 	bne.w	800602c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	88db      	ldrh	r3, [r3, #6]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d02e      	beq.n	8005f54 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	b25b      	sxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da16      	bge.n	8005f2e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005f0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	88d2      	ldrh	r2, [r2, #6]
 8005f12:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	88db      	ldrh	r3, [r3, #6]
 8005f18:	2b07      	cmp	r3, #7
 8005f1a:	bf28      	it	cs
 8005f1c:	2307      	movcs	r3, #7
 8005f1e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	89fa      	ldrh	r2, [r7, #14]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fae9 	bl	80074fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005f2c:	e085      	b.n	800603a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	785a      	ldrb	r2, [r3, #1]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	88db      	ldrh	r3, [r3, #6]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f44:	6939      	ldr	r1, [r7, #16]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	88db      	ldrh	r3, [r3, #6]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 fb02 	bl	8007556 <USBD_CtlPrepareRx>
      break;
 8005f52:	e072      	b.n	800603a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	7850      	ldrb	r0, [r2, #1]
 8005f60:	2200      	movs	r2, #0
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	4798      	blx	r3
      break;
 8005f66:	e068      	b.n	800603a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	2b0b      	cmp	r3, #11
 8005f6e:	d852      	bhi.n	8006016 <USBD_CDC_Setup+0x162>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <USBD_CDC_Setup+0xc4>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005fa9 	.word	0x08005fa9
 8005f7c:	08006025 	.word	0x08006025
 8005f80:	08006017 	.word	0x08006017
 8005f84:	08006017 	.word	0x08006017
 8005f88:	08006017 	.word	0x08006017
 8005f8c:	08006017 	.word	0x08006017
 8005f90:	08006017 	.word	0x08006017
 8005f94:	08006017 	.word	0x08006017
 8005f98:	08006017 	.word	0x08006017
 8005f9c:	08006017 	.word	0x08006017
 8005fa0:	08005fd3 	.word	0x08005fd3
 8005fa4:	08005ffd 	.word	0x08005ffd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d107      	bne.n	8005fc4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005fb4:	f107 030a 	add.w	r3, r7, #10
 8005fb8:	2202      	movs	r2, #2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fa9e 	bl	80074fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fc2:	e032      	b.n	800602a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fa28 	bl	800741c <USBD_CtlError>
            ret = USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd0:	e02b      	b.n	800602a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d107      	bne.n	8005fee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fde:	f107 030d 	add.w	r3, r7, #13
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 fa89 	bl	80074fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fec:	e01d      	b.n	800602a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fa13 	bl	800741c <USBD_CtlError>
            ret = USBD_FAIL;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8005ffa:	e016      	b.n	800602a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b03      	cmp	r3, #3
 8006006:	d00f      	beq.n	8006028 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 fa06 	bl	800741c <USBD_CtlError>
            ret = USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006014:	e008      	b.n	8006028 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 f9ff 	bl	800741c <USBD_CtlError>
          ret = USBD_FAIL;
 800601e:	2303      	movs	r3, #3
 8006020:	75fb      	strb	r3, [r7, #23]
          break;
 8006022:	e002      	b.n	800602a <USBD_CDC_Setup+0x176>
          break;
 8006024:	bf00      	nop
 8006026:	e008      	b.n	800603a <USBD_CDC_Setup+0x186>
          break;
 8006028:	bf00      	nop
      }
      break;
 800602a:	e006      	b.n	800603a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f9f4 	bl	800741c <USBD_CtlError>
      ret = USBD_FAIL;
 8006034:	2303      	movs	r3, #3
 8006036:	75fb      	strb	r3, [r7, #23]
      break;
 8006038:	bf00      	nop
  }

  return (uint8_t)ret;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006056:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006062:	2303      	movs	r3, #3
 8006064:	e04f      	b.n	8006106 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800606c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	3318      	adds	r3, #24
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d029      	beq.n	80060d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	3318      	adds	r3, #24
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	78f9      	ldrb	r1, [r7, #3]
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	460b      	mov	r3, r1
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	1a5b      	subs	r3, r3, r1
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4403      	add	r3, r0
 80060a4:	3344      	adds	r3, #68	; 0x44
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80060ac:	fb03 f301 	mul.w	r3, r3, r1
 80060b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d110      	bne.n	80060d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3318      	adds	r3, #24
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060ca:	78f9      	ldrb	r1, [r7, #3]
 80060cc:	2300      	movs	r3, #0
 80060ce:	2200      	movs	r2, #0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 fee6 	bl	8007ea2 <USBD_LL_Transmit>
 80060d6:	e015      	b.n	8006104 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006120:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800612c:	2303      	movs	r3, #3
 800612e:	e015      	b.n	800615c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fef6 	bl	8007f26 <USBD_LL_GetRxDataSize>
 800613a:	4602      	mov	r2, r0
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006156:	4611      	mov	r1, r2
 8006158:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006172:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800617a:	2303      	movs	r3, #3
 800617c:	e01b      	b.n	80061b6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <USBD_CDC_EP0_RxReady+0x50>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800618e:	2bff      	cmp	r3, #255	; 0xff
 8006190:	d010      	beq.n	80061b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80061a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061a8:	b292      	uxth	r2, r2
 80061aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	22ff      	movs	r2, #255	; 0xff
 80061b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2243      	movs	r2, #67	; 0x43
 80061cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80061ce:	4b03      	ldr	r3, [pc, #12]	; (80061dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	2000010c 	.word	0x2000010c

080061e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2243      	movs	r2, #67	; 0x43
 80061ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80061ee:	4b03      	ldr	r3, [pc, #12]	; (80061fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	200000c8 	.word	0x200000c8

08006200 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2243      	movs	r2, #67	; 0x43
 800620c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800620e:	4b03      	ldr	r3, [pc, #12]	; (800621c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20000150 	.word	0x20000150

08006220 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	220a      	movs	r2, #10
 800622c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800622e:	4b03      	ldr	r3, [pc, #12]	; (800623c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20000084 	.word	0x20000084

08006240 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006250:	2303      	movs	r3, #3
 8006252:	e004      	b.n	800625e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800626a:	b480      	push	{r7}
 800626c:	b087      	sub	sp, #28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800627c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006284:	2303      	movs	r3, #3
 8006286:	e008      	b.n	800629a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80062be:	2303      	movs	r3, #3
 80062c0:	e004      	b.n	80062cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e016      	b.n	8006324 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7c1b      	ldrb	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006308:	2101      	movs	r1, #1
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 fdea 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8006310:	e007      	b.n	8006322 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	2101      	movs	r1, #1
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fde1 	bl	8007ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006340:	2303      	movs	r3, #3
 8006342:	e01f      	b.n	8006384 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	79fa      	ldrb	r2, [r7, #7]
 8006376:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f001 fc5d 	bl	8007c38 <USBD_LL_Init>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006382:	7dfb      	ldrb	r3, [r7, #23]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e016      	b.n	80063d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	f107 020e 	add.w	r2, r7, #14
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
 80063c8:	4602      	mov	r2, r0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fc74 	bl	8007cd0 <USBD_LL_Start>
 80063e8:	4603      	mov	r3, r0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006414:	2303      	movs	r3, #3
 8006416:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	4611      	mov	r1, r2
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	4611      	mov	r1, r2
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
  }

  return USBD_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 ff90 	bl	80073a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d01a      	beq.n	80064e2 <USBD_LL_SetupStage+0x72>
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d822      	bhi.n	80064f6 <USBD_LL_SetupStage+0x86>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <USBD_LL_SetupStage+0x4a>
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d00a      	beq.n	80064ce <USBD_LL_SetupStage+0x5e>
 80064b8:	e01d      	b.n	80064f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa62 	bl	800698c <USBD_StdDevReq>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]
      break;
 80064cc:	e020      	b.n	8006510 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fac6 	bl	8006a68 <USBD_StdItfReq>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
      break;
 80064e0:	e016      	b.n	8006510 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb05 	bl	8006afa <USBD_StdEPReq>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]
      break;
 80064f4:	e00c      	b.n	8006510 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006500:	b2db      	uxtb	r3, r3
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fc43 	bl	8007d90 <USBD_LL_StallEP>
 800650a:	4603      	mov	r3, r0
 800650c:	73fb      	strb	r3, [r7, #15]
      break;
 800650e:	bf00      	nop
  }

  return ret;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	460b      	mov	r3, r1
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006528:	7afb      	ldrb	r3, [r7, #11]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d138      	bne.n	80065a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006534:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800653c:	2b03      	cmp	r3, #3
 800653e:	d14a      	bne.n	80065d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	429a      	cmp	r2, r3
 800654a:	d913      	bls.n	8006574 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	1ad2      	subs	r2, r2, r3
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	4293      	cmp	r3, r2
 8006564:	bf28      	it	cs
 8006566:	4613      	movcs	r3, r2
 8006568:	461a      	mov	r2, r3
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f001 f80f 	bl	8007590 <USBD_CtlContinueRx>
 8006572:	e030      	b.n	80065d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b03      	cmp	r3, #3
 800657e:	d10b      	bne.n	8006598 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f001 f80a 	bl	80075b2 <USBD_CtlSendStatus>
 800659e:	e01a      	b.n	80065d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d114      	bne.n	80065d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00e      	beq.n	80065d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	7afa      	ldrb	r2, [r7, #11]
 80065c2:	4611      	mov	r1, r2
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	4798      	blx	r3
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	e000      	b.n	80065d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	460b      	mov	r3, r1
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d16b      	bne.n	80066cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3314      	adds	r3, #20
 80065f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006600:	2b02      	cmp	r3, #2
 8006602:	d156      	bne.n	80066b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d914      	bls.n	800663a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	1ad2      	subs	r2, r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	461a      	mov	r2, r3
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 ff84 	bl	8007534 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800662c:	2300      	movs	r3, #0
 800662e:	2200      	movs	r2, #0
 8006630:	2100      	movs	r1, #0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f001 fc56 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8006638:	e03b      	b.n	80066b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	429a      	cmp	r2, r3
 8006644:	d11c      	bne.n	8006680 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800664e:	429a      	cmp	r2, r3
 8006650:	d316      	bcc.n	8006680 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800665c:	429a      	cmp	r2, r3
 800665e:	d20f      	bcs.n	8006680 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006660:	2200      	movs	r2, #0
 8006662:	2100      	movs	r1, #0
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 ff65 	bl	8007534 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006672:	2300      	movs	r3, #0
 8006674:	2200      	movs	r2, #0
 8006676:	2100      	movs	r1, #0
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f001 fc33 	bl	8007ee4 <USBD_LL_PrepareReceive>
 800667e:	e018      	b.n	80066b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b03      	cmp	r3, #3
 800668a:	d10b      	bne.n	80066a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066a4:	2180      	movs	r1, #128	; 0x80
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f001 fb72 	bl	8007d90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 ff93 	bl	80075d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d122      	bne.n	8006702 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fe98 	bl	80063f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066ca:	e01a      	b.n	8006702 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d114      	bne.n	8006702 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	7afa      	ldrb	r2, [r7, #11]
 80066ee:	4611      	mov	r1, r2
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	4798      	blx	r3
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	e000      	b.n	8006704 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	e02f      	b.n	80067a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00f      	beq.n	800676a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6852      	ldr	r2, [r2, #4]
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	4611      	mov	r1, r2
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800676a:	2340      	movs	r3, #64	; 0x40
 800676c:	2200      	movs	r2, #0
 800676e:	2100      	movs	r1, #0
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 fac8 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2240      	movs	r2, #64	; 0x40
 8006782:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006786:	2340      	movs	r3, #64	; 0x40
 8006788:	2200      	movs	r2, #0
 800678a:	2180      	movs	r1, #128	; 0x80
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 faba 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2204      	movs	r2, #4
 80067e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b04      	cmp	r3, #4
 8006806:	d106      	bne.n	8006816 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800680e:	b2da      	uxtb	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006836:	2303      	movs	r3, #3
 8006838:	e012      	b.n	8006860 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b03      	cmp	r3, #3
 8006844:	d10b      	bne.n	800685e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800687e:	2303      	movs	r3, #3
 8006880:	e014      	b.n	80068ac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b03      	cmp	r3, #3
 800688c:	d10d      	bne.n	80068aa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	4611      	mov	r1, r2
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e014      	b.n	80068f8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d10d      	bne.n	80068f6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6852      	ldr	r2, [r2, #4]
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	4611      	mov	r1, r2
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
  }

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800694e:	b480      	push	{r7}
 8006950:	b087      	sub	sp, #28
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3301      	adds	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800696c:	8a3b      	ldrh	r3, [r7, #16]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	b21a      	sxth	r2, r3
 8006972:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006976:	4313      	orrs	r3, r2
 8006978:	b21b      	sxth	r3, r3
 800697a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800697c:	89fb      	ldrh	r3, [r7, #14]
}
 800697e:	4618      	mov	r0, r3
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d005      	beq.n	80069b2 <USBD_StdDevReq+0x26>
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d853      	bhi.n	8006a52 <USBD_StdDevReq+0xc6>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <USBD_StdDevReq+0x3a>
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d14f      	bne.n	8006a52 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
      break;
 80069c4:	e04a      	b.n	8006a5c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b09      	cmp	r3, #9
 80069cc:	d83b      	bhi.n	8006a46 <USBD_StdDevReq+0xba>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <USBD_StdDevReq+0x48>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	08006a3d 	.word	0x08006a3d
 80069dc:	08006a47 	.word	0x08006a47
 80069e0:	08006a33 	.word	0x08006a33
 80069e4:	08006a47 	.word	0x08006a47
 80069e8:	08006a07 	.word	0x08006a07
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a47 	.word	0x08006a47
 80069f4:	08006a1f 	.word	0x08006a1f
 80069f8:	08006a11 	.word	0x08006a11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9de 	bl	8006dc0 <USBD_GetDescriptor>
          break;
 8006a04:	e024      	b.n	8006a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fb43 	bl	8007094 <USBD_SetAddress>
          break;
 8006a0e:	e01f      	b.n	8006a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fb82 	bl	800711c <USBD_SetConfig>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a1c:	e018      	b.n	8006a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fc21 	bl	8007268 <USBD_GetConfig>
          break;
 8006a26:	e013      	b.n	8006a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fc52 	bl	80072d4 <USBD_GetStatus>
          break;
 8006a30:	e00e      	b.n	8006a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc81 	bl	800733c <USBD_SetFeature>
          break;
 8006a3a:	e009      	b.n	8006a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fc90 	bl	8007364 <USBD_ClrFeature>
          break;
 8006a44:	e004      	b.n	8006a50 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fce7 	bl	800741c <USBD_CtlError>
          break;
 8006a4e:	bf00      	nop
      }
      break;
 8006a50:	e004      	b.n	8006a5c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fce1 	bl	800741c <USBD_CtlError>
      break;
 8006a5a:	bf00      	nop
  }

  return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop

08006a68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d005      	beq.n	8006a8e <USBD_StdItfReq+0x26>
 8006a82:	2b40      	cmp	r3, #64	; 0x40
 8006a84:	d82f      	bhi.n	8006ae6 <USBD_StdItfReq+0x7e>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <USBD_StdItfReq+0x26>
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d12b      	bne.n	8006ae6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d81d      	bhi.n	8006ad8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	889b      	ldrh	r3, [r3, #4]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d813      	bhi.n	8006ace <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	88db      	ldrh	r3, [r3, #6]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d110      	bne.n	8006ae2 <USBD_StdItfReq+0x7a>
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10d      	bne.n	8006ae2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fd73 	bl	80075b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006acc:	e009      	b.n	8006ae2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fca3 	bl	800741c <USBD_CtlError>
          break;
 8006ad6:	e004      	b.n	8006ae2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fc9e 	bl	800741c <USBD_CtlError>
          break;
 8006ae0:	e000      	b.n	8006ae4 <USBD_StdItfReq+0x7c>
          break;
 8006ae2:	bf00      	nop
      }
      break;
 8006ae4:	e004      	b.n	8006af0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc97 	bl	800741c <USBD_CtlError>
      break;
 8006aee:	bf00      	nop
  }

  return ret;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	889b      	ldrh	r3, [r3, #4]
 8006b0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d007      	beq.n	8006b2a <USBD_StdEPReq+0x30>
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	f200 8145 	bhi.w	8006daa <USBD_StdEPReq+0x2b0>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <USBD_StdEPReq+0x44>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	f040 8140 	bne.w	8006daa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3c:	e13a      	b.n	8006db4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d007      	beq.n	8006b56 <USBD_StdEPReq+0x5c>
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	f300 8129 	bgt.w	8006d9e <USBD_StdEPReq+0x2a4>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d07f      	beq.n	8006c50 <USBD_StdEPReq+0x156>
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d03c      	beq.n	8006bce <USBD_StdEPReq+0xd4>
 8006b54:	e123      	b.n	8006d9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d002      	beq.n	8006b68 <USBD_StdEPReq+0x6e>
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d016      	beq.n	8006b94 <USBD_StdEPReq+0x9a>
 8006b66:	e02c      	b.n	8006bc2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <USBD_StdEPReq+0x90>
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d00a      	beq.n	8006b8a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f909 	bl	8007d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f905 	bl	8007d90 <USBD_LL_StallEP>
 8006b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b88:	e020      	b.n	8006bcc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc45 	bl	800741c <USBD_CtlError>
              break;
 8006b92:	e01b      	b.n	8006bcc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	885b      	ldrh	r3, [r3, #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10e      	bne.n	8006bba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <USBD_StdEPReq+0xc0>
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d008      	beq.n	8006bba <USBD_StdEPReq+0xc0>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f8eb 	bl	8007d90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fcf9 	bl	80075b2 <USBD_CtlSendStatus>

              break;
 8006bc0:	e004      	b.n	8006bcc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc29 	bl	800741c <USBD_CtlError>
              break;
 8006bca:	bf00      	nop
          }
          break;
 8006bcc:	e0ec      	b.n	8006da8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d002      	beq.n	8006be0 <USBD_StdEPReq+0xe6>
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d016      	beq.n	8006c0c <USBD_StdEPReq+0x112>
 8006bde:	e030      	b.n	8006c42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <USBD_StdEPReq+0x108>
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b80      	cmp	r3, #128	; 0x80
 8006bea:	d00a      	beq.n	8006c02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f8cd 	bl	8007d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bf6:	2180      	movs	r1, #128	; 0x80
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f8c9 	bl	8007d90 <USBD_LL_StallEP>
 8006bfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c00:	e025      	b.n	8006c4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc09 	bl	800741c <USBD_CtlError>
              break;
 8006c0a:	e020      	b.n	8006c4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	885b      	ldrh	r3, [r3, #2]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d11b      	bne.n	8006c4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 f8d3 	bl	8007dce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fcc2 	bl	80075b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c40:	e004      	b.n	8006c4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fbe9 	bl	800741c <USBD_CtlError>
              break;
 8006c4a:	e000      	b.n	8006c4e <USBD_StdEPReq+0x154>
              break;
 8006c4c:	bf00      	nop
          }
          break;
 8006c4e:	e0ab      	b.n	8006da8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d002      	beq.n	8006c62 <USBD_StdEPReq+0x168>
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d032      	beq.n	8006cc6 <USBD_StdEPReq+0x1cc>
 8006c60:	e097      	b.n	8006d92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <USBD_StdEPReq+0x17e>
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b80      	cmp	r3, #128	; 0x80
 8006c6c:	d004      	beq.n	8006c78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fbd3 	bl	800741c <USBD_CtlError>
                break;
 8006c76:	e091      	b.n	8006d9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	da0b      	bge.n	8006c98 <USBD_StdEPReq+0x19e>
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	3310      	adds	r3, #16
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	3304      	adds	r3, #4
 8006c96:	e00b      	b.n	8006cb0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	3304      	adds	r3, #4
 8006cb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fc1d 	bl	80074fe <USBD_CtlSendData>
              break;
 8006cc4:	e06a      	b.n	8006d9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da11      	bge.n	8006cf2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	3324      	adds	r3, #36	; 0x24
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d117      	bne.n	8006d18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fb96 	bl	800741c <USBD_CtlError>
                  break;
 8006cf0:	e054      	b.n	8006d9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	f003 020f 	and.w	r2, r3, #15
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fb83 	bl	800741c <USBD_CtlError>
                  break;
 8006d16:	e041      	b.n	8006d9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da0b      	bge.n	8006d38 <USBD_StdEPReq+0x23e>
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	3310      	adds	r3, #16
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	3304      	adds	r3, #4
 8006d36:	e00b      	b.n	8006d50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3304      	adds	r3, #4
 8006d50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <USBD_StdEPReq+0x264>
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b80      	cmp	r3, #128	; 0x80
 8006d5c:	d103      	bne.n	8006d66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e00e      	b.n	8006d84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 f84e 	bl	8007e0c <USBD_LL_IsStallEP>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2202      	movs	r2, #2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fbb7 	bl	80074fe <USBD_CtlSendData>
              break;
 8006d90:	e004      	b.n	8006d9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fb41 	bl	800741c <USBD_CtlError>
              break;
 8006d9a:	bf00      	nop
          }
          break;
 8006d9c:	e004      	b.n	8006da8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb3b 	bl	800741c <USBD_CtlError>
          break;
 8006da6:	bf00      	nop
      }
      break;
 8006da8:	e004      	b.n	8006db4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fb35 	bl	800741c <USBD_CtlError>
      break;
 8006db2:	bf00      	nop
  }

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	2b06      	cmp	r3, #6
 8006de2:	f200 8128 	bhi.w	8007036 <USBD_GetDescriptor+0x276>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <USBD_GetDescriptor+0x2c>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e09 	.word	0x08006e09
 8006df0:	08006e21 	.word	0x08006e21
 8006df4:	08006e61 	.word	0x08006e61
 8006df8:	08007037 	.word	0x08007037
 8006dfc:	08007037 	.word	0x08007037
 8006e00:	08006fd7 	.word	0x08006fd7
 8006e04:	08007003 	.word	0x08007003
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
      break;
 8006e1e:	e112      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7c1b      	ldrb	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10d      	bne.n	8006e44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f107 0208 	add.w	r2, r7, #8
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	2202      	movs	r2, #2
 8006e40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e42:	e100      	b.n	8007046 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	f107 0208 	add.w	r2, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	701a      	strb	r2, [r3, #0]
      break;
 8006e5e:	e0f2      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	885b      	ldrh	r3, [r3, #2]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	f200 80ac 	bhi.w	8006fc4 <USBD_GetDescriptor+0x204>
 8006e6c:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <USBD_GetDescriptor+0xb4>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006e8d 	.word	0x08006e8d
 8006e78:	08006ec1 	.word	0x08006ec1
 8006e7c:	08006ef5 	.word	0x08006ef5
 8006e80:	08006f29 	.word	0x08006f29
 8006e84:	08006f5d 	.word	0x08006f5d
 8006e88:	08006f91 	.word	0x08006f91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7c12      	ldrb	r2, [r2, #16]
 8006ea4:	f107 0108 	add.w	r1, r7, #8
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4798      	blx	r3
 8006eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eae:	e091      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fab2 	bl	800741c <USBD_CtlError>
            err++;
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ebe:	e089      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	7c12      	ldrb	r2, [r2, #16]
 8006ed8:	f107 0108 	add.w	r1, r7, #8
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
 8006ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee2:	e077      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa98 	bl	800741c <USBD_CtlError>
            err++;
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef2:	e06f      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	7c12      	ldrb	r2, [r2, #16]
 8006f0c:	f107 0108 	add.w	r1, r7, #8
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
 8006f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f16:	e05d      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa7e 	bl	800741c <USBD_CtlError>
            err++;
 8006f20:	7afb      	ldrb	r3, [r7, #11]
 8006f22:	3301      	adds	r3, #1
 8006f24:	72fb      	strb	r3, [r7, #11]
          break;
 8006f26:	e055      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7c12      	ldrb	r2, [r2, #16]
 8006f40:	f107 0108 	add.w	r1, r7, #8
 8006f44:	4610      	mov	r0, r2
 8006f46:	4798      	blx	r3
 8006f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f4a:	e043      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fa64 	bl	800741c <USBD_CtlError>
            err++;
 8006f54:	7afb      	ldrb	r3, [r7, #11]
 8006f56:	3301      	adds	r3, #1
 8006f58:	72fb      	strb	r3, [r7, #11]
          break;
 8006f5a:	e03b      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	7c12      	ldrb	r2, [r2, #16]
 8006f74:	f107 0108 	add.w	r1, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7e:	e029      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa4a 	bl	800741c <USBD_CtlError>
            err++;
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8e:	e021      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	7c12      	ldrb	r2, [r2, #16]
 8006fa8:	f107 0108 	add.w	r1, r7, #8
 8006fac:	4610      	mov	r0, r2
 8006fae:	4798      	blx	r3
 8006fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fb2:	e00f      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa30 	bl	800741c <USBD_CtlError>
            err++;
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fc2:	e007      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa28 	bl	800741c <USBD_CtlError>
          err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006fd2:	bf00      	nop
      }
      break;
 8006fd4:	e037      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7c1b      	ldrb	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	f107 0208 	add.w	r2, r7, #8
 8006fea:	4610      	mov	r0, r2
 8006fec:	4798      	blx	r3
 8006fee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ff0:	e029      	b.n	8007046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa11 	bl	800741c <USBD_CtlError>
        err++;
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8007000:	e021      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7c1b      	ldrb	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10d      	bne.n	8007026 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f107 0208 	add.w	r2, r7, #8
 8007016:	4610      	mov	r0, r2
 8007018:	4798      	blx	r3
 800701a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	2207      	movs	r2, #7
 8007022:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007024:	e00f      	b.n	8007046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f9f7 	bl	800741c <USBD_CtlError>
        err++;
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	3301      	adds	r3, #1
 8007032:	72fb      	strb	r3, [r7, #11]
      break;
 8007034:	e007      	b.n	8007046 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9ef 	bl	800741c <USBD_CtlError>
      err++;
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	3301      	adds	r3, #1
 8007042:	72fb      	strb	r3, [r7, #11]
      break;
 8007044:	bf00      	nop
  }

  if (err != 0U)
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11e      	bne.n	800708a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	88db      	ldrh	r3, [r3, #6]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d016      	beq.n	8007082 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007054:	893b      	ldrh	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88da      	ldrh	r2, [r3, #6]
 800705e:	893b      	ldrh	r3, [r7, #8]
 8007060:	4293      	cmp	r3, r2
 8007062:	bf28      	it	cs
 8007064:	4613      	movcs	r3, r2
 8007066:	b29b      	uxth	r3, r3
 8007068:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800706a:	893b      	ldrh	r3, [r7, #8]
 800706c:	461a      	mov	r2, r3
 800706e:	68f9      	ldr	r1, [r7, #12]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fa44 	bl	80074fe <USBD_CtlSendData>
 8007076:	e009      	b.n	800708c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9ce 	bl	800741c <USBD_CtlError>
 8007080:	e004      	b.n	800708c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa95 	bl	80075b2 <USBD_CtlSendStatus>
 8007088:	e000      	b.n	800708c <USBD_GetDescriptor+0x2cc>
    return;
 800708a:	bf00      	nop
  }
}
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop

08007094 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	889b      	ldrh	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d131      	bne.n	800710a <USBD_SetAddress+0x76>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d12d      	bne.n	800710a <USBD_SetAddress+0x76>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	885b      	ldrh	r3, [r3, #2]
 80070b2:	2b7f      	cmp	r3, #127	; 0x7f
 80070b4:	d829      	bhi.n	800710a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d104      	bne.n	80070d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9a3 	bl	800741c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d6:	e01d      	b.n	8007114 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 febd 	bl	8007e64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa61 	bl	80075b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	e009      	b.n	8007114 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007108:	e004      	b.n	8007114 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f985 	bl	800741c <USBD_CtlError>
  }
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	885b      	ldrh	r3, [r3, #2]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	4b4c      	ldr	r3, [pc, #304]	; (8007264 <USBD_SetConfig+0x148>)
 8007132:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007134:	4b4b      	ldr	r3, [pc, #300]	; (8007264 <USBD_SetConfig+0x148>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d905      	bls.n	8007148 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f96c 	bl	800741c <USBD_CtlError>
    return USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	e088      	b.n	800725a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d002      	beq.n	800715a <USBD_SetConfig+0x3e>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d025      	beq.n	80071a4 <USBD_SetConfig+0x88>
 8007158:	e071      	b.n	800723e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800715a:	4b42      	ldr	r3, [pc, #264]	; (8007264 <USBD_SetConfig+0x148>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01c      	beq.n	800719c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007162:	4b40      	ldr	r3, [pc, #256]	; (8007264 <USBD_SetConfig+0x148>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800716c:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <USBD_SetConfig+0x148>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff f948 	bl	8006408 <USBD_SetClassConfig>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f949 	bl	800741c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800718a:	e065      	b.n	8007258 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa10 	bl	80075b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2203      	movs	r2, #3
 8007196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800719a:	e05d      	b.n	8007258 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa08 	bl	80075b2 <USBD_CtlSendStatus>
      break;
 80071a2:	e059      	b.n	8007258 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071a4:	4b2f      	ldr	r3, [pc, #188]	; (8007264 <USBD_SetConfig+0x148>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d112      	bne.n	80071d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071b4:	4b2b      	ldr	r3, [pc, #172]	; (8007264 <USBD_SetConfig+0x148>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071be:	4b29      	ldr	r3, [pc, #164]	; (8007264 <USBD_SetConfig+0x148>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff f93b 	bl	8006440 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f9f1 	bl	80075b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071d0:	e042      	b.n	8007258 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80071d2:	4b24      	ldr	r3, [pc, #144]	; (8007264 <USBD_SetConfig+0x148>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d02a      	beq.n	8007236 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff f929 	bl	8006440 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071ee:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <USBD_SetConfig+0x148>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071f8:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <USBD_SetConfig+0x148>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff f902 	bl	8006408 <USBD_SetClassConfig>
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00f      	beq.n	800722e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f903 	bl	800741c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff f90e 	bl	8006440 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800722c:	e014      	b.n	8007258 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9bf 	bl	80075b2 <USBD_CtlSendStatus>
      break;
 8007234:	e010      	b.n	8007258 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9bb 	bl	80075b2 <USBD_CtlSendStatus>
      break;
 800723c:	e00c      	b.n	8007258 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f8eb 	bl	800741c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <USBD_SetConfig+0x148>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff f8f7 	bl	8006440 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007252:	2303      	movs	r3, #3
 8007254:	73fb      	strb	r3, [r7, #15]
      break;
 8007256:	bf00      	nop
  }

  return ret;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	200002d4 	.word	0x200002d4

08007268 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	88db      	ldrh	r3, [r3, #6]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d004      	beq.n	8007284 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8cd 	bl	800741c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007282:	e023      	b.n	80072cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	dc02      	bgt.n	8007296 <USBD_GetConfig+0x2e>
 8007290:	2b00      	cmp	r3, #0
 8007292:	dc03      	bgt.n	800729c <USBD_GetConfig+0x34>
 8007294:	e015      	b.n	80072c2 <USBD_GetConfig+0x5a>
 8007296:	2b03      	cmp	r3, #3
 8007298:	d00b      	beq.n	80072b2 <USBD_GetConfig+0x4a>
 800729a:	e012      	b.n	80072c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3308      	adds	r3, #8
 80072a6:	2201      	movs	r2, #1
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f927 	bl	80074fe <USBD_CtlSendData>
        break;
 80072b0:	e00c      	b.n	80072cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3304      	adds	r3, #4
 80072b6:	2201      	movs	r2, #1
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f91f 	bl	80074fe <USBD_CtlSendData>
        break;
 80072c0:	e004      	b.n	80072cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f8a9 	bl	800741c <USBD_CtlError>
        break;
 80072ca:	bf00      	nop
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d81e      	bhi.n	800732a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	88db      	ldrh	r3, [r3, #6]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d004      	beq.n	80072fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f890 	bl	800741c <USBD_CtlError>
        break;
 80072fc:	e01a      	b.n	8007334 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d005      	beq.n	800731a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f043 0202 	orr.w	r2, r3, #2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	330c      	adds	r3, #12
 800731e:	2202      	movs	r2, #2
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f8eb 	bl	80074fe <USBD_CtlSendData>
      break;
 8007328:	e004      	b.n	8007334 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f875 	bl	800741c <USBD_CtlError>
      break;
 8007332:	bf00      	nop
  }
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	885b      	ldrh	r3, [r3, #2]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d106      	bne.n	800735c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f92b 	bl	80075b2 <USBD_CtlSendStatus>
  }
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	b2db      	uxtb	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	2b02      	cmp	r3, #2
 800737a:	d80b      	bhi.n	8007394 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	885b      	ldrh	r3, [r3, #2]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d10c      	bne.n	800739e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f910 	bl	80075b2 <USBD_CtlSendStatus>
      }
      break;
 8007392:	e004      	b.n	800739e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f840 	bl	800741c <USBD_CtlError>
      break;
 800739c:	e000      	b.n	80073a0 <USBD_ClrFeature+0x3c>
      break;
 800739e:	bf00      	nop
  }
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff fabb 	bl	800694e <SWAPBYTE>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff faae 	bl	800694e <SWAPBYTE>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7ff faa1 	bl	800694e <SWAPBYTE>
 800740c:	4603      	mov	r3, r0
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	80da      	strh	r2, [r3, #6]
}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007426:	2180      	movs	r1, #128	; 0x80
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fcb1 	bl	8007d90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800742e:	2100      	movs	r1, #0
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fcad 	bl	8007d90 <USBD_LL_StallEP>
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b086      	sub	sp, #24
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d036      	beq.n	80074c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007458:	6938      	ldr	r0, [r7, #16]
 800745a:	f000 f836 	bl	80074ca <USBD_GetLen>
 800745e:	4603      	mov	r3, r0
 8007460:	3301      	adds	r3, #1
 8007462:	b29b      	uxth	r3, r3
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	701a      	strb	r2, [r3, #0]
  idx++;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	3301      	adds	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	4413      	add	r3, r2
 8007484:	2203      	movs	r2, #3
 8007486:	701a      	strb	r2, [r3, #0]
  idx++;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	3301      	adds	r3, #1
 800748c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800748e:	e013      	b.n	80074b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	4413      	add	r3, r2
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	7812      	ldrb	r2, [r2, #0]
 800749a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3301      	adds	r3, #1
 80074a0:	613b      	str	r3, [r7, #16]
    idx++;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	3301      	adds	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4413      	add	r3, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	3301      	adds	r3, #1
 80074b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e7      	bne.n	8007490 <USBD_GetString+0x52>
 80074c0:	e000      	b.n	80074c4 <USBD_GetString+0x86>
    return;
 80074c2:	bf00      	nop
  }
}
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074da:	e005      	b.n	80074e8 <USBD_GetLen+0x1e>
  {
    len++;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	3301      	adds	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f5      	bne.n	80074dc <USBD_GetLen+0x12>
  }

  return len;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2202      	movs	r2, #2
 800750e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	2100      	movs	r1, #0
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fcbc 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fcab 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2203      	movs	r2, #3
 8007566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	2100      	movs	r1, #0
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fcaf 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	2100      	movs	r1, #0
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fc9e 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075c2:	2300      	movs	r3, #0
 80075c4:	2200      	movs	r2, #0
 80075c6:	2100      	movs	r1, #0
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc6a 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2205      	movs	r2, #5
 80075e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e8:	2300      	movs	r3, #0
 80075ea:	2200      	movs	r2, #0
 80075ec:	2100      	movs	r1, #0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fc78 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007604:	2200      	movs	r2, #0
 8007606:	4912      	ldr	r1, [pc, #72]	; (8007650 <MX_USB_DEVICE_Init+0x50>)
 8007608:	4812      	ldr	r0, [pc, #72]	; (8007654 <MX_USB_DEVICE_Init+0x54>)
 800760a:	f7fe fe8f 	bl	800632c <USBD_Init>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007614:	f7f9 fc62 	bl	8000edc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007618:	490f      	ldr	r1, [pc, #60]	; (8007658 <MX_USB_DEVICE_Init+0x58>)
 800761a:	480e      	ldr	r0, [pc, #56]	; (8007654 <MX_USB_DEVICE_Init+0x54>)
 800761c:	f7fe feb6 	bl	800638c <USBD_RegisterClass>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007626:	f7f9 fc59 	bl	8000edc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800762a:	490c      	ldr	r1, [pc, #48]	; (800765c <MX_USB_DEVICE_Init+0x5c>)
 800762c:	4809      	ldr	r0, [pc, #36]	; (8007654 <MX_USB_DEVICE_Init+0x54>)
 800762e:	f7fe fe07 	bl	8006240 <USBD_CDC_RegisterInterface>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007638:	f7f9 fc50 	bl	8000edc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800763c:	4805      	ldr	r0, [pc, #20]	; (8007654 <MX_USB_DEVICE_Init+0x54>)
 800763e:	f7fe fecc 	bl	80063da <USBD_Start>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007648:	f7f9 fc48 	bl	8000edc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800764c:	bf00      	nop
 800764e:	bd80      	pop	{r7, pc}
 8007650:	200001a8 	.word	0x200001a8
 8007654:	2000058c 	.word	0x2000058c
 8007658:	20000090 	.word	0x20000090
 800765c:	20000194 	.word	0x20000194

08007660 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007664:	2200      	movs	r2, #0
 8007666:	4905      	ldr	r1, [pc, #20]	; (800767c <CDC_Init_FS+0x1c>)
 8007668:	4805      	ldr	r0, [pc, #20]	; (8007680 <CDC_Init_FS+0x20>)
 800766a:	f7fe fdfe 	bl	800626a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800766e:	4905      	ldr	r1, [pc, #20]	; (8007684 <CDC_Init_FS+0x24>)
 8007670:	4803      	ldr	r0, [pc, #12]	; (8007680 <CDC_Init_FS+0x20>)
 8007672:	f7fe fe18 	bl	80062a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007676:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007678:	4618      	mov	r0, r3
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000c44 	.word	0x20000c44
 8007680:	2000058c 	.word	0x2000058c
 8007684:	2000085c 	.word	0x2000085c

08007688 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800768c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800768e:	4618      	mov	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	6039      	str	r1, [r7, #0]
 80076a2:	71fb      	strb	r3, [r7, #7]
 80076a4:	4613      	mov	r3, r2
 80076a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	2b23      	cmp	r3, #35	; 0x23
 80076ac:	d84a      	bhi.n	8007744 <CDC_Control_FS+0xac>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <CDC_Control_FS+0x1c>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007745 	.word	0x08007745
 80076b8:	08007745 	.word	0x08007745
 80076bc:	08007745 	.word	0x08007745
 80076c0:	08007745 	.word	0x08007745
 80076c4:	08007745 	.word	0x08007745
 80076c8:	08007745 	.word	0x08007745
 80076cc:	08007745 	.word	0x08007745
 80076d0:	08007745 	.word	0x08007745
 80076d4:	08007745 	.word	0x08007745
 80076d8:	08007745 	.word	0x08007745
 80076dc:	08007745 	.word	0x08007745
 80076e0:	08007745 	.word	0x08007745
 80076e4:	08007745 	.word	0x08007745
 80076e8:	08007745 	.word	0x08007745
 80076ec:	08007745 	.word	0x08007745
 80076f0:	08007745 	.word	0x08007745
 80076f4:	08007745 	.word	0x08007745
 80076f8:	08007745 	.word	0x08007745
 80076fc:	08007745 	.word	0x08007745
 8007700:	08007745 	.word	0x08007745
 8007704:	08007745 	.word	0x08007745
 8007708:	08007745 	.word	0x08007745
 800770c:	08007745 	.word	0x08007745
 8007710:	08007745 	.word	0x08007745
 8007714:	08007745 	.word	0x08007745
 8007718:	08007745 	.word	0x08007745
 800771c:	08007745 	.word	0x08007745
 8007720:	08007745 	.word	0x08007745
 8007724:	08007745 	.word	0x08007745
 8007728:	08007745 	.word	0x08007745
 800772c:	08007745 	.word	0x08007745
 8007730:	08007745 	.word	0x08007745
 8007734:	08007745 	.word	0x08007745
 8007738:	08007745 	.word	0x08007745
 800773c:	08007745 	.word	0x08007745
 8007740:	08007745 	.word	0x08007745
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007744:	bf00      	nop
  }

  return (USBD_OK);
 8007746:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	4805      	ldr	r0, [pc, #20]	; (8007778 <CDC_Receive_FS+0x24>)
 8007762:	f7fe fda0 	bl	80062a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007766:	4804      	ldr	r0, [pc, #16]	; (8007778 <CDC_Receive_FS+0x24>)
 8007768:	f7fe fdb6 	bl	80062d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800776c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	2000058c 	.word	0x2000058c

0800777c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	4613      	mov	r3, r2
 8007788:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800778e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2212      	movs	r2, #18
 80077b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077b2:	4b03      	ldr	r3, [pc, #12]	; (80077c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	200001c4 	.word	0x200001c4

080077c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2204      	movs	r2, #4
 80077d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077d6:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	200001d8 	.word	0x200001d8

080077e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d105      	bne.n	8007806 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	4907      	ldr	r1, [pc, #28]	; (800781c <USBD_FS_ProductStrDescriptor+0x34>)
 80077fe:	4808      	ldr	r0, [pc, #32]	; (8007820 <USBD_FS_ProductStrDescriptor+0x38>)
 8007800:	f7ff fe1d 	bl	800743e <USBD_GetString>
 8007804:	e004      	b.n	8007810 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4904      	ldr	r1, [pc, #16]	; (800781c <USBD_FS_ProductStrDescriptor+0x34>)
 800780a:	4805      	ldr	r0, [pc, #20]	; (8007820 <USBD_FS_ProductStrDescriptor+0x38>)
 800780c:	f7ff fe17 	bl	800743e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	2000102c 	.word	0x2000102c
 8007820:	08008904 	.word	0x08008904

08007824 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	6039      	str	r1, [r7, #0]
 800782e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	4904      	ldr	r1, [pc, #16]	; (8007844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007834:	4804      	ldr	r0, [pc, #16]	; (8007848 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007836:	f7ff fe02 	bl	800743e <USBD_GetString>
  return USBD_StrDesc;
 800783a:	4b02      	ldr	r3, [pc, #8]	; (8007844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	2000102c 	.word	0x2000102c
 8007848:	0800891c 	.word	0x0800891c

0800784c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	6039      	str	r1, [r7, #0]
 8007856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	221a      	movs	r2, #26
 800785c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800785e:	f000 f843 	bl	80078e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007862:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200001dc 	.word	0x200001dc

08007870 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d105      	bne.n	800788e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	4907      	ldr	r1, [pc, #28]	; (80078a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007886:	4808      	ldr	r0, [pc, #32]	; (80078a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007888:	f7ff fdd9 	bl	800743e <USBD_GetString>
 800788c:	e004      	b.n	8007898 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4904      	ldr	r1, [pc, #16]	; (80078a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007892:	4805      	ldr	r0, [pc, #20]	; (80078a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007894:	f7ff fdd3 	bl	800743e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	2000102c 	.word	0x2000102c
 80078a8:	08008930 	.word	0x08008930

080078ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d105      	bne.n	80078ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4907      	ldr	r1, [pc, #28]	; (80078e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078c2:	4808      	ldr	r0, [pc, #32]	; (80078e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078c4:	f7ff fdbb 	bl	800743e <USBD_GetString>
 80078c8:	e004      	b.n	80078d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4904      	ldr	r1, [pc, #16]	; (80078e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078ce:	4805      	ldr	r0, [pc, #20]	; (80078e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078d0:	f7ff fdb5 	bl	800743e <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	2000102c 	.word	0x2000102c
 80078e4:	0800893c 	.word	0x0800893c

080078e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <Get_SerialNum+0x44>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <Get_SerialNum+0x48>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <Get_SerialNum+0x4c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4413      	add	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800790e:	2208      	movs	r2, #8
 8007910:	4909      	ldr	r1, [pc, #36]	; (8007938 <Get_SerialNum+0x50>)
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f814 	bl	8007940 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007918:	2204      	movs	r2, #4
 800791a:	4908      	ldr	r1, [pc, #32]	; (800793c <Get_SerialNum+0x54>)
 800791c:	68b8      	ldr	r0, [r7, #8]
 800791e:	f000 f80f 	bl	8007940 <IntToUnicode>
  }
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	1fff7a10 	.word	0x1fff7a10
 8007930:	1fff7a14 	.word	0x1fff7a14
 8007934:	1fff7a18 	.word	0x1fff7a18
 8007938:	200001de 	.word	0x200001de
 800793c:	200001ee 	.word	0x200001ee

08007940 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
 8007956:	e027      	b.n	80079a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	0f1b      	lsrs	r3, r3, #28
 800795c:	2b09      	cmp	r3, #9
 800795e:	d80b      	bhi.n	8007978 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	0f1b      	lsrs	r3, r3, #28
 8007964:	b2da      	uxtb	r2, r3
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4619      	mov	r1, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	440b      	add	r3, r1
 8007970:	3230      	adds	r2, #48	; 0x30
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e00a      	b.n	800798e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	0f1b      	lsrs	r3, r3, #28
 800797c:	b2da      	uxtb	r2, r3
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4619      	mov	r1, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	440b      	add	r3, r1
 8007988:	3237      	adds	r2, #55	; 0x37
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	3301      	adds	r3, #1
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	3301      	adds	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
 80079a8:	7dfa      	ldrb	r2, [r7, #23]
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d3d3      	bcc.n	8007958 <IntToUnicode+0x18>
  }
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
	...

080079c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c8:	f107 0314 	add.w	r3, r7, #20
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	605a      	str	r2, [r3, #4]
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079e0:	d13a      	bne.n	8007a58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079e2:	2300      	movs	r3, #0
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	6313      	str	r3, [r2, #48]	; 0x30
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a04:	2302      	movs	r3, #2
 8007a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a10:	230a      	movs	r3, #10
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4812      	ldr	r0, [pc, #72]	; (8007a64 <HAL_PCD_MspInit+0xa4>)
 8007a1c:	f7f9 fd60 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a20:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a24:	4a0e      	ldr	r2, [pc, #56]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2a:	6353      	str	r3, [r2, #52]	; 0x34
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8007a3c:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	2043      	movs	r0, #67	; 0x43
 8007a4e:	f7f9 fd10 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a52:	2043      	movs	r0, #67	; 0x43
 8007a54:	f7f9 fd29 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a58:	bf00      	nop
 8007a5a:	3728      	adds	r7, #40	; 0x28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40023800 	.word	0x40023800
 8007a64:	40020000 	.word	0x40020000

08007a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7fe fcf6 	bl	8006470 <USBD_LL_SetupStage>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f7fe fd30 	bl	800651a <USBD_LL_DataOutStage>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	3348      	adds	r3, #72	; 0x48
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f7fe fd79 	bl	80065e0 <USBD_LL_DataInStage>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe fe8d 	bl	8006824 <USBD_LL_SOF>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d001      	beq.n	8007b2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b26:	f7f9 f9d9 	bl	8000edc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b30:	7bfa      	ldrb	r2, [r7, #15]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fe37 	bl	80067a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fde3 	bl	800670c <USBD_LL_Reset>
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fe32 	bl	80067c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	4a03      	ldr	r2, [pc, #12]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b8a:	f043 0306 	orr.w	r3, r3, #6
 8007b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed00 	.word	0xe000ed00

08007b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fe22 	bl	80067f4 <USBD_LL_Resume>
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fe70 	bl	80068b4 <USBD_LL_IsoOUTIncomplete>
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fe38 	bl	8006868 <USBD_LL_IsoINIncomplete>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fe76 	bl	8006900 <USBD_LL_DevConnected>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fe73 	bl	8006916 <USBD_LL_DevDisconnected>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d13c      	bne.n	8007cc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c48:	4a20      	ldr	r2, [pc, #128]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a1e      	ldr	r2, [pc, #120]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c58:	4b1c      	ldr	r3, [pc, #112]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c62:	2204      	movs	r2, #4
 8007c64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c66:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c68:	2202      	movs	r2, #2
 8007c6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c6c:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c74:	2202      	movs	r2, #2
 8007c76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c78:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c84:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c90:	4b0e      	ldr	r3, [pc, #56]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c96:	480d      	ldr	r0, [pc, #52]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c98:	f7fa fb51 	bl	800233e <HAL_PCD_Init>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ca2:	f7f9 f91b 	bl	8000edc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ca6:	2180      	movs	r1, #128	; 0x80
 8007ca8:	4808      	ldr	r0, [pc, #32]	; (8007ccc <USBD_LL_Init+0x94>)
 8007caa:	f7fb fcae 	bl	800360a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cae:	2240      	movs	r2, #64	; 0x40
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4806      	ldr	r0, [pc, #24]	; (8007ccc <USBD_LL_Init+0x94>)
 8007cb4:	f7fb fc62 	bl	800357c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	2101      	movs	r1, #1
 8007cbc:	4803      	ldr	r0, [pc, #12]	; (8007ccc <USBD_LL_Init+0x94>)
 8007cbe:	f7fb fc5d 	bl	800357c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	2000122c 	.word	0x2000122c

08007cd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa fc46 	bl	8002578 <HAL_PCD_Start>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f942 	bl	8007f7c <USBD_Get_USB_Status>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	461a      	mov	r2, r3
 8007d14:	4603      	mov	r3, r0
 8007d16:	70fb      	strb	r3, [r7, #3]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70bb      	strb	r3, [r7, #2]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d2e:	78bb      	ldrb	r3, [r7, #2]
 8007d30:	883a      	ldrh	r2, [r7, #0]
 8007d32:	78f9      	ldrb	r1, [r7, #3]
 8007d34:	f7fb f82a 	bl	8002d8c <HAL_PCD_EP_Open>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f91c 	bl	8007f7c <USBD_Get_USB_Status>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fb f873 	bl	8002e5c <HAL_PCD_EP_Close>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 f8fd 	bl	8007f7c <USBD_Get_USB_Status>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007daa:	78fa      	ldrb	r2, [r7, #3]
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fb f94b 	bl	800304a <HAL_PCD_EP_SetStall>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f8de 	bl	8007f7c <USBD_Get_USB_Status>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	4611      	mov	r1, r2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fb f990 	bl	8003112 <HAL_PCD_EP_ClrStall>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f8bf 	bl	8007f7c <USBD_Get_USB_Status>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da0b      	bge.n	8007e40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	4613      	mov	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	333e      	adds	r3, #62	; 0x3e
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	e00b      	b.n	8007e58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fa ff5d 	bl	8002d42 <HAL_PCD_SetAddress>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f874 	bl	8007f7c <USBD_Get_USB_Status>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b086      	sub	sp, #24
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ec0:	7af9      	ldrb	r1, [r7, #11]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f7fb f876 	bl	8002fb6 <HAL_PCD_EP_Transmit>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f853 	bl	8007f7c <USBD_Get_USB_Status>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f02:	7af9      	ldrb	r1, [r7, #11]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	f7fa fff2 	bl	8002ef0 <HAL_PCD_EP_Receive>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f832 	bl	8007f7c <USBD_Get_USB_Status>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fb f822 	bl	8002f86 <HAL_PCD_EP_GetRxCount>
 8007f42:	4603      	mov	r3, r0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <USBD_static_malloc+0x18>)
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	200002d8 	.word	0x200002d8

08007f68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]

}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d817      	bhi.n	8007fc0 <USBD_Get_USB_Status+0x44>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USBD_Get_USB_Status+0x1c>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007faf 	.word	0x08007faf
 8007fa0:	08007fb5 	.word	0x08007fb5
 8007fa4:	08007fbb 	.word	0x08007fbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
    break;
 8007fac:	e00b      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb2:	e008      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb8:	e005      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbe:	e002      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc4:	bf00      	nop
  }
  return usb_status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <__errno>:
 8007fd4:	4b01      	ldr	r3, [pc, #4]	; (8007fdc <__errno+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	200001f8 	.word	0x200001f8

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4d0d      	ldr	r5, [pc, #52]	; (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe6:	1b64      	subs	r4, r4, r5
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2600      	movs	r6, #0
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4d0b      	ldr	r5, [pc, #44]	; (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <__libc_init_array+0x44>)
 8007ff4:	f000 fc4e 	bl	8008894 <_init>
 8007ff8:	1b64      	subs	r4, r4, r5
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	080089a0 	.word	0x080089a0
 800801c:	080089a0 	.word	0x080089a0
 8008020:	080089a0 	.word	0x080089a0
 8008024:	080089a4 	.word	0x080089a4

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <siprintf>:
 8008038:	b40e      	push	{r1, r2, r3}
 800803a:	b500      	push	{lr}
 800803c:	b09c      	sub	sp, #112	; 0x70
 800803e:	ab1d      	add	r3, sp, #116	; 0x74
 8008040:	9002      	str	r0, [sp, #8]
 8008042:	9006      	str	r0, [sp, #24]
 8008044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008048:	4809      	ldr	r0, [pc, #36]	; (8008070 <siprintf+0x38>)
 800804a:	9107      	str	r1, [sp, #28]
 800804c:	9104      	str	r1, [sp, #16]
 800804e:	4909      	ldr	r1, [pc, #36]	; (8008074 <siprintf+0x3c>)
 8008050:	f853 2b04 	ldr.w	r2, [r3], #4
 8008054:	9105      	str	r1, [sp, #20]
 8008056:	6800      	ldr	r0, [r0, #0]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	a902      	add	r1, sp, #8
 800805c:	f000 f868 	bl	8008130 <_svfiprintf_r>
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	b01c      	add	sp, #112	; 0x70
 8008068:	f85d eb04 	ldr.w	lr, [sp], #4
 800806c:	b003      	add	sp, #12
 800806e:	4770      	bx	lr
 8008070:	200001f8 	.word	0x200001f8
 8008074:	ffff0208 	.word	0xffff0208

08008078 <__ssputs_r>:
 8008078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	688e      	ldr	r6, [r1, #8]
 800807e:	429e      	cmp	r6, r3
 8008080:	4682      	mov	sl, r0
 8008082:	460c      	mov	r4, r1
 8008084:	4690      	mov	r8, r2
 8008086:	461f      	mov	r7, r3
 8008088:	d838      	bhi.n	80080fc <__ssputs_r+0x84>
 800808a:	898a      	ldrh	r2, [r1, #12]
 800808c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008090:	d032      	beq.n	80080f8 <__ssputs_r+0x80>
 8008092:	6825      	ldr	r5, [r4, #0]
 8008094:	6909      	ldr	r1, [r1, #16]
 8008096:	eba5 0901 	sub.w	r9, r5, r1
 800809a:	6965      	ldr	r5, [r4, #20]
 800809c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080a4:	3301      	adds	r3, #1
 80080a6:	444b      	add	r3, r9
 80080a8:	106d      	asrs	r5, r5, #1
 80080aa:	429d      	cmp	r5, r3
 80080ac:	bf38      	it	cc
 80080ae:	461d      	movcc	r5, r3
 80080b0:	0553      	lsls	r3, r2, #21
 80080b2:	d531      	bpl.n	8008118 <__ssputs_r+0xa0>
 80080b4:	4629      	mov	r1, r5
 80080b6:	f000 fb47 	bl	8008748 <_malloc_r>
 80080ba:	4606      	mov	r6, r0
 80080bc:	b950      	cbnz	r0, 80080d4 <__ssputs_r+0x5c>
 80080be:	230c      	movs	r3, #12
 80080c0:	f8ca 3000 	str.w	r3, [sl]
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d4:	6921      	ldr	r1, [r4, #16]
 80080d6:	464a      	mov	r2, r9
 80080d8:	f000 fabe 	bl	8008658 <memcpy>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	6126      	str	r6, [r4, #16]
 80080ea:	6165      	str	r5, [r4, #20]
 80080ec:	444e      	add	r6, r9
 80080ee:	eba5 0509 	sub.w	r5, r5, r9
 80080f2:	6026      	str	r6, [r4, #0]
 80080f4:	60a5      	str	r5, [r4, #8]
 80080f6:	463e      	mov	r6, r7
 80080f8:	42be      	cmp	r6, r7
 80080fa:	d900      	bls.n	80080fe <__ssputs_r+0x86>
 80080fc:	463e      	mov	r6, r7
 80080fe:	4632      	mov	r2, r6
 8008100:	6820      	ldr	r0, [r4, #0]
 8008102:	4641      	mov	r1, r8
 8008104:	f000 fab6 	bl	8008674 <memmove>
 8008108:	68a3      	ldr	r3, [r4, #8]
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	1b9b      	subs	r3, r3, r6
 800810e:	4432      	add	r2, r6
 8008110:	60a3      	str	r3, [r4, #8]
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	2000      	movs	r0, #0
 8008116:	e7db      	b.n	80080d0 <__ssputs_r+0x58>
 8008118:	462a      	mov	r2, r5
 800811a:	f000 fb6f 	bl	80087fc <_realloc_r>
 800811e:	4606      	mov	r6, r0
 8008120:	2800      	cmp	r0, #0
 8008122:	d1e1      	bne.n	80080e8 <__ssputs_r+0x70>
 8008124:	6921      	ldr	r1, [r4, #16]
 8008126:	4650      	mov	r0, sl
 8008128:	f000 fabe 	bl	80086a8 <_free_r>
 800812c:	e7c7      	b.n	80080be <__ssputs_r+0x46>
	...

08008130 <_svfiprintf_r>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	4698      	mov	r8, r3
 8008136:	898b      	ldrh	r3, [r1, #12]
 8008138:	061b      	lsls	r3, r3, #24
 800813a:	b09d      	sub	sp, #116	; 0x74
 800813c:	4607      	mov	r7, r0
 800813e:	460d      	mov	r5, r1
 8008140:	4614      	mov	r4, r2
 8008142:	d50e      	bpl.n	8008162 <_svfiprintf_r+0x32>
 8008144:	690b      	ldr	r3, [r1, #16]
 8008146:	b963      	cbnz	r3, 8008162 <_svfiprintf_r+0x32>
 8008148:	2140      	movs	r1, #64	; 0x40
 800814a:	f000 fafd 	bl	8008748 <_malloc_r>
 800814e:	6028      	str	r0, [r5, #0]
 8008150:	6128      	str	r0, [r5, #16]
 8008152:	b920      	cbnz	r0, 800815e <_svfiprintf_r+0x2e>
 8008154:	230c      	movs	r3, #12
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	f04f 30ff 	mov.w	r0, #4294967295
 800815c:	e0d1      	b.n	8008302 <_svfiprintf_r+0x1d2>
 800815e:	2340      	movs	r3, #64	; 0x40
 8008160:	616b      	str	r3, [r5, #20]
 8008162:	2300      	movs	r3, #0
 8008164:	9309      	str	r3, [sp, #36]	; 0x24
 8008166:	2320      	movs	r3, #32
 8008168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800816c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008170:	2330      	movs	r3, #48	; 0x30
 8008172:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800831c <_svfiprintf_r+0x1ec>
 8008176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800817a:	f04f 0901 	mov.w	r9, #1
 800817e:	4623      	mov	r3, r4
 8008180:	469a      	mov	sl, r3
 8008182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008186:	b10a      	cbz	r2, 800818c <_svfiprintf_r+0x5c>
 8008188:	2a25      	cmp	r2, #37	; 0x25
 800818a:	d1f9      	bne.n	8008180 <_svfiprintf_r+0x50>
 800818c:	ebba 0b04 	subs.w	fp, sl, r4
 8008190:	d00b      	beq.n	80081aa <_svfiprintf_r+0x7a>
 8008192:	465b      	mov	r3, fp
 8008194:	4622      	mov	r2, r4
 8008196:	4629      	mov	r1, r5
 8008198:	4638      	mov	r0, r7
 800819a:	f7ff ff6d 	bl	8008078 <__ssputs_r>
 800819e:	3001      	adds	r0, #1
 80081a0:	f000 80aa 	beq.w	80082f8 <_svfiprintf_r+0x1c8>
 80081a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a6:	445a      	add	r2, fp
 80081a8:	9209      	str	r2, [sp, #36]	; 0x24
 80081aa:	f89a 3000 	ldrb.w	r3, [sl]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 80a2 	beq.w	80082f8 <_svfiprintf_r+0x1c8>
 80081b4:	2300      	movs	r3, #0
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081be:	f10a 0a01 	add.w	sl, sl, #1
 80081c2:	9304      	str	r3, [sp, #16]
 80081c4:	9307      	str	r3, [sp, #28]
 80081c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ca:	931a      	str	r3, [sp, #104]	; 0x68
 80081cc:	4654      	mov	r4, sl
 80081ce:	2205      	movs	r2, #5
 80081d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d4:	4851      	ldr	r0, [pc, #324]	; (800831c <_svfiprintf_r+0x1ec>)
 80081d6:	f7f8 f803 	bl	80001e0 <memchr>
 80081da:	9a04      	ldr	r2, [sp, #16]
 80081dc:	b9d8      	cbnz	r0, 8008216 <_svfiprintf_r+0xe6>
 80081de:	06d0      	lsls	r0, r2, #27
 80081e0:	bf44      	itt	mi
 80081e2:	2320      	movmi	r3, #32
 80081e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e8:	0711      	lsls	r1, r2, #28
 80081ea:	bf44      	itt	mi
 80081ec:	232b      	movmi	r3, #43	; 0x2b
 80081ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f2:	f89a 3000 	ldrb.w	r3, [sl]
 80081f6:	2b2a      	cmp	r3, #42	; 0x2a
 80081f8:	d015      	beq.n	8008226 <_svfiprintf_r+0xf6>
 80081fa:	9a07      	ldr	r2, [sp, #28]
 80081fc:	4654      	mov	r4, sl
 80081fe:	2000      	movs	r0, #0
 8008200:	f04f 0c0a 	mov.w	ip, #10
 8008204:	4621      	mov	r1, r4
 8008206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800820a:	3b30      	subs	r3, #48	; 0x30
 800820c:	2b09      	cmp	r3, #9
 800820e:	d94e      	bls.n	80082ae <_svfiprintf_r+0x17e>
 8008210:	b1b0      	cbz	r0, 8008240 <_svfiprintf_r+0x110>
 8008212:	9207      	str	r2, [sp, #28]
 8008214:	e014      	b.n	8008240 <_svfiprintf_r+0x110>
 8008216:	eba0 0308 	sub.w	r3, r0, r8
 800821a:	fa09 f303 	lsl.w	r3, r9, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	46a2      	mov	sl, r4
 8008224:	e7d2      	b.n	80081cc <_svfiprintf_r+0x9c>
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	1d19      	adds	r1, r3, #4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	9103      	str	r1, [sp, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	bfbb      	ittet	lt
 8008232:	425b      	neglt	r3, r3
 8008234:	f042 0202 	orrlt.w	r2, r2, #2
 8008238:	9307      	strge	r3, [sp, #28]
 800823a:	9307      	strlt	r3, [sp, #28]
 800823c:	bfb8      	it	lt
 800823e:	9204      	strlt	r2, [sp, #16]
 8008240:	7823      	ldrb	r3, [r4, #0]
 8008242:	2b2e      	cmp	r3, #46	; 0x2e
 8008244:	d10c      	bne.n	8008260 <_svfiprintf_r+0x130>
 8008246:	7863      	ldrb	r3, [r4, #1]
 8008248:	2b2a      	cmp	r3, #42	; 0x2a
 800824a:	d135      	bne.n	80082b8 <_svfiprintf_r+0x188>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1d1a      	adds	r2, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9203      	str	r2, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfb8      	it	lt
 8008258:	f04f 33ff 	movlt.w	r3, #4294967295
 800825c:	3402      	adds	r4, #2
 800825e:	9305      	str	r3, [sp, #20]
 8008260:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800832c <_svfiprintf_r+0x1fc>
 8008264:	7821      	ldrb	r1, [r4, #0]
 8008266:	2203      	movs	r2, #3
 8008268:	4650      	mov	r0, sl
 800826a:	f7f7 ffb9 	bl	80001e0 <memchr>
 800826e:	b140      	cbz	r0, 8008282 <_svfiprintf_r+0x152>
 8008270:	2340      	movs	r3, #64	; 0x40
 8008272:	eba0 000a 	sub.w	r0, r0, sl
 8008276:	fa03 f000 	lsl.w	r0, r3, r0
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	4303      	orrs	r3, r0
 800827e:	3401      	adds	r4, #1
 8008280:	9304      	str	r3, [sp, #16]
 8008282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008286:	4826      	ldr	r0, [pc, #152]	; (8008320 <_svfiprintf_r+0x1f0>)
 8008288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800828c:	2206      	movs	r2, #6
 800828e:	f7f7 ffa7 	bl	80001e0 <memchr>
 8008292:	2800      	cmp	r0, #0
 8008294:	d038      	beq.n	8008308 <_svfiprintf_r+0x1d8>
 8008296:	4b23      	ldr	r3, [pc, #140]	; (8008324 <_svfiprintf_r+0x1f4>)
 8008298:	bb1b      	cbnz	r3, 80082e2 <_svfiprintf_r+0x1b2>
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	3307      	adds	r3, #7
 800829e:	f023 0307 	bic.w	r3, r3, #7
 80082a2:	3308      	adds	r3, #8
 80082a4:	9303      	str	r3, [sp, #12]
 80082a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a8:	4433      	add	r3, r6
 80082aa:	9309      	str	r3, [sp, #36]	; 0x24
 80082ac:	e767      	b.n	800817e <_svfiprintf_r+0x4e>
 80082ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80082b2:	460c      	mov	r4, r1
 80082b4:	2001      	movs	r0, #1
 80082b6:	e7a5      	b.n	8008204 <_svfiprintf_r+0xd4>
 80082b8:	2300      	movs	r3, #0
 80082ba:	3401      	adds	r4, #1
 80082bc:	9305      	str	r3, [sp, #20]
 80082be:	4619      	mov	r1, r3
 80082c0:	f04f 0c0a 	mov.w	ip, #10
 80082c4:	4620      	mov	r0, r4
 80082c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ca:	3a30      	subs	r2, #48	; 0x30
 80082cc:	2a09      	cmp	r2, #9
 80082ce:	d903      	bls.n	80082d8 <_svfiprintf_r+0x1a8>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0c5      	beq.n	8008260 <_svfiprintf_r+0x130>
 80082d4:	9105      	str	r1, [sp, #20]
 80082d6:	e7c3      	b.n	8008260 <_svfiprintf_r+0x130>
 80082d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082dc:	4604      	mov	r4, r0
 80082de:	2301      	movs	r3, #1
 80082e0:	e7f0      	b.n	80082c4 <_svfiprintf_r+0x194>
 80082e2:	ab03      	add	r3, sp, #12
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	462a      	mov	r2, r5
 80082e8:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <_svfiprintf_r+0x1f8>)
 80082ea:	a904      	add	r1, sp, #16
 80082ec:	4638      	mov	r0, r7
 80082ee:	f3af 8000 	nop.w
 80082f2:	1c42      	adds	r2, r0, #1
 80082f4:	4606      	mov	r6, r0
 80082f6:	d1d6      	bne.n	80082a6 <_svfiprintf_r+0x176>
 80082f8:	89ab      	ldrh	r3, [r5, #12]
 80082fa:	065b      	lsls	r3, r3, #25
 80082fc:	f53f af2c 	bmi.w	8008158 <_svfiprintf_r+0x28>
 8008300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008302:	b01d      	add	sp, #116	; 0x74
 8008304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008308:	ab03      	add	r3, sp, #12
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	462a      	mov	r2, r5
 800830e:	4b06      	ldr	r3, [pc, #24]	; (8008328 <_svfiprintf_r+0x1f8>)
 8008310:	a904      	add	r1, sp, #16
 8008312:	4638      	mov	r0, r7
 8008314:	f000 f87a 	bl	800840c <_printf_i>
 8008318:	e7eb      	b.n	80082f2 <_svfiprintf_r+0x1c2>
 800831a:	bf00      	nop
 800831c:	08008964 	.word	0x08008964
 8008320:	0800896e 	.word	0x0800896e
 8008324:	00000000 	.word	0x00000000
 8008328:	08008079 	.word	0x08008079
 800832c:	0800896a 	.word	0x0800896a

08008330 <_printf_common>:
 8008330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008334:	4616      	mov	r6, r2
 8008336:	4699      	mov	r9, r3
 8008338:	688a      	ldr	r2, [r1, #8]
 800833a:	690b      	ldr	r3, [r1, #16]
 800833c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008340:	4293      	cmp	r3, r2
 8008342:	bfb8      	it	lt
 8008344:	4613      	movlt	r3, r2
 8008346:	6033      	str	r3, [r6, #0]
 8008348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800834c:	4607      	mov	r7, r0
 800834e:	460c      	mov	r4, r1
 8008350:	b10a      	cbz	r2, 8008356 <_printf_common+0x26>
 8008352:	3301      	adds	r3, #1
 8008354:	6033      	str	r3, [r6, #0]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	0699      	lsls	r1, r3, #26
 800835a:	bf42      	ittt	mi
 800835c:	6833      	ldrmi	r3, [r6, #0]
 800835e:	3302      	addmi	r3, #2
 8008360:	6033      	strmi	r3, [r6, #0]
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	f015 0506 	ands.w	r5, r5, #6
 8008368:	d106      	bne.n	8008378 <_printf_common+0x48>
 800836a:	f104 0a19 	add.w	sl, r4, #25
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	6832      	ldr	r2, [r6, #0]
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	42ab      	cmp	r3, r5
 8008376:	dc26      	bgt.n	80083c6 <_printf_common+0x96>
 8008378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800837c:	1e13      	subs	r3, r2, #0
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	bf18      	it	ne
 8008382:	2301      	movne	r3, #1
 8008384:	0692      	lsls	r2, r2, #26
 8008386:	d42b      	bmi.n	80083e0 <_printf_common+0xb0>
 8008388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800838c:	4649      	mov	r1, r9
 800838e:	4638      	mov	r0, r7
 8008390:	47c0      	blx	r8
 8008392:	3001      	adds	r0, #1
 8008394:	d01e      	beq.n	80083d4 <_printf_common+0xa4>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	68e5      	ldr	r5, [r4, #12]
 800839a:	6832      	ldr	r2, [r6, #0]
 800839c:	f003 0306 	and.w	r3, r3, #6
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	bf08      	it	eq
 80083a4:	1aad      	subeq	r5, r5, r2
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	bf0c      	ite	eq
 80083ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b0:	2500      	movne	r5, #0
 80083b2:	4293      	cmp	r3, r2
 80083b4:	bfc4      	itt	gt
 80083b6:	1a9b      	subgt	r3, r3, r2
 80083b8:	18ed      	addgt	r5, r5, r3
 80083ba:	2600      	movs	r6, #0
 80083bc:	341a      	adds	r4, #26
 80083be:	42b5      	cmp	r5, r6
 80083c0:	d11a      	bne.n	80083f8 <_printf_common+0xc8>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e008      	b.n	80083d8 <_printf_common+0xa8>
 80083c6:	2301      	movs	r3, #1
 80083c8:	4652      	mov	r2, sl
 80083ca:	4649      	mov	r1, r9
 80083cc:	4638      	mov	r0, r7
 80083ce:	47c0      	blx	r8
 80083d0:	3001      	adds	r0, #1
 80083d2:	d103      	bne.n	80083dc <_printf_common+0xac>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	3501      	adds	r5, #1
 80083de:	e7c6      	b.n	800836e <_printf_common+0x3e>
 80083e0:	18e1      	adds	r1, r4, r3
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	2030      	movs	r0, #48	; 0x30
 80083e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083ea:	4422      	add	r2, r4
 80083ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083f4:	3302      	adds	r3, #2
 80083f6:	e7c7      	b.n	8008388 <_printf_common+0x58>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4622      	mov	r2, r4
 80083fc:	4649      	mov	r1, r9
 80083fe:	4638      	mov	r0, r7
 8008400:	47c0      	blx	r8
 8008402:	3001      	adds	r0, #1
 8008404:	d0e6      	beq.n	80083d4 <_printf_common+0xa4>
 8008406:	3601      	adds	r6, #1
 8008408:	e7d9      	b.n	80083be <_printf_common+0x8e>
	...

0800840c <_printf_i>:
 800840c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	460c      	mov	r4, r1
 8008412:	4691      	mov	r9, r2
 8008414:	7e27      	ldrb	r7, [r4, #24]
 8008416:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008418:	2f78      	cmp	r7, #120	; 0x78
 800841a:	4680      	mov	r8, r0
 800841c:	469a      	mov	sl, r3
 800841e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008422:	d807      	bhi.n	8008434 <_printf_i+0x28>
 8008424:	2f62      	cmp	r7, #98	; 0x62
 8008426:	d80a      	bhi.n	800843e <_printf_i+0x32>
 8008428:	2f00      	cmp	r7, #0
 800842a:	f000 80d8 	beq.w	80085de <_printf_i+0x1d2>
 800842e:	2f58      	cmp	r7, #88	; 0x58
 8008430:	f000 80a3 	beq.w	800857a <_printf_i+0x16e>
 8008434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800843c:	e03a      	b.n	80084b4 <_printf_i+0xa8>
 800843e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008442:	2b15      	cmp	r3, #21
 8008444:	d8f6      	bhi.n	8008434 <_printf_i+0x28>
 8008446:	a001      	add	r0, pc, #4	; (adr r0, 800844c <_printf_i+0x40>)
 8008448:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800844c:	080084a5 	.word	0x080084a5
 8008450:	080084b9 	.word	0x080084b9
 8008454:	08008435 	.word	0x08008435
 8008458:	08008435 	.word	0x08008435
 800845c:	08008435 	.word	0x08008435
 8008460:	08008435 	.word	0x08008435
 8008464:	080084b9 	.word	0x080084b9
 8008468:	08008435 	.word	0x08008435
 800846c:	08008435 	.word	0x08008435
 8008470:	08008435 	.word	0x08008435
 8008474:	08008435 	.word	0x08008435
 8008478:	080085c5 	.word	0x080085c5
 800847c:	080084e9 	.word	0x080084e9
 8008480:	080085a7 	.word	0x080085a7
 8008484:	08008435 	.word	0x08008435
 8008488:	08008435 	.word	0x08008435
 800848c:	080085e7 	.word	0x080085e7
 8008490:	08008435 	.word	0x08008435
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008435 	.word	0x08008435
 800849c:	08008435 	.word	0x08008435
 80084a0:	080085af 	.word	0x080085af
 80084a4:	680b      	ldr	r3, [r1, #0]
 80084a6:	1d1a      	adds	r2, r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	600a      	str	r2, [r1, #0]
 80084ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0a3      	b.n	8008600 <_printf_i+0x1f4>
 80084b8:	6825      	ldr	r5, [r4, #0]
 80084ba:	6808      	ldr	r0, [r1, #0]
 80084bc:	062e      	lsls	r6, r5, #24
 80084be:	f100 0304 	add.w	r3, r0, #4
 80084c2:	d50a      	bpl.n	80084da <_printf_i+0xce>
 80084c4:	6805      	ldr	r5, [r0, #0]
 80084c6:	600b      	str	r3, [r1, #0]
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	da03      	bge.n	80084d4 <_printf_i+0xc8>
 80084cc:	232d      	movs	r3, #45	; 0x2d
 80084ce:	426d      	negs	r5, r5
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	485e      	ldr	r0, [pc, #376]	; (8008650 <_printf_i+0x244>)
 80084d6:	230a      	movs	r3, #10
 80084d8:	e019      	b.n	800850e <_printf_i+0x102>
 80084da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084de:	6805      	ldr	r5, [r0, #0]
 80084e0:	600b      	str	r3, [r1, #0]
 80084e2:	bf18      	it	ne
 80084e4:	b22d      	sxthne	r5, r5
 80084e6:	e7ef      	b.n	80084c8 <_printf_i+0xbc>
 80084e8:	680b      	ldr	r3, [r1, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	1d18      	adds	r0, r3, #4
 80084ee:	6008      	str	r0, [r1, #0]
 80084f0:	0628      	lsls	r0, r5, #24
 80084f2:	d501      	bpl.n	80084f8 <_printf_i+0xec>
 80084f4:	681d      	ldr	r5, [r3, #0]
 80084f6:	e002      	b.n	80084fe <_printf_i+0xf2>
 80084f8:	0669      	lsls	r1, r5, #25
 80084fa:	d5fb      	bpl.n	80084f4 <_printf_i+0xe8>
 80084fc:	881d      	ldrh	r5, [r3, #0]
 80084fe:	4854      	ldr	r0, [pc, #336]	; (8008650 <_printf_i+0x244>)
 8008500:	2f6f      	cmp	r7, #111	; 0x6f
 8008502:	bf0c      	ite	eq
 8008504:	2308      	moveq	r3, #8
 8008506:	230a      	movne	r3, #10
 8008508:	2100      	movs	r1, #0
 800850a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800850e:	6866      	ldr	r6, [r4, #4]
 8008510:	60a6      	str	r6, [r4, #8]
 8008512:	2e00      	cmp	r6, #0
 8008514:	bfa2      	ittt	ge
 8008516:	6821      	ldrge	r1, [r4, #0]
 8008518:	f021 0104 	bicge.w	r1, r1, #4
 800851c:	6021      	strge	r1, [r4, #0]
 800851e:	b90d      	cbnz	r5, 8008524 <_printf_i+0x118>
 8008520:	2e00      	cmp	r6, #0
 8008522:	d04d      	beq.n	80085c0 <_printf_i+0x1b4>
 8008524:	4616      	mov	r6, r2
 8008526:	fbb5 f1f3 	udiv	r1, r5, r3
 800852a:	fb03 5711 	mls	r7, r3, r1, r5
 800852e:	5dc7      	ldrb	r7, [r0, r7]
 8008530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008534:	462f      	mov	r7, r5
 8008536:	42bb      	cmp	r3, r7
 8008538:	460d      	mov	r5, r1
 800853a:	d9f4      	bls.n	8008526 <_printf_i+0x11a>
 800853c:	2b08      	cmp	r3, #8
 800853e:	d10b      	bne.n	8008558 <_printf_i+0x14c>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	07df      	lsls	r7, r3, #31
 8008544:	d508      	bpl.n	8008558 <_printf_i+0x14c>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	6861      	ldr	r1, [r4, #4]
 800854a:	4299      	cmp	r1, r3
 800854c:	bfde      	ittt	le
 800854e:	2330      	movle	r3, #48	; 0x30
 8008550:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008554:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008558:	1b92      	subs	r2, r2, r6
 800855a:	6122      	str	r2, [r4, #16]
 800855c:	f8cd a000 	str.w	sl, [sp]
 8008560:	464b      	mov	r3, r9
 8008562:	aa03      	add	r2, sp, #12
 8008564:	4621      	mov	r1, r4
 8008566:	4640      	mov	r0, r8
 8008568:	f7ff fee2 	bl	8008330 <_printf_common>
 800856c:	3001      	adds	r0, #1
 800856e:	d14c      	bne.n	800860a <_printf_i+0x1fe>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	b004      	add	sp, #16
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	4835      	ldr	r0, [pc, #212]	; (8008650 <_printf_i+0x244>)
 800857c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	680e      	ldr	r6, [r1, #0]
 8008584:	061f      	lsls	r7, r3, #24
 8008586:	f856 5b04 	ldr.w	r5, [r6], #4
 800858a:	600e      	str	r6, [r1, #0]
 800858c:	d514      	bpl.n	80085b8 <_printf_i+0x1ac>
 800858e:	07d9      	lsls	r1, r3, #31
 8008590:	bf44      	itt	mi
 8008592:	f043 0320 	orrmi.w	r3, r3, #32
 8008596:	6023      	strmi	r3, [r4, #0]
 8008598:	b91d      	cbnz	r5, 80085a2 <_printf_i+0x196>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	f023 0320 	bic.w	r3, r3, #32
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	2310      	movs	r3, #16
 80085a4:	e7b0      	b.n	8008508 <_printf_i+0xfc>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	f043 0320 	orr.w	r3, r3, #32
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	2378      	movs	r3, #120	; 0x78
 80085b0:	4828      	ldr	r0, [pc, #160]	; (8008654 <_printf_i+0x248>)
 80085b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085b6:	e7e3      	b.n	8008580 <_printf_i+0x174>
 80085b8:	065e      	lsls	r6, r3, #25
 80085ba:	bf48      	it	mi
 80085bc:	b2ad      	uxthmi	r5, r5
 80085be:	e7e6      	b.n	800858e <_printf_i+0x182>
 80085c0:	4616      	mov	r6, r2
 80085c2:	e7bb      	b.n	800853c <_printf_i+0x130>
 80085c4:	680b      	ldr	r3, [r1, #0]
 80085c6:	6826      	ldr	r6, [r4, #0]
 80085c8:	6960      	ldr	r0, [r4, #20]
 80085ca:	1d1d      	adds	r5, r3, #4
 80085cc:	600d      	str	r5, [r1, #0]
 80085ce:	0635      	lsls	r5, r6, #24
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	d501      	bpl.n	80085d8 <_printf_i+0x1cc>
 80085d4:	6018      	str	r0, [r3, #0]
 80085d6:	e002      	b.n	80085de <_printf_i+0x1d2>
 80085d8:	0671      	lsls	r1, r6, #25
 80085da:	d5fb      	bpl.n	80085d4 <_printf_i+0x1c8>
 80085dc:	8018      	strh	r0, [r3, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	4616      	mov	r6, r2
 80085e4:	e7ba      	b.n	800855c <_printf_i+0x150>
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	600a      	str	r2, [r1, #0]
 80085ec:	681e      	ldr	r6, [r3, #0]
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	2100      	movs	r1, #0
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7f7 fdf4 	bl	80001e0 <memchr>
 80085f8:	b108      	cbz	r0, 80085fe <_printf_i+0x1f2>
 80085fa:	1b80      	subs	r0, r0, r6
 80085fc:	6060      	str	r0, [r4, #4]
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	2300      	movs	r3, #0
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008608:	e7a8      	b.n	800855c <_printf_i+0x150>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	4632      	mov	r2, r6
 800860e:	4649      	mov	r1, r9
 8008610:	4640      	mov	r0, r8
 8008612:	47d0      	blx	sl
 8008614:	3001      	adds	r0, #1
 8008616:	d0ab      	beq.n	8008570 <_printf_i+0x164>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	079b      	lsls	r3, r3, #30
 800861c:	d413      	bmi.n	8008646 <_printf_i+0x23a>
 800861e:	68e0      	ldr	r0, [r4, #12]
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	4298      	cmp	r0, r3
 8008624:	bfb8      	it	lt
 8008626:	4618      	movlt	r0, r3
 8008628:	e7a4      	b.n	8008574 <_printf_i+0x168>
 800862a:	2301      	movs	r3, #1
 800862c:	4632      	mov	r2, r6
 800862e:	4649      	mov	r1, r9
 8008630:	4640      	mov	r0, r8
 8008632:	47d0      	blx	sl
 8008634:	3001      	adds	r0, #1
 8008636:	d09b      	beq.n	8008570 <_printf_i+0x164>
 8008638:	3501      	adds	r5, #1
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	9903      	ldr	r1, [sp, #12]
 800863e:	1a5b      	subs	r3, r3, r1
 8008640:	42ab      	cmp	r3, r5
 8008642:	dcf2      	bgt.n	800862a <_printf_i+0x21e>
 8008644:	e7eb      	b.n	800861e <_printf_i+0x212>
 8008646:	2500      	movs	r5, #0
 8008648:	f104 0619 	add.w	r6, r4, #25
 800864c:	e7f5      	b.n	800863a <_printf_i+0x22e>
 800864e:	bf00      	nop
 8008650:	08008975 	.word	0x08008975
 8008654:	08008986 	.word	0x08008986

08008658 <memcpy>:
 8008658:	440a      	add	r2, r1
 800865a:	4291      	cmp	r1, r2
 800865c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008660:	d100      	bne.n	8008664 <memcpy+0xc>
 8008662:	4770      	bx	lr
 8008664:	b510      	push	{r4, lr}
 8008666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800866a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800866e:	4291      	cmp	r1, r2
 8008670:	d1f9      	bne.n	8008666 <memcpy+0xe>
 8008672:	bd10      	pop	{r4, pc}

08008674 <memmove>:
 8008674:	4288      	cmp	r0, r1
 8008676:	b510      	push	{r4, lr}
 8008678:	eb01 0402 	add.w	r4, r1, r2
 800867c:	d902      	bls.n	8008684 <memmove+0x10>
 800867e:	4284      	cmp	r4, r0
 8008680:	4623      	mov	r3, r4
 8008682:	d807      	bhi.n	8008694 <memmove+0x20>
 8008684:	1e43      	subs	r3, r0, #1
 8008686:	42a1      	cmp	r1, r4
 8008688:	d008      	beq.n	800869c <memmove+0x28>
 800868a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800868e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008692:	e7f8      	b.n	8008686 <memmove+0x12>
 8008694:	4402      	add	r2, r0
 8008696:	4601      	mov	r1, r0
 8008698:	428a      	cmp	r2, r1
 800869a:	d100      	bne.n	800869e <memmove+0x2a>
 800869c:	bd10      	pop	{r4, pc}
 800869e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086a6:	e7f7      	b.n	8008698 <memmove+0x24>

080086a8 <_free_r>:
 80086a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086aa:	2900      	cmp	r1, #0
 80086ac:	d048      	beq.n	8008740 <_free_r+0x98>
 80086ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b2:	9001      	str	r0, [sp, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f1a1 0404 	sub.w	r4, r1, #4
 80086ba:	bfb8      	it	lt
 80086bc:	18e4      	addlt	r4, r4, r3
 80086be:	f000 f8d3 	bl	8008868 <__malloc_lock>
 80086c2:	4a20      	ldr	r2, [pc, #128]	; (8008744 <_free_r+0x9c>)
 80086c4:	9801      	ldr	r0, [sp, #4]
 80086c6:	6813      	ldr	r3, [r2, #0]
 80086c8:	4615      	mov	r5, r2
 80086ca:	b933      	cbnz	r3, 80086da <_free_r+0x32>
 80086cc:	6063      	str	r3, [r4, #4]
 80086ce:	6014      	str	r4, [r2, #0]
 80086d0:	b003      	add	sp, #12
 80086d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086d6:	f000 b8cd 	b.w	8008874 <__malloc_unlock>
 80086da:	42a3      	cmp	r3, r4
 80086dc:	d90b      	bls.n	80086f6 <_free_r+0x4e>
 80086de:	6821      	ldr	r1, [r4, #0]
 80086e0:	1862      	adds	r2, r4, r1
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bf04      	itt	eq
 80086e6:	681a      	ldreq	r2, [r3, #0]
 80086e8:	685b      	ldreq	r3, [r3, #4]
 80086ea:	6063      	str	r3, [r4, #4]
 80086ec:	bf04      	itt	eq
 80086ee:	1852      	addeq	r2, r2, r1
 80086f0:	6022      	streq	r2, [r4, #0]
 80086f2:	602c      	str	r4, [r5, #0]
 80086f4:	e7ec      	b.n	80086d0 <_free_r+0x28>
 80086f6:	461a      	mov	r2, r3
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	b10b      	cbz	r3, 8008700 <_free_r+0x58>
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	d9fa      	bls.n	80086f6 <_free_r+0x4e>
 8008700:	6811      	ldr	r1, [r2, #0]
 8008702:	1855      	adds	r5, r2, r1
 8008704:	42a5      	cmp	r5, r4
 8008706:	d10b      	bne.n	8008720 <_free_r+0x78>
 8008708:	6824      	ldr	r4, [r4, #0]
 800870a:	4421      	add	r1, r4
 800870c:	1854      	adds	r4, r2, r1
 800870e:	42a3      	cmp	r3, r4
 8008710:	6011      	str	r1, [r2, #0]
 8008712:	d1dd      	bne.n	80086d0 <_free_r+0x28>
 8008714:	681c      	ldr	r4, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	6053      	str	r3, [r2, #4]
 800871a:	4421      	add	r1, r4
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	e7d7      	b.n	80086d0 <_free_r+0x28>
 8008720:	d902      	bls.n	8008728 <_free_r+0x80>
 8008722:	230c      	movs	r3, #12
 8008724:	6003      	str	r3, [r0, #0]
 8008726:	e7d3      	b.n	80086d0 <_free_r+0x28>
 8008728:	6825      	ldr	r5, [r4, #0]
 800872a:	1961      	adds	r1, r4, r5
 800872c:	428b      	cmp	r3, r1
 800872e:	bf04      	itt	eq
 8008730:	6819      	ldreq	r1, [r3, #0]
 8008732:	685b      	ldreq	r3, [r3, #4]
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	bf04      	itt	eq
 8008738:	1949      	addeq	r1, r1, r5
 800873a:	6021      	streq	r1, [r4, #0]
 800873c:	6054      	str	r4, [r2, #4]
 800873e:	e7c7      	b.n	80086d0 <_free_r+0x28>
 8008740:	b003      	add	sp, #12
 8008742:	bd30      	pop	{r4, r5, pc}
 8008744:	200004f8 	.word	0x200004f8

08008748 <_malloc_r>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	1ccd      	adds	r5, r1, #3
 800874c:	f025 0503 	bic.w	r5, r5, #3
 8008750:	3508      	adds	r5, #8
 8008752:	2d0c      	cmp	r5, #12
 8008754:	bf38      	it	cc
 8008756:	250c      	movcc	r5, #12
 8008758:	2d00      	cmp	r5, #0
 800875a:	4606      	mov	r6, r0
 800875c:	db01      	blt.n	8008762 <_malloc_r+0x1a>
 800875e:	42a9      	cmp	r1, r5
 8008760:	d903      	bls.n	800876a <_malloc_r+0x22>
 8008762:	230c      	movs	r3, #12
 8008764:	6033      	str	r3, [r6, #0]
 8008766:	2000      	movs	r0, #0
 8008768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876a:	f000 f87d 	bl	8008868 <__malloc_lock>
 800876e:	4921      	ldr	r1, [pc, #132]	; (80087f4 <_malloc_r+0xac>)
 8008770:	680a      	ldr	r2, [r1, #0]
 8008772:	4614      	mov	r4, r2
 8008774:	b99c      	cbnz	r4, 800879e <_malloc_r+0x56>
 8008776:	4f20      	ldr	r7, [pc, #128]	; (80087f8 <_malloc_r+0xb0>)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	b923      	cbnz	r3, 8008786 <_malloc_r+0x3e>
 800877c:	4621      	mov	r1, r4
 800877e:	4630      	mov	r0, r6
 8008780:	f000 f862 	bl	8008848 <_sbrk_r>
 8008784:	6038      	str	r0, [r7, #0]
 8008786:	4629      	mov	r1, r5
 8008788:	4630      	mov	r0, r6
 800878a:	f000 f85d 	bl	8008848 <_sbrk_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	d123      	bne.n	80087da <_malloc_r+0x92>
 8008792:	230c      	movs	r3, #12
 8008794:	6033      	str	r3, [r6, #0]
 8008796:	4630      	mov	r0, r6
 8008798:	f000 f86c 	bl	8008874 <__malloc_unlock>
 800879c:	e7e3      	b.n	8008766 <_malloc_r+0x1e>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	1b5b      	subs	r3, r3, r5
 80087a2:	d417      	bmi.n	80087d4 <_malloc_r+0x8c>
 80087a4:	2b0b      	cmp	r3, #11
 80087a6:	d903      	bls.n	80087b0 <_malloc_r+0x68>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	441c      	add	r4, r3
 80087ac:	6025      	str	r5, [r4, #0]
 80087ae:	e004      	b.n	80087ba <_malloc_r+0x72>
 80087b0:	6863      	ldr	r3, [r4, #4]
 80087b2:	42a2      	cmp	r2, r4
 80087b4:	bf0c      	ite	eq
 80087b6:	600b      	streq	r3, [r1, #0]
 80087b8:	6053      	strne	r3, [r2, #4]
 80087ba:	4630      	mov	r0, r6
 80087bc:	f000 f85a 	bl	8008874 <__malloc_unlock>
 80087c0:	f104 000b 	add.w	r0, r4, #11
 80087c4:	1d23      	adds	r3, r4, #4
 80087c6:	f020 0007 	bic.w	r0, r0, #7
 80087ca:	1ac2      	subs	r2, r0, r3
 80087cc:	d0cc      	beq.n	8008768 <_malloc_r+0x20>
 80087ce:	1a1b      	subs	r3, r3, r0
 80087d0:	50a3      	str	r3, [r4, r2]
 80087d2:	e7c9      	b.n	8008768 <_malloc_r+0x20>
 80087d4:	4622      	mov	r2, r4
 80087d6:	6864      	ldr	r4, [r4, #4]
 80087d8:	e7cc      	b.n	8008774 <_malloc_r+0x2c>
 80087da:	1cc4      	adds	r4, r0, #3
 80087dc:	f024 0403 	bic.w	r4, r4, #3
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d0e3      	beq.n	80087ac <_malloc_r+0x64>
 80087e4:	1a21      	subs	r1, r4, r0
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f82e 	bl	8008848 <_sbrk_r>
 80087ec:	3001      	adds	r0, #1
 80087ee:	d1dd      	bne.n	80087ac <_malloc_r+0x64>
 80087f0:	e7cf      	b.n	8008792 <_malloc_r+0x4a>
 80087f2:	bf00      	nop
 80087f4:	200004f8 	.word	0x200004f8
 80087f8:	200004fc 	.word	0x200004fc

080087fc <_realloc_r>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	4607      	mov	r7, r0
 8008800:	4614      	mov	r4, r2
 8008802:	460e      	mov	r6, r1
 8008804:	b921      	cbnz	r1, 8008810 <_realloc_r+0x14>
 8008806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800880a:	4611      	mov	r1, r2
 800880c:	f7ff bf9c 	b.w	8008748 <_malloc_r>
 8008810:	b922      	cbnz	r2, 800881c <_realloc_r+0x20>
 8008812:	f7ff ff49 	bl	80086a8 <_free_r>
 8008816:	4625      	mov	r5, r4
 8008818:	4628      	mov	r0, r5
 800881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881c:	f000 f830 	bl	8008880 <_malloc_usable_size_r>
 8008820:	42a0      	cmp	r0, r4
 8008822:	d20f      	bcs.n	8008844 <_realloc_r+0x48>
 8008824:	4621      	mov	r1, r4
 8008826:	4638      	mov	r0, r7
 8008828:	f7ff ff8e 	bl	8008748 <_malloc_r>
 800882c:	4605      	mov	r5, r0
 800882e:	2800      	cmp	r0, #0
 8008830:	d0f2      	beq.n	8008818 <_realloc_r+0x1c>
 8008832:	4631      	mov	r1, r6
 8008834:	4622      	mov	r2, r4
 8008836:	f7ff ff0f 	bl	8008658 <memcpy>
 800883a:	4631      	mov	r1, r6
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff ff33 	bl	80086a8 <_free_r>
 8008842:	e7e9      	b.n	8008818 <_realloc_r+0x1c>
 8008844:	4635      	mov	r5, r6
 8008846:	e7e7      	b.n	8008818 <_realloc_r+0x1c>

08008848 <_sbrk_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_sbrk_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f8 fc2a 	bl	80010ac <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_sbrk_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_sbrk_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20001634 	.word	0x20001634

08008868 <__malloc_lock>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__malloc_lock+0x8>)
 800886a:	f000 b811 	b.w	8008890 <__retarget_lock_acquire_recursive>
 800886e:	bf00      	nop
 8008870:	2000163c 	.word	0x2000163c

08008874 <__malloc_unlock>:
 8008874:	4801      	ldr	r0, [pc, #4]	; (800887c <__malloc_unlock+0x8>)
 8008876:	f000 b80c 	b.w	8008892 <__retarget_lock_release_recursive>
 800887a:	bf00      	nop
 800887c:	2000163c 	.word	0x2000163c

08008880 <_malloc_usable_size_r>:
 8008880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008884:	1f18      	subs	r0, r3, #4
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfbc      	itt	lt
 800888a:	580b      	ldrlt	r3, [r1, r0]
 800888c:	18c0      	addlt	r0, r0, r3
 800888e:	4770      	bx	lr

08008890 <__retarget_lock_acquire_recursive>:
 8008890:	4770      	bx	lr

08008892 <__retarget_lock_release_recursive>:
 8008892:	4770      	bx	lr

08008894 <_init>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	bf00      	nop
 8008898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889a:	bc08      	pop	{r3}
 800889c:	469e      	mov	lr, r3
 800889e:	4770      	bx	lr

080088a0 <_fini>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	bf00      	nop
 80088a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a6:	bc08      	pop	{r3}
 80088a8:	469e      	mov	lr, r3
 80088aa:	4770      	bx	lr
