
6_ADC_POLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b34  08007b34  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b3c  08007b3c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001380  20000180  08007cc4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001500  08007cc4  00021500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019500  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d5  00000000  00000000  000396b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0003cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa39  00000000  00000000  0003f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016740  00000000  00000000  00059b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a713  00000000  00000000  000702b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a9cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a0  00000000  00000000  0010aa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000180 	.word	0x20000180
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007ac4 	.word	0x08007ac4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000184 	.word	0x20000184
 80001d0:	08007ac4 	.word	0x08007ac4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e0:	4a21      	ldr	r2, [pc, #132]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_ADC1_Init+0x98>)
 80004ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_ADC1_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_ADC1_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_ADC1_Init+0x98>)
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <MX_ADC1_Init+0xa0>)
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_ADC1_Init+0x98>)
 800051a:	2201      	movs	r2, #1
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_ADC1_Init+0x98>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <MX_ADC1_Init+0x98>)
 800052e:	f000 fb83 	bl	8000c38 <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000538:	f000 f962 	bl	8000800 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053c:	2301      	movs	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_ADC1_Init+0x98>)
 800054e:	f000 fd03 	bl	8000f58 <HAL_ADC_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000558:	f000 f952 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200003c4 	.word	0x200003c4
 8000568:	40012000 	.word	0x40012000
 800056c:	0f000001 	.word	0x0f000001

08000570 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_ADC_MspInit+0x7c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d127      	bne.n	80005e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 800059c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a0:	6453      	str	r3, [r2, #68]	; 0x44
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <HAL_ADC_MspInit+0x84>)
 80005de:	f000 ffeb 	bl	80015b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40012000 	.word	0x40012000
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000

080005f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <MX_GPIO_Init+0x4c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_GPIO_Init+0x4c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <HAL_IncTick+0x3c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_IncTick+0x40>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <HAL_IncTick+0x40>)
 800065a:	6013      	str	r3, [r2, #0]

	if (uwTick % 100 == 0) {
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_IncTick+0x40>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_IncTick+0x44>)
 8000662:	fba3 1302 	umull	r1, r3, r3, r2
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	2164      	movs	r1, #100	; 0x64
 800066a:	fb01 f303 	mul.w	r3, r1, r3
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <HAL_IncTick+0x32>
		scan = SET;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x48>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
	}
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	20000008 	.word	0x20000008
 8000688:	20000454 	.word	0x20000454
 800068c:	51eb851f 	.word	0x51eb851f
 8000690:	2000019e 	.word	0x2000019e

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fa4c 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f846 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ffaa 	bl	80005f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a4:	f7ff ff12 	bl	80004cc <MX_ADC1_Init>
  MX_TIM1_Init();
 80006a8:	f000 f91e 	bl	80008e8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80006ac:	f006 fcf4 	bl	8007098 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4817      	ldr	r0, [pc, #92]	; (8000710 <main+0x7c>)
 80006b4:	f002 ff50 	bl	8003558 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (scan) {
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <main+0x80>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d025      	beq.n	800070c <main+0x78>
		  scan = RESET;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <main+0x80>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start(&hadc1);
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <main+0x84>)
 80006c8:	f000 fafa 	bl	8000cc0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 80006cc:	210a      	movs	r1, #10
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <main+0x84>)
 80006d0:	f000 fbaa 	bl	8000e28 <HAL_ADC_PollForConversion>
		  adcValue = HAL_ADC_GetValue(&hadc1);
 80006d4:	4810      	ldr	r0, [pc, #64]	; (8000718 <main+0x84>)
 80006d6:	f000 fc32 	bl	8000f3e <HAL_ADC_GetValue>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <main+0x88>)
 80006e0:	801a      	strh	r2, [r3, #0]

		  duty = (uint16_t)999 * adcValue / 1023;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <main+0x88>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80006ec:	fb03 f302 	mul.w	r3, r3, r2
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <main+0x8c>)
 80006f2:	fb82 1203 	smull	r1, r2, r2, r3
 80006f6:	441a      	add	r2, r3
 80006f8:	1252      	asrs	r2, r2, #9
 80006fa:	17db      	asrs	r3, r3, #31
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <main+0x90>)
 8000702:	801a      	strh	r2, [r3, #0]
		  TIM1->CCR1 = duty;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <main+0x90>)
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <main+0x94>)
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
	  }

	  __NOP();
 800070c:	bf00      	nop
	  if (scan) {
 800070e:	e7d3      	b.n	80006b8 <main+0x24>
 8000710:	2000040c 	.word	0x2000040c
 8000714:	2000019e 	.word	0x2000019e
 8000718:	200003c4 	.word	0x200003c4
 800071c:	2000019c 	.word	0x2000019c
 8000720:	80200803 	.word	0x80200803
 8000724:	200001a0 	.word	0x200001a0
 8000728:	40010000 	.word	0x40010000

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f007 f9ba 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000778:	4a20      	ldr	r2, [pc, #128]	; (80007fc <SystemClock_Config+0xd0>)
 800077a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007a0:	2319      	movs	r3, #25
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007a4:	23c0      	movs	r3, #192	; 0xc0
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80007a8:	2306      	movs	r3, #6
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fa07 	bl	8002bc8 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c0:	f000 f81e 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fc6a 	bl	80030b8 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ea:	f000 f809 	bl	8000800 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f7ff fece 	bl	8000648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <OTG_FS_IRQHandler+0x10>)
 80008b6:	f001 f953 	bl	8001b60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200010f8 	.word	0x200010f8

080008c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b096      	sub	sp, #88	; 0x58
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2220      	movs	r2, #32
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f007 f8c7 	bl	8007ab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000928:	4a3e      	ldr	r2, [pc, #248]	; (8000a24 <MX_TIM1_Init+0x13c>)
 800092a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <MX_TIM1_Init+0x138>)
 800092e:	221f      	movs	r2, #31
 8000930:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000938:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <MX_TIM1_Init+0x138>)
 800093a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_TIM1_Init+0x138>)
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000952:	4833      	ldr	r0, [pc, #204]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000954:	f002 fd58 	bl	8003408 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800095e:	f7ff ff4f 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000968:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800096c:	4619      	mov	r1, r3
 800096e:	482c      	ldr	r0, [pc, #176]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000970:	f002 ff64 	bl	800383c <HAL_TIM_ConfigClockSource>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800097a:	f7ff ff41 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800097e:	4828      	ldr	r0, [pc, #160]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000980:	f002 fd91 	bl	80034a6 <HAL_TIM_PWM_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800098a:	f7ff ff39 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800098e:	2320      	movs	r3, #32
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800099a:	4619      	mov	r1, r3
 800099c:	4820      	ldr	r0, [pc, #128]	; (8000a20 <MX_TIM1_Init+0x138>)
 800099e:	f003 fae1 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009a8:	f7ff ff2a 	bl	8000800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ac:	2360      	movs	r3, #96	; 0x60
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_TIM1_Init+0x138>)
 80009d2:	f002 fe71 	bl	80036b8 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80009dc:	f7ff ff10 	bl	8000800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000a04:	f003 fb1c 	bl	8004040 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a0e:	f7ff fef7 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_TIM1_Init+0x138>)
 8000a14:	f000 f82a 	bl	8000a6c <HAL_TIM_MspPostInit>

}
 8000a18:	bf00      	nop
 8000a1a:	3758      	adds	r7, #88	; 0x58
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000040c 	.word	0x2000040c
 8000a24:	40010000 	.word	0x40010000

08000a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <HAL_TIM_Base_MspInit+0x3c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10d      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40010000 	.word	0x40010000
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d11e      	bne.n	8000acc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <HAL_TIM_MspPostInit+0x70>)
 8000ac8:	f000 fd76 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b0a:	f7ff fedb 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f006 ffad 	bl	8007a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fdbf 	bl	8000694 <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000b24:	08007b44 	.word	0x08007b44
  ldr r2, =_sbss
 8000b28:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000b2c:	20001500 	.word	0x20001500

08000b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_Init+0x40>)
 8000b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_Init+0x40>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x40>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 fce9 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fe50 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fd01 	bl	800159e <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 fcc9 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000454 	.word	0x20000454

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffde 	bl	8000bd8 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e033      	b.n	8000cb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d109      	bne.n	8000c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fc8a 	bl	8000570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d118      	bne.n	8000ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c7e:	f023 0302 	bic.w	r3, r3, #2
 8000c82:	f043 0202 	orr.w	r2, r3, #2
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fa86 	bl	800119c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	e001      	b.n	8000cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Start+0x1a>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e097      	b.n	8000e0a <HAL_ADC_Start+0x14a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d018      	beq.n	8000d22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d00:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <HAL_ADC_Start+0x158>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a45      	ldr	r2, [pc, #276]	; (8000e1c <HAL_ADC_Start+0x15c>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9a      	lsrs	r2, r3, #18
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d14:	e002      	b.n	8000d1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f9      	bne.n	8000d16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d15f      	bne.n	8000df0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d6e:	d106      	bne.n	8000d7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	f023 0206 	bic.w	r2, r3, #6
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d7c:	e002      	b.n	8000d84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_ADC_Start+0x160>)
 8000d8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 031f 	and.w	r3, r3, #31
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10f      	bne.n	8000dc6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d129      	bne.n	8000e08 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	e020      	b.n	8000e08 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <HAL_ADC_Start+0x164>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d11b      	bne.n	8000e08 <HAL_ADC_Start+0x148>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d114      	bne.n	8000e08 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	e00b      	b.n	8000e08 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f043 0210 	orr.w	r2, r3, #16
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f043 0201 	orr.w	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	40012300 	.word	0x40012300
 8000e24:	40012000 	.word	0x40012000

08000e28 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e44:	d113      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e54:	d10b      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f043 0220 	orr.w	r2, r3, #32
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e063      	b.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e6e:	f7ff feb3 	bl	8000bd8 <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e74:	e021      	b.n	8000eba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d01d      	beq.n	8000eba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d007      	beq.n	8000e94 <HAL_ADC_PollForConversion+0x6c>
 8000e84:	f7ff fea8 	bl	8000bd8 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d212      	bcs.n	8000eba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d00b      	beq.n	8000eba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f043 0204 	orr.w	r2, r3, #4
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e03d      	b.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d1d6      	bne.n	8000e76 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f06f 0212 	mvn.w	r2, #18
 8000ed0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d123      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d11f      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d111      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	f043 0201 	orr.w	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x1c>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e105      	b.n	8001180 <HAL_ADC_ConfigChannel+0x228>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	d925      	bls.n	8000fd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68d9      	ldr	r1, [r3, #12]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	3b1e      	subs	r3, #30
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68d9      	ldr	r1, [r3, #12]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4403      	add	r3, r0
 8000fc2:	3b1e      	subs	r3, #30
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	e022      	b.n	8001016 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6919      	ldr	r1, [r3, #16]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6919      	ldr	r1, [r3, #16]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	4603      	mov	r3, r0
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4403      	add	r3, r0
 800100c:	409a      	lsls	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b06      	cmp	r3, #6
 800101c:	d824      	bhi.n	8001068 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b05      	subs	r3, #5
 8001030:	221f      	movs	r2, #31
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	400a      	ands	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	3b05      	subs	r3, #5
 800105a:	fa00 f203 	lsl.w	r2, r0, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
 8001066:	e04c      	b.n	8001102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d824      	bhi.n	80010ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	3b23      	subs	r3, #35	; 0x23
 8001082:	221f      	movs	r2, #31
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43da      	mvns	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	400a      	ands	r2, r1
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	b29b      	uxth	r3, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b23      	subs	r3, #35	; 0x23
 80010ac:	fa00 f203 	lsl.w	r2, r0, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
 80010b8:	e023      	b.n	8001102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b41      	subs	r3, #65	; 0x41
 80010cc:	221f      	movs	r2, #31
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	400a      	ands	r2, r1
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b41      	subs	r3, #65	; 0x41
 80010f6:	fa00 f203 	lsl.w	r2, r0, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_ADC_ConfigChannel+0x234>)
 8001104:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a21      	ldr	r2, [pc, #132]	; (8001190 <HAL_ADC_ConfigChannel+0x238>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d109      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1cc>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b12      	cmp	r3, #18
 8001116:	d105      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_ADC_ConfigChannel+0x238>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d123      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x21e>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d003      	beq.n	800113e <HAL_ADC_ConfigChannel+0x1e6>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d11b      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b10      	cmp	r3, #16
 8001150:	d111      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_ADC_ConfigChannel+0x23c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_ADC_ConfigChannel+0x240>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0c9a      	lsrs	r2, r3, #18
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001168:	e002      	b.n	8001170 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3b01      	subs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f9      	bne.n	800116a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40012300 	.word	0x40012300
 8001190:	40012000 	.word	0x40012000
 8001194:	20000000 	.word	0x20000000
 8001198:	431bde83 	.word	0x431bde83

0800119c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a4:	4b79      	ldr	r3, [pc, #484]	; (800138c <ADC_Init+0x1f0>)
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	431a      	orrs	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	021a      	lsls	r2, r3, #8
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6899      	ldr	r1, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	4a58      	ldr	r2, [pc, #352]	; (8001390 <ADC_Init+0x1f4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d022      	beq.n	800127a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001242:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6899      	ldr	r1, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6899      	ldr	r1, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	e00f      	b.n	800129a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001298:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0202 	bic.w	r2, r2, #2
 80012a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6899      	ldr	r1, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e1b      	ldrb	r3, [r3, #24]
 80012b4:	005a      	lsls	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01b      	beq.n	8001300 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6859      	ldr	r1, [r3, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	3b01      	subs	r3, #1
 80012f4:	035a      	lsls	r2, r3, #13
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	e007      	b.n	8001310 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	3b01      	subs	r3, #1
 800132c:	051a      	lsls	r2, r3, #20
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6899      	ldr	r1, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001352:	025a      	lsls	r2, r3, #9
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800136a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6899      	ldr	r1, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	029a      	lsls	r2, r3, #10
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	609a      	str	r2, [r3, #8]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40012300 	.word	0x40012300
 8001390:	0f000001 	.word	0x0f000001

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff29 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff3e 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff31 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffa2 	bl	80014f0 <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e159      	b.n	8001888 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8148 	bne.w	8001882 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a2 	beq.w	8001882 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x2ec>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_GPIO_Init+0x2f0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x202>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_GPIO_Init+0x2f4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x1fe>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a47      	ldr	r2, [pc, #284]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x1fa>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <HAL_GPIO_Init+0x2fc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x1f6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a45      	ldr	r2, [pc, #276]	; (80018b8 <HAL_GPIO_Init+0x300>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x1f2>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017ba:	2300      	movs	r3, #0
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017cc:	4935      	ldr	r1, [pc, #212]	; (80018a4 <HAL_GPIO_Init+0x2ec>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HAL_GPIO_Init+0x304>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001828:	4a24      	ldr	r2, [pc, #144]	; (80018bc <HAL_GPIO_Init+0x304>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001852:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_GPIO_Init+0x304>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800187c:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_GPIO_Init+0x304>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3301      	adds	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	f67f aea2 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b08f      	sub	sp, #60	; 0x3c
 80018c4:	af0a      	add	r7, sp, #40	; 0x28
 80018c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e10f      	b.n	8001af2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d106      	bne.n	80018f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f005 fdb3 	bl	8007458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2203      	movs	r2, #3
 80018f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fcfc 	bl	800430e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	687e      	ldr	r6, [r7, #4]
 800191e:	466d      	mov	r5, sp
 8001920:	f106 0410 	add.w	r4, r6, #16
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001930:	e885 0003 	stmia.w	r5, {r0, r1}
 8001934:	1d33      	adds	r3, r6, #4
 8001936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f002 fbd3 	bl	80040e4 <USB_CoreInit>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d0      	b.n	8001af2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fcea 	bl	8004330 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e04a      	b.n	80019f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	333d      	adds	r3, #61	; 0x3d
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	333c      	adds	r3, #60	; 0x3c
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	b298      	uxth	r0, r3
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3342      	adds	r3, #66	; 0x42
 800199e:	4602      	mov	r2, r0
 80019a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	333f      	adds	r3, #63	; 0x3f
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3344      	adds	r3, #68	; 0x44
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3348      	adds	r3, #72	; 0x48
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	3350      	adds	r3, #80	; 0x50
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3af      	bcc.n	8001962 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	e044      	b.n	8001a92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3b5      	bcc.n	8001a08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	687e      	ldr	r6, [r7, #4]
 8001aa4:	466d      	mov	r5, sp
 8001aa6:	f106 0410 	add.w	r4, r6, #16
 8001aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ab6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aba:	1d33      	adds	r3, r6, #4
 8001abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f002 fc82 	bl	80043c8 <USB_DevInit>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00d      	b.n	8001af2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fcfe 	bl	80054ec <USB_DevDisconnect>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001afa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_Start+0x1c>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e020      	b.n	8001b58 <HAL_PCD_Start+0x5e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d109      	bne.n	8001b3a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d005      	beq.n	8001b3a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fbd4 	bl	80042ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fcae 	bl	80054aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b08d      	sub	sp, #52	; 0x34
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fd6c 	bl	8005654 <USB_GetMode>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 839d 	bne.w	80022be <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fcd0 	bl	800552e <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8393 	beq.w	80022bc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fcc7 	bl	800552e <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d107      	bne.n	8001bba <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f002 0202 	and.w	r2, r2, #2
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fcb5 	bl	800552e <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d161      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	0c5b      	lsrs	r3, r3, #17
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d124      	bne.n	8001c54 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d035      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6a38      	ldr	r0, [r7, #32]
 8001c2a:	f003 faec 	bl	8005206 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c3a:	441a      	add	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c4c:	441a      	add	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	e016      	b.n	8001c82 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	0c5b      	lsrs	r3, r3, #17
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d110      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c66:	2208      	movs	r2, #8
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6a38      	ldr	r0, [r7, #32]
 8001c6c:	f003 facb 	bl	8005206 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c7c:	441a      	add	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0210 	orr.w	r2, r2, #16
 8001c90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fc49 	bl	800552e <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ca6:	d16e      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fc4f 	bl	8005554 <USB_ReadDevAllOutEpInterrupt>
 8001cb6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001cb8:	e062      	b.n	8001d80 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d057      	beq.n	8001d74 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fc74 	bl	80055bc <USB_ReadDevOutEPInterrupt>
 8001cd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00c      	beq.n	8001cfa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cec:	461a      	mov	r2, r3
 8001cee:	2301      	movs	r3, #1
 8001cf0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fdb1 	bl	800285c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00c      	beq.n	8001d1e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d10:	461a      	mov	r2, r3
 8001d12:	2308      	movs	r3, #8
 8001d14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 feab 	bl	8002a74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d34:	461a      	mov	r2, r3
 8001d36:	2310      	movs	r3, #16
 8001d38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d50:	461a      	mov	r2, r3
 8001d52:	2320      	movs	r3, #32
 8001d54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	3301      	adds	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d199      	bne.n	8001cba <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fbcf 	bl	800552e <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d9a:	f040 80c0 	bne.w	8001f1e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fbf0 	bl	8005588 <USB_ReadDevAllInEpInterrupt>
 8001da8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dae:	e0b2      	b.n	8001f16 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a7 	beq.w	8001f0a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fc16 	bl	80055f8 <USB_ReadDevInEPInterrupt>
 8001dcc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d057      	beq.n	8001e88 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	2201      	movs	r2, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69f9      	ldr	r1, [r7, #28]
 8001df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001df8:	4013      	ands	r3, r2
 8001dfa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d132      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	3348      	adds	r3, #72	; 0x48
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4403      	add	r3, r0
 8001e36:	3344      	adds	r3, #68	; 0x44
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4419      	add	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4403      	add	r3, r0
 8001e4a:	3348      	adds	r3, #72	; 0x48
 8001e4c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d113      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x31c>
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3350      	adds	r3, #80	; 0x50
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d108      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e74:	461a      	mov	r2, r3
 8001e76:	2101      	movs	r1, #1
 8001e78:	f003 fc1e 	bl	80056b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f005 fb69 	bl	800755a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2340      	movs	r3, #64	; 0x40
 8001eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fc1b 	bl	8002740 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f af49 	bne.w	8001db0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fb03 	bl	800552e <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f32:	d122      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fe27 	bl	8002bb0 <HAL_PCDEx_LPM_Callback>
 8001f62:	e002      	b.n	8001f6a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f005 fb65 	bl	8007634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fad5 	bl	800552e <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f8e:	d112      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f005 fb21 	bl	80075e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fb4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fab7 	bl	800552e <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fca:	f040 80c7 	bne.w	800215c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f002 fb51 	bl	8004690 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff2:	e056      	b.n	80020a2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002000:	461a      	mov	r2, r3
 8002002:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002006:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002018:	0151      	lsls	r1, r2, #5
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	440a      	add	r2, r1
 800201e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002026:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002038:	0151      	lsls	r1, r2, #5
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	440a      	add	r2, r1
 800203e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002046:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	4413      	add	r3, r2
 8002050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002054:	461a      	mov	r2, r3
 8002056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800205a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206c:	0151      	lsls	r1, r2, #5
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	440a      	add	r2, r1
 8002072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800207a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208c:	0151      	lsls	r1, r2, #5
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	440a      	add	r2, r1
 8002092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002096:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800209a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	3301      	adds	r3, #1
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d3a3      	bcc.n	8001ff4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d8:	f043 030b 	orr.w	r3, r3, #11
 80020dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ee:	f043 030b 	orr.w	r3, r3, #11
 80020f2:	6453      	str	r3, [r2, #68]	; 0x44
 80020f4:	e015      	b.n	8002122 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002108:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800210c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800211c:	f043 030b 	orr.w	r3, r3, #11
 8002120:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002130:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002134:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002146:	461a      	mov	r2, r3
 8002148:	f003 fab6 	bl	80056b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800215a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f003 f9e4 	bl	800552e <USB_ReadInterrupts>
 8002166:	4603      	mov	r3, r0
 8002168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002170:	d124      	bne.n	80021bc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fa7a 	bl	8005670 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f002 fae2 	bl	800474a <USB_GetDevSpeed>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681c      	ldr	r4, [r3, #0]
 8002192:	f001 f92d 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8002196:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	4620      	mov	r0, r4
 80021a2:	f002 f801 	bl	80041a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f005 f9ff 	bl	80075aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 f9b4 	bl	800552e <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d10a      	bne.n	80021e6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 f9dc 	bl	800758e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 0208 	and.w	r2, r2, #8
 80021e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 f99f 	bl	800552e <USB_ReadInterrupts>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021fa:	d10f      	bne.n	800221c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	b2db      	uxtb	r3, r3
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f005 fa34 	bl	8007674 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800221a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f003 f984 	bl	800552e <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002230:	d10f      	bne.n	8002252 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f005 fa07 	bl	8007650 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 f969 	bl	800552e <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d10a      	bne.n	800227e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f005 fa15 	bl	8007698 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800227c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 f953 	bl	800552e <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b04      	cmp	r3, #4
 8002290:	d115      	bne.n	80022be <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f005 fa05 	bl	80076b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e000      	b.n	80022be <HAL_PCD_IRQHandler+0x75e>
      return;
 80022bc:	bf00      	nop
    }
  }
}
 80022be:	3734      	adds	r7, #52	; 0x34
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_PCD_SetAddress+0x1a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e013      	b.n	8002306 <HAL_PCD_SetAddress+0x42>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f8b1 	bl	800545e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	4608      	mov	r0, r1
 8002318:	4611      	mov	r1, r2
 800231a:	461a      	mov	r2, r3
 800231c:	4603      	mov	r3, r0
 800231e:	70fb      	strb	r3, [r7, #3]
 8002320:	460b      	mov	r3, r1
 8002322:	803b      	strh	r3, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800232c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002330:	2b00      	cmp	r3, #0
 8002332:	da0f      	bge.n	8002354 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	f003 020f 	and.w	r2, r3, #15
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3338      	adds	r3, #56	; 0x38
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	3304      	adds	r3, #4
 800234a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	705a      	strb	r2, [r3, #1]
 8002352:	e00f      	b.n	8002374 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	f003 020f 	and.w	r2, r3, #15
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002380:	883a      	ldrh	r2, [r7, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	78ba      	ldrb	r2, [r7, #2]
 800238a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800239e:	78bb      	ldrb	r3, [r7, #2]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d102      	bne.n	80023aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_PCD_EP_Open+0xaa>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e00e      	b.n	80023d6 <HAL_PCD_EP_Open+0xc8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 f9e4 	bl	8004794 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80023d4:	7afb      	ldrb	r3, [r7, #11]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	da0f      	bge.n	8002412 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	3338      	adds	r3, #56	; 0x38
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	705a      	strb	r2, [r3, #1]
 8002410:	e00f      	b.n	8002432 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 020f 	and.w	r2, r3, #15
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	b2da      	uxtb	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_PCD_EP_Close+0x6e>
 8002448:	2302      	movs	r3, #2
 800244a:	e00e      	b.n	800246a <HAL_PCD_EP_Close+0x8c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	4618      	mov	r0, r3
 800245c:	f002 fa22 	bl	80048a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	460b      	mov	r3, r1
 8002480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002482:	7afb      	ldrb	r3, [r7, #11]
 8002484:	f003 020f 	and.w	r2, r3, #15
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	3304      	adds	r3, #4
 800249a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6979      	ldr	r1, [r7, #20]
 80024e6:	f002 fcfd 	bl	8004ee4 <USB_EP0StartXfer>
 80024ea:	e008      	b.n	80024fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	6979      	ldr	r1, [r7, #20]
 80024fa:	f002 faaf 	bl	8004a5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 020f 	and.w	r2, r3, #15
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	460b      	mov	r3, r1
 8002546:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002548:	7afb      	ldrb	r3, [r7, #11]
 800254a:	f003 020f 	and.w	r2, r3, #15
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	3338      	adds	r3, #56	; 0x38
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2201      	movs	r2, #1
 8002576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	b2da      	uxtb	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	f002 fc9b 	bl	8004ee4 <USB_EP0StartXfer>
 80025ae:	e008      	b.n	80025c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6979      	ldr	r1, [r7, #20]
 80025be:	f002 fa4d 	bl	8004a5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	f003 020f 	and.w	r2, r3, #15
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d901      	bls.n	80025ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e050      	b.n	800268c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da0f      	bge.n	8002612 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	f003 020f 	and.w	r2, r3, #15
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	3338      	adds	r3, #56	; 0x38
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	3304      	adds	r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	705a      	strb	r2, [r3, #1]
 8002610:	e00d      	b.n	800262e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_PCD_EP_SetStall+0x82>
 800264a:	2302      	movs	r3, #2
 800264c:	e01e      	b.n	800268c <HAL_PCD_EP_SetStall+0xc0>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fe2a 	bl	80052b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	b2d9      	uxtb	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800267c:	461a      	mov	r2, r3
 800267e:	f003 f81b 	bl	80056b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d901      	bls.n	80026b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e042      	b.n	8002738 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da0f      	bge.n	80026da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	f003 020f 	and.w	r2, r3, #15
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	3338      	adds	r3, #56	; 0x38
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	705a      	strb	r2, [r3, #1]
 80026d8:	e00f      	b.n	80026fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PCD_EP_ClrStall+0x86>
 8002716:	2302      	movs	r3, #2
 8002718:	e00e      	b.n	8002738 <HAL_PCD_EP_ClrStall+0xa4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fe32 	bl	8005392 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af02      	add	r7, sp, #8
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	3338      	adds	r3, #56	; 0x38
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	d901      	bls.n	8002778 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e06c      	b.n	8002852 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	429a      	cmp	r2, r3
 800278c:	d902      	bls.n	8002794 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	3303      	adds	r3, #3
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800279c:	e02b      	b.n	80027f6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d902      	bls.n	80027ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3303      	adds	r3, #3
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68d9      	ldr	r1, [r3, #12]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4603      	mov	r3, r0
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f002 fcd6 	bl	800518a <USB_WritePacket>

    ep->xfer_buff  += len;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	441a      	add	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	441a      	add	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	b29b      	uxth	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	429a      	cmp	r2, r3
 800280a:	d809      	bhi.n	8002820 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002814:	429a      	cmp	r2, r3
 8002816:	d203      	bcs.n	8002820 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1be      	bne.n	800279e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	429a      	cmp	r2, r3
 800282a:	d811      	bhi.n	8002850 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	2201      	movs	r2, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	43db      	mvns	r3, r3
 8002846:	6939      	ldr	r1, [r7, #16]
 8002848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800284c:	4013      	ands	r3, r2
 800284e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	333c      	adds	r3, #60	; 0x3c
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 80a0 	bne.w	80029d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d015      	beq.n	80028ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a72      	ldr	r2, [pc, #456]	; (8002a6c <PCD_EP_OutXfrComplete_int+0x210>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	f240 80dd 	bls.w	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80d7 	beq.w	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c0:	461a      	mov	r2, r3
 80028c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	e0cb      	b.n	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e0:	461a      	mov	r2, r3
 80028e2:	2320      	movs	r3, #32
 80028e4:	6093      	str	r3, [r2, #8]
 80028e6:	e0bc      	b.n	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 80b7 	bne.w	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <PCD_EP_OutXfrComplete_int+0x210>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d90f      	bls.n	800291c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002912:	461a      	mov	r2, r3
 8002914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002918:	6093      	str	r3, [r2, #8]
 800291a:	e0a2      	b.n	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800292e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	0159      	lsls	r1, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	440b      	add	r3, r1
 8002938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002942:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4403      	add	r3, r0
 8002952:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002956:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4403      	add	r3, r0
 800297a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4419      	add	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4403      	add	r3, r0
 8002990:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002994:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d114      	bne.n	80029c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029be:	461a      	mov	r2, r3
 80029c0:	2101      	movs	r1, #1
 80029c2:	f002 fe79 	bl	80056b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f004 fda9 	bl	8007524 <HAL_PCD_DataOutStageCallback>
 80029d2:	e046      	b.n	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <PCD_EP_OutXfrComplete_int+0x214>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d124      	bne.n	8002a26 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f2:	461a      	mov	r2, r3
 80029f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f8:	6093      	str	r3, [r2, #8]
 80029fa:	e032      	b.n	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a12:	461a      	mov	r2, r3
 8002a14:	2320      	movs	r3, #32
 8002a16:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f004 fd80 	bl	8007524 <HAL_PCD_DataOutStageCallback>
 8002a24:	e01d      	b.n	8002a62 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d114      	bne.n	8002a56 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2100      	movs	r1, #0
 8002a52:	f002 fe31 	bl	80056b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f004 fd61 	bl	8007524 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	4f54300a 	.word	0x4f54300a
 8002a70:	4f54310a 	.word	0x4f54310a

08002a74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	333c      	adds	r3, #60	; 0x3c
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <PCD_EP_OutSetupPacket_int+0x88>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d90e      	bls.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f004 fd19 	bl	8007500 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d90c      	bls.n	8002af0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	f002 fde4 	bl	80056b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	4f54300a 	.word	0x4f54300a

08002b00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b1e:	883b      	ldrh	r3, [r7, #0]
 8002b20:	0419      	lsls	r1, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b2c:	e028      	b.n	8002b80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e00d      	b.n	8002b5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	3340      	adds	r3, #64	; 0x40
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d3ec      	bcc.n	8002b42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b68:	883b      	ldrh	r3, [r7, #0]
 8002b6a:	0418      	lsls	r0, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4302      	orrs	r2, r0
 8002b78:	3340      	adds	r3, #64	; 0x40
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e264      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d075      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be6:	4ba3      	ldr	r3, [pc, #652]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4ba0      	ldr	r3, [pc, #640]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b9d      	ldr	r3, [pc, #628]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b99      	ldr	r3, [pc, #612]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x108>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e23f      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x74>
 8002c2e:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a90      	ldr	r2, [pc, #576]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a8a      	ldr	r2, [pc, #552]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a87      	ldr	r2, [pc, #540]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c60:	4b84      	ldr	r3, [pc, #528]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a83      	ldr	r2, [pc, #524]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b81      	ldr	r3, [pc, #516]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a80      	ldr	r2, [pc, #512]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fd ffaa 	bl	8000bd8 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fd ffa6 	bl	8000bd8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e204      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xc0>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fd ff96 	bl	8000bd8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fd ff92 	bl	8000bd8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1f0      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xe8>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cde:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b5c      	ldr	r3, [pc, #368]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1c4      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4952      	ldr	r1, [pc, #328]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <HAL_RCC_OscConfig+0x2b0>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fd ff4b 	bl	8000bd8 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fd ff47 	bl	8000bd8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1a5      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4940      	ldr	r1, [pc, #256]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <HAL_RCC_OscConfig+0x2b0>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fd ff2a 	bl	8000bd8 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fd ff26 	bl	8000bd8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e184      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d030      	beq.n	8002e14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_RCC_OscConfig+0x2b4>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fd ff0a 	bl	8000bd8 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fd ff06 	bl	8000bd8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e164      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x200>
 8002de6:	e015      	b.n	8002e14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCC_OscConfig+0x2b4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fd fef3 	bl	8000bd8 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fd feef 	bl	8000bd8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e14d      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a0 	beq.w	8002f62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	6413      	str	r3, [r2, #64]	; 0x40
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_OscConfig+0x2b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCC_OscConfig+0x2b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_RCC_OscConfig+0x2b8>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7fd feb5 	bl	8000bd8 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	e011      	b.n	8002e96 <HAL_RCC_OscConfig+0x2ce>
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	42470000 	.word	0x42470000
 8002e7c:	42470e80 	.word	0x42470e80
 8002e80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fd fea8 	bl	8000bd8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e106      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b85      	ldr	r3, [pc, #532]	; (80030ac <HAL_RCC_OscConfig+0x4e4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2f0>
 8002eaa:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a80      	ldr	r2, [pc, #512]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	e01c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x32a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x312>
 8002ec0:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a7a      	ldr	r2, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	4b78      	ldr	r3, [pc, #480]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a77      	ldr	r2, [pc, #476]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x32a>
 8002eda:	4b75      	ldr	r3, [pc, #468]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a74      	ldr	r2, [pc, #464]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	4b72      	ldr	r3, [pc, #456]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a71      	ldr	r2, [pc, #452]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd fe6d 	bl	8000bd8 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fd fe69 	bl	8000bd8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0c5      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ee      	beq.n	8002f02 <HAL_RCC_OscConfig+0x33a>
 8002f24:	e014      	b.n	8002f50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fd fe57 	bl	8000bd8 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fd fe53 	bl	8000bd8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0af      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b56      	ldr	r3, [pc, #344]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a55      	ldr	r2, [pc, #340]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 809b 	beq.w	80030a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f6c:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d05c      	beq.n	8003032 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d141      	bne.n	8003004 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fd fe27 	bl	8000bd8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fd fe23 	bl	8000bd8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e081      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa0:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	019b      	lsls	r3, r3, #6
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	4937      	ldr	r1, [pc, #220]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd6:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fdfc 	bl	8000bd8 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fd fdf8 	bl	8000bd8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e056      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x41c>
 8003002:	e04e      	b.n	80030a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fd fde5 	bl	8000bd8 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7fd fde1 	bl	8000bd8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e03f      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x44a>
 8003030:	e037      	b.n	80030a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e032      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800303e:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_RCC_OscConfig+0x4e8>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d028      	beq.n	800309e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d121      	bne.n	800309e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d11a      	bne.n	800309e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800306e:	4013      	ands	r3, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003074:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003076:	4293      	cmp	r3, r2
 8003078:	d111      	bne.n	800309e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	3b01      	subs	r3, #1
 8003088:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d107      	bne.n	800309e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40007000 	.word	0x40007000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	42470060 	.word	0x42470060

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cc      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d90c      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b65      	ldr	r3, [pc, #404]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d044      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e067      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4934      	ldr	r1, [pc, #208]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd fd16 	bl	8000bd8 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fd fd12 	bl	8000bd8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fc8a 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	08007b24 	.word	0x08007b24
 800327c:	20000000 	.word	0x20000000
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b5b0      	push	{r4, r5, r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800328a:	2100      	movs	r1, #0
 800328c:	6079      	str	r1, [r7, #4]
 800328e:	2100      	movs	r1, #0
 8003290:	60f9      	str	r1, [r7, #12]
 8003292:	2100      	movs	r1, #0
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003296:	2100      	movs	r1, #0
 8003298:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329a:	4952      	ldr	r1, [pc, #328]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800329c:	6889      	ldr	r1, [r1, #8]
 800329e:	f001 010c 	and.w	r1, r1, #12
 80032a2:	2908      	cmp	r1, #8
 80032a4:	d00d      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80032a6:	2908      	cmp	r1, #8
 80032a8:	f200 8094 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x150>
 80032ac:	2900      	cmp	r1, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x32>
 80032b0:	2904      	cmp	r1, #4
 80032b2:	d003      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x38>
 80032b4:	e08e      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b6:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80032b8:	60bb      	str	r3, [r7, #8]
       break;
 80032ba:	e08e      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <HAL_RCC_GetSysClockFreq+0x168>)
 80032be:	60bb      	str	r3, [r7, #8]
      break;
 80032c0:	e08b      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c2:	4948      	ldr	r1, [pc, #288]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032c4:	6849      	ldr	r1, [r1, #4]
 80032c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80032ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032cc:	4945      	ldr	r1, [pc, #276]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ce:	6849      	ldr	r1, [r1, #4]
 80032d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80032d4:	2900      	cmp	r1, #0
 80032d6:	d024      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d8:	4942      	ldr	r1, [pc, #264]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032da:	6849      	ldr	r1, [r1, #4]
 80032dc:	0989      	lsrs	r1, r1, #6
 80032de:	4608      	mov	r0, r1
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80032e8:	f04f 0500 	mov.w	r5, #0
 80032ec:	ea00 0204 	and.w	r2, r0, r4
 80032f0:	ea01 0305 	and.w	r3, r1, r5
 80032f4:	493d      	ldr	r1, [pc, #244]	; (80033ec <HAL_RCC_GetSysClockFreq+0x168>)
 80032f6:	fb01 f003 	mul.w	r0, r1, r3
 80032fa:	2100      	movs	r1, #0
 80032fc:	fb01 f102 	mul.w	r1, r1, r2
 8003300:	1844      	adds	r4, r0, r1
 8003302:	493a      	ldr	r1, [pc, #232]	; (80033ec <HAL_RCC_GetSysClockFreq+0x168>)
 8003304:	fba2 0101 	umull	r0, r1, r2, r1
 8003308:	1863      	adds	r3, r4, r1
 800330a:	4619      	mov	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	f7fc ff5e 	bl	80001d4 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e04a      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	461a      	mov	r2, r3
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	ea02 0400 	and.w	r4, r2, r0
 800333a:	ea03 0501 	and.w	r5, r3, r1
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	014b      	lsls	r3, r1, #5
 800334c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003350:	0142      	lsls	r2, r0, #5
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	1b00      	subs	r0, r0, r4
 8003358:	eb61 0105 	sbc.w	r1, r1, r5
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	018b      	lsls	r3, r1, #6
 8003366:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800336a:	0182      	lsls	r2, r0, #6
 800336c:	1a12      	subs	r2, r2, r0
 800336e:	eb63 0301 	sbc.w	r3, r3, r1
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	00d9      	lsls	r1, r3, #3
 800337c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003380:	00d0      	lsls	r0, r2, #3
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	1912      	adds	r2, r2, r4
 8003388:	eb45 0303 	adc.w	r3, r5, r3
 800338c:	f04f 0000 	mov.w	r0, #0
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	0299      	lsls	r1, r3, #10
 8003396:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800339a:	0290      	lsls	r0, r2, #10
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	f7fc ff12 	bl	80001d4 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	3301      	adds	r3, #1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	60bb      	str	r3, [r7, #8]
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80033d6:	60bb      	str	r3, [r7, #8]
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	68bb      	ldr	r3, [r7, #8]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	00f42400 	.word	0x00f42400
 80033ec:	017d7840 	.word	0x017d7840

080033f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000000 	.word	0x20000000

08003408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fafa 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 fac0 	bl	80039cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e041      	b.n	800353c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f839 	bl	8003544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f000 fa71 	bl	80039cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <HAL_TIM_PWM_Start+0x24>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e022      	b.n	80035c2 <HAL_TIM_PWM_Start+0x6a>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d109      	bne.n	8003596 <HAL_TIM_PWM_Start+0x3e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	bf14      	ite	ne
 800358e:	2301      	movne	r3, #1
 8003590:	2300      	moveq	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	e015      	b.n	80035c2 <HAL_TIM_PWM_Start+0x6a>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d109      	bne.n	80035b0 <HAL_TIM_PWM_Start+0x58>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e008      	b.n	80035c2 <HAL_TIM_PWM_Start+0x6a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e068      	b.n	800369c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start+0x82>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d8:	e013      	b.n	8003602 <HAL_TIM_PWM_Start+0xaa>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start+0x92>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	e00b      	b.n	8003602 <HAL_TIM_PWM_Start+0xaa>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start+0xa2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f8:	e003      	b.n	8003602 <HAL_TIM_PWM_Start+0xaa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2201      	movs	r2, #1
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fc84 	bl	8003f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <HAL_TIM_PWM_Start+0x14c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d107      	bne.n	800362a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_TIM_PWM_Start+0x14c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d018      	beq.n	8003666 <HAL_TIM_PWM_Start+0x10e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d013      	beq.n	8003666 <HAL_TIM_PWM_Start+0x10e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_TIM_PWM_Start+0x150>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00e      	beq.n	8003666 <HAL_TIM_PWM_Start+0x10e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_TIM_PWM_Start+0x154>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_TIM_PWM_Start+0x10e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_TIM_PWM_Start+0x158>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_TIM_PWM_Start+0x10e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <HAL_TIM_PWM_Start+0x15c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b06      	cmp	r3, #6
 8003676:	d010      	beq.n	800369a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003688:	e007      	b.n	800369a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40014000 	.word	0x40014000

080036b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0ae      	b.n	8003834 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	f200 809f 	bhi.w	8003824 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003825 	.word	0x08003825
 80036f4:	08003825 	.word	0x08003825
 80036f8:	08003825 	.word	0x08003825
 80036fc:	08003761 	.word	0x08003761
 8003700:	08003825 	.word	0x08003825
 8003704:	08003825 	.word	0x08003825
 8003708:	08003825 	.word	0x08003825
 800370c:	080037a3 	.word	0x080037a3
 8003710:	08003825 	.word	0x08003825
 8003714:	08003825 	.word	0x08003825
 8003718:	08003825 	.word	0x08003825
 800371c:	080037e3 	.word	0x080037e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f9d0 	bl	8003acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0208 	orr.w	r2, r2, #8
 800373a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0204 	bic.w	r2, r2, #4
 800374a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6999      	ldr	r1, [r3, #24]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	619a      	str	r2, [r3, #24]
      break;
 800375e:	e064      	b.n	800382a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fa16 	bl	8003b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6999      	ldr	r1, [r3, #24]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	021a      	lsls	r2, r3, #8
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	619a      	str	r2, [r3, #24]
      break;
 80037a0:	e043      	b.n	800382a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fa61 	bl	8003c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0208 	orr.w	r2, r2, #8
 80037bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0204 	bic.w	r2, r2, #4
 80037cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69d9      	ldr	r1, [r3, #28]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	61da      	str	r2, [r3, #28]
      break;
 80037e0:	e023      	b.n	800382a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 faab 	bl	8003d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69d9      	ldr	r1, [r3, #28]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	021a      	lsls	r2, r3, #8
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	61da      	str	r2, [r3, #28]
      break;
 8003822:	e002      	b.n	800382a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
      break;
 8003828:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_TIM_ConfigClockSource+0x1c>
 8003854:	2302      	movs	r3, #2
 8003856:	e0b4      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x186>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003890:	d03e      	beq.n	8003910 <HAL_TIM_ConfigClockSource+0xd4>
 8003892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003896:	f200 8087 	bhi.w	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	f000 8086 	beq.w	80039ae <HAL_TIM_ConfigClockSource+0x172>
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a6:	d87f      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d01a      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0xa6>
 80038ac:	2b70      	cmp	r3, #112	; 0x70
 80038ae:	d87b      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d050      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x11a>
 80038b4:	2b60      	cmp	r3, #96	; 0x60
 80038b6:	d877      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d03c      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xfa>
 80038bc:	2b50      	cmp	r3, #80	; 0x50
 80038be:	d873      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d058      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x13a>
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d86f      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d064      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	2b30      	cmp	r3, #48	; 0x30
 80038ce:	d86b      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d060      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d867      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d05c      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d05a      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	e062      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6899      	ldr	r1, [r3, #8]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f000 faf1 	bl	8003ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	609a      	str	r2, [r3, #8]
      break;
 800390e:	e04f      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6899      	ldr	r1, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f000 fada 	bl	8003ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003932:	609a      	str	r2, [r3, #8]
      break;
 8003934:	e03c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	461a      	mov	r2, r3
 8003944:	f000 fa4e 	bl	8003de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2150      	movs	r1, #80	; 0x50
 800394e:	4618      	mov	r0, r3
 8003950:	f000 faa7 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003954:	e02c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	461a      	mov	r2, r3
 8003964:	f000 fa6d 	bl	8003e42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2160      	movs	r1, #96	; 0x60
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fa97 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003974:	e01c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	461a      	mov	r2, r3
 8003984:	f000 fa2e 	bl	8003de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fa87 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003994:	e00c      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f000 fa7e 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80039a6:	e003      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e000      	b.n	80039b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <TIM_Base_SetConfig+0xe4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00f      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d00b      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <TIM_Base_SetConfig+0xe8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a30      	ldr	r2, [pc, #192]	; (8003ab8 <TIM_Base_SetConfig+0xec>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <TIM_Base_SetConfig+0xf0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d108      	bne.n	8003a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <TIM_Base_SetConfig+0xe4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01b      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a24:	d017      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <TIM_Base_SetConfig+0xe8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <TIM_Base_SetConfig+0xec>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <TIM_Base_SetConfig+0xf0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <TIM_Base_SetConfig+0xf4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <TIM_Base_SetConfig+0xf8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <TIM_Base_SetConfig+0xfc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <TIM_Base_SetConfig+0xe4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	615a      	str	r2, [r3, #20]
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800

08003acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f023 0302 	bic.w	r3, r3, #2
 8003b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <TIM_OC1_SetConfig+0xc8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d10c      	bne.n	8003b42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0308 	bic.w	r3, r3, #8
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <TIM_OC1_SetConfig+0xc8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d111      	bne.n	8003b6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	621a      	str	r2, [r3, #32]
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40010000 	.word	0x40010000

08003b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f023 0210 	bic.w	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <TIM_OC2_SetConfig+0xd4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10d      	bne.n	8003c14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <TIM_OC2_SetConfig+0xd4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d113      	bne.n	8003c44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000

08003c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <TIM_OC3_SetConfig+0xd0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d10d      	bne.n	8003cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <TIM_OC3_SetConfig+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d113      	bne.n	8003d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	621a      	str	r2, [r3, #32]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	40010000 	.word	0x40010000

08003d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	031b      	lsls	r3, r3, #12
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <TIM_OC4_SetConfig+0x9c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d109      	bne.n	8003db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000

08003de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 030a 	bic.w	r3, r3, #10
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b087      	sub	sp, #28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0210 	bic.w	r2, r3, #16
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f043 0307 	orr.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e050      	b.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d013      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a15      	ldr	r2, [pc, #84]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10c      	bne.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40014000 	.word	0x40014000

08004040 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004058:	2302      	movs	r3, #2
 800405a:	e03d      	b.n	80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e4:	b084      	sub	sp, #16
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	f107 001c 	add.w	r0, r7, #28
 80040f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d122      	bne.n	8004142 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f001 fb1c 	bl	8005774 <USB_CoreReset>
 800413c:	4603      	mov	r3, r0
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e01a      	b.n	8004178 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f001 fb10 	bl	8005774 <USB_CoreReset>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
 800416a:	e005      	b.n	8004178 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	2b01      	cmp	r3, #1
 800417c:	d10b      	bne.n	8004196 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f043 0206 	orr.w	r2, r3, #6
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f043 0220 	orr.w	r2, r3, #32
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041a2:	b004      	add	sp, #16
 80041a4:	4770      	bx	lr
	...

080041a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d165      	bne.n	8004288 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <USB_SetTurnaroundTime+0x11c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d906      	bls.n	80041d2 <USB_SetTurnaroundTime+0x2a>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4a40      	ldr	r2, [pc, #256]	; (80042c8 <USB_SetTurnaroundTime+0x120>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d202      	bcs.n	80041d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041cc:	230f      	movs	r3, #15
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e062      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4a3c      	ldr	r2, [pc, #240]	; (80042c8 <USB_SetTurnaroundTime+0x120>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d306      	bcc.n	80041e8 <USB_SetTurnaroundTime+0x40>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4a3b      	ldr	r2, [pc, #236]	; (80042cc <USB_SetTurnaroundTime+0x124>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d202      	bcs.n	80041e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041e2:	230e      	movs	r3, #14
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e057      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4a38      	ldr	r2, [pc, #224]	; (80042cc <USB_SetTurnaroundTime+0x124>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d306      	bcc.n	80041fe <USB_SetTurnaroundTime+0x56>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <USB_SetTurnaroundTime+0x128>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d202      	bcs.n	80041fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041f8:	230d      	movs	r3, #13
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e04c      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4a33      	ldr	r2, [pc, #204]	; (80042d0 <USB_SetTurnaroundTime+0x128>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d306      	bcc.n	8004214 <USB_SetTurnaroundTime+0x6c>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4a32      	ldr	r2, [pc, #200]	; (80042d4 <USB_SetTurnaroundTime+0x12c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d802      	bhi.n	8004214 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800420e:	230c      	movs	r3, #12
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e041      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a2f      	ldr	r2, [pc, #188]	; (80042d4 <USB_SetTurnaroundTime+0x12c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d906      	bls.n	800422a <USB_SetTurnaroundTime+0x82>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a2e      	ldr	r2, [pc, #184]	; (80042d8 <USB_SetTurnaroundTime+0x130>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d802      	bhi.n	800422a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004224:	230b      	movs	r3, #11
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e036      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <USB_SetTurnaroundTime+0x130>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d906      	bls.n	8004240 <USB_SetTurnaroundTime+0x98>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4a29      	ldr	r2, [pc, #164]	; (80042dc <USB_SetTurnaroundTime+0x134>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d802      	bhi.n	8004240 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800423a:	230a      	movs	r3, #10
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e02b      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a26      	ldr	r2, [pc, #152]	; (80042dc <USB_SetTurnaroundTime+0x134>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d906      	bls.n	8004256 <USB_SetTurnaroundTime+0xae>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <USB_SetTurnaroundTime+0x138>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d202      	bcs.n	8004256 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004250:	2309      	movs	r3, #9
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e020      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <USB_SetTurnaroundTime+0x138>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d306      	bcc.n	800426c <USB_SetTurnaroundTime+0xc4>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <USB_SetTurnaroundTime+0x13c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d802      	bhi.n	800426c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004266:	2308      	movs	r3, #8
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e015      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <USB_SetTurnaroundTime+0x13c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0xda>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <USB_SetTurnaroundTime+0x140>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d202      	bcs.n	8004282 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800427c:	2307      	movs	r3, #7
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e00a      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004282:	2306      	movs	r3, #6
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e007      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800428e:	2309      	movs	r3, #9
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e001      	b.n	8004298 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004294:	2309      	movs	r3, #9
 8004296:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	029b      	lsls	r3, r3, #10
 80042ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	00d8acbf 	.word	0x00d8acbf
 80042c8:	00e4e1c0 	.word	0x00e4e1c0
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	01067380 	.word	0x01067380
 80042d4:	011a499f 	.word	0x011a499f
 80042d8:	01312cff 	.word	0x01312cff
 80042dc:	014ca43f 	.word	0x014ca43f
 80042e0:	016e3600 	.word	0x016e3600
 80042e4:	01a6ab1f 	.word	0x01a6ab1f
 80042e8:	01e84800 	.word	0x01e84800

080042ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d115      	bne.n	800437e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800435e:	2001      	movs	r0, #1
 8004360:	f7fc fc46 	bl	8000bf0 <HAL_Delay>
      ms++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 f972 	bl	8005654 <USB_GetMode>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d01e      	beq.n	80043b4 <USB_SetCurrentMode+0x84>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b31      	cmp	r3, #49	; 0x31
 800437a:	d9f0      	bls.n	800435e <USB_SetCurrentMode+0x2e>
 800437c:	e01a      	b.n	80043b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d115      	bne.n	80043b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004390:	2001      	movs	r0, #1
 8004392:	f7fc fc2d 	bl	8000bf0 <HAL_Delay>
      ms++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 f959 	bl	8005654 <USB_GetMode>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <USB_SetCurrentMode+0x84>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b31      	cmp	r3, #49	; 0x31
 80043ac:	d9f0      	bls.n	8004390 <USB_SetCurrentMode+0x60>
 80043ae:	e001      	b.n	80043b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e005      	b.n	80043c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b32      	cmp	r3, #50	; 0x32
 80043b8:	d101      	bne.n	80043be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c8:	b084      	sub	sp, #16
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	e009      	b.n	80043fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	3340      	adds	r3, #64	; 0x40
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	2200      	movs	r2, #0
 80043f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	3301      	adds	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0e      	cmp	r3, #14
 8004400:	d9f2      	bls.n	80043e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11c      	bne.n	8004442 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004416:	f043 0302 	orr.w	r3, r3, #2
 800441a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
 8004440:	e00b      	b.n	800445a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446c:	4619      	mov	r1, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	461a      	mov	r2, r3
 8004476:	680b      	ldr	r3, [r1, #0]
 8004478:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10c      	bne.n	800449a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004486:	2100      	movs	r1, #0
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f945 	bl	8004718 <USB_SetDevSpeed>
 800448e:	e008      	b.n	80044a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004490:	2101      	movs	r1, #1
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f940 	bl	8004718 <USB_SetDevSpeed>
 8004498:	e003      	b.n	80044a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800449a:	2103      	movs	r1, #3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f93b 	bl	8004718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044a2:	2110      	movs	r1, #16
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8f3 	bl	8004690 <USB_FlushTxFifo>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f90f 	bl	80046d8 <USB_FlushRxFifo>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	461a      	mov	r2, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	461a      	mov	r2, r3
 80044e4:	2300      	movs	r3, #0
 80044e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e043      	b.n	8004576 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004504:	d118      	bne.n	8004538 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	461a      	mov	r2, r3
 800451a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	e013      	b.n	800454a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	461a      	mov	r2, r3
 8004530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e008      	b.n	800454a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	461a      	mov	r2, r3
 8004558:	2300      	movs	r3, #0
 800455a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	461a      	mov	r2, r3
 800456a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800456e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	3301      	adds	r3, #1
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	d3b7      	bcc.n	80044ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e043      	b.n	800460c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800459a:	d118      	bne.n	80045ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e013      	b.n	80045e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e008      	b.n	80045e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2300      	movs	r3, #0
 80045de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	2300      	movs	r3, #0
 80045f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004604:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3301      	adds	r3, #1
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d3b7      	bcc.n	8004584 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004626:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004634:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f043 0210 	orr.w	r2, r3, #16
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <USB_DevInit+0x2c4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f043 0208 	orr.w	r2, r3, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004674:	f043 0304 	orr.w	r3, r3, #4
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004688:	b004      	add	sp, #16
 800468a:	4770      	bx	lr
 800468c:	803c3800 	.word	0x803c3800

08004690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <USB_FlushTxFifo+0x44>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e006      	b.n	80046c8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d0f1      	beq.n	80046aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	00030d40 	.word	0x00030d40

080046d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2210      	movs	r2, #16
 80046e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <USB_FlushRxFifo+0x3c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e006      	b.n	8004708 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b10      	cmp	r3, #16
 8004704:	d0f1      	beq.n	80046ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	00030d40 	.word	0x00030d40

08004718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0306 	and.w	r3, r3, #6
 8004762:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]
 800476e:	e00a      	b.n	8004786 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d002      	beq.n	800477c <USB_GetDevSpeed+0x32>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b06      	cmp	r3, #6
 800477a:	d102      	bne.n	8004782 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800477c:	2302      	movs	r3, #2
 800477e:	75fb      	strb	r3, [r7, #23]
 8004780:	e001      	b.n	8004786 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004782:	230f      	movs	r3, #15
 8004784:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d13a      	bne.n	8004826 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2101      	movs	r1, #1
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d155      	bne.n	8004894 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	78db      	ldrb	r3, [r3, #3]
 8004802:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004804:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	059b      	lsls	r3, r3, #22
 800480a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800480c:	4313      	orrs	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e036      	b.n	8004894 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004844:	4313      	orrs	r3, r2
 8004846:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11a      	bne.n	8004894 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	78db      	ldrb	r3, [r3, #3]
 8004878:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800487a:	430b      	orrs	r3, r1
 800487c:	4313      	orrs	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004892:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d161      	bne.n	8004984 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d6:	d11f      	bne.n	8004918 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	b29b      	uxth	r3, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004938:	4013      	ands	r3, r2
 800493a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	2101      	movs	r1, #1
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	b29b      	uxth	r3, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495c:	4013      	ands	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	0159      	lsls	r1, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	440b      	add	r3, r1
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	4619      	mov	r1, r3
 800497c:	4b35      	ldr	r3, [pc, #212]	; (8004a54 <USB_DeactivateEndpoint+0x1b0>)
 800497e:	4013      	ands	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
 8004982:	e060      	b.n	8004a46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499a:	d11f      	bne.n	80049dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	43db      	mvns	r3, r3
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049fc:	4013      	ands	r3, r2
 80049fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a20:	4013      	ands	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0159      	lsls	r1, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	440b      	add	r3, r1
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <USB_DeactivateEndpoint+0x1b4>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	ec337800 	.word	0xec337800
 8004a58:	eff37800 	.word	0xeff37800

08004a5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 815c 	bne.w	8004d36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d132      	bne.n	8004aec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae4:	0cdb      	lsrs	r3, r3, #19
 8004ae6:	04db      	lsls	r3, r3, #19
 8004ae8:	6113      	str	r3, [r2, #16]
 8004aea:	e074      	b.n	8004bd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	0151      	lsls	r1, r2, #5
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	440a      	add	r2, r1
 8004b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b06:	0cdb      	lsrs	r3, r3, #19
 8004b08:	04db      	lsls	r3, r3, #19
 8004b0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6959      	ldr	r1, [r3, #20]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	440b      	add	r3, r1
 8004b48:	1e59      	subs	r1, r3, #1
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b54:	4b9d      	ldr	r3, [pc, #628]	; (8004dcc <USB_EPStartXfer+0x370>)
 8004b56:	400b      	ands	r3, r1
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	0148      	lsls	r0, r1, #5
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	4401      	add	r1, r0
 8004b60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	0148      	lsls	r0, r1, #5
 8004b82:	69f9      	ldr	r1, [r7, #28]
 8004b84:	4401      	add	r1, r0
 8004b86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	78db      	ldrb	r3, [r3, #3]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d11f      	bne.n	8004bd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004bb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d14b      	bne.n	8004c74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	78db      	ldrb	r3, [r3, #3]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d128      	bne.n	8004c52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d110      	bne.n	8004c32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e00f      	b.n	8004c52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e12f      	b.n	8004ed4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	78db      	ldrb	r3, [r3, #3]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d015      	beq.n	8004cc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8117 	beq.w	8004ed4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	69f9      	ldr	r1, [r7, #28]
 8004cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	634b      	str	r3, [r1, #52]	; 0x34
 8004cc6:	e105      	b.n	8004ed4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e00f      	b.n	8004d1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	68d9      	ldr	r1, [r3, #12]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	b298      	uxth	r0, r3
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fa2b 	bl	800518a <USB_WritePacket>
 8004d34:	e0ce      	b.n	8004ed4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d50:	0cdb      	lsrs	r3, r3, #19
 8004d52:	04db      	lsls	r3, r3, #19
 8004d54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d126      	bne.n	8004dd0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	0148      	lsls	r0, r1, #5
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4401      	add	r1, r0
 8004da0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dc6:	6113      	str	r3, [r2, #16]
 8004dc8:	e036      	b.n	8004e38 <USB_EPStartXfer+0x3dc>
 8004dca:	bf00      	nop
 8004dcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	1e5a      	subs	r2, r3, #1
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	8afb      	ldrh	r3, [r7, #22]
 8004df6:	04d9      	lsls	r1, r3, #19
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <USB_EPStartXfer+0x484>)
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	69b9      	ldr	r1, [r7, #24]
 8004dfe:	0148      	lsls	r0, r1, #5
 8004e00:	69f9      	ldr	r1, [r7, #28]
 8004e02:	4401      	add	r1, r0
 8004e04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	8af9      	ldrh	r1, [r7, #22]
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e28:	69b9      	ldr	r1, [r7, #24]
 8004e2a:	0148      	lsls	r0, r1, #5
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	4401      	add	r1, r0
 8004e30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e34:	4313      	orrs	r3, r2
 8004e36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10d      	bne.n	8004e5a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68d9      	ldr	r1, [r3, #12]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	460a      	mov	r2, r1
 8004e58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	78db      	ldrb	r3, [r3, #3]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d128      	bne.n	8004eb4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d110      	bne.n	8004e94 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e00f      	b.n	8004eb4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	1ff80000 	.word	0x1ff80000

08004ee4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	f040 80cd 	bne.w	80050a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d132      	bne.n	8004f74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	0cdb      	lsrs	r3, r3, #19
 8004f6e:	04db      	lsls	r3, r3, #19
 8004f70:	6113      	str	r3, [r2, #16]
 8004f72:	e04e      	b.n	8005012 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8e:	0cdb      	lsrs	r3, r3, #19
 8004f90:	04db      	lsls	r3, r3, #19
 8004f92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	0151      	lsls	r1, r2, #5
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d903      	bls.n	8004fcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005002:	6939      	ldr	r1, [r7, #16]
 8005004:	0148      	lsls	r0, r1, #5
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	4401      	add	r1, r0
 800500a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d11e      	bne.n	8005056 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	e092      	b.n	800517c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005070:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005074:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d07e      	beq.n	800517c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	2101      	movs	r1, #1
 8005090:	fa01 f303 	lsl.w	r3, r1, r3
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800509a:	4313      	orrs	r3, r2
 800509c:	634b      	str	r3, [r1, #52]	; 0x34
 800509e:	e06d      	b.n	800517c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ba:	0cdb      	lsrs	r3, r3, #19
 80050bc:	04db      	lsls	r3, r3, #19
 80050be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005112:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512a:	6939      	ldr	r1, [r7, #16]
 800512c:	0148      	lsls	r0, r1, #5
 800512e:	6979      	ldr	r1, [r7, #20]
 8005130:	4401      	add	r1, r0
 8005132:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005136:	4313      	orrs	r3, r2
 8005138:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10d      	bne.n	800515c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	68d9      	ldr	r1, [r3, #12]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	460a      	mov	r2, r1
 800515a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800517a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800518a:	b480      	push	{r7}
 800518c:	b089      	sub	sp, #36	; 0x24
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	4611      	mov	r1, r2
 8005196:	461a      	mov	r2, r3
 8005198:	460b      	mov	r3, r1
 800519a:	71fb      	strb	r3, [r7, #7]
 800519c:	4613      	mov	r3, r2
 800519e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d123      	bne.n	80051f8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051b0:	88bb      	ldrh	r3, [r7, #4]
 80051b2:	3303      	adds	r3, #3
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e018      	b.n	80051f0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	031a      	lsls	r2, r3, #12
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ca:	461a      	mov	r2, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	3301      	adds	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3301      	adds	r3, #1
 80051e8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	3301      	adds	r3, #1
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d3e2      	bcc.n	80051be <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3724      	adds	r7, #36	; 0x24
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005206:	b480      	push	{r7}
 8005208:	b08b      	sub	sp, #44	; 0x2c
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4613      	mov	r3, r2
 8005212:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	b29b      	uxth	r3, r3
 8005222:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800522c:	2300      	movs	r3, #0
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	e014      	b.n	800525c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	601a      	str	r2, [r3, #0]
    pDest++;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	3301      	adds	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	3301      	adds	r3, #1
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	3301      	adds	r3, #1
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	3301      	adds	r3, #1
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	3301      	adds	r3, #1
 800525a:	623b      	str	r3, [r7, #32]
 800525c:	6a3a      	ldr	r2, [r7, #32]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d3e6      	bcc.n	8005232 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005264:	8bfb      	ldrh	r3, [r7, #30]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01e      	beq.n	80052a8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005274:	461a      	mov	r2, r3
 8005276:	f107 0310 	add.w	r3, r7, #16
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	701a      	strb	r2, [r3, #0]
      i++;
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	3301      	adds	r3, #1
 8005294:	623b      	str	r3, [r7, #32]
      pDest++;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	3301      	adds	r3, #1
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800529c:	8bfb      	ldrh	r3, [r7, #30]
 800529e:	3b01      	subs	r3, #1
 80052a0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052a2:	8bfb      	ldrh	r3, [r7, #30]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1ea      	bne.n	800527e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	372c      	adds	r7, #44	; 0x2c
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d12c      	bne.n	800532c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	db12      	blt.n	800530a <USB_EPSetStall+0x54>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00f      	beq.n	800530a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005308:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e02b      	b.n	8005384 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	db12      	blt.n	8005364 <USB_EPSetStall+0xae>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00f      	beq.n	8005364 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005362:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005382:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d128      	bne.n	8005400 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	78db      	ldrb	r3, [r3, #3]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d003      	beq.n	80053de <USB_EPClearStall+0x4c>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	78db      	ldrb	r3, [r3, #3]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d138      	bne.n	8005450 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e027      	b.n	8005450 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800541e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	78db      	ldrb	r3, [r3, #3]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d003      	beq.n	8005430 <USB_EPClearStall+0x9e>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	78db      	ldrb	r3, [r3, #3]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d10f      	bne.n	8005450 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800547c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005480:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054c4:	f023 0303 	bic.w	r3, r3, #3
 80054c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d8:	f023 0302 	bic.w	r3, r3, #2
 80054dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551a:	f043 0302 	orr.w	r3, r3, #2
 800551e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005546:	68fb      	ldr	r3, [r7, #12]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	4013      	ands	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	0c1b      	lsrs	r3, r3, #16
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	b29b      	uxth	r3, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ea:	68bb      	ldr	r3, [r7, #8]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
 8005628:	01db      	lsls	r3, r3, #7
 800562a:	b2db      	uxtb	r3, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4013      	ands	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005646:	68bb      	ldr	r3, [r7, #8]
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0301 	and.w	r3, r3, #1
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800568e:	f023 0307 	bic.w	r3, r3, #7
 8005692:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	460b      	mov	r3, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	333c      	adds	r3, #60	; 0x3c
 80056ce:	3304      	adds	r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4a26      	ldr	r2, [pc, #152]	; (8005770 <USB_EP0_OutStart+0xb8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d90a      	bls.n	80056f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ec:	d101      	bne.n	80056f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e037      	b.n	8005762 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005720:	f043 0318 	orr.w	r3, r3, #24
 8005724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005734:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005738:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10f      	bne.n	8005760 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800575e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	4f54300a 	.word	0x4f54300a

08005774 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <USB_CoreReset+0x60>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e01a      	b.n	80057c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	daf3      	bge.n	8005780 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f043 0201 	orr.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <USB_CoreReset+0x60>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e006      	b.n	80057c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d0f1      	beq.n	80057a8 <USB_CoreReset+0x34>

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	00030d40 	.word	0x00030d40

080057d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057e8:	f002 f8fc 	bl	80079e4 <USBD_static_malloc>
 80057ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80057fc:	2302      	movs	r3, #2
 80057fe:	e066      	b.n	80058ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7c1b      	ldrb	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d119      	bne.n	8005844 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005814:	2202      	movs	r2, #2
 8005816:	2181      	movs	r1, #129	; 0x81
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 ffc0 	bl	800779e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005828:	2202      	movs	r2, #2
 800582a:	2101      	movs	r1, #1
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 ffb6 	bl	800779e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2210      	movs	r2, #16
 800583e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005842:	e016      	b.n	8005872 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	2202      	movs	r2, #2
 8005848:	2181      	movs	r1, #129	; 0x81
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 ffa7 	bl	800779e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005856:	2340      	movs	r3, #64	; 0x40
 8005858:	2202      	movs	r2, #2
 800585a:	2101      	movs	r1, #1
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 ff9e 	bl	800779e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2210      	movs	r2, #16
 800586e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005872:	2308      	movs	r3, #8
 8005874:	2203      	movs	r2, #3
 8005876:	2182      	movs	r1, #130	; 0x82
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 ff90 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7c1b      	ldrb	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058b2:	2101      	movs	r1, #1
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f002 f861 	bl	800797c <USBD_LL_PrepareReceive>
 80058ba:	e007      	b.n	80058cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058c2:	2340      	movs	r3, #64	; 0x40
 80058c4:	2101      	movs	r1, #1
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f002 f858 	bl	800797c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058e2:	2181      	movs	r1, #129	; 0x81
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 ff80 	bl	80077ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058f0:	2101      	movs	r1, #1
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 ff79 	bl	80077ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005900:	2182      	movs	r1, #130	; 0x82
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 ff71 	bl	80077ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005932:	4618      	mov	r0, r3
 8005934:	f002 f864 	bl	8007a00 <USBD_static_free>
    pdev->pClassData = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005970:	2303      	movs	r3, #3
 8005972:	e0af      	b.n	8005ad4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800597c:	2b00      	cmp	r3, #0
 800597e:	d03f      	beq.n	8005a00 <USBD_CDC_Setup+0xb4>
 8005980:	2b20      	cmp	r3, #32
 8005982:	f040 809f 	bne.w	8005ac4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	88db      	ldrh	r3, [r3, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d02e      	beq.n	80059ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b25b      	sxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	da16      	bge.n	80059c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80059a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	88d2      	ldrh	r2, [r2, #6]
 80059aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	88db      	ldrh	r3, [r3, #6]
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	bf28      	it	cs
 80059b4:	2307      	movcs	r3, #7
 80059b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	89fa      	ldrh	r2, [r7, #14]
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fae9 	bl	8006f96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80059c4:	e085      	b.n	8005ad2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	785a      	ldrb	r2, [r3, #1]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	88db      	ldrh	r3, [r3, #6]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80059dc:	6939      	ldr	r1, [r7, #16]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	88db      	ldrh	r3, [r3, #6]
 80059e2:	461a      	mov	r2, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 fb02 	bl	8006fee <USBD_CtlPrepareRx>
      break;
 80059ea:	e072      	b.n	8005ad2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	7850      	ldrb	r0, [r2, #1]
 80059f8:	2200      	movs	r2, #0
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	4798      	blx	r3
      break;
 80059fe:	e068      	b.n	8005ad2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b0b      	cmp	r3, #11
 8005a06:	d852      	bhi.n	8005aae <USBD_CDC_Setup+0x162>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USBD_CDC_Setup+0xc4>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a41 	.word	0x08005a41
 8005a14:	08005abd 	.word	0x08005abd
 8005a18:	08005aaf 	.word	0x08005aaf
 8005a1c:	08005aaf 	.word	0x08005aaf
 8005a20:	08005aaf 	.word	0x08005aaf
 8005a24:	08005aaf 	.word	0x08005aaf
 8005a28:	08005aaf 	.word	0x08005aaf
 8005a2c:	08005aaf 	.word	0x08005aaf
 8005a30:	08005aaf 	.word	0x08005aaf
 8005a34:	08005aaf 	.word	0x08005aaf
 8005a38:	08005a6b 	.word	0x08005a6b
 8005a3c:	08005a95 	.word	0x08005a95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d107      	bne.n	8005a5c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a4c:	f107 030a 	add.w	r3, r7, #10
 8005a50:	2202      	movs	r2, #2
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fa9e 	bl	8006f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a5a:	e032      	b.n	8005ac2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fa28 	bl	8006eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a64:	2303      	movs	r3, #3
 8005a66:	75fb      	strb	r3, [r7, #23]
          break;
 8005a68:	e02b      	b.n	8005ac2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d107      	bne.n	8005a86 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a76:	f107 030d 	add.w	r3, r7, #13
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fa89 	bl	8006f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a84:	e01d      	b.n	8005ac2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 fa13 	bl	8006eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	75fb      	strb	r3, [r7, #23]
          break;
 8005a92:	e016      	b.n	8005ac2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d00f      	beq.n	8005ac0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 fa06 	bl	8006eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005aac:	e008      	b.n	8005ac0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 f9ff 	bl	8006eb4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aba:	e002      	b.n	8005ac2 <USBD_CDC_Setup+0x176>
          break;
 8005abc:	bf00      	nop
 8005abe:	e008      	b.n	8005ad2 <USBD_CDC_Setup+0x186>
          break;
 8005ac0:	bf00      	nop
      }
      break;
 8005ac2:	e006      	b.n	8005ad2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 f9f4 	bl	8006eb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005acc:	2303      	movs	r3, #3
 8005ace:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e04f      	b.n	8005b9e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	3318      	adds	r3, #24
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d029      	beq.n	8005b70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3318      	adds	r3, #24
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	78f9      	ldrb	r1, [r7, #3]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	460b      	mov	r3, r1
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4403      	add	r3, r0
 8005b3c:	3344      	adds	r3, #68	; 0x44
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b44:	fb03 f301 	mul.w	r3, r3, r1
 8005b48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d110      	bne.n	8005b70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3318      	adds	r3, #24
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b62:	78f9      	ldrb	r1, [r7, #3]
 8005b64:	2300      	movs	r3, #0
 8005b66:	2200      	movs	r2, #0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 fee6 	bl	800793a <USBD_LL_Transmit>
 8005b6e:	e015      	b.n	8005b9c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e015      	b.n	8005bf4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 fef6 	bl	80079be <USBD_LL_GetRxDataSize>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e01b      	b.n	8005c4e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <USBD_CDC_EP0_RxReady+0x50>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c26:	2bff      	cmp	r3, #255	; 0xff
 8005c28:	d010      	beq.n	8005c4c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005c38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c40:	b292      	uxth	r2, r2
 8005c42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	22ff      	movs	r2, #255	; 0xff
 8005c48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2243      	movs	r2, #67	; 0x43
 8005c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005c66:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20000094 	.word	0x20000094

08005c78 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2243      	movs	r2, #67	; 0x43
 8005c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005c86:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	20000050 	.word	0x20000050

08005c98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2243      	movs	r2, #67	; 0x43
 8005ca4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ca6:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	200000d8 	.word	0x200000d8

08005cb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	220a      	movs	r2, #10
 8005cc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cc6:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	2000000c 	.word	0x2000000c

08005cd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e004      	b.n	8005cf6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d14:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e008      	b.n	8005d32 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e004      	b.n	8005d64 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e016      	b.n	8005dbc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	7c1b      	ldrb	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005da0:	2101      	movs	r1, #1
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 fdea 	bl	800797c <USBD_LL_PrepareReceive>
 8005da8:	e007      	b.n	8005dba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	2101      	movs	r1, #1
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fde1 	bl	800797c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e01f      	b.n	8005e1c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	79fa      	ldrb	r2, [r7, #7]
 8005e0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 fc5d 	bl	80076d0 <USBD_LL_Init>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e016      	b.n	8005e6a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	f107 020e 	add.w	r2, r7, #14
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	4602      	mov	r2, r0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fc74 	bl	8007768 <USBD_LL_Start>
 8005e80:	4603      	mov	r3, r0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005eac:	2303      	movs	r3, #3
 8005eae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
  }

  return USBD_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 ff90 	bl	8006e40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d01a      	beq.n	8005f7a <USBD_LL_SetupStage+0x72>
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d822      	bhi.n	8005f8e <USBD_LL_SetupStage+0x86>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <USBD_LL_SetupStage+0x4a>
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d00a      	beq.n	8005f66 <USBD_LL_SetupStage+0x5e>
 8005f50:	e01d      	b.n	8005f8e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa62 	bl	8006424 <USBD_StdDevReq>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	e020      	b.n	8005fa8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fac6 	bl	8006500 <USBD_StdItfReq>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
      break;
 8005f78:	e016      	b.n	8005fa8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb05 	bl	8006592 <USBD_StdEPReq>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8c:	e00c      	b.n	8005fa8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 fc43 	bl	8007828 <USBD_LL_StallEP>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa6:	bf00      	nop
  }

  return ret;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b086      	sub	sp, #24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fc0:	7afb      	ldrb	r3, [r7, #11]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d138      	bne.n	8006038 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005fcc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d14a      	bne.n	800606e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d913      	bls.n	800600c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	1ad2      	subs	r2, r2, r3
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	bf28      	it	cs
 8005ffe:	4613      	movcs	r3, r2
 8006000:	461a      	mov	r2, r3
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f001 f80f 	bl	8007028 <USBD_CtlContinueRx>
 800600a:	e030      	b.n	800606e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d10b      	bne.n	8006030 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f001 f80a 	bl	800704a <USBD_CtlSendStatus>
 8006036:	e01a      	b.n	800606e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b03      	cmp	r3, #3
 8006042:	d114      	bne.n	800606e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	7afa      	ldrb	r2, [r7, #11]
 800605a:	4611      	mov	r1, r2
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	4798      	blx	r3
 8006060:	4603      	mov	r3, r0
 8006062:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	e000      	b.n	8006070 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	460b      	mov	r3, r1
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d16b      	bne.n	8006164 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3314      	adds	r3, #20
 8006090:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006098:	2b02      	cmp	r3, #2
 800609a:	d156      	bne.n	800614a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d914      	bls.n	80060d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	1ad2      	subs	r2, r2, r3
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 ff84 	bl	8006fcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060c4:	2300      	movs	r3, #0
 80060c6:	2200      	movs	r2, #0
 80060c8:	2100      	movs	r1, #0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 fc56 	bl	800797c <USBD_LL_PrepareReceive>
 80060d0:	e03b      	b.n	800614a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d11c      	bne.n	8006118 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d316      	bcc.n	8006118 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d20f      	bcs.n	8006118 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060f8:	2200      	movs	r2, #0
 80060fa:	2100      	movs	r1, #0
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 ff65 	bl	8006fcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800610a:	2300      	movs	r3, #0
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f001 fc33 	bl	800797c <USBD_LL_PrepareReceive>
 8006116:	e018      	b.n	800614a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b03      	cmp	r3, #3
 8006122:	d10b      	bne.n	800613c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800613c:	2180      	movs	r1, #128	; 0x80
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f001 fb72 	bl	8007828 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 ff93 	bl	8007070 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006150:	2b01      	cmp	r3, #1
 8006152:	d122      	bne.n	800619a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fe98 	bl	8005e8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006162:	e01a      	b.n	800619a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b03      	cmp	r3, #3
 800616e:	d114      	bne.n	800619a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	7afa      	ldrb	r2, [r7, #11]
 8006186:	4611      	mov	r1, r2
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	4798      	blx	r3
 800618c:	4603      	mov	r3, r0
 800618e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	e000      	b.n	800619c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e02f      	b.n	8006238 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00f      	beq.n	8006202 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6852      	ldr	r2, [r2, #4]
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	4611      	mov	r1, r2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	2200      	movs	r2, #0
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fac8 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2240      	movs	r2, #64	; 0x40
 800621a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	2200      	movs	r2, #0
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 faba 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2240      	movs	r2, #64	; 0x40
 8006234:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626e:	b2da      	uxtb	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2204      	movs	r2, #4
 800627a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b04      	cmp	r3, #4
 800629e:	d106      	bne.n	80062ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e012      	b.n	80062f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d10b      	bne.n	80062f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	e014      	b.n	8006344 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b03      	cmp	r3, #3
 8006324:	d10d      	bne.n	8006342 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	78fa      	ldrb	r2, [r7, #3]
 800633c:	4611      	mov	r1, r2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006362:	2303      	movs	r3, #3
 8006364:	e014      	b.n	8006390 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b03      	cmp	r3, #3
 8006370:	d10d      	bne.n	800638e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	4611      	mov	r1, r2
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6852      	ldr	r2, [r2, #4]
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	4611      	mov	r1, r2
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
  }

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	3301      	adds	r3, #1
 80063fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006404:	8a3b      	ldrh	r3, [r7, #16]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	b21a      	sxth	r2, r3
 800640a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800640e:	4313      	orrs	r3, r2
 8006410:	b21b      	sxth	r3, r3
 8006412:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006414:	89fb      	ldrh	r3, [r7, #14]
}
 8006416:	4618      	mov	r0, r3
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d005      	beq.n	800644a <USBD_StdDevReq+0x26>
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d853      	bhi.n	80064ea <USBD_StdDevReq+0xc6>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <USBD_StdDevReq+0x3a>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d14f      	bne.n	80064ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e04a      	b.n	80064f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b09      	cmp	r3, #9
 8006464:	d83b      	bhi.n	80064de <USBD_StdDevReq+0xba>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <USBD_StdDevReq+0x48>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	080064c1 	.word	0x080064c1
 8006470:	080064d5 	.word	0x080064d5
 8006474:	080064df 	.word	0x080064df
 8006478:	080064cb 	.word	0x080064cb
 800647c:	080064df 	.word	0x080064df
 8006480:	0800649f 	.word	0x0800649f
 8006484:	08006495 	.word	0x08006495
 8006488:	080064df 	.word	0x080064df
 800648c:	080064b7 	.word	0x080064b7
 8006490:	080064a9 	.word	0x080064a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f9de 	bl	8006858 <USBD_GetDescriptor>
          break;
 800649c:	e024      	b.n	80064e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fb43 	bl	8006b2c <USBD_SetAddress>
          break;
 80064a6:	e01f      	b.n	80064e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fb82 	bl	8006bb4 <USBD_SetConfig>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
          break;
 80064b4:	e018      	b.n	80064e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc21 	bl	8006d00 <USBD_GetConfig>
          break;
 80064be:	e013      	b.n	80064e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fc52 	bl	8006d6c <USBD_GetStatus>
          break;
 80064c8:	e00e      	b.n	80064e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fc81 	bl	8006dd4 <USBD_SetFeature>
          break;
 80064d2:	e009      	b.n	80064e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fc90 	bl	8006dfc <USBD_ClrFeature>
          break;
 80064dc:	e004      	b.n	80064e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fce7 	bl	8006eb4 <USBD_CtlError>
          break;
 80064e6:	bf00      	nop
      }
      break;
 80064e8:	e004      	b.n	80064f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fce1 	bl	8006eb4 <USBD_CtlError>
      break;
 80064f2:	bf00      	nop
  }

  return ret;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop

08006500 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d005      	beq.n	8006526 <USBD_StdItfReq+0x26>
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d82f      	bhi.n	800657e <USBD_StdItfReq+0x7e>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <USBD_StdItfReq+0x26>
 8006522:	2b20      	cmp	r3, #32
 8006524:	d12b      	bne.n	800657e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652c:	b2db      	uxtb	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	2b02      	cmp	r3, #2
 8006532:	d81d      	bhi.n	8006570 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	889b      	ldrh	r3, [r3, #4]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d813      	bhi.n	8006566 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	4798      	blx	r3
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	88db      	ldrh	r3, [r3, #6]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d110      	bne.n	800657a <USBD_StdItfReq+0x7a>
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fd73 	bl	800704a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006564:	e009      	b.n	800657a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fca3 	bl	8006eb4 <USBD_CtlError>
          break;
 800656e:	e004      	b.n	800657a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fc9e 	bl	8006eb4 <USBD_CtlError>
          break;
 8006578:	e000      	b.n	800657c <USBD_StdItfReq+0x7c>
          break;
 800657a:	bf00      	nop
      }
      break;
 800657c:	e004      	b.n	8006588 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc97 	bl	8006eb4 <USBD_CtlError>
      break;
 8006586:	bf00      	nop
  }

  return ret;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	889b      	ldrh	r3, [r3, #4]
 80065a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d007      	beq.n	80065c2 <USBD_StdEPReq+0x30>
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	f200 8145 	bhi.w	8006842 <USBD_StdEPReq+0x2b0>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00c      	beq.n	80065d6 <USBD_StdEPReq+0x44>
 80065bc:	2b20      	cmp	r3, #32
 80065be:	f040 8140 	bne.w	8006842 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
      break;
 80065d4:	e13a      	b.n	800684c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d007      	beq.n	80065ee <USBD_StdEPReq+0x5c>
 80065de:	2b03      	cmp	r3, #3
 80065e0:	f300 8129 	bgt.w	8006836 <USBD_StdEPReq+0x2a4>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d07f      	beq.n	80066e8 <USBD_StdEPReq+0x156>
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d03c      	beq.n	8006666 <USBD_StdEPReq+0xd4>
 80065ec:	e123      	b.n	8006836 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d002      	beq.n	8006600 <USBD_StdEPReq+0x6e>
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d016      	beq.n	800662c <USBD_StdEPReq+0x9a>
 80065fe:	e02c      	b.n	800665a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <USBD_StdEPReq+0x90>
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b80      	cmp	r3, #128	; 0x80
 800660a:	d00a      	beq.n	8006622 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f909 	bl	8007828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006616:	2180      	movs	r1, #128	; 0x80
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f905 	bl	8007828 <USBD_LL_StallEP>
 800661e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006620:	e020      	b.n	8006664 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fc45 	bl	8006eb4 <USBD_CtlError>
              break;
 800662a:	e01b      	b.n	8006664 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	885b      	ldrh	r3, [r3, #2]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10e      	bne.n	8006652 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <USBD_StdEPReq+0xc0>
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d008      	beq.n	8006652 <USBD_StdEPReq+0xc0>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	88db      	ldrh	r3, [r3, #6]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f8eb 	bl	8007828 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fcf9 	bl	800704a <USBD_CtlSendStatus>

              break;
 8006658:	e004      	b.n	8006664 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc29 	bl	8006eb4 <USBD_CtlError>
              break;
 8006662:	bf00      	nop
          }
          break;
 8006664:	e0ec      	b.n	8006840 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d002      	beq.n	8006678 <USBD_StdEPReq+0xe6>
 8006672:	2b03      	cmp	r3, #3
 8006674:	d016      	beq.n	80066a4 <USBD_StdEPReq+0x112>
 8006676:	e030      	b.n	80066da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <USBD_StdEPReq+0x108>
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d00a      	beq.n	800669a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f8cd 	bl	8007828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f8c9 	bl	8007828 <USBD_LL_StallEP>
 8006696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006698:	e025      	b.n	80066e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fc09 	bl	8006eb4 <USBD_CtlError>
              break;
 80066a2:	e020      	b.n	80066e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	885b      	ldrh	r3, [r3, #2]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11b      	bne.n	80066e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f8d3 	bl	8007866 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fcc2 	bl	800704a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80066d8:	e004      	b.n	80066e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fbe9 	bl	8006eb4 <USBD_CtlError>
              break;
 80066e2:	e000      	b.n	80066e6 <USBD_StdEPReq+0x154>
              break;
 80066e4:	bf00      	nop
          }
          break;
 80066e6:	e0ab      	b.n	8006840 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d002      	beq.n	80066fa <USBD_StdEPReq+0x168>
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d032      	beq.n	800675e <USBD_StdEPReq+0x1cc>
 80066f8:	e097      	b.n	800682a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <USBD_StdEPReq+0x17e>
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	2b80      	cmp	r3, #128	; 0x80
 8006704:	d004      	beq.n	8006710 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fbd3 	bl	8006eb4 <USBD_CtlError>
                break;
 800670e:	e091      	b.n	8006834 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006714:	2b00      	cmp	r3, #0
 8006716:	da0b      	bge.n	8006730 <USBD_StdEPReq+0x19e>
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	3310      	adds	r3, #16
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4413      	add	r3, r2
 800672c:	3304      	adds	r3, #4
 800672e:	e00b      	b.n	8006748 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	4413      	add	r3, r2
 8006746:	3304      	adds	r3, #4
 8006748:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2202      	movs	r2, #2
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc1d 	bl	8006f96 <USBD_CtlSendData>
              break;
 800675c:	e06a      	b.n	8006834 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800675e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da11      	bge.n	800678a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	3324      	adds	r3, #36	; 0x24
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d117      	bne.n	80067b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fb96 	bl	8006eb4 <USBD_CtlError>
                  break;
 8006788:	e054      	b.n	8006834 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fb83 	bl	8006eb4 <USBD_CtlError>
                  break;
 80067ae:	e041      	b.n	8006834 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	da0b      	bge.n	80067d0 <USBD_StdEPReq+0x23e>
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	3310      	adds	r3, #16
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	3304      	adds	r3, #4
 80067ce:	e00b      	b.n	80067e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4413      	add	r3, r2
 80067e6:	3304      	adds	r3, #4
 80067e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <USBD_StdEPReq+0x264>
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d103      	bne.n	80067fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e00e      	b.n	800681c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 f84e 	bl	80078a4 <USBD_LL_IsStallEP>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2201      	movs	r2, #1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e002      	b.n	800681c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2202      	movs	r2, #2
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fbb7 	bl	8006f96 <USBD_CtlSendData>
              break;
 8006828:	e004      	b.n	8006834 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb41 	bl	8006eb4 <USBD_CtlError>
              break;
 8006832:	bf00      	nop
          }
          break;
 8006834:	e004      	b.n	8006840 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb3b 	bl	8006eb4 <USBD_CtlError>
          break;
 800683e:	bf00      	nop
      }
      break;
 8006840:	e004      	b.n	800684c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fb35 	bl	8006eb4 <USBD_CtlError>
      break;
 800684a:	bf00      	nop
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	885b      	ldrh	r3, [r3, #2]
 8006872:	0a1b      	lsrs	r3, r3, #8
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	2b06      	cmp	r3, #6
 800687a:	f200 8128 	bhi.w	8006ace <USBD_GetDescriptor+0x276>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBD_GetDescriptor+0x2c>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068a1 	.word	0x080068a1
 8006888:	080068b9 	.word	0x080068b9
 800688c:	080068f9 	.word	0x080068f9
 8006890:	08006acf 	.word	0x08006acf
 8006894:	08006acf 	.word	0x08006acf
 8006898:	08006a6f 	.word	0x08006a6f
 800689c:	08006a9b 	.word	0x08006a9b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	7c12      	ldrb	r2, [r2, #16]
 80068ac:	f107 0108 	add.w	r1, r7, #8
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	60f8      	str	r0, [r7, #12]
      break;
 80068b6:	e112      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7c1b      	ldrb	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	f107 0208 	add.w	r2, r7, #8
 80068cc:	4610      	mov	r0, r2
 80068ce:	4798      	blx	r3
 80068d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	2202      	movs	r2, #2
 80068d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068da:	e100      	b.n	8006ade <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
      break;
 80068f6:	e0f2      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	885b      	ldrh	r3, [r3, #2]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b05      	cmp	r3, #5
 8006900:	f200 80ac 	bhi.w	8006a5c <USBD_GetDescriptor+0x204>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <USBD_GetDescriptor+0xb4>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006925 	.word	0x08006925
 8006910:	08006959 	.word	0x08006959
 8006914:	0800698d 	.word	0x0800698d
 8006918:	080069c1 	.word	0x080069c1
 800691c:	080069f5 	.word	0x080069f5
 8006920:	08006a29 	.word	0x08006a29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7c12      	ldrb	r2, [r2, #16]
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006946:	e091      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fab2 	bl	8006eb4 <USBD_CtlError>
            err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
          break;
 8006956:	e089      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7c12      	ldrb	r2, [r2, #16]
 8006970:	f107 0108 	add.w	r1, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697a:	e077      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa98 	bl	8006eb4 <USBD_CtlError>
            err++;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	3301      	adds	r3, #1
 8006988:	72fb      	strb	r3, [r7, #11]
          break;
 800698a:	e06f      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7c12      	ldrb	r2, [r2, #16]
 80069a4:	f107 0108 	add.w	r1, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ae:	e05d      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa7e 	bl	8006eb4 <USBD_CtlError>
            err++;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	3301      	adds	r3, #1
 80069bc:	72fb      	strb	r3, [r7, #11]
          break;
 80069be:	e055      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e2:	e043      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa64 	bl	8006eb4 <USBD_CtlError>
            err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
          break;
 80069f2:	e03b      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a16:	e029      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa4a 	bl	8006eb4 <USBD_CtlError>
            err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
          break;
 8006a26:	e021      	b.n	8006a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7c12      	ldrb	r2, [r2, #16]
 8006a40:	f107 0108 	add.w	r1, r7, #8
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4a:	e00f      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa30 	bl	8006eb4 <USBD_CtlError>
            err++;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	3301      	adds	r3, #1
 8006a58:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5a:	e007      	b.n	8006a6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa28 	bl	8006eb4 <USBD_CtlError>
          err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006a6a:	bf00      	nop
      }
      break;
 8006a6c:	e037      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7c1b      	ldrb	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	f107 0208 	add.w	r2, r7, #8
 8006a82:	4610      	mov	r0, r2
 8006a84:	4798      	blx	r3
 8006a86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a88:	e029      	b.n	8006ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa11 	bl	8006eb4 <USBD_CtlError>
        err++;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	3301      	adds	r3, #1
 8006a96:	72fb      	strb	r3, [r7, #11]
      break;
 8006a98:	e021      	b.n	8006ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7c1b      	ldrb	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10d      	bne.n	8006abe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f107 0208 	add.w	r2, r7, #8
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4798      	blx	r3
 8006ab2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	2207      	movs	r2, #7
 8006aba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006abc:	e00f      	b.n	8006ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f9f7 	bl	8006eb4 <USBD_CtlError>
        err++;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	72fb      	strb	r3, [r7, #11]
      break;
 8006acc:	e007      	b.n	8006ade <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f9ef 	bl	8006eb4 <USBD_CtlError>
      err++;
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	72fb      	strb	r3, [r7, #11]
      break;
 8006adc:	bf00      	nop
  }

  if (err != 0U)
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11e      	bne.n	8006b22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	88db      	ldrh	r3, [r3, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d016      	beq.n	8006b1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006aec:	893b      	ldrh	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	88da      	ldrh	r2, [r3, #6]
 8006af6:	893b      	ldrh	r3, [r7, #8]
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bf28      	it	cs
 8006afc:	4613      	movcs	r3, r2
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b02:	893b      	ldrh	r3, [r7, #8]
 8006b04:	461a      	mov	r2, r3
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa44 	bl	8006f96 <USBD_CtlSendData>
 8006b0e:	e009      	b.n	8006b24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f9ce 	bl	8006eb4 <USBD_CtlError>
 8006b18:	e004      	b.n	8006b24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa95 	bl	800704a <USBD_CtlSendStatus>
 8006b20:	e000      	b.n	8006b24 <USBD_GetDescriptor+0x2cc>
    return;
 8006b22:	bf00      	nop
  }
}
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	889b      	ldrh	r3, [r3, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d131      	bne.n	8006ba2 <USBD_SetAddress+0x76>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d12d      	bne.n	8006ba2 <USBD_SetAddress+0x76>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4c:	d829      	bhi.n	8006ba2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d104      	bne.n	8006b70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9a3 	bl	8006eb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6e:	e01d      	b.n	8006bac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7bfa      	ldrb	r2, [r7, #15]
 8006b74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 febd 	bl	80078fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa61 	bl	800704a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b96:	e009      	b.n	8006bac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	e004      	b.n	8006bac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f985 	bl	8006eb4 <USBD_CtlError>
  }
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	885b      	ldrh	r3, [r3, #2]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	4b4c      	ldr	r3, [pc, #304]	; (8006cfc <USBD_SetConfig+0x148>)
 8006bca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bcc:	4b4b      	ldr	r3, [pc, #300]	; (8006cfc <USBD_SetConfig+0x148>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d905      	bls.n	8006be0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f96c 	bl	8006eb4 <USBD_CtlError>
    return USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e088      	b.n	8006cf2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d002      	beq.n	8006bf2 <USBD_SetConfig+0x3e>
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d025      	beq.n	8006c3c <USBD_SetConfig+0x88>
 8006bf0:	e071      	b.n	8006cd6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bf2:	4b42      	ldr	r3, [pc, #264]	; (8006cfc <USBD_SetConfig+0x148>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01c      	beq.n	8006c34 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006bfa:	4b40      	ldr	r3, [pc, #256]	; (8006cfc <USBD_SetConfig+0x148>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c04:	4b3d      	ldr	r3, [pc, #244]	; (8006cfc <USBD_SetConfig+0x148>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff f948 	bl	8005ea0 <USBD_SetClassConfig>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f949 	bl	8006eb4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c22:	e065      	b.n	8006cf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa10 	bl	800704a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c32:	e05d      	b.n	8006cf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa08 	bl	800704a <USBD_CtlSendStatus>
      break;
 8006c3a:	e059      	b.n	8006cf0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c3c:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <USBD_SetConfig+0x148>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d112      	bne.n	8006c6a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006c4c:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <USBD_SetConfig+0x148>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c56:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <USBD_SetConfig+0x148>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f93b 	bl	8005ed8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9f1 	bl	800704a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c68:	e042      	b.n	8006cf0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <USBD_SetConfig+0x148>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d02a      	beq.n	8006cce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff f929 	bl	8005ed8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c86:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <USBD_SetConfig+0x148>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <USBD_SetConfig+0x148>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f902 	bl	8005ea0 <USBD_SetClassConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00f      	beq.n	8006cc6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f903 	bl	8006eb4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff f90e 	bl	8005ed8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cc4:	e014      	b.n	8006cf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9bf 	bl	800704a <USBD_CtlSendStatus>
      break;
 8006ccc:	e010      	b.n	8006cf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9bb 	bl	800704a <USBD_CtlSendStatus>
      break;
 8006cd4:	e00c      	b.n	8006cf0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8eb 	bl	8006eb4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cde:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <USBD_SetConfig+0x148>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff f8f7 	bl	8005ed8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cea:	2303      	movs	r3, #3
 8006cec:	73fb      	strb	r3, [r7, #15]
      break;
 8006cee:	bf00      	nop
  }

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200001a2 	.word	0x200001a2

08006d00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	88db      	ldrh	r3, [r3, #6]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d004      	beq.n	8006d1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f8cd 	bl	8006eb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d1a:	e023      	b.n	8006d64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	dc02      	bgt.n	8006d2e <USBD_GetConfig+0x2e>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dc03      	bgt.n	8006d34 <USBD_GetConfig+0x34>
 8006d2c:	e015      	b.n	8006d5a <USBD_GetConfig+0x5a>
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d00b      	beq.n	8006d4a <USBD_GetConfig+0x4a>
 8006d32:	e012      	b.n	8006d5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f927 	bl	8006f96 <USBD_CtlSendData>
        break;
 8006d48:	e00c      	b.n	8006d64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f91f 	bl	8006f96 <USBD_CtlSendData>
        break;
 8006d58:	e004      	b.n	8006d64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8a9 	bl	8006eb4 <USBD_CtlError>
        break;
 8006d62:	bf00      	nop
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d81e      	bhi.n	8006dc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	88db      	ldrh	r3, [r3, #6]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d004      	beq.n	8006d96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f890 	bl	8006eb4 <USBD_CtlError>
        break;
 8006d94:	e01a      	b.n	8006dcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f043 0202 	orr.w	r2, r3, #2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	330c      	adds	r3, #12
 8006db6:	2202      	movs	r2, #2
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f8eb 	bl	8006f96 <USBD_CtlSendData>
      break;
 8006dc0:	e004      	b.n	8006dcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f875 	bl	8006eb4 <USBD_CtlError>
      break;
 8006dca:	bf00      	nop
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	885b      	ldrh	r3, [r3, #2]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d106      	bne.n	8006df4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f92b 	bl	800704a <USBD_CtlSendStatus>
  }
}
 8006df4:	bf00      	nop
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d80b      	bhi.n	8006e2c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	885b      	ldrh	r3, [r3, #2]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d10c      	bne.n	8006e36 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f910 	bl	800704a <USBD_CtlSendStatus>
      }
      break;
 8006e2a:	e004      	b.n	8006e36 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f840 	bl	8006eb4 <USBD_CtlError>
      break;
 8006e34:	e000      	b.n	8006e38 <USBD_ClrFeature+0x3c>
      break;
 8006e36:	bf00      	nop
  }
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fabb 	bl	80063e6 <SWAPBYTE>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff faae 	bl	80063e6 <SWAPBYTE>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff faa1 	bl	80063e6 <SWAPBYTE>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	80da      	strh	r2, [r3, #6]
}
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ebe:	2180      	movs	r1, #128	; 0x80
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fcb1 	bl	8007828 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fcad 	bl	8007828 <USBD_LL_StallEP>
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b086      	sub	sp, #24
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d036      	beq.n	8006f5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ef0:	6938      	ldr	r0, [r7, #16]
 8006ef2:	f000 f836 	bl	8006f62 <USBD_GetLen>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	3301      	adds	r3, #1
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	3301      	adds	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	3301      	adds	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f26:	e013      	b.n	8006f50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3301      	adds	r3, #1
 8006f38:	613b      	str	r3, [r7, #16]
    idx++;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4413      	add	r3, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e7      	bne.n	8006f28 <USBD_GetString+0x52>
 8006f58:	e000      	b.n	8006f5c <USBD_GetString+0x86>
    return;
 8006f5a:	bf00      	nop
  }
}
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f72:	e005      	b.n	8006f80 <USBD_GetLen+0x1e>
  {
    len++;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	3301      	adds	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f5      	bne.n	8006f74 <USBD_GetLen+0x12>
  }

  return len;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fcbc 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fcab 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	2100      	movs	r1, #0
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fcaf 	bl	800797c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	2100      	movs	r1, #0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fc9e 	bl	800797c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2204      	movs	r2, #4
 8007056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800705a:	2300      	movs	r3, #0
 800705c:	2200      	movs	r2, #0
 800705e:	2100      	movs	r1, #0
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fc6a 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2205      	movs	r2, #5
 800707c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007080:	2300      	movs	r3, #0
 8007082:	2200      	movs	r2, #0
 8007084:	2100      	movs	r1, #0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fc78 	bl	800797c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800709c:	2200      	movs	r2, #0
 800709e:	4912      	ldr	r1, [pc, #72]	; (80070e8 <MX_USB_DEVICE_Init+0x50>)
 80070a0:	4812      	ldr	r0, [pc, #72]	; (80070ec <MX_USB_DEVICE_Init+0x54>)
 80070a2:	f7fe fe8f 	bl	8005dc4 <USBD_Init>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070ac:	f7f9 fba8 	bl	8000800 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070b0:	490f      	ldr	r1, [pc, #60]	; (80070f0 <MX_USB_DEVICE_Init+0x58>)
 80070b2:	480e      	ldr	r0, [pc, #56]	; (80070ec <MX_USB_DEVICE_Init+0x54>)
 80070b4:	f7fe feb6 	bl	8005e24 <USBD_RegisterClass>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070be:	f7f9 fb9f 	bl	8000800 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070c2:	490c      	ldr	r1, [pc, #48]	; (80070f4 <MX_USB_DEVICE_Init+0x5c>)
 80070c4:	4809      	ldr	r0, [pc, #36]	; (80070ec <MX_USB_DEVICE_Init+0x54>)
 80070c6:	f7fe fe07 	bl	8005cd8 <USBD_CDC_RegisterInterface>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070d0:	f7f9 fb96 	bl	8000800 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070d4:	4805      	ldr	r0, [pc, #20]	; (80070ec <MX_USB_DEVICE_Init+0x54>)
 80070d6:	f7fe fecc 	bl	8005e72 <USBD_Start>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070e0:	f7f9 fb8e 	bl	8000800 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070e4:	bf00      	nop
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000130 	.word	0x20000130
 80070ec:	20000458 	.word	0x20000458
 80070f0:	20000018 	.word	0x20000018
 80070f4:	2000011c 	.word	0x2000011c

080070f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070fc:	2200      	movs	r2, #0
 80070fe:	4905      	ldr	r1, [pc, #20]	; (8007114 <CDC_Init_FS+0x1c>)
 8007100:	4805      	ldr	r0, [pc, #20]	; (8007118 <CDC_Init_FS+0x20>)
 8007102:	f7fe fdfe 	bl	8005d02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007106:	4905      	ldr	r1, [pc, #20]	; (800711c <CDC_Init_FS+0x24>)
 8007108:	4803      	ldr	r0, [pc, #12]	; (8007118 <CDC_Init_FS+0x20>)
 800710a:	f7fe fe18 	bl	8005d3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800710e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007110:	4618      	mov	r0, r3
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20000b10 	.word	0x20000b10
 8007118:	20000458 	.word	0x20000458
 800711c:	20000728 	.word	0x20000728

08007120 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007126:	4618      	mov	r0, r3
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	71fb      	strb	r3, [r7, #7]
 800713c:	4613      	mov	r3, r2
 800713e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	2b23      	cmp	r3, #35	; 0x23
 8007144:	d84a      	bhi.n	80071dc <CDC_Control_FS+0xac>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <CDC_Control_FS+0x1c>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	080071dd 	.word	0x080071dd
 8007150:	080071dd 	.word	0x080071dd
 8007154:	080071dd 	.word	0x080071dd
 8007158:	080071dd 	.word	0x080071dd
 800715c:	080071dd 	.word	0x080071dd
 8007160:	080071dd 	.word	0x080071dd
 8007164:	080071dd 	.word	0x080071dd
 8007168:	080071dd 	.word	0x080071dd
 800716c:	080071dd 	.word	0x080071dd
 8007170:	080071dd 	.word	0x080071dd
 8007174:	080071dd 	.word	0x080071dd
 8007178:	080071dd 	.word	0x080071dd
 800717c:	080071dd 	.word	0x080071dd
 8007180:	080071dd 	.word	0x080071dd
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071dd 	.word	0x080071dd
 800718c:	080071dd 	.word	0x080071dd
 8007190:	080071dd 	.word	0x080071dd
 8007194:	080071dd 	.word	0x080071dd
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071dd 	.word	0x080071dd
 80071a0:	080071dd 	.word	0x080071dd
 80071a4:	080071dd 	.word	0x080071dd
 80071a8:	080071dd 	.word	0x080071dd
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071dd 	.word	0x080071dd
 80071c8:	080071dd 	.word	0x080071dd
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071dd 	.word	0x080071dd
 80071d4:	080071dd 	.word	0x080071dd
 80071d8:	080071dd 	.word	0x080071dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071dc:	bf00      	nop
  }

  return (USBD_OK);
 80071de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	4805      	ldr	r0, [pc, #20]	; (8007210 <CDC_Receive_FS+0x24>)
 80071fa:	f7fe fda0 	bl	8005d3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071fe:	4804      	ldr	r0, [pc, #16]	; (8007210 <CDC_Receive_FS+0x24>)
 8007200:	f7fe fdb6 	bl	8005d70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007204:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000458 	.word	0x20000458

08007214 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800722a:	4618      	mov	r0, r3
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2212      	movs	r2, #18
 8007248:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800724a:	4b03      	ldr	r3, [pc, #12]	; (8007258 <USBD_FS_DeviceDescriptor+0x20>)
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	2000014c 	.word	0x2000014c

0800725c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2204      	movs	r2, #4
 800726c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800726e:	4b03      	ldr	r3, [pc, #12]	; (800727c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	20000160 	.word	0x20000160

08007280 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	6039      	str	r1, [r7, #0]
 800728a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	4907      	ldr	r1, [pc, #28]	; (80072b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007296:	4808      	ldr	r0, [pc, #32]	; (80072b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007298:	f7ff fe1d 	bl	8006ed6 <USBD_GetString>
 800729c:	e004      	b.n	80072a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	4904      	ldr	r1, [pc, #16]	; (80072b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80072a2:	4805      	ldr	r0, [pc, #20]	; (80072b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80072a4:	f7ff fe17 	bl	8006ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072a8:	4b02      	ldr	r3, [pc, #8]	; (80072b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000ef8 	.word	0x20000ef8
 80072b8:	08007adc 	.word	0x08007adc

080072bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	6039      	str	r1, [r7, #0]
 80072c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	4904      	ldr	r1, [pc, #16]	; (80072dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072cc:	4804      	ldr	r0, [pc, #16]	; (80072e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072ce:	f7ff fe02 	bl	8006ed6 <USBD_GetString>
  return USBD_StrDesc;
 80072d2:	4b02      	ldr	r3, [pc, #8]	; (80072dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20000ef8 	.word	0x20000ef8
 80072e0:	08007af4 	.word	0x08007af4

080072e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	221a      	movs	r2, #26
 80072f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072f6:	f000 f843 	bl	8007380 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072fa:	4b02      	ldr	r3, [pc, #8]	; (8007304 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000164 	.word	0x20000164

08007308 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4907      	ldr	r1, [pc, #28]	; (800733c <USBD_FS_ConfigStrDescriptor+0x34>)
 800731e:	4808      	ldr	r0, [pc, #32]	; (8007340 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007320:	f7ff fdd9 	bl	8006ed6 <USBD_GetString>
 8007324:	e004      	b.n	8007330 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	4904      	ldr	r1, [pc, #16]	; (800733c <USBD_FS_ConfigStrDescriptor+0x34>)
 800732a:	4805      	ldr	r0, [pc, #20]	; (8007340 <USBD_FS_ConfigStrDescriptor+0x38>)
 800732c:	f7ff fdd3 	bl	8006ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000ef8 	.word	0x20000ef8
 8007340:	08007b08 	.word	0x08007b08

08007344 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d105      	bne.n	8007362 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	4907      	ldr	r1, [pc, #28]	; (8007378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800735a:	4808      	ldr	r0, [pc, #32]	; (800737c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800735c:	f7ff fdbb 	bl	8006ed6 <USBD_GetString>
 8007360:	e004      	b.n	800736c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	4904      	ldr	r1, [pc, #16]	; (8007378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007366:	4805      	ldr	r0, [pc, #20]	; (800737c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007368:	f7ff fdb5 	bl	8006ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800736c:	4b02      	ldr	r3, [pc, #8]	; (8007378 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000ef8 	.word	0x20000ef8
 800737c:	08007b14 	.word	0x08007b14

08007380 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007386:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <Get_SerialNum+0x44>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800738c:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <Get_SerialNum+0x48>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007392:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <Get_SerialNum+0x4c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073a6:	2208      	movs	r2, #8
 80073a8:	4909      	ldr	r1, [pc, #36]	; (80073d0 <Get_SerialNum+0x50>)
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f814 	bl	80073d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073b0:	2204      	movs	r2, #4
 80073b2:	4908      	ldr	r1, [pc, #32]	; (80073d4 <Get_SerialNum+0x54>)
 80073b4:	68b8      	ldr	r0, [r7, #8]
 80073b6:	f000 f80f 	bl	80073d8 <IntToUnicode>
  }
}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	1fff7a10 	.word	0x1fff7a10
 80073c8:	1fff7a14 	.word	0x1fff7a14
 80073cc:	1fff7a18 	.word	0x1fff7a18
 80073d0:	20000166 	.word	0x20000166
 80073d4:	20000176 	.word	0x20000176

080073d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]
 80073ee:	e027      	b.n	8007440 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	0f1b      	lsrs	r3, r3, #28
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d80b      	bhi.n	8007410 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	0f1b      	lsrs	r3, r3, #28
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4619      	mov	r1, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	440b      	add	r3, r1
 8007408:	3230      	adds	r2, #48	; 0x30
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e00a      	b.n	8007426 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	0f1b      	lsrs	r3, r3, #28
 8007414:	b2da      	uxtb	r2, r3
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4619      	mov	r1, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	440b      	add	r3, r1
 8007420:	3237      	adds	r2, #55	; 0x37
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	3301      	adds	r3, #1
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	4413      	add	r3, r2
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	3301      	adds	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
 8007440:	7dfa      	ldrb	r2, [r7, #23]
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	429a      	cmp	r2, r3
 8007446:	d3d3      	bcc.n	80073f0 <IntToUnicode+0x18>
  }
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007478:	d13a      	bne.n	80074f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	4a1d      	ldr	r2, [pc, #116]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	6313      	str	r3, [r2, #48]	; 0x30
 800748a:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007496:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800749a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800749c:	2302      	movs	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a4:	2303      	movs	r3, #3
 80074a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074a8:	230a      	movs	r3, #10
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4619      	mov	r1, r3
 80074b2:	4812      	ldr	r0, [pc, #72]	; (80074fc <HAL_PCD_MspInit+0xa4>)
 80074b4:	f7fa f880 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 80074ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074bc:	4a0e      	ldr	r2, [pc, #56]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 80074be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c2:	6353      	str	r3, [r2, #52]	; 0x34
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 80074ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074d2:	6453      	str	r3, [r2, #68]	; 0x44
 80074d4:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <HAL_PCD_MspInit+0xa0>)
 80074d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074e0:	2200      	movs	r2, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	2043      	movs	r0, #67	; 0x43
 80074e6:	f7fa f830 	bl	800154a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074ea:	2043      	movs	r0, #67	; 0x43
 80074ec:	f7fa f849 	bl	8001582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074f0:	bf00      	nop
 80074f2:	3728      	adds	r7, #40	; 0x28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40023800 	.word	0x40023800
 80074fc:	40020000 	.word	0x40020000

08007500 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007514:	4619      	mov	r1, r3
 8007516:	4610      	mov	r0, r2
 8007518:	f7fe fcf6 	bl	8005f08 <USBD_LL_SetupStage>
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	4619      	mov	r1, r3
 800754e:	f7fe fd30 	bl	8005fb2 <USBD_LL_DataOutStage>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b082      	sub	sp, #8
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800756c:	78fa      	ldrb	r2, [r7, #3]
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	3348      	adds	r3, #72	; 0x48
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	78fb      	ldrb	r3, [r7, #3]
 8007580:	4619      	mov	r1, r3
 8007582:	f7fe fd79 	bl	8006078 <USBD_LL_DataInStage>
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe fe8d 	bl	80062bc <USBD_LL_SOF>
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d001      	beq.n	80075c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075be:	f7f9 f91f 	bl	8000800 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075c8:	7bfa      	ldrb	r2, [r7, #15]
 80075ca:	4611      	mov	r1, r2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fe37 	bl	8006240 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe fde3 	bl	80061a4 <USBD_LL_Reset>
}
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fe32 	bl	8006260 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	6812      	ldr	r2, [r2, #0]
 800760a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800761c:	4b04      	ldr	r3, [pc, #16]	; (8007630 <HAL_PCD_SuspendCallback+0x48>)
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	4a03      	ldr	r2, [pc, #12]	; (8007630 <HAL_PCD_SuspendCallback+0x48>)
 8007622:	f043 0306 	orr.w	r3, r3, #6
 8007626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	e000ed00 	.word	0xe000ed00

08007634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fe22 	bl	800628c <USBD_LL_Resume>
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fe70 	bl	800634c <USBD_LL_IsoOUTIncomplete>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	4611      	mov	r1, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fe38 	bl	8006300 <USBD_LL_IsoINIncomplete>
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fe76 	bl	8006398 <USBD_LL_DevConnected>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fe73 	bl	80063ae <USBD_LL_DevDisconnected>
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d13c      	bne.n	800775a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076e0:	4a20      	ldr	r2, [pc, #128]	; (8007764 <USBD_LL_Init+0x94>)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <USBD_LL_Init+0x94>)
 80076ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076f0:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <USBD_LL_Init+0x94>)
 80076f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <USBD_LL_Init+0x94>)
 80076fa:	2204      	movs	r2, #4
 80076fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <USBD_LL_Init+0x94>)
 8007700:	2202      	movs	r2, #2
 8007702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007704:	4b17      	ldr	r3, [pc, #92]	; (8007764 <USBD_LL_Init+0x94>)
 8007706:	2200      	movs	r2, #0
 8007708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800770a:	4b16      	ldr	r3, [pc, #88]	; (8007764 <USBD_LL_Init+0x94>)
 800770c:	2202      	movs	r2, #2
 800770e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007710:	4b14      	ldr	r3, [pc, #80]	; (8007764 <USBD_LL_Init+0x94>)
 8007712:	2200      	movs	r2, #0
 8007714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007716:	4b13      	ldr	r3, [pc, #76]	; (8007764 <USBD_LL_Init+0x94>)
 8007718:	2200      	movs	r2, #0
 800771a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800771c:	4b11      	ldr	r3, [pc, #68]	; (8007764 <USBD_LL_Init+0x94>)
 800771e:	2200      	movs	r2, #0
 8007720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <USBD_LL_Init+0x94>)
 8007724:	2200      	movs	r2, #0
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007728:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <USBD_LL_Init+0x94>)
 800772a:	2200      	movs	r2, #0
 800772c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800772e:	480d      	ldr	r0, [pc, #52]	; (8007764 <USBD_LL_Init+0x94>)
 8007730:	f7fa f8c6 	bl	80018c0 <HAL_PCD_Init>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800773a:	f7f9 f861 	bl	8000800 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800773e:	2180      	movs	r1, #128	; 0x80
 8007740:	4808      	ldr	r0, [pc, #32]	; (8007764 <USBD_LL_Init+0x94>)
 8007742:	f7fb fa24 	bl	8002b8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	2100      	movs	r1, #0
 800774a:	4806      	ldr	r0, [pc, #24]	; (8007764 <USBD_LL_Init+0x94>)
 800774c:	f7fb f9d8 	bl	8002b00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007750:	2280      	movs	r2, #128	; 0x80
 8007752:	2101      	movs	r1, #1
 8007754:	4803      	ldr	r0, [pc, #12]	; (8007764 <USBD_LL_Init+0x94>)
 8007756:	f7fb f9d3 	bl	8002b00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	200010f8 	.word	0x200010f8

08007768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800777e:	4618      	mov	r0, r3
 8007780:	f7fa f9bb 	bl	8001afa <HAL_PCD_Start>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f942 	bl	8007a14 <USBD_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	4608      	mov	r0, r1
 80077a8:	4611      	mov	r1, r2
 80077aa:	461a      	mov	r2, r3
 80077ac:	4603      	mov	r3, r0
 80077ae:	70fb      	strb	r3, [r7, #3]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70bb      	strb	r3, [r7, #2]
 80077b4:	4613      	mov	r3, r2
 80077b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077c6:	78bb      	ldrb	r3, [r7, #2]
 80077c8:	883a      	ldrh	r2, [r7, #0]
 80077ca:	78f9      	ldrb	r1, [r7, #3]
 80077cc:	f7fa fd9f 	bl	800230e <HAL_PCD_EP_Open>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f91c 	bl	8007a14 <USBD_Get_USB_Status>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	4611      	mov	r1, r2
 8007808:	4618      	mov	r0, r3
 800780a:	f7fa fde8 	bl	80023de <HAL_PCD_EP_Close>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f8fd 	bl	8007a14 <USBD_Get_USB_Status>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800781e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fa fec0 	bl	80025cc <HAL_PCD_EP_SetStall>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f8de 	bl	8007a14 <USBD_Get_USB_Status>
 8007858:	4603      	mov	r3, r0
 800785a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800785c:	7bbb      	ldrb	r3, [r7, #14]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fa ff05 	bl	8002694 <HAL_PCD_EP_ClrStall>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	4618      	mov	r0, r3
 8007892:	f000 f8bf 	bl	8007a14 <USBD_Get_USB_Status>
 8007896:	4603      	mov	r3, r0
 8007898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800789a:	7bbb      	ldrb	r3, [r7, #14]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da0b      	bge.n	80078d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	4613      	mov	r3, r2
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	333e      	adds	r3, #62	; 0x3e
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	e00b      	b.n	80078f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	4613      	mov	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7fa fcd2 	bl	80022c4 <HAL_PCD_SetAddress>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f874 	bl	8007a14 <USBD_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	460b      	mov	r3, r1
 8007948:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007958:	7af9      	ldrb	r1, [r7, #11]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	f7fa fdeb 	bl	8002538 <HAL_PCD_EP_Transmit>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f853 	bl	8007a14 <USBD_Get_USB_Status>
 800796e:	4603      	mov	r3, r0
 8007970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007972:	7dbb      	ldrb	r3, [r7, #22]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	460b      	mov	r3, r1
 800798a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800799a:	7af9      	ldrb	r1, [r7, #11]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	f7fa fd67 	bl	8002472 <HAL_PCD_EP_Receive>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f832 	bl	8007a14 <USBD_Get_USB_Status>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fa fd97 	bl	8002508 <HAL_PCD_EP_GetRxCount>
 80079da:	4603      	mov	r3, r0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079ec:	4b03      	ldr	r3, [pc, #12]	; (80079fc <USBD_static_malloc+0x18>)
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	200001a4 	.word	0x200001a4

08007a00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d817      	bhi.n	8007a58 <USBD_Get_USB_Status+0x44>
 8007a28:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <USBD_Get_USB_Status+0x1c>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a47 	.word	0x08007a47
 8007a38:	08007a4d 	.word	0x08007a4d
 8007a3c:	08007a53 	.word	0x08007a53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
    break;
 8007a44:	e00b      	b.n	8007a5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a46:	2303      	movs	r3, #3
 8007a48:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4a:	e008      	b.n	8007a5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a50:	e005      	b.n	8007a5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
    break;
 8007a56:	e002      	b.n	8007a5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5c:	bf00      	nop
  }
  return usb_status;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <__libc_init_array>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4d0d      	ldr	r5, [pc, #52]	; (8007aa4 <__libc_init_array+0x38>)
 8007a70:	4c0d      	ldr	r4, [pc, #52]	; (8007aa8 <__libc_init_array+0x3c>)
 8007a72:	1b64      	subs	r4, r4, r5
 8007a74:	10a4      	asrs	r4, r4, #2
 8007a76:	2600      	movs	r6, #0
 8007a78:	42a6      	cmp	r6, r4
 8007a7a:	d109      	bne.n	8007a90 <__libc_init_array+0x24>
 8007a7c:	4d0b      	ldr	r5, [pc, #44]	; (8007aac <__libc_init_array+0x40>)
 8007a7e:	4c0c      	ldr	r4, [pc, #48]	; (8007ab0 <__libc_init_array+0x44>)
 8007a80:	f000 f820 	bl	8007ac4 <_init>
 8007a84:	1b64      	subs	r4, r4, r5
 8007a86:	10a4      	asrs	r4, r4, #2
 8007a88:	2600      	movs	r6, #0
 8007a8a:	42a6      	cmp	r6, r4
 8007a8c:	d105      	bne.n	8007a9a <__libc_init_array+0x2e>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a94:	4798      	blx	r3
 8007a96:	3601      	adds	r6, #1
 8007a98:	e7ee      	b.n	8007a78 <__libc_init_array+0xc>
 8007a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9e:	4798      	blx	r3
 8007aa0:	3601      	adds	r6, #1
 8007aa2:	e7f2      	b.n	8007a8a <__libc_init_array+0x1e>
 8007aa4:	08007b3c 	.word	0x08007b3c
 8007aa8:	08007b3c 	.word	0x08007b3c
 8007aac:	08007b3c 	.word	0x08007b3c
 8007ab0:	08007b40 	.word	0x08007b40

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <_init>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr

08007ad0 <_fini>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr
