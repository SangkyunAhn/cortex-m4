
7_I2C_ADCLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000841c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008648  08008648  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008650  08008650  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008650  08008650  00018650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008654  08008654  00018654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  20000190  080087e8  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001548  080087e8  00021548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183ad  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000388b  00000000  00000000  0003856d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0003bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  0003cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a65b  00000000  00000000  0003dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d50  00000000  00000000  000582c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f13  00000000  00000000  0006e013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041bc  00000000  00000000  00102f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000190 	.word	0x20000190
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008598 	.word	0x08008598

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000194 	.word	0x20000194
 80001d0:	08008598 	.word	0x08008598

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2f>:
 8000980:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000984:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000988:	bf24      	itt	cs
 800098a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000992:	d90d      	bls.n	80009b0 <__aeabi_d2f+0x30>
 8000994:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000998:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800099c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a8:	bf08      	it	eq
 80009aa:	f020 0001 	biceq.w	r0, r0, #1
 80009ae:	4770      	bx	lr
 80009b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b4:	d121      	bne.n	80009fa <__aeabi_d2f+0x7a>
 80009b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ba:	bfbc      	itt	lt
 80009bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	4770      	bxlt	lr
 80009c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ca:	f1c2 0218 	rsb	r2, r2, #24
 80009ce:	f1c2 0c20 	rsb	ip, r2, #32
 80009d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d6:	fa20 f002 	lsr.w	r0, r0, r2
 80009da:	bf18      	it	ne
 80009dc:	f040 0001 	orrne.w	r0, r0, #1
 80009e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009ec:	ea40 000c 	orr.w	r0, r0, ip
 80009f0:	fa23 f302 	lsr.w	r3, r3, r2
 80009f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f8:	e7cc      	b.n	8000994 <__aeabi_d2f+0x14>
 80009fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fe:	d107      	bne.n	8000a10 <__aeabi_d2f+0x90>
 8000a00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a04:	bf1e      	ittt	ne
 8000a06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0e:	4770      	bxne	lr
 8000a10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_uldivmod>:
 8000a20:	b953      	cbnz	r3, 8000a38 <__aeabi_uldivmod+0x18>
 8000a22:	b94a      	cbnz	r2, 8000a38 <__aeabi_uldivmod+0x18>
 8000a24:	2900      	cmp	r1, #0
 8000a26:	bf08      	it	eq
 8000a28:	2800      	cmpeq	r0, #0
 8000a2a:	bf1c      	itt	ne
 8000a2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a30:	f04f 30ff 	movne.w	r0, #4294967295
 8000a34:	f000 b96e 	b.w	8000d14 <__aeabi_idiv0>
 8000a38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a40:	f000 f806 	bl	8000a50 <__udivmoddi4>
 8000a44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a4c:	b004      	add	sp, #16
 8000a4e:	4770      	bx	lr

08000a50 <__udivmoddi4>:
 8000a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a54:	9d08      	ldr	r5, [sp, #32]
 8000a56:	4604      	mov	r4, r0
 8000a58:	468c      	mov	ip, r1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f040 8083 	bne.w	8000b66 <__udivmoddi4+0x116>
 8000a60:	428a      	cmp	r2, r1
 8000a62:	4617      	mov	r7, r2
 8000a64:	d947      	bls.n	8000af6 <__udivmoddi4+0xa6>
 8000a66:	fab2 f282 	clz	r2, r2
 8000a6a:	b142      	cbz	r2, 8000a7e <__udivmoddi4+0x2e>
 8000a6c:	f1c2 0020 	rsb	r0, r2, #32
 8000a70:	fa24 f000 	lsr.w	r0, r4, r0
 8000a74:	4091      	lsls	r1, r2
 8000a76:	4097      	lsls	r7, r2
 8000a78:	ea40 0c01 	orr.w	ip, r0, r1
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a82:	0c23      	lsrs	r3, r4, #16
 8000a84:	fbbc f6f8 	udiv	r6, ip, r8
 8000a88:	fa1f fe87 	uxth.w	lr, r7
 8000a8c:	fb08 c116 	mls	r1, r8, r6, ip
 8000a90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a94:	fb06 f10e 	mul.w	r1, r6, lr
 8000a98:	4299      	cmp	r1, r3
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x60>
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aa2:	f080 8119 	bcs.w	8000cd8 <__udivmoddi4+0x288>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 8116 	bls.w	8000cd8 <__udivmoddi4+0x288>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	443b      	add	r3, r7
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab8:	fb08 3310 	mls	r3, r8, r0, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x8c>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ace:	f080 8105 	bcs.w	8000cdc <__udivmoddi4+0x28c>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f240 8102 	bls.w	8000cdc <__udivmoddi4+0x28c>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	443c      	add	r4, r7
 8000adc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ae0:	eba4 040e 	sub.w	r4, r4, lr
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	b11d      	cbz	r5, 8000af0 <__udivmoddi4+0xa0>
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	2300      	movs	r3, #0
 8000aec:	e9c5 4300 	strd	r4, r3, [r5]
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	b902      	cbnz	r2, 8000afa <__udivmoddi4+0xaa>
 8000af8:	deff      	udf	#255	; 0xff
 8000afa:	fab2 f282 	clz	r2, r2
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d150      	bne.n	8000ba4 <__udivmoddi4+0x154>
 8000b02:	1bcb      	subs	r3, r1, r7
 8000b04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b08:	fa1f f887 	uxth.w	r8, r7
 8000b0c:	2601      	movs	r6, #1
 8000b0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b12:	0c21      	lsrs	r1, r4, #16
 8000b14:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb08 f30c 	mul.w	r3, r8, ip
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d907      	bls.n	8000b34 <__udivmoddi4+0xe4>
 8000b24:	1879      	adds	r1, r7, r1
 8000b26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0xe2>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	f200 80e9 	bhi.w	8000d04 <__udivmoddi4+0x2b4>
 8000b32:	4684      	mov	ip, r0
 8000b34:	1ac9      	subs	r1, r1, r3
 8000b36:	b2a3      	uxth	r3, r4
 8000b38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b3c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b44:	fb08 f800 	mul.w	r8, r8, r0
 8000b48:	45a0      	cmp	r8, r4
 8000b4a:	d907      	bls.n	8000b5c <__udivmoddi4+0x10c>
 8000b4c:	193c      	adds	r4, r7, r4
 8000b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x10a>
 8000b54:	45a0      	cmp	r8, r4
 8000b56:	f200 80d9 	bhi.w	8000d0c <__udivmoddi4+0x2bc>
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	eba4 0408 	sub.w	r4, r4, r8
 8000b60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b64:	e7bf      	b.n	8000ae6 <__udivmoddi4+0x96>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0x12e>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80b1 	beq.w	8000cd2 <__udivmoddi4+0x282>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x1cc>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0x140>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80b8 	bhi.w	8000d00 <__udivmoddi4+0x2b0>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0103 	sbc.w	r1, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	468c      	mov	ip, r1
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0a8      	beq.n	8000af0 <__udivmoddi4+0xa0>
 8000b9e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ba2:	e7a5      	b.n	8000af0 <__udivmoddi4+0xa0>
 8000ba4:	f1c2 0320 	rsb	r3, r2, #32
 8000ba8:	fa20 f603 	lsr.w	r6, r0, r3
 8000bac:	4097      	lsls	r7, r2
 8000bae:	fa01 f002 	lsl.w	r0, r1, r2
 8000bb2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb6:	40d9      	lsrs	r1, r3
 8000bb8:	4330      	orrs	r0, r6
 8000bba:	0c03      	lsrs	r3, r0, #16
 8000bbc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bc0:	fa1f f887 	uxth.w	r8, r7
 8000bc4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bcc:	fb06 f108 	mul.w	r1, r6, r8
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x19c>
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bde:	f080 808d 	bcs.w	8000cfc <__udivmoddi4+0x2ac>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 808a 	bls.w	8000cfc <__udivmoddi4+0x2ac>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	443b      	add	r3, r7
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b281      	uxth	r1, r0
 8000bf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bfc:	fb00 f308 	mul.w	r3, r0, r8
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d907      	bls.n	8000c14 <__udivmoddi4+0x1c4>
 8000c04:	1879      	adds	r1, r7, r1
 8000c06:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c0a:	d273      	bcs.n	8000cf4 <__udivmoddi4+0x2a4>
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d971      	bls.n	8000cf4 <__udivmoddi4+0x2a4>
 8000c10:	3802      	subs	r0, #2
 8000c12:	4439      	add	r1, r7
 8000c14:	1acb      	subs	r3, r1, r3
 8000c16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c1a:	e778      	b.n	8000b0e <__udivmoddi4+0xbe>
 8000c1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000c20:	fa03 f406 	lsl.w	r4, r3, r6
 8000c24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c28:	431c      	orrs	r4, r3
 8000c2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c3a:	431f      	orrs	r7, r3
 8000c3c:	0c3b      	lsrs	r3, r7, #16
 8000c3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c42:	fa1f f884 	uxth.w	r8, r4
 8000c46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000c52:	458a      	cmp	sl, r1
 8000c54:	fa02 f206 	lsl.w	r2, r2, r6
 8000c58:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x220>
 8000c5e:	1861      	adds	r1, r4, r1
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	d248      	bcs.n	8000cf8 <__udivmoddi4+0x2a8>
 8000c66:	458a      	cmp	sl, r1
 8000c68:	d946      	bls.n	8000cf8 <__udivmoddi4+0x2a8>
 8000c6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6e:	4421      	add	r1, r4
 8000c70:	eba1 010a 	sub.w	r1, r1, sl
 8000c74:	b2bf      	uxth	r7, r7
 8000c76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c82:	fb00 f808 	mul.w	r8, r0, r8
 8000c86:	45b8      	cmp	r8, r7
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x24a>
 8000c8a:	19e7      	adds	r7, r4, r7
 8000c8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c90:	d22e      	bcs.n	8000cf0 <__udivmoddi4+0x2a0>
 8000c92:	45b8      	cmp	r8, r7
 8000c94:	d92c      	bls.n	8000cf0 <__udivmoddi4+0x2a0>
 8000c96:	3802      	subs	r0, #2
 8000c98:	4427      	add	r7, r4
 8000c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9e:	eba7 0708 	sub.w	r7, r7, r8
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	454f      	cmp	r7, r9
 8000ca8:	46c6      	mov	lr, r8
 8000caa:	4649      	mov	r1, r9
 8000cac:	d31a      	bcc.n	8000ce4 <__udivmoddi4+0x294>
 8000cae:	d017      	beq.n	8000ce0 <__udivmoddi4+0x290>
 8000cb0:	b15d      	cbz	r5, 8000cca <__udivmoddi4+0x27a>
 8000cb2:	ebb3 020e 	subs.w	r2, r3, lr
 8000cb6:	eb67 0701 	sbc.w	r7, r7, r1
 8000cba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cbe:	40f2      	lsrs	r2, r6
 8000cc0:	ea4c 0202 	orr.w	r2, ip, r2
 8000cc4:	40f7      	lsrs	r7, r6
 8000cc6:	e9c5 2700 	strd	r2, r7, [r5]
 8000cca:	2600      	movs	r6, #0
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	462e      	mov	r6, r5
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	e70b      	b.n	8000af0 <__udivmoddi4+0xa0>
 8000cd8:	4606      	mov	r6, r0
 8000cda:	e6e9      	b.n	8000ab0 <__udivmoddi4+0x60>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e6fd      	b.n	8000adc <__udivmoddi4+0x8c>
 8000ce0:	4543      	cmp	r3, r8
 8000ce2:	d2e5      	bcs.n	8000cb0 <__udivmoddi4+0x260>
 8000ce4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ce8:	eb69 0104 	sbc.w	r1, r9, r4
 8000cec:	3801      	subs	r0, #1
 8000cee:	e7df      	b.n	8000cb0 <__udivmoddi4+0x260>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	e7d2      	b.n	8000c9a <__udivmoddi4+0x24a>
 8000cf4:	4660      	mov	r0, ip
 8000cf6:	e78d      	b.n	8000c14 <__udivmoddi4+0x1c4>
 8000cf8:	4681      	mov	r9, r0
 8000cfa:	e7b9      	b.n	8000c70 <__udivmoddi4+0x220>
 8000cfc:	4666      	mov	r6, ip
 8000cfe:	e775      	b.n	8000bec <__udivmoddi4+0x19c>
 8000d00:	4630      	mov	r0, r6
 8000d02:	e74a      	b.n	8000b9a <__udivmoddi4+0x14a>
 8000d04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d08:	4439      	add	r1, r7
 8000d0a:	e713      	b.n	8000b34 <__udivmoddi4+0xe4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	e724      	b.n	8000b5c <__udivmoddi4+0x10c>
 8000d12:	bf00      	nop

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <MX_ADC1_Init+0xa0>)
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d78:	f000 fcf8 	bl	800176c <HAL_ADC_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 fbd3 	bl	800152c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d98:	f000 fe78 	bl	8001a8c <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000da2:	f000 fbc3 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200003e4 	.word	0x200003e4
 8000db4:	40012000 	.word	0x40012000
 8000db8:	0f000001 	.word	0x0f000001

08000dbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_ADC_MspInit+0x7c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d127      	bne.n	8000e2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e16:	2302      	movs	r3, #2
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_ADC_MspInit+0x84>)
 8000e2a:	f001 f95f 	bl	80020ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012000 	.word	0x40012000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_GPIO_Init+0x68>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <MX_I2C1_Init+0x54>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_I2C1_Init+0x58>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_I2C1_Init+0x50>)
 8000eee:	f001 fa81 	bl	80023f4 <HAL_I2C_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef8:	f000 fb18 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000042c 	.word	0x2000042c
 8000f04:	40005400 	.word	0x40005400
 8000f08:	000186a0 	.word	0x000186a0

08000f0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_I2C_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12c      	bne.n	8000f88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_I2C_MspInit+0x8c>)
 8000f68:	f001 f8c0 	bl	80020ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400

08000f9c <LCD_SendInternal>:
        0b00110,
        0b00000
};


HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	4613      	mov	r3, r2
 8000fac:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4822      	ldr	r0, [pc, #136]	; (8001044 <LCD_SendInternal+0xa8>)
 8000fba:	f001 fc5d 	bl	8002878 <HAL_I2C_IsDeviceReady>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d000      	beq.n	8000fca <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000fc8:	e7f1      	b.n	8000fae <LCD_SendInternal+0x12>
            break;
 8000fca:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	f023 030f 	bic.w	r3, r3, #15
 8000fd2:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000fda:	7bba      	ldrb	r2, [r7, #14]
 8000fdc:	797b      	ldrb	r3, [r7, #5]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000fea:	7bba      	ldrb	r2, [r7, #14]
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000ffa:	7b7a      	ldrb	r2, [r7, #13]
 8000ffc:	797b      	ldrb	r3, [r7, #5]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f043 030c 	orr.w	r3, r3, #12
 8001006:	b2db      	uxtb	r3, r3
 8001008:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 800100a:	7b7a      	ldrb	r2, [r7, #13]
 800100c:	797b      	ldrb	r3, [r7, #5]
 800100e:	4313      	orrs	r3, r2
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	b2db      	uxtb	r3, r3
 8001018:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	b299      	uxth	r1, r3
 800101e:	f107 0208 	add.w	r2, r7, #8
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2304      	movs	r3, #4
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <LCD_SendInternal+0xa8>)
 800102c:	f001 fb26 	bl	800267c <HAL_I2C_Master_Transmit>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
    LCD_Delay_ms(5);
 8001034:	2005      	movs	r0, #5
 8001036:	f000 f929 	bl	800128c <LCD_Delay_ms>
    return res;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000042c 	.word	0x2000042c

08001048 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, cmd, 0);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	204e      	movs	r0, #78	; 0x4e
 800105a:	f7ff ff9f 	bl	8000f9c <LCD_SendInternal>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, data, PIN_RS);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	204e      	movs	r0, #78	; 0x4e
 8001078:	f7ff ff90 	bl	8000f9c <LCD_SendInternal>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <LCD_Init>:

void LCD_Init(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	LCD_Opt.CurrentX = 0;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <LCD_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	70da      	strb	r2, [r3, #3]
	LCD_Opt.CurrentY = 0;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <LCD_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	711a      	strb	r2, [r3, #4]
	LCD_Opt.DisplayFunction = LCD_8BITMODE | LCD_5x8DOTS | LCD_2LINE;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <LCD_Init+0x74>)
 8001096:	2218      	movs	r2, #24
 8001098:	705a      	strb	r2, [r3, #1]
	LCD_Opt.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <LCD_Init+0x74>)
 800109c:	2204      	movs	r2, #4
 800109e:	701a      	strb	r2, [r3, #0]
	LCD_Opt.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <LCD_Init+0x74>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	709a      	strb	r2, [r3, #2]

    // 8-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(LCD_FUNCTIONSET | LCD_Opt.DisplayFunction);//0x38
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <LCD_Init+0x74>)
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ffc9 	bl	8001048 <LCD_SendCommand>
    // display & cursor home
    LCD_SendCommand(LCD_RETURNHOME); //0x02
 80010b6:	2002      	movs	r0, #2
 80010b8:	f7ff ffc6 	bl	8001048 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(LCD_DISPLAYCONTROL | LCD_Opt.DisplayControl);//0x0c
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <LCD_Init+0x74>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffbe 	bl	8001048 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(LCD_CLEARDISPLAY); //0x01
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff ffbb 	bl	8001048 <LCD_SendCommand>

    LCD_SendCommand(LCD_ENTRYMODESET | LCD_Opt.DisplayMode); //0x06
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <LCD_Init+0x74>)
 80010d4:	789b      	ldrb	r3, [r3, #2]
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffb3 	bl	8001048 <LCD_SendCommand>

    LCD_CreateSpecialChar(0, special1);
 80010e2:	4906      	ldr	r1, [pc, #24]	; (80010fc <LCD_Init+0x78>)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f84b 	bl	8001180 <LCD_CreateSpecialChar>
    LCD_CreateSpecialChar(1, special2);
 80010ea:	4905      	ldr	r1, [pc, #20]	; (8001100 <LCD_Init+0x7c>)
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 f847 	bl	8001180 <LCD_CreateSpecialChar>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001ac 	.word	0x200001ac
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008

08001104 <LCD_Clear>:

void LCD_Clear()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_CLEARDISPLAY);
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff ff9d 	bl	8001048 <LCD_SendCommand>
	LCD_Delay_ms(2);
 800110e:	2002      	movs	r0, #2
 8001110:	f000 f8bc 	bl	800128c <LCD_Delay_ms>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <LCD_SetCursor>:
	LCD_SendCommand(LCD_RETURNHOME);
	LCD_Delay_ms(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <LCD_SetCursor+0x60>)
 800112a:	f107 0408 	add.w	r4, r7, #8
 800112e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= _LCD_ROWS)
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d901      	bls.n	800113e <LCD_SetCursor+0x26>
		row = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	71bb      	strb	r3, [r7, #6]
	LCD_Opt.CurrentX = col;
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <LCD_SetCursor+0x64>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	70d3      	strb	r3, [r2, #3]
	LCD_Opt.CurrentY = row;
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <LCD_SetCursor+0x64>)
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	7113      	strb	r3, [r2, #4]
	LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	f107 0218 	add.w	r2, r7, #24
 8001152:	4413      	add	r3, r2
 8001154:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4413      	add	r3, r2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001166:	b25b      	sxtb	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff6c 	bl	8001048 <LCD_SendCommand>
}
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	080085b0 	.word	0x080085b0
 800117c:	200001ac 	.word	0x200001ac

08001180 <LCD_CreateSpecialChar>:
	LCD_Opt.DisplayMode &= ~LCD_ENTRYSHIFTINC;
	LCD_SendCommand(LCD_ENTRYMODESET | LCD_Opt.DisplayMode);
}

void LCD_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	71fb      	strb	r3, [r7, #7]
  LCD_SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	b25b      	sxtb	r3, r3
 800119a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff50 	bl	8001048 <LCD_SendCommand>
  for (int i=0; i<8; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e009      	b.n	80011c2 <LCD_CreateSpecialChar+0x42>
  {
    LCD_SendData(charmap[i]);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff55 	bl	8001066 <LCD_SendData>
  for (int i=0; i<8; i++)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	ddf2      	ble.n	80011ae <LCD_CreateSpecialChar+0x2e>
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <LCD_Puts>:
{
  while(*c) LCD_SendData(*c++);
}

void LCD_Puts(uint8_t x, uint8_t y, char* str)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	603a      	str	r2, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	460b      	mov	r3, r1
 80011e2:	71bb      	strb	r3, [r7, #6]
	LCD_SetCursor(x, y);
 80011e4:	79ba      	ldrb	r2, [r7, #6]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff94 	bl	8001118 <LCD_SetCursor>
	while (*str)
 80011f0:	e040      	b.n	8001274 <LCD_Puts+0xa0>
	{
		if (LCD_Opt.CurrentX >= _LCD_COLS)
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <LCD_Puts+0xb4>)
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d910      	bls.n	800121c <LCD_Puts+0x48>
		{
			LCD_Opt.CurrentX = 0;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <LCD_Puts+0xb4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
			LCD_Opt.CurrentY++;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <LCD_Puts+0xb4>)
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <LCD_Puts+0xb4>)
 800120a:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <LCD_Puts+0xb4>)
 800120e:	78db      	ldrb	r3, [r3, #3]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <LCD_Puts+0xb4>)
 8001212:	7912      	ldrb	r2, [r2, #4]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff7e 	bl	8001118 <LCD_SetCursor>
		}
		if (*str == '\n')
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b0a      	cmp	r3, #10
 8001222:	d10e      	bne.n	8001242 <LCD_Puts+0x6e>
		{
			LCD_Opt.CurrentY++;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <LCD_Puts+0xb4>)
 8001226:	791b      	ldrb	r3, [r3, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <LCD_Puts+0xb4>)
 800122e:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <LCD_Puts+0xb4>)
 8001232:	78db      	ldrb	r3, [r3, #3]
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <LCD_Puts+0xb4>)
 8001236:	7912      	ldrb	r2, [r2, #4]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff6c 	bl	8001118 <LCD_SetCursor>
 8001240:	e015      	b.n	800126e <LCD_Puts+0x9a>
		}
		else if (*str == '\r')
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b0d      	cmp	r3, #13
 8001248:	d106      	bne.n	8001258 <LCD_Puts+0x84>
		{
			LCD_SetCursor(0, LCD_Opt.CurrentY);
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <LCD_Puts+0xb4>)
 800124c:	791b      	ldrb	r3, [r3, #4]
 800124e:	4619      	mov	r1, r3
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff61 	bl	8001118 <LCD_SetCursor>
 8001256:	e00a      	b.n	800126e <LCD_Puts+0x9a>
		}
		else
		{
			LCD_SendData(*str);//LCD_Print(*str);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff02 	bl	8001066 <LCD_SendData>
			LCD_Opt.CurrentX++;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <LCD_Puts+0xb4>)
 8001264:	78db      	ldrb	r3, [r3, #3]
 8001266:	3301      	adds	r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <LCD_Puts+0xb4>)
 800126c:	70da      	strb	r2, [r3, #3]
		}
		str++;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	603b      	str	r3, [r7, #0]
	while (*str)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ba      	bne.n	80011f2 <LCD_Puts+0x1e>
	}
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001ac 	.word	0x200001ac

0800128c <LCD_Delay_ms>:
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));
}

void LCD_Delay_ms(uint8_t ms)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  #if _LCD_USE_FREERTOS==1
  osDelay(ms);
  #else
  HAL_Delay(ms);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fa43 	bl	8001724 <HAL_Delay>
  #endif
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_IncTick+0x40>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_IncTick+0x44>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <HAL_IncTick+0x44>)
 80012ba:	6013      	str	r3, [r2, #0]

	if ((uwTick % 1000) == 0) {
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_IncTick+0x44>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_IncTick+0x48>)
 80012c2:	fba3 1302 	umull	r1, r3, r3, r2
 80012c6:	099b      	lsrs	r3, r3, #6
 80012c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_IncTick+0x34>
		sFlag = SET;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_IncTick+0x4c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
	}
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000018 	.word	0x20000018
 80012ec:	2000049c 	.word	0x2000049c
 80012f0:	10624dd3 	.word	0x10624dd3
 80012f4:	200001b8 	.word	0x200001b8

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f000 f9b4 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f8aa 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f7ff fd9e 	bl	8000e44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001308:	f7ff fd06 	bl	8000d18 <MX_ADC1_Init>
  MX_I2C1_Init();
 800130c:	f7ff fdd0 	bl	8000eb0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001310:	f006 fbaa 	bl	8007a68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001314:	f7ff feb6 	bl	8001084 <LCD_Init>

  LCD_SetCursor(0, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fefc 	bl	8001118 <LCD_SetCursor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8001320:	4841      	ldr	r0, [pc, #260]	; (8001428 <main+0x130>)
 8001322:	f000 fa67 	bl	80017f4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001326:	f04f 31ff 	mov.w	r1, #4294967295
 800132a:	483f      	ldr	r0, [pc, #252]	; (8001428 <main+0x130>)
 800132c:	f000 fb16 	bl	800195c <HAL_ADC_PollForConversion>

	  rawValue = HAL_ADC_GetValue(&hadc1);
 8001330:	483d      	ldr	r0, [pc, #244]	; (8001428 <main+0x130>)
 8001332:	f000 fb9e 	bl	8001a72 <HAL_ADC_GetValue>
 8001336:	4603      	mov	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b3c      	ldr	r3, [pc, #240]	; (800142c <main+0x134>)
 800133c:	801a      	strh	r2, [r3, #0]
	  Temp = (float)rawValue / 4095 * 3300;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <main+0x134>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800134a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001430 <main+0x138>
 800134e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001352:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001434 <main+0x13c>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <main+0x140>)
 800135c:	edc3 7a00 	vstr	s15, [r3]
	  Temp = ((Temp - 760.0) / 2.5) + 25;
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <main+0x140>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8a1 	bl	80004ac <__aeabi_f2d>
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <main+0x144>)
 8001370:	f7fe ff3c 	bl	80001ec <__aeabi_dsub>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <main+0x148>)
 8001382:	f7ff fa15 	bl	80007b0 <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <main+0x14c>)
 8001394:	f7fe ff2c 	bl	80001f0 <__adddf3>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff faee 	bl	8000980 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a24      	ldr	r2, [pc, #144]	; (8001438 <main+0x140>)
 80013a8:	6013      	str	r3, [r2, #0]
	  itoa((int)Temp, strTemp, 10);
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <main+0x140>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b4:	220a      	movs	r2, #10
 80013b6:	4924      	ldr	r1, [pc, #144]	; (8001448 <main+0x150>)
 80013b8:	ee17 0a90 	vmov	r0, s15
 80013bc:	f007 f8a0 	bl	8008500 <itoa>
	  if (strlen(strTemp) == 3 && oldLen != strlen(strTemp)) LCD_Clear();
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <main+0x150>)
 80013c2:	f7fe ff07 	bl	80001d4 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d109      	bne.n	80013e0 <main+0xe8>
 80013cc:	481e      	ldr	r0, [pc, #120]	; (8001448 <main+0x150>)
 80013ce:	f7fe ff01 	bl	80001d4 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a1d      	ldr	r2, [pc, #116]	; (800144c <main+0x154>)
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	4293      	cmp	r3, r2
 80013da:	d001      	beq.n	80013e0 <main+0xe8>
 80013dc:	f7ff fe92 	bl	8001104 <LCD_Clear>
	  LCD_Puts(0, 0, strTemp);
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <main+0x150>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fef5 	bl	80011d4 <LCD_Puts>
	  oldLen = strlen(strTemp);
 80013ea:	4817      	ldr	r0, [pc, #92]	; (8001448 <main+0x150>)
 80013ec:	f7fe fef2 	bl	80001d4 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <main+0x154>)
 80013f6:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 80013f8:	2064      	movs	r0, #100	; 0x64
 80013fa:	f000 f993 	bl	8001724 <HAL_Delay>

	  if (sFlag) {
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <main+0x158>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00e      	beq.n	8001424 <main+0x12c>
		  sFlag = RESET;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <main+0x158>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		  while (CDC_Transmit_FS((uint8_t *)MSG, strlen(MSG)) == USBD_OK) {}
 800140c:	bf00      	nop
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <main+0x15c>)
 8001410:	f7fe fee0 	bl	80001d4 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <main+0x15c>)
 800141a:	f006 fbe3 	bl	8007be4 <CDC_Transmit_FS>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f4      	beq.n	800140e <main+0x116>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __NOP();
 8001424:	bf00      	nop
	  HAL_ADC_Start(&hadc1);
 8001426:	e77b      	b.n	8001320 <main+0x28>
 8001428:	200003e4 	.word	0x200003e4
 800142c:	20000480 	.word	0x20000480
 8001430:	457ff000 	.word	0x457ff000
 8001434:	454e4000 	.word	0x454e4000
 8001438:	20000484 	.word	0x20000484
 800143c:	4087c000 	.word	0x4087c000
 8001440:	40040000 	.word	0x40040000
 8001444:	40390000 	.word	0x40390000
 8001448:	200001b4 	.word	0x200001b4
 800144c:	200001bc 	.word	0x200001bc
 8001450:	200001b8 	.word	0x200001b8
 8001454:	20000488 	.word	0x20000488

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2230      	movs	r2, #48	; 0x30
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f007 f84c 	bl	8008504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <SystemClock_Config+0xcc>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a27      	ldr	r2, [pc, #156]	; (8001524 <SystemClock_Config+0xcc>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <SystemClock_Config+0xcc>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <SystemClock_Config+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <SystemClock_Config+0xd0>)
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <SystemClock_Config+0xd0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014cc:	2308      	movs	r3, #8
 80014ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80014d0:	2340      	movs	r3, #64	; 0x40
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d4:	2302      	movs	r3, #2
 80014d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014d8:	2304      	movs	r3, #4
 80014da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fe83 	bl	80041ec <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014ec:	f000 f81e 	bl	800152c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f4:	2302      	movs	r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2101      	movs	r1, #1
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f8e6 	bl	80046dc <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001516:	f000 f809 	bl	800152c <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3750      	adds	r7, #80	; 0x50
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_MspInit+0x4c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x4c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f7ff fe68 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <OTG_FS_IRQHandler+0x10>)
 80015e2:	f001 fdd0 	bl	8003186 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20001140 	.word	0x20001140

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f006 ff21 	bl	8008488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fe57 	bl	80012f8 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001658:	08008658 	.word	0x08008658
  ldr r2, =_sbss
 800165c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001660:	20001548 	.word	0x20001548

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 fce9 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff ff4c 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd01 	bl	80020d2 <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 fcc9 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010
 8001704:	20000018 	.word	0x20000018
 8001708:	20000014 	.word	0x20000014

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000049c 	.word	0x2000049c

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000018 	.word	0x20000018

0800176c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e033      	b.n	80017ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fb16 	bl	8000dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017b2:	f023 0302 	bic.w	r3, r3, #2
 80017b6:	f043 0202 	orr.w	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fa86 	bl	8001cd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
 80017da:	e001      	b.n	80017e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_ADC_Start+0x1a>
 800180a:	2302      	movs	r3, #2
 800180c:	e097      	b.n	800193e <HAL_ADC_Start+0x14a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d018      	beq.n	8001856 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001834:	4b45      	ldr	r3, [pc, #276]	; (800194c <HAL_ADC_Start+0x158>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a45      	ldr	r2, [pc, #276]	; (8001950 <HAL_ADC_Start+0x15c>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9a      	lsrs	r2, r3, #18
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001848:	e002      	b.n	8001850 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3b01      	subs	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f9      	bne.n	800184a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d15f      	bne.n	8001924 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800188e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a2:	d106      	bne.n	80018b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f023 0206 	bic.w	r2, r3, #6
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_ADC_Start+0x160>)
 80018c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10f      	bne.n	80018fa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d129      	bne.n	800193c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	e020      	b.n	800193c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_ADC_Start+0x164>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d11b      	bne.n	800193c <HAL_ADC_Start+0x148>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d114      	bne.n	800193c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	e00b      	b.n	800193c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f043 0210 	orr.w	r2, r3, #16
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000010 	.word	0x20000010
 8001950:	431bde83 	.word	0x431bde83
 8001954:	40012300 	.word	0x40012300
 8001958:	40012000 	.word	0x40012000

0800195c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	d113      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	d10b      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f043 0220 	orr.w	r2, r3, #32
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e063      	b.n	8001a6a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019a2:	f7ff feb3 	bl	800170c <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019a8:	e021      	b.n	80019ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d01d      	beq.n	80019ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x6c>
 80019b8:	f7ff fea8 	bl	800170c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d212      	bcs.n	80019ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d00b      	beq.n	80019ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f043 0204 	orr.w	r2, r3, #4
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e03d      	b.n	8001a6a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d1d6      	bne.n	80019aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0212 	mvn.w	r2, #18
 8001a04:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d123      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11f      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d111      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x1c>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e105      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x228>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b09      	cmp	r3, #9
 8001ab6:	d925      	bls.n	8001b04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68d9      	ldr	r1, [r3, #12]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	3b1e      	subs	r3, #30
 8001ace:	2207      	movs	r2, #7
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	400a      	ands	r2, r1
 8001adc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68d9      	ldr	r1, [r3, #12]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4403      	add	r3, r0
 8001af6:	3b1e      	subs	r3, #30
 8001af8:	409a      	lsls	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	e022      	b.n	8001b4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	2207      	movs	r2, #7
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	400a      	ands	r2, r1
 8001b26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6919      	ldr	r1, [r3, #16]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4403      	add	r3, r0
 8001b40:	409a      	lsls	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d824      	bhi.n	8001b9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b05      	subs	r3, #5
 8001b64:	221f      	movs	r2, #31
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	400a      	ands	r2, r1
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b05      	subs	r3, #5
 8001b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9a:	e04c      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d824      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b23      	subs	r3, #35	; 0x23
 8001bb6:	221f      	movs	r2, #31
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b23      	subs	r3, #35	; 0x23
 8001be0:	fa00 f203 	lsl.w	r2, r0, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
 8001bec:	e023      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b41      	subs	r3, #65	; 0x41
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b41      	subs	r3, #65	; 0x41
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_ADC_ConfigChannel+0x234>)
 8001c38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_ADC_ConfigChannel+0x238>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1cc>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_ADC_ConfigChannel+0x238>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d123      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x21e>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d003      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x1e6>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d11b      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d111      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_ADC_ConfigChannel+0x23c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_ADC_ConfigChannel+0x240>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9a      	lsrs	r2, r3, #18
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	20000010 	.word	0x20000010
 8001ccc:	431bde83 	.word	0x431bde83

08001cd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd8:	4b79      	ldr	r3, [pc, #484]	; (8001ec0 <ADC_Init+0x1f0>)
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	021a      	lsls	r2, r3, #8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <ADC_Init+0x1f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d022      	beq.n	8001dae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e00f      	b.n	8001dce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0202 	bic.w	r2, r2, #2
 8001ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6899      	ldr	r1, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e1b      	ldrb	r3, [r3, #24]
 8001de8:	005a      	lsls	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	3b01      	subs	r3, #1
 8001e28:	035a      	lsls	r2, r3, #13
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e007      	b.n	8001e44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	051a      	lsls	r2, r3, #20
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e86:	025a      	lsls	r2, r3, #9
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	029a      	lsls	r2, r3, #10
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	609a      	str	r2, [r3, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	0f000001 	.word	0x0f000001

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff8e 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff29 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff3e 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff8e 	bl	8001fbc <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff31 	bl	8001f2c <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e159      	b.n	80023bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8148 	bne.w	80023b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	2b02      	cmp	r3, #2
 800213c:	d130      	bne.n	80021a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 0201 	and.w	r2, r3, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d017      	beq.n	80021dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a2 	beq.w	80023b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a56      	ldr	r2, [pc, #344]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_GPIO_Init+0x2ec>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a49      	ldr	r2, [pc, #292]	; (80023dc <HAL_GPIO_Init+0x2f0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x202>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a48      	ldr	r2, [pc, #288]	; (80023e0 <HAL_GPIO_Init+0x2f4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x1fe>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a47      	ldr	r2, [pc, #284]	; (80023e4 <HAL_GPIO_Init+0x2f8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x1fa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <HAL_GPIO_Init+0x2fc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a45      	ldr	r2, [pc, #276]	; (80023ec <HAL_GPIO_Init+0x300>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x1f2>
 80022da:	2304      	movs	r3, #4
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022de:	2307      	movs	r3, #7
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x2ec>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002332:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235c:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002386:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b0:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f aea2 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e12b      	b.n	800265e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fd76 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002458:	f002 fae8 	bl	8004a2c <HAL_RCC_GetPCLK1Freq>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a81      	ldr	r2, [pc, #516]	; (8002668 <HAL_I2C_Init+0x274>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d807      	bhi.n	8002478 <HAL_I2C_Init+0x84>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a80      	ldr	r2, [pc, #512]	; (800266c <HAL_I2C_Init+0x278>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e006      	b.n	8002486 <HAL_I2C_Init+0x92>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a7d      	ldr	r2, [pc, #500]	; (8002670 <HAL_I2C_Init+0x27c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0e7      	b.n	800265e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a78      	ldr	r2, [pc, #480]	; (8002674 <HAL_I2C_Init+0x280>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <HAL_I2C_Init+0x274>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d802      	bhi.n	80024c8 <HAL_I2C_Init+0xd4>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	e009      	b.n	80024dc <HAL_I2C_Init+0xe8>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_I2C_Init+0x284>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	3301      	adds	r3, #1
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	495c      	ldr	r1, [pc, #368]	; (8002668 <HAL_I2C_Init+0x274>)
 80024f8:	428b      	cmp	r3, r1
 80024fa:	d819      	bhi.n	8002530 <HAL_I2C_Init+0x13c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e59      	subs	r1, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fbb1 f3f3 	udiv	r3, r1, r3
 800250a:	1c59      	adds	r1, r3, #1
 800250c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002510:	400b      	ands	r3, r1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_I2C_Init+0x138>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e59      	subs	r1, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fbb1 f3f3 	udiv	r3, r1, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	e051      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800252c:	2304      	movs	r3, #4
 800252e:	e04f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d111      	bne.n	800255c <HAL_I2C_Init+0x168>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e58      	subs	r0, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e012      	b.n	8002582 <HAL_I2C_Init+0x18e>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e58      	subs	r0, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	0099      	lsls	r1, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Init+0x196>
 8002586:	2301      	movs	r3, #1
 8002588:	e022      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <HAL_I2C_Init+0x1bc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e58      	subs	r0, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	440b      	add	r3, r1
 80025a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ae:	e00f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	0099      	lsls	r1, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6809      	ldr	r1, [r1, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6911      	ldr	r1, [r2, #16]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	000186a0 	.word	0x000186a0
 800266c:	001e847f 	.word	0x001e847f
 8002670:	003d08ff 	.word	0x003d08ff
 8002674:	431bde83 	.word	0x431bde83
 8002678:	10624dd3 	.word	0x10624dd3

0800267c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	461a      	mov	r2, r3
 8002688:	460b      	mov	r3, r1
 800268a:	817b      	strh	r3, [r7, #10]
 800268c:	4613      	mov	r3, r2
 800268e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff f83c 	bl	800170c <HAL_GetTick>
 8002694:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	f040 80e0 	bne.w	8002864 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2319      	movs	r3, #25
 80026aa:	2201      	movs	r2, #1
 80026ac:	4970      	ldr	r1, [pc, #448]	; (8002870 <HAL_I2C_Master_Transmit+0x1f4>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fa92 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0d3      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_I2C_Master_Transmit+0x50>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0cc      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d007      	beq.n	80026f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002700:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2221      	movs	r2, #33	; 0x21
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2210      	movs	r2, #16
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	893a      	ldrh	r2, [r7, #8]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a50      	ldr	r2, [pc, #320]	; (8002874 <HAL_I2C_Master_Transmit+0x1f8>)
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f9ca 	bl	8002ad4 <I2C_MasterRequestWrite>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e08d      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002760:	e066      	b.n	8002830 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	6a39      	ldr	r1, [r7, #32]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fb0c 	bl	8002d84 <I2C_WaitOnTXEFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00d      	beq.n	800278e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b04      	cmp	r3, #4
 8002778:	d107      	bne.n	800278a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002788:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06b      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d11b      	bne.n	8002804 <HAL_I2C_Master_Transmit+0x188>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d017      	beq.n	8002804 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	6a39      	ldr	r1, [r7, #32]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fafc 	bl	8002e06 <I2C_WaitOnBTFFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b04      	cmp	r3, #4
 800281a:	d107      	bne.n	800282c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e01a      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d194      	bne.n	8002762 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	00100002 	.word	0x00100002
 8002874:	ffff0000 	.word	0xffff0000

08002878 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	460b      	mov	r3, r1
 8002886:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7fe ff40 	bl	800170c <HAL_GetTick>
 800288c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	f040 8111 	bne.w	8002ac2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2319      	movs	r3, #25
 80028a6:	2201      	movs	r2, #1
 80028a8:	4988      	ldr	r1, [pc, #544]	; (8002acc <HAL_I2C_IsDeviceReady+0x254>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f994 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	e104      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_I2C_IsDeviceReady+0x50>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0fd      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d007      	beq.n	80028ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2224      	movs	r2, #36	; 0x24
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a70      	ldr	r2, [pc, #448]	; (8002ad0 <HAL_I2C_IsDeviceReady+0x258>)
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002920:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2200      	movs	r2, #0
 800292a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f952 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002948:	d103      	bne.n	8002952 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0b6      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002964:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fed1 	bl	800170c <HAL_GetTick>
 800296a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800299a:	e025      	b.n	80029e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800299c:	f7fe feb6 	bl	800170c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d302      	bcc.n	80029b2 <HAL_I2C_IsDeviceReady+0x13a>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	22a0      	movs	r2, #160	; 0xa0
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2ba0      	cmp	r3, #160	; 0xa0
 80029f2:	d005      	beq.n	8002a00 <HAL_I2C_IsDeviceReady+0x188>
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_I2C_IsDeviceReady+0x188>
 80029fa:	7dbb      	ldrb	r3, [r7, #22]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0cd      	beq.n	800299c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d129      	bne.n	8002a6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	4921      	ldr	r1, [pc, #132]	; (8002acc <HAL_I2C_IsDeviceReady+0x254>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f8c6 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e036      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e02c      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2319      	movs	r3, #25
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	490f      	ldr	r1, [pc, #60]	; (8002acc <HAL_I2C_IsDeviceReady+0x254>)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f8a2 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e012      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f4ff af32 	bcc.w	8002912 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d006      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d003      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e00b      	b.n	8002b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	2b12      	cmp	r3, #18
 8002b16:	d107      	bne.n	8002b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f84f 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d103      	bne.n	8002b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e035      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b64:	d108      	bne.n	8002b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e01b      	b.n	8002bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b78:	897b      	ldrh	r3, [r7, #10]
 8002b7a:	11db      	asrs	r3, r3, #7
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0306 	and.w	r3, r3, #6
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f063 030f 	orn	r3, r3, #15
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <I2C_MasterRequestWrite+0xfc>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f875 	bl	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e010      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <I2C_MasterRequestWrite+0x100>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f865 	bl	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	00010008 	.word	0x00010008
 8002bd4:	00010002 	.word	0x00010002

08002bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	e025      	b.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d021      	beq.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7fe fd8b 	bl	800170c <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d116      	bne.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e023      	b.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10d      	bne.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	e00c      	b.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d0b6      	beq.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c94:	e051      	b.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d123      	bne.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e046      	b.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d021      	beq.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fe fd09 	bl	800170c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e020      	b.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10c      	bne.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e00b      	b.n	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d18d      	bne.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d90:	e02d      	b.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f878 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e02d      	b.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d021      	beq.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7fe fcaf 	bl	800170c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e007      	b.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d1ca      	bne.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e12:	e02d      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f837 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02d      	b.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d021      	beq.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe fc6e 	bl	800170c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e007      	b.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d1ca      	bne.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d11b      	bne.n	8002ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee8:	b08f      	sub	sp, #60	; 0x3c
 8002eea:	af0a      	add	r7, sp, #40	; 0x28
 8002eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e10f      	b.n	8003118 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f004 ffae 	bl	8007e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 fea1 	bl	8004c7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	687e      	ldr	r6, [r7, #4]
 8002f44:	466d      	mov	r5, sp
 8002f46:	f106 0410 	add.w	r4, r6, #16
 8002f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5a:	1d33      	adds	r3, r6, #4
 8002f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f001 fd78 	bl	8004a54 <USB_CoreInit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0d0      	b.n	8003118 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 fe8f 	bl	8004ca0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e04a      	b.n	800301e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	333d      	adds	r3, #61	; 0x3d
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	333c      	adds	r3, #60	; 0x3c
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	b298      	uxth	r0, r3
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3342      	adds	r3, #66	; 0x42
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	333f      	adds	r3, #63	; 0x3f
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3344      	adds	r3, #68	; 0x44
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3348      	adds	r3, #72	; 0x48
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3350      	adds	r3, #80	; 0x50
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3af      	bcc.n	8002f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e044      	b.n	80030b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	3301      	adds	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3b5      	bcc.n	800302e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	687e      	ldr	r6, [r7, #4]
 80030ca:	466d      	mov	r5, sp
 80030cc:	f106 0410 	add.w	r4, r6, #16
 80030d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e0:	1d33      	adds	r3, r6, #4
 80030e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	f001 fe27 	bl	8004d38 <USB_DevInit>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00d      	b.n	8003118 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f002 fea3 	bl	8005e5c <USB_DevDisconnect>

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003120 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_PCD_Start+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e020      	b.n	800317e <HAL_PCD_Start+0x5e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	2b01      	cmp	r3, #1
 800314a:	d109      	bne.n	8003160 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003150:	2b01      	cmp	r3, #1
 8003152:	d005      	beq.n	8003160 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f001 fd79 	bl	8004c5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f002 fe53 	bl	8005e1a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003186:	b590      	push	{r4, r7, lr}
 8003188:	b08d      	sub	sp, #52	; 0x34
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f002 ff11 	bl	8005fc4 <USB_GetMode>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 839d 	bne.w	80038e4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 fe75 	bl	8005e9e <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8393 	beq.w	80038e2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 fe6c 	bl	8005e9e <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d107      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f002 0202 	and.w	r2, r2, #2
 80031de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 fe5a 	bl	8005e9e <USB_ReadInterrupts>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d161      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0210 	bic.w	r2, r2, #16
 8003202:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	0c5b      	lsrs	r3, r3, #17
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	2b02      	cmp	r3, #2
 800322e:	d124      	bne.n	800327a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d035      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	6a38      	ldr	r0, [r7, #32]
 8003250:	f002 fc91 	bl	8005b76 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003260:	441a      	add	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003272:	441a      	add	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	e016      	b.n	80032a8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	0c5b      	lsrs	r3, r3, #17
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	2b06      	cmp	r3, #6
 8003284:	d110      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800328c:	2208      	movs	r2, #8
 800328e:	4619      	mov	r1, r3
 8003290:	6a38      	ldr	r0, [r7, #32]
 8003292:	f002 fc70 	bl	8005b76 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a2:	441a      	add	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0210 	orr.w	r2, r2, #16
 80032b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f002 fdee 	bl	8005e9e <USB_ReadInterrupts>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032cc:	d16e      	bne.n	80033ac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fdf4 	bl	8005ec4 <USB_ReadDevAllOutEpInterrupt>
 80032dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032de:	e062      	b.n	80033a6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d057      	beq.n	800339a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f002 fe19 	bl	8005f2c <USB_ReadDevOutEPInterrupt>
 80032fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	461a      	mov	r2, r3
 8003314:	2301      	movs	r3, #1
 8003316:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fdb0 	bl	8003e80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	2308      	movs	r3, #8
 800333a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800333c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 feaa 	bl	8004098 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335a:	461a      	mov	r2, r3
 800335c:	2310      	movs	r3, #16
 800335e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	2320      	movs	r3, #32
 800337a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	461a      	mov	r2, r3
 8003394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003398:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	3301      	adds	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d199      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 fd74 	bl	8005e9e <USB_ReadInterrupts>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033c0:	f040 80c0 	bne.w	8003544 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f002 fd95 	bl	8005ef8 <USB_ReadDevAllInEpInterrupt>
 80033ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033d4:	e0b2      	b.n	800353c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a7 	beq.w	8003530 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f002 fdbb 	bl	8005f68 <USB_ReadDevInEPInterrupt>
 80033f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d057      	beq.n	80034ae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	2201      	movs	r2, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	69f9      	ldr	r1, [r7, #28]
 800341a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800341e:	4013      	ands	r3, r2
 8003420:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342e:	461a      	mov	r2, r3
 8003430:	2301      	movs	r3, #1
 8003432:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d132      	bne.n	80034a2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3348      	adds	r3, #72	; 0x48
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4403      	add	r3, r0
 800345c:	3344      	adds	r3, #68	; 0x44
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4419      	add	r1, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4403      	add	r3, r0
 8003470:	3348      	adds	r3, #72	; 0x48
 8003472:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d113      	bne.n	80034a2 <HAL_PCD_IRQHandler+0x31c>
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3350      	adds	r3, #80	; 0x50
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d108      	bne.n	80034a2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800349a:	461a      	mov	r2, r3
 800349c:	2101      	movs	r1, #1
 800349e:	f002 fdc3 	bl	8006028 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f004 fd64 	bl	8007f76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	461a      	mov	r2, r3
 80034c6:	2308      	movs	r3, #8
 80034c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	461a      	mov	r2, r3
 80034e2:	2310      	movs	r3, #16
 80034e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	461a      	mov	r2, r3
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	461a      	mov	r2, r3
 800351a:	2302      	movs	r3, #2
 800351c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fc1b 	bl	8003d66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	3301      	adds	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	2b00      	cmp	r3, #0
 8003540:	f47f af49 	bne.w	80033d6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fca8 	bl	8005e9e <USB_ReadInterrupts>
 800354e:	4603      	mov	r3, r0
 8003550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003558:	d122      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003580:	2100      	movs	r1, #0
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fe26 	bl	80041d4 <HAL_PCDEx_LPM_Callback>
 8003588:	e002      	b.n	8003590 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f004 fd60 	bl	8008050 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800359e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 fc7a 	bl	8005e9e <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b4:	d112      	bne.n	80035dc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d102      	bne.n	80035cc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f004 fd1c 	bl	8008004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035da:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fc5c 	bl	8005e9e <USB_ReadInterrupts>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	f040 80c7 	bne.w	8003782 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2110      	movs	r1, #16
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fcf6 	bl	8005000 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003618:	e056      	b.n	80036c8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003626:	461a      	mov	r2, r3
 8003628:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800362c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	440a      	add	r2, r1
 8003644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003648:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800364c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800365e:	0151      	lsls	r1, r2, #5
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	440a      	add	r2, r1
 8003664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800366c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367a:	461a      	mov	r2, r3
 800367c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003680:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	0151      	lsls	r1, r2, #5
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	440a      	add	r2, r1
 8003698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800369c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	3301      	adds	r3, #1
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d3a3      	bcc.n	800361a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fe:	f043 030b 	orr.w	r3, r3, #11
 8003702:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003714:	f043 030b 	orr.w	r3, r3, #11
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	e015      	b.n	8003748 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800372e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003732:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003742:	f043 030b 	orr.w	r3, r3, #11
 8003746:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003756:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800375a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800376c:	461a      	mov	r2, r3
 800376e:	f002 fc5b 	bl	8006028 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f002 fb89 	bl	8005e9e <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d124      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fc1f 	bl	8005fe0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fc87 	bl	80050ba <USB_GetDevSpeed>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681c      	ldr	r4, [r3, #0]
 80037b8:	f001 f92c 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 80037bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	4620      	mov	r0, r4
 80037c8:	f001 f9a6 	bl	8004b18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f004 fbfa 	bl	8007fc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 fb59 	bl	8005e9e <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d10a      	bne.n	800380c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f004 fbd7 	bl	8007faa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f002 0208 	and.w	r2, r2, #8
 800380a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f002 fb44 	bl	8005e9e <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003820:	d10f      	bne.n	8003842 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	b2db      	uxtb	r3, r3
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f004 fc2f 	bl	8008090 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f002 fb29 	bl	8005e9e <USB_ReadInterrupts>
 800384c:	4603      	mov	r3, r0
 800384e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003856:	d10f      	bne.n	8003878 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f004 fc02 	bl	800806c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f002 fb0e 	bl	8005e9e <USB_ReadInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d10a      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f004 fc10 	bl	80080b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 faf8 	bl	8005e9e <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d115      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f004 fc00 	bl	80080d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	e000      	b.n	80038e4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80038e2:	bf00      	nop
    }
  }
}
 80038e4:	3734      	adds	r7, #52	; 0x34
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}

080038ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_PCD_SetAddress+0x1a>
 8003900:	2302      	movs	r3, #2
 8003902:	e013      	b.n	800392c <HAL_PCD_SetAddress+0x42>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fa56 	bl	8005dce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	461a      	mov	r2, r3
 8003942:	4603      	mov	r3, r0
 8003944:	70fb      	strb	r3, [r7, #3]
 8003946:	460b      	mov	r3, r1
 8003948:	803b      	strh	r3, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003956:	2b00      	cmp	r3, #0
 8003958:	da0f      	bge.n	800397a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	3338      	adds	r3, #56	; 0x38
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	3304      	adds	r3, #4
 8003970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	705a      	strb	r2, [r3, #1]
 8003978:	e00f      	b.n	800399a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	3304      	adds	r3, #4
 8003992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039a6:	883a      	ldrh	r2, [r7, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	78ba      	ldrb	r2, [r7, #2]
 80039b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039c4:	78bb      	ldrb	r3, [r7, #2]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d102      	bne.n	80039d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_PCD_EP_Open+0xaa>
 80039da:	2302      	movs	r3, #2
 80039dc:	e00e      	b.n	80039fc <HAL_PCD_EP_Open+0xc8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 fb89 	bl	8005104 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039fa:	7afb      	ldrb	r3, [r7, #11]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da0f      	bge.n	8003a38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	3338      	adds	r3, #56	; 0x38
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	705a      	strb	r2, [r3, #1]
 8003a36:	e00f      	b.n	8003a58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 020f 	and.w	r2, r3, #15
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_PCD_EP_Close+0x6e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e00e      	b.n	8003a90 <HAL_PCD_EP_Close+0x8c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fbc7 	bl	8005214 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	7afb      	ldrb	r3, [r7, #11]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d102      	bne.n	8003af4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003af4:	7afb      	ldrb	r3, [r7, #11]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6979      	ldr	r1, [r7, #20]
 8003b0c:	f001 fea2 	bl	8005854 <USB_EP0StartXfer>
 8003b10:	e008      	b.n	8003b24 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6979      	ldr	r1, [r7, #20]
 8003b20:	f001 fc54 	bl	80053cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b50:	681b      	ldr	r3, [r3, #0]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6e:	7afb      	ldrb	r3, [r7, #11]
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	3338      	adds	r3, #56	; 0x38
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6979      	ldr	r1, [r7, #20]
 8003bd0:	f001 fe40 	bl	8005854 <USB_EP0StartXfer>
 8003bd4:	e008      	b.n	8003be8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	f001 fbf2 	bl	80053cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 020f 	and.w	r2, r3, #15
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d901      	bls.n	8003c10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e050      	b.n	8003cb2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	da0f      	bge.n	8003c38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 020f 	and.w	r2, r3, #15
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	3338      	adds	r3, #56	; 0x38
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	705a      	strb	r2, [r3, #1]
 8003c36:	e00d      	b.n	8003c54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_PCD_EP_SetStall+0x82>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e01e      	b.n	8003cb2 <HAL_PCD_EP_SetStall+0xc0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 ffcf 	bl	8005c26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	b2d9      	uxtb	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f002 f9c0 	bl	8006028 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	f003 020f 	and.w	r2, r3, #15
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d901      	bls.n	8003cd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e042      	b.n	8003d5e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da0f      	bge.n	8003d00 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	3338      	adds	r3, #56	; 0x38
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	705a      	strb	r2, [r3, #1]
 8003cfe:	e00f      	b.n	8003d20 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_PCD_EP_ClrStall+0x86>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e00e      	b.n	8003d5e <HAL_PCD_EP_ClrStall+0xa4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68f9      	ldr	r1, [r7, #12]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 ffd7 	bl	8005d02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b08a      	sub	sp, #40	; 0x28
 8003d6a:	af02      	add	r7, sp, #8
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3338      	adds	r3, #56	; 0x38
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d901      	bls.n	8003d9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e06c      	b.n	8003e78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d902      	bls.n	8003dba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3303      	adds	r3, #3
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dc2:	e02b      	b.n	8003e1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d902      	bls.n	8003de0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3303      	adds	r3, #3
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68d9      	ldr	r1, [r3, #12]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f001 fe7b 	bl	8005afa <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	441a      	add	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d809      	bhi.n	8003e46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d203      	bcs.n	8003e46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1be      	bne.n	8003dc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d811      	bhi.n	8003e76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	2201      	movs	r2, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	6939      	ldr	r1, [r7, #16]
 8003e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e72:	4013      	ands	r3, r2
 8003e74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	333c      	adds	r3, #60	; 0x3c
 8003e98:	3304      	adds	r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	f040 80a0 	bne.w	8003ff8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d015      	beq.n	8003eee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a72      	ldr	r2, [pc, #456]	; (8004090 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	f240 80dd 	bls.w	8004086 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80d7 	beq.w	8004086 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eea:	6093      	str	r3, [r2, #8]
 8003eec:	e0cb      	b.n	8004086 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	461a      	mov	r2, r3
 8003f06:	2320      	movs	r3, #32
 8003f08:	6093      	str	r3, [r2, #8]
 8003f0a:	e0bc      	b.n	8004086 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 80b7 	bne.w	8004086 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d90f      	bls.n	8003f40 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f36:	461a      	mov	r2, r3
 8003f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3c:	6093      	str	r3, [r2, #8]
 8003f3e:	e0a2      	b.n	8004086 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f52:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	0159      	lsls	r1, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f66:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4403      	add	r3, r0
 8003f76:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f7a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4403      	add	r3, r0
 8003f9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4419      	add	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4403      	add	r3, r0
 8003fb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fb8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d114      	bne.n	8003fea <PCD_EP_OutXfrComplete_int+0x16a>
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d108      	bne.n	8003fea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	f002 f81f 	bl	8006028 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f003 ffa5 	bl	8007f40 <HAL_PCD_DataOutStageCallback>
 8003ff6:	e046      	b.n	8004086 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <PCD_EP_OutXfrComplete_int+0x214>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d124      	bne.n	800404a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	461a      	mov	r2, r3
 8004018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401c:	6093      	str	r3, [r2, #8]
 800401e:	e032      	b.n	8004086 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004036:	461a      	mov	r2, r3
 8004038:	2320      	movs	r3, #32
 800403a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f003 ff7c 	bl	8007f40 <HAL_PCD_DataOutStageCallback>
 8004048:	e01d      	b.n	8004086 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d114      	bne.n	800407a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004072:	461a      	mov	r2, r3
 8004074:	2100      	movs	r1, #0
 8004076:	f001 ffd7 	bl	8006028 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4619      	mov	r1, r3
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f003 ff5d 	bl	8007f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	4f54300a 	.word	0x4f54300a
 8004094:	4f54310a 	.word	0x4f54310a

08004098 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	333c      	adds	r3, #60	; 0x3c
 80040b0:	3304      	adds	r3, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a15      	ldr	r2, [pc, #84]	; (8004120 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d90e      	bls.n	80040ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f003 ff15 	bl	8007f1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <PCD_EP_OutSetupPacket_int+0x88>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d90c      	bls.n	8004114 <PCD_EP_OutSetupPacket_int+0x7c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d108      	bne.n	8004114 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800410c:	461a      	mov	r2, r3
 800410e:	2101      	movs	r1, #1
 8004110:	f001 ff8a 	bl	8006028 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	4f54300a 	.word	0x4f54300a

08004124 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
 8004130:	4613      	mov	r3, r2
 8004132:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004142:	883b      	ldrh	r3, [r7, #0]
 8004144:	0419      	lsls	r1, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	430a      	orrs	r2, r1
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
 8004150:	e028      	b.n	80041a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4413      	add	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	e00d      	b.n	8004182 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	3340      	adds	r3, #64	; 0x40
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4413      	add	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	3301      	adds	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	3b01      	subs	r3, #1
 8004188:	429a      	cmp	r2, r3
 800418a:	d3ec      	bcc.n	8004166 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800418c:	883b      	ldrh	r3, [r7, #0]
 800418e:	0418      	lsls	r0, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	3b01      	subs	r3, #1
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4302      	orrs	r2, r0
 800419c:	3340      	adds	r3, #64	; 0x40
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e264      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d075      	beq.n	80042f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	4ba3      	ldr	r3, [pc, #652]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b04      	cmp	r3, #4
 8004214:	d00c      	beq.n	8004230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004216:	4ba0      	ldr	r3, [pc, #640]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421e:	2b08      	cmp	r3, #8
 8004220:	d112      	bne.n	8004248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004222:	4b9d      	ldr	r3, [pc, #628]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422e:	d10b      	bne.n	8004248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	4b99      	ldr	r3, [pc, #612]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d05b      	beq.n	80042f4 <HAL_RCC_OscConfig+0x108>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d157      	bne.n	80042f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e23f      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d106      	bne.n	8004260 <HAL_RCC_OscConfig+0x74>
 8004252:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a90      	ldr	r2, [pc, #576]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e01d      	b.n	800429c <HAL_RCC_OscConfig+0xb0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x98>
 800426a:	4b8b      	ldr	r3, [pc, #556]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a8a      	ldr	r2, [pc, #552]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b88      	ldr	r3, [pc, #544]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a87      	ldr	r2, [pc, #540]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0xb0>
 8004284:	4b84      	ldr	r3, [pc, #528]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a83      	ldr	r2, [pc, #524]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b81      	ldr	r3, [pc, #516]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a80      	ldr	r2, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d013      	beq.n	80042cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fd fa32 	bl	800170c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd fa2e 	bl	800170c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e204      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0xc0>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fd fa1e 	bl	800170c <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd fa1a 	bl	800170c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1f0      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	4b6c      	ldr	r3, [pc, #432]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0xe8>
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d063      	beq.n	80043ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	4b65      	ldr	r3, [pc, #404]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b62      	ldr	r3, [pc, #392]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004316:	2b08      	cmp	r3, #8
 8004318:	d11c      	bne.n	8004354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431a:	4b5f      	ldr	r3, [pc, #380]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d116      	bne.n	8004354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	4b5c      	ldr	r3, [pc, #368]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x152>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e1c4      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4b56      	ldr	r3, [pc, #344]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4952      	ldr	r1, [pc, #328]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	e03a      	b.n	80043ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435c:	4b4f      	ldr	r3, [pc, #316]	; (800449c <HAL_RCC_OscConfig+0x2b0>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fd f9d3 	bl	800170c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436a:	f7fd f9cf 	bl	800170c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e1a5      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	4b46      	ldr	r3, [pc, #280]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4940      	ldr	r1, [pc, #256]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439e:	4b3f      	ldr	r3, [pc, #252]	; (800449c <HAL_RCC_OscConfig+0x2b0>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd f9b2 	bl	800170c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fd f9ae 	bl	800170c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e184      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d030      	beq.n	8004438 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043de:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <HAL_RCC_OscConfig+0x2b4>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fd f992 	bl	800170c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ec:	f7fd f98e 	bl	800170c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e164      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	4b26      	ldr	r3, [pc, #152]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x200>
 800440a:	e015      	b.n	8004438 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440c:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCC_OscConfig+0x2b4>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fd f97b 	bl	800170c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441a:	f7fd f977 	bl	800170c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e14d      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80a0 	beq.w	8004586 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	; 0x40
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_OscConfig+0x2b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d121      	bne.n	80044c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_RCC_OscConfig+0x2b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <HAL_RCC_OscConfig+0x2b8>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fd f93d 	bl	800170c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e011      	b.n	80044ba <HAL_RCC_OscConfig+0x2ce>
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	42470000 	.word	0x42470000
 80044a0:	42470e80 	.word	0x42470e80
 80044a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fd f930 	bl	800170c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e106      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b85      	ldr	r3, [pc, #532]	; (80046d0 <HAL_RCC_OscConfig+0x4e4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d106      	bne.n	80044dc <HAL_RCC_OscConfig+0x2f0>
 80044ce:	4b81      	ldr	r3, [pc, #516]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a80      	ldr	r2, [pc, #512]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70
 80044da:	e01c      	b.n	8004516 <HAL_RCC_OscConfig+0x32a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d10c      	bne.n	80044fe <HAL_RCC_OscConfig+0x312>
 80044e4:	4b7b      	ldr	r3, [pc, #492]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a7a      	ldr	r2, [pc, #488]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80044ea:	f043 0304 	orr.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
 80044f0:	4b78      	ldr	r3, [pc, #480]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	4a77      	ldr	r2, [pc, #476]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6713      	str	r3, [r2, #112]	; 0x70
 80044fc:	e00b      	b.n	8004516 <HAL_RCC_OscConfig+0x32a>
 80044fe:	4b75      	ldr	r3, [pc, #468]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a74      	ldr	r2, [pc, #464]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	4b72      	ldr	r3, [pc, #456]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a71      	ldr	r2, [pc, #452]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d015      	beq.n	800454a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fd f8f5 	bl	800170c <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd f8f1 	bl	800170c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0c5      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ee      	beq.n	8004526 <HAL_RCC_OscConfig+0x33a>
 8004548:	e014      	b.n	8004574 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454a:	f7fd f8df 	bl	800170c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fd f8db 	bl	800170c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0af      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004568:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ee      	bne.n	8004552 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a55      	ldr	r2, [pc, #340]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 809b 	beq.w	80046c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004590:	4b50      	ldr	r3, [pc, #320]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d05c      	beq.n	8004656 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d141      	bne.n	8004628 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <HAL_RCC_OscConfig+0x4ec>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fd f8af 	bl	800170c <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fd f8ab 	bl	800170c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e081      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c4:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	019b      	lsls	r3, r3, #6
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	3b01      	subs	r3, #1
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	061b      	lsls	r3, r3, #24
 80045f4:	4937      	ldr	r1, [pc, #220]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <HAL_RCC_OscConfig+0x4ec>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fd f884 	bl	800170c <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd f880 	bl	800170c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e056      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x41c>
 8004626:	e04e      	b.n	80046c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCC_OscConfig+0x4ec>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fd f86d 	bl	800170c <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fd f869 	bl	800170c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e03f      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x44a>
 8004654:	e037      	b.n	80046c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e032      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004662:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <HAL_RCC_OscConfig+0x4e8>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d028      	beq.n	80046c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d121      	bne.n	80046c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d11a      	bne.n	80046c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004692:	4013      	ands	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004698:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800469a:	4293      	cmp	r3, r2
 800469c:	d111      	bne.n	80046c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40007000 	.word	0x40007000
 80046d4:	40023800 	.word	0x40023800
 80046d8:	42470060 	.word	0x42470060

080046dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0cc      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b68      	ldr	r3, [pc, #416]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d90c      	bls.n	8004718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b8      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a58      	ldr	r2, [pc, #352]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004748:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a52      	ldr	r2, [pc, #328]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	494d      	ldr	r1, [pc, #308]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d044      	beq.n	80047fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d119      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d003      	beq.n	800479a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004796:	2b03      	cmp	r3, #3
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e06f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e067      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4934      	ldr	r1, [pc, #208]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047cc:	f7fc ff9e 	bl	800170c <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fc ff9a 	bl	800170c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e04f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d20c      	bcs.n	8004824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e032      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4916      	ldr	r1, [pc, #88]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	490e      	ldr	r1, [pc, #56]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004862:	f000 f821 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004866:	4602      	mov	r2, r0
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	490a      	ldr	r1, [pc, #40]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	5ccb      	ldrb	r3, [r1, r3]
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc ff12 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00
 8004898:	40023800 	.word	0x40023800
 800489c:	08008608 	.word	0x08008608
 80048a0:	20000010 	.word	0x20000010
 80048a4:	20000014 	.word	0x20000014

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b5b0      	push	{r4, r5, r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048ae:	2100      	movs	r1, #0
 80048b0:	6079      	str	r1, [r7, #4]
 80048b2:	2100      	movs	r1, #0
 80048b4:	60f9      	str	r1, [r7, #12]
 80048b6:	2100      	movs	r1, #0
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048ba:	2100      	movs	r1, #0
 80048bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048be:	4952      	ldr	r1, [pc, #328]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80048c0:	6889      	ldr	r1, [r1, #8]
 80048c2:	f001 010c 	and.w	r1, r1, #12
 80048c6:	2908      	cmp	r1, #8
 80048c8:	d00d      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80048ca:	2908      	cmp	r1, #8
 80048cc:	f200 8094 	bhi.w	80049f8 <HAL_RCC_GetSysClockFreq+0x150>
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d002      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x32>
 80048d4:	2904      	cmp	r1, #4
 80048d6:	d003      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x38>
 80048d8:	e08e      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048da:	4b4c      	ldr	r3, [pc, #304]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x164>)
 80048dc:	60bb      	str	r3, [r7, #8]
       break;
 80048de:	e08e      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e0:	4b4b      	ldr	r3, [pc, #300]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x168>)
 80048e2:	60bb      	str	r3, [r7, #8]
      break;
 80048e4:	e08b      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e6:	4948      	ldr	r1, [pc, #288]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80048e8:	6849      	ldr	r1, [r1, #4]
 80048ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f0:	4945      	ldr	r1, [pc, #276]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80048f2:	6849      	ldr	r1, [r1, #4]
 80048f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d024      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fc:	4942      	ldr	r1, [pc, #264]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80048fe:	6849      	ldr	r1, [r1, #4]
 8004900:	0989      	lsrs	r1, r1, #6
 8004902:	4608      	mov	r0, r1
 8004904:	f04f 0100 	mov.w	r1, #0
 8004908:	f240 14ff 	movw	r4, #511	; 0x1ff
 800490c:	f04f 0500 	mov.w	r5, #0
 8004910:	ea00 0204 	and.w	r2, r0, r4
 8004914:	ea01 0305 	and.w	r3, r1, r5
 8004918:	493d      	ldr	r1, [pc, #244]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x168>)
 800491a:	fb01 f003 	mul.w	r0, r1, r3
 800491e:	2100      	movs	r1, #0
 8004920:	fb01 f102 	mul.w	r1, r1, r2
 8004924:	1844      	adds	r4, r0, r1
 8004926:	493a      	ldr	r1, [pc, #232]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x168>)
 8004928:	fba2 0101 	umull	r0, r1, r2, r1
 800492c:	1863      	adds	r3, r4, r1
 800492e:	4619      	mov	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	461a      	mov	r2, r3
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	f7fc f872 	bl	8000a20 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4613      	mov	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e04a      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004946:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	461a      	mov	r2, r3
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	ea02 0400 	and.w	r4, r2, r0
 800495e:	ea03 0501 	and.w	r5, r3, r1
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	014b      	lsls	r3, r1, #5
 8004970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004974:	0142      	lsls	r2, r0, #5
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	1b00      	subs	r0, r0, r4
 800497c:	eb61 0105 	sbc.w	r1, r1, r5
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	018b      	lsls	r3, r1, #6
 800498a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800498e:	0182      	lsls	r2, r0, #6
 8004990:	1a12      	subs	r2, r2, r0
 8004992:	eb63 0301 	sbc.w	r3, r3, r1
 8004996:	f04f 0000 	mov.w	r0, #0
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	00d9      	lsls	r1, r3, #3
 80049a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a4:	00d0      	lsls	r0, r2, #3
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	1912      	adds	r2, r2, r4
 80049ac:	eb45 0303 	adc.w	r3, r5, r3
 80049b0:	f04f 0000 	mov.w	r0, #0
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	0299      	lsls	r1, r3, #10
 80049ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049be:	0290      	lsls	r0, r2, #10
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	f7fc f826 	bl	8000a20 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4613      	mov	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	3301      	adds	r3, #1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	60bb      	str	r3, [r7, #8]
      break;
 80049f6:	e002      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x164>)
 80049fa:	60bb      	str	r3, [r7, #8]
      break;
 80049fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fe:	68bb      	ldr	r3, [r7, #8]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bdb0      	pop	{r4, r5, r7, pc}
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	00f42400 	.word	0x00f42400
 8004a10:	017d7840 	.word	0x017d7840

08004a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000010 	.word	0x20000010

08004a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a30:	f7ff fff0 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0a9b      	lsrs	r3, r3, #10
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	08008618 	.word	0x08008618

08004a54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a54:	b084      	sub	sp, #16
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	f107 001c 	add.w	r0, r7, #28
 8004a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d122      	bne.n	8004ab2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 fb1c 	bl	80060e4 <USB_CoreReset>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	e01a      	b.n	8004ae8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 fb10 	bl	80060e4 <USB_CoreReset>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8004ada:	e005      	b.n	8004ae8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10b      	bne.n	8004b06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f043 0206 	orr.w	r2, r3, #6
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b12:	b004      	add	sp, #16
 8004b14:	4770      	bx	lr
	...

08004b18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d165      	bne.n	8004bf8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a41      	ldr	r2, [pc, #260]	; (8004c34 <USB_SetTurnaroundTime+0x11c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d906      	bls.n	8004b42 <USB_SetTurnaroundTime+0x2a>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4a40      	ldr	r2, [pc, #256]	; (8004c38 <USB_SetTurnaroundTime+0x120>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d202      	bcs.n	8004b42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e062      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a3c      	ldr	r2, [pc, #240]	; (8004c38 <USB_SetTurnaroundTime+0x120>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d306      	bcc.n	8004b58 <USB_SetTurnaroundTime+0x40>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	; (8004c3c <USB_SetTurnaroundTime+0x124>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d202      	bcs.n	8004b58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b52:	230e      	movs	r3, #14
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e057      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4a38      	ldr	r2, [pc, #224]	; (8004c3c <USB_SetTurnaroundTime+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d306      	bcc.n	8004b6e <USB_SetTurnaroundTime+0x56>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4a37      	ldr	r2, [pc, #220]	; (8004c40 <USB_SetTurnaroundTime+0x128>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d202      	bcs.n	8004b6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b68:	230d      	movs	r3, #13
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e04c      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a33      	ldr	r2, [pc, #204]	; (8004c40 <USB_SetTurnaroundTime+0x128>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d306      	bcc.n	8004b84 <USB_SetTurnaroundTime+0x6c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a32      	ldr	r2, [pc, #200]	; (8004c44 <USB_SetTurnaroundTime+0x12c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d802      	bhi.n	8004b84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b7e:	230c      	movs	r3, #12
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e041      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <USB_SetTurnaroundTime+0x12c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d906      	bls.n	8004b9a <USB_SetTurnaroundTime+0x82>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4a2e      	ldr	r2, [pc, #184]	; (8004c48 <USB_SetTurnaroundTime+0x130>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d802      	bhi.n	8004b9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b94:	230b      	movs	r3, #11
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e036      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <USB_SetTurnaroundTime+0x130>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d906      	bls.n	8004bb0 <USB_SetTurnaroundTime+0x98>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <USB_SetTurnaroundTime+0x134>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d802      	bhi.n	8004bb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004baa:	230a      	movs	r3, #10
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e02b      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <USB_SetTurnaroundTime+0x134>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d906      	bls.n	8004bc6 <USB_SetTurnaroundTime+0xae>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <USB_SetTurnaroundTime+0x138>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d202      	bcs.n	8004bc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bc0:	2309      	movs	r3, #9
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e020      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <USB_SetTurnaroundTime+0x138>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d306      	bcc.n	8004bdc <USB_SetTurnaroundTime+0xc4>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <USB_SetTurnaroundTime+0x13c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d802      	bhi.n	8004bdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e015      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <USB_SetTurnaroundTime+0x13c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d906      	bls.n	8004bf2 <USB_SetTurnaroundTime+0xda>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <USB_SetTurnaroundTime+0x140>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d202      	bcs.n	8004bf2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bec:	2307      	movs	r3, #7
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e00a      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bf2:	2306      	movs	r3, #6
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e007      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bfe:	2309      	movs	r3, #9
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e001      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c04:	2309      	movs	r3, #9
 8004c06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	00d8acbf 	.word	0x00d8acbf
 8004c38:	00e4e1c0 	.word	0x00e4e1c0
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	01067380 	.word	0x01067380
 8004c44:	011a499f 	.word	0x011a499f
 8004c48:	01312cff 	.word	0x01312cff
 8004c4c:	014ca43f 	.word	0x014ca43f
 8004c50:	016e3600 	.word	0x016e3600
 8004c54:	01a6ab1f 	.word	0x01a6ab1f
 8004c58:	01e84800 	.word	0x01e84800

08004c5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0201 	bic.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d115      	bne.n	8004cee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cce:	2001      	movs	r0, #1
 8004cd0:	f7fc fd28 	bl	8001724 <HAL_Delay>
      ms++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f001 f972 	bl	8005fc4 <USB_GetMode>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d01e      	beq.n	8004d24 <USB_SetCurrentMode+0x84>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b31      	cmp	r3, #49	; 0x31
 8004cea:	d9f0      	bls.n	8004cce <USB_SetCurrentMode+0x2e>
 8004cec:	e01a      	b.n	8004d24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d115      	bne.n	8004d20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d00:	2001      	movs	r0, #1
 8004d02:	f7fc fd0f 	bl	8001724 <HAL_Delay>
      ms++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f001 f959 	bl	8005fc4 <USB_GetMode>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <USB_SetCurrentMode+0x84>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b31      	cmp	r3, #49	; 0x31
 8004d1c:	d9f0      	bls.n	8004d00 <USB_SetCurrentMode+0x60>
 8004d1e:	e001      	b.n	8004d24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e005      	b.n	8004d30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b32      	cmp	r3, #50	; 0x32
 8004d28:	d101      	bne.n	8004d2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d38:	b084      	sub	sp, #16
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e009      	b.n	8004d6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3340      	adds	r3, #64	; 0x40
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b0e      	cmp	r3, #14
 8004d70:	d9f2      	bls.n	8004d58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11c      	bne.n	8004db2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d86:	f043 0302 	orr.w	r3, r3, #2
 8004d8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
 8004db0:	e00b      	b.n	8004dca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	4619      	mov	r1, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	461a      	mov	r2, r3
 8004de6:	680b      	ldr	r3, [r1, #0]
 8004de8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10c      	bne.n	8004e0a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004df6:	2100      	movs	r1, #0
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f945 	bl	8005088 <USB_SetDevSpeed>
 8004dfe:	e008      	b.n	8004e12 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e00:	2101      	movs	r1, #1
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f940 	bl	8005088 <USB_SetDevSpeed>
 8004e08:	e003      	b.n	8004e12 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e0a:	2103      	movs	r1, #3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f93b 	bl	8005088 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e12:	2110      	movs	r1, #16
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f8f3 	bl	8005000 <USB_FlushTxFifo>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f90f 	bl	8005048 <USB_FlushRxFifo>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	461a      	mov	r2, r3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	461a      	mov	r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	e043      	b.n	8004ee6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e74:	d118      	bne.n	8004ea8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e013      	b.n	8004eba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e008      	b.n	8004eba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3b7      	bcc.n	8004e5e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	e043      	b.n	8004f7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0a:	d118      	bne.n	8004f3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e013      	b.n	8004f50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e008      	b.n	8004f50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d3b7      	bcc.n	8004ef4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f043 0210 	orr.w	r2, r3, #16
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <USB_DevInit+0x2c4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f043 0208 	orr.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fe4:	f043 0304 	orr.w	r3, r3, #4
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff8:	b004      	add	sp, #16
 8004ffa:	4770      	bx	lr
 8004ffc:	803c3800 	.word	0x803c3800

08005000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	019b      	lsls	r3, r3, #6
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3301      	adds	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <USB_FlushTxFifo+0x44>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e006      	b.n	8005038 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d0f1      	beq.n	800501a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	00030d40 	.word	0x00030d40

08005048 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2210      	movs	r2, #16
 8005058:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	4a08      	ldr	r2, [pc, #32]	; (8005084 <USB_FlushRxFifo+0x3c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e006      	b.n	8005078 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b10      	cmp	r3, #16
 8005074:	d0f1      	beq.n	800505a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	00030d40 	.word	0x00030d40

08005088 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b087      	sub	sp, #28
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0306 	and.w	r3, r3, #6
 80050d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]
 80050de:	e00a      	b.n	80050f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d002      	beq.n	80050ec <USB_GetDevSpeed+0x32>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b06      	cmp	r3, #6
 80050ea:	d102      	bne.n	80050f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050ec:	2302      	movs	r3, #2
 80050ee:	75fb      	strb	r3, [r7, #23]
 80050f0:	e001      	b.n	80050f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050f2:	230f      	movs	r3, #15
 80050f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d13a      	bne.n	8005196 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800513e:	4313      	orrs	r3, r2
 8005140:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d155      	bne.n	8005204 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	78db      	ldrb	r3, [r3, #3]
 8005172:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005174:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	059b      	lsls	r3, r3, #22
 800517a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800517c:	4313      	orrs	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e036      	b.n	8005204 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	69da      	ldr	r2, [r3, #28]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	2101      	movs	r1, #1
 80051a8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	68f9      	ldr	r1, [r7, #12]
 80051b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11a      	bne.n	8005204 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	78db      	ldrb	r3, [r3, #3]
 80051e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051ea:	430b      	orrs	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d161      	bne.n	80052f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005246:	d11f      	bne.n	8005288 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005266:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005282:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005286:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	2101      	movs	r1, #1
 800529a:	fa01 f303 	lsl.w	r3, r1, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a8:	4013      	ands	r3, r2
 80052aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	2101      	movs	r1, #1
 80052be:	fa01 f303 	lsl.w	r3, r1, r3
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052cc:	4013      	ands	r3, r2
 80052ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0159      	lsls	r1, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	440b      	add	r3, r1
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	4619      	mov	r1, r3
 80052ec:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <USB_DeactivateEndpoint+0x1b0>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]
 80052f2:	e060      	b.n	80053b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530a:	d11f      	bne.n	800534c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800532a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005346:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800534a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	2101      	movs	r1, #1
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	43db      	mvns	r3, r3
 8005366:	68f9      	ldr	r1, [r7, #12]
 8005368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800536c:	4013      	ands	r3, r2
 800536e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	2101      	movs	r1, #1
 8005382:	fa01 f303 	lsl.w	r3, r1, r3
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	43db      	mvns	r3, r3
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4013      	ands	r3, r2
 8005392:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	0159      	lsls	r1, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	4619      	mov	r1, r3
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <USB_DeactivateEndpoint+0x1b4>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	ec337800 	.word	0xec337800
 80053c8:	eff37800 	.word	0xeff37800

080053cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	; 0x28
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	f040 815c 	bne.w	80056a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d132      	bne.n	800545c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005410:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005414:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005418:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005438:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005454:	0cdb      	lsrs	r3, r3, #19
 8005456:	04db      	lsls	r3, r3, #19
 8005458:	6113      	str	r3, [r2, #16]
 800545a:	e074      	b.n	8005546 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005476:	0cdb      	lsrs	r3, r3, #19
 8005478:	04db      	lsls	r3, r3, #19
 800547a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005496:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800549a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800549e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6959      	ldr	r1, [r3, #20]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	440b      	add	r3, r1
 80054b8:	1e59      	subs	r1, r3, #1
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054c4:	4b9d      	ldr	r3, [pc, #628]	; (800573c <USB_EPStartXfer+0x370>)
 80054c6:	400b      	ands	r3, r1
 80054c8:	69b9      	ldr	r1, [r7, #24]
 80054ca:	0148      	lsls	r0, r1, #5
 80054cc:	69f9      	ldr	r1, [r7, #28]
 80054ce:	4401      	add	r1, r0
 80054d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054d4:	4313      	orrs	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ee:	69b9      	ldr	r1, [r7, #24]
 80054f0:	0148      	lsls	r0, r1, #5
 80054f2:	69f9      	ldr	r1, [r7, #28]
 80054f4:	4401      	add	r1, r0
 80054f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054fa:	4313      	orrs	r3, r2
 80054fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	78db      	ldrb	r3, [r3, #3]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d11f      	bne.n	8005546 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005520:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005524:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005544:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d14b      	bne.n	80055e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	78db      	ldrb	r3, [r3, #3]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d128      	bne.n	80055c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d110      	bne.n	80055a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e00f      	b.n	80055c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	e12f      	b.n	8005844 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005602:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	78db      	ldrb	r3, [r3, #3]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d015      	beq.n	8005638 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8117 	beq.w	8005844 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	69f9      	ldr	r1, [r7, #28]
 800562e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005632:	4313      	orrs	r3, r2
 8005634:	634b      	str	r3, [r1, #52]	; 0x34
 8005636:	e105      	b.n	8005844 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d110      	bne.n	800566a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e00f      	b.n	800568a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005688:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68d9      	ldr	r1, [r3, #12]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	b298      	uxth	r0, r3
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	4603      	mov	r3, r0
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fa2b 	bl	8005afa <USB_WritePacket>
 80056a4:	e0ce      	b.n	8005844 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c0:	0cdb      	lsrs	r3, r3, #19
 80056c2:	04db      	lsls	r3, r3, #19
 80056c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d126      	bne.n	8005740 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	0148      	lsls	r0, r1, #5
 800570c:	69f9      	ldr	r1, [r7, #28]
 800570e:	4401      	add	r1, r0
 8005710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005736:	6113      	str	r3, [r2, #16]
 8005738:	e036      	b.n	80057a8 <USB_EPStartXfer+0x3dc>
 800573a:	bf00      	nop
 800573c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4413      	add	r3, r2
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	8afb      	ldrh	r3, [r7, #22]
 8005766:	04d9      	lsls	r1, r3, #19
 8005768:	4b39      	ldr	r3, [pc, #228]	; (8005850 <USB_EPStartXfer+0x484>)
 800576a:	400b      	ands	r3, r1
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	0148      	lsls	r0, r1, #5
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	4401      	add	r1, r0
 8005774:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005778:	4313      	orrs	r3, r2
 800577a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	8af9      	ldrh	r1, [r7, #22]
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	0148      	lsls	r0, r1, #5
 800579c:	69f9      	ldr	r1, [r7, #28]
 800579e:	4401      	add	r1, r0
 80057a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057a4:	4313      	orrs	r3, r2
 80057a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10d      	bne.n	80057ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	68d9      	ldr	r1, [r3, #12]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c6:	460a      	mov	r2, r1
 80057c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	78db      	ldrb	r3, [r3, #3]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d128      	bne.n	8005824 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d110      	bne.n	8005804 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e00f      	b.n	8005824 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005842:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	1ff80000 	.word	0x1ff80000

08005854 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b01      	cmp	r3, #1
 8005872:	f040 80cd 	bne.w	8005a10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d132      	bne.n	80058e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005898:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800589c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058dc:	0cdb      	lsrs	r3, r3, #19
 80058de:	04db      	lsls	r3, r3, #19
 80058e0:	6113      	str	r3, [r2, #16]
 80058e2:	e04e      	b.n	8005982 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	0cdb      	lsrs	r3, r3, #19
 8005900:	04db      	lsls	r3, r3, #19
 8005902:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005922:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005926:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d903      	bls.n	800593c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800595a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	0148      	lsls	r0, r1, #5
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	4401      	add	r1, r0
 800597a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800597e:	4313      	orrs	r3, r2
 8005980:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d11e      	bne.n	80059c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	461a      	mov	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	e092      	b.n	8005aec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d07e      	beq.n	8005aec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	2101      	movs	r1, #1
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a0e:	e06d      	b.n	8005aec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2a:	0cdb      	lsrs	r3, r3, #19
 8005a2c:	04db      	lsls	r3, r3, #19
 8005a2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9a:	6939      	ldr	r1, [r7, #16]
 8005a9c:	0148      	lsls	r0, r1, #5
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	4401      	add	r1, r0
 8005aa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10d      	bne.n	8005acc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	68d9      	ldr	r1, [r3, #12]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	460a      	mov	r2, r1
 8005aca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b089      	sub	sp, #36	; 0x24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	4611      	mov	r1, r2
 8005b06:	461a      	mov	r2, r3
 8005b08:	460b      	mov	r3, r1
 8005b0a:	71fb      	strb	r3, [r7, #7]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d123      	bne.n	8005b68 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b20:	88bb      	ldrh	r3, [r7, #4]
 8005b22:	3303      	adds	r3, #3
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	e018      	b.n	8005b60 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	031a      	lsls	r2, r3, #12
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	3301      	adds	r3, #1
 8005b46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d3e2      	bcc.n	8005b2e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3724      	adds	r7, #36	; 0x24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b08b      	sub	sp, #44	; 0x2c
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	4613      	mov	r3, r2
 8005b82:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	623b      	str	r3, [r7, #32]
 8005ba0:	e014      	b.n	8005bcc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3e6      	bcc.n	8005ba2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bd4:	8bfb      	ldrh	r3, [r7, #30]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01e      	beq.n	8005c18 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be4:	461a      	mov	r2, r3
 8005be6:	f107 0310 	add.w	r3, r7, #16
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	701a      	strb	r2, [r3, #0]
      i++;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	3301      	adds	r3, #1
 8005c04:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	3301      	adds	r3, #1
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c0c:	8bfb      	ldrh	r3, [r7, #30]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c12:	8bfb      	ldrh	r3, [r7, #30]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ea      	bne.n	8005bee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	372c      	adds	r7, #44	; 0x2c
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d12c      	bne.n	8005c9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	db12      	blt.n	8005c7a <USB_EPSetStall+0x54>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00f      	beq.n	8005c7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e02b      	b.n	8005cf4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	db12      	blt.n	8005cd4 <USB_EPSetStall+0xae>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cd2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d128      	bne.n	8005d70 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	78db      	ldrb	r3, [r3, #3]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d003      	beq.n	8005d4e <USB_EPClearStall+0x4c>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d138      	bne.n	8005dc0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e027      	b.n	8005dc0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d003      	beq.n	8005da0 <USB_EPClearStall+0x9e>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	78db      	ldrb	r3, [r3, #3]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d10f      	bne.n	8005dc0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005df0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e02:	68f9      	ldr	r1, [r7, #12]
 8005e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e34:	f023 0303 	bic.w	r3, r3, #3
 8005e38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e48:	f023 0302 	bic.w	r3, r3, #2
 8005e4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	0c1b      	lsrs	r3, r3, #16
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	b29b      	uxth	r3, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	4013      	ands	r3, r2
 8005f58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
 8005f98:	01db      	lsls	r3, r3, #7
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ffe:	f023 0307 	bic.w	r3, r3, #7
 8006002:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006016:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	460b      	mov	r3, r1
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	333c      	adds	r3, #60	; 0x3c
 800603e:	3304      	adds	r3, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4a26      	ldr	r2, [pc, #152]	; (80060e0 <USB_EP0_OutStart+0xb8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d90a      	bls.n	8006062 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800605c:	d101      	bne.n	8006062 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e037      	b.n	80060d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	461a      	mov	r2, r3
 800606a:	2300      	movs	r3, #0
 800606c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006090:	f043 0318 	orr.w	r3, r3, #24
 8006094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80060a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80060aa:	7afb      	ldrb	r3, [r7, #11]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10f      	bne.n	80060d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80060ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	4f54300a 	.word	0x4f54300a

080060e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3301      	adds	r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	4a13      	ldr	r2, [pc, #76]	; (8006144 <USB_CoreReset+0x60>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e01a      	b.n	8006136 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	daf3      	bge.n	80060f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f043 0201 	orr.w	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	4a09      	ldr	r2, [pc, #36]	; (8006144 <USB_CoreReset+0x60>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d901      	bls.n	8006128 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e006      	b.n	8006136 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b01      	cmp	r3, #1
 8006132:	d0f1      	beq.n	8006118 <USB_CoreReset+0x34>

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	00030d40 	.word	0x00030d40

08006148 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006154:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006158:	f002 f952 	bl	8008400 <USBD_static_malloc>
 800615c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800616c:	2302      	movs	r3, #2
 800616e:	e066      	b.n	800623e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7c1b      	ldrb	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d119      	bne.n	80061b4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006184:	2202      	movs	r2, #2
 8006186:	2181      	movs	r1, #129	; 0x81
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f002 f816 	bl	80081ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006198:	2202      	movs	r2, #2
 800619a:	2101      	movs	r1, #1
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f002 f80c 	bl	80081ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2210      	movs	r2, #16
 80061ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80061b2:	e016      	b.n	80061e2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061b4:	2340      	movs	r3, #64	; 0x40
 80061b6:	2202      	movs	r2, #2
 80061b8:	2181      	movs	r1, #129	; 0x81
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fffd 	bl	80081ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061c6:	2340      	movs	r3, #64	; 0x40
 80061c8:	2202      	movs	r2, #2
 80061ca:	2101      	movs	r1, #1
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fff4 	bl	80081ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2210      	movs	r2, #16
 80061de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061e2:	2308      	movs	r3, #8
 80061e4:	2203      	movs	r2, #3
 80061e6:	2182      	movs	r1, #130	; 0x82
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 ffe6 	bl	80081ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7c1b      	ldrb	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800621e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006222:	2101      	movs	r1, #1
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f002 f8b7 	bl	8008398 <USBD_LL_PrepareReceive>
 800622a:	e007      	b.n	800623c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006232:	2340      	movs	r3, #64	; 0x40
 8006234:	2101      	movs	r1, #1
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f002 f8ae 	bl	8008398 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006252:	2181      	movs	r1, #129	; 0x81
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 ffd6 	bl	8008206 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006260:	2101      	movs	r1, #1
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 ffcf 	bl	8008206 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006270:	2182      	movs	r1, #130	; 0x82
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 ffc7 	bl	8008206 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00e      	beq.n	80062b0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a2:	4618      	mov	r0, r3
 80062a4:	f002 f8ba 	bl	800841c <USBD_static_free>
    pdev->pClassData = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0af      	b.n	8006444 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d03f      	beq.n	8006370 <USBD_CDC_Setup+0xb4>
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	f040 809f 	bne.w	8006434 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88db      	ldrh	r3, [r3, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d02e      	beq.n	800635c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	b25b      	sxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	da16      	bge.n	8006336 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006314:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	88d2      	ldrh	r2, [r2, #6]
 800631a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	2b07      	cmp	r3, #7
 8006322:	bf28      	it	cs
 8006324:	2307      	movcs	r3, #7
 8006326:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	89fa      	ldrh	r2, [r7, #14]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fb19 	bl	8007966 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006334:	e085      	b.n	8006442 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	785a      	ldrb	r2, [r3, #1]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	88db      	ldrh	r3, [r3, #6]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800634c:	6939      	ldr	r1, [r7, #16]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	461a      	mov	r2, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fb32 	bl	80079be <USBD_CtlPrepareRx>
      break;
 800635a:	e072      	b.n	8006442 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	7850      	ldrb	r0, [r2, #1]
 8006368:	2200      	movs	r2, #0
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	4798      	blx	r3
      break;
 800636e:	e068      	b.n	8006442 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b0b      	cmp	r3, #11
 8006376:	d852      	bhi.n	800641e <USBD_CDC_Setup+0x162>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBD_CDC_Setup+0xc4>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	080063b1 	.word	0x080063b1
 8006384:	0800642d 	.word	0x0800642d
 8006388:	0800641f 	.word	0x0800641f
 800638c:	0800641f 	.word	0x0800641f
 8006390:	0800641f 	.word	0x0800641f
 8006394:	0800641f 	.word	0x0800641f
 8006398:	0800641f 	.word	0x0800641f
 800639c:	0800641f 	.word	0x0800641f
 80063a0:	0800641f 	.word	0x0800641f
 80063a4:	0800641f 	.word	0x0800641f
 80063a8:	080063db 	.word	0x080063db
 80063ac:	08006405 	.word	0x08006405
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d107      	bne.n	80063cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063bc:	f107 030a 	add.w	r3, r7, #10
 80063c0:	2202      	movs	r2, #2
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 face 	bl	8007966 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063ca:	e032      	b.n	8006432 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 fa58 	bl	8007884 <USBD_CtlError>
            ret = USBD_FAIL;
 80063d4:	2303      	movs	r3, #3
 80063d6:	75fb      	strb	r3, [r7, #23]
          break;
 80063d8:	e02b      	b.n	8006432 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d107      	bne.n	80063f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063e6:	f107 030d 	add.w	r3, r7, #13
 80063ea:	2201      	movs	r2, #1
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fab9 	bl	8007966 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063f4:	e01d      	b.n	8006432 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 fa43 	bl	8007884 <USBD_CtlError>
            ret = USBD_FAIL;
 80063fe:	2303      	movs	r3, #3
 8006400:	75fb      	strb	r3, [r7, #23]
          break;
 8006402:	e016      	b.n	8006432 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b03      	cmp	r3, #3
 800640e:	d00f      	beq.n	8006430 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fa36 	bl	8007884 <USBD_CtlError>
            ret = USBD_FAIL;
 8006418:	2303      	movs	r3, #3
 800641a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800641c:	e008      	b.n	8006430 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fa2f 	bl	8007884 <USBD_CtlError>
          ret = USBD_FAIL;
 8006426:	2303      	movs	r3, #3
 8006428:	75fb      	strb	r3, [r7, #23]
          break;
 800642a:	e002      	b.n	8006432 <USBD_CDC_Setup+0x176>
          break;
 800642c:	bf00      	nop
 800642e:	e008      	b.n	8006442 <USBD_CDC_Setup+0x186>
          break;
 8006430:	bf00      	nop
      }
      break;
 8006432:	e006      	b.n	8006442 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fa24 	bl	8007884 <USBD_CtlError>
      ret = USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	bf00      	nop
  }

  return (uint8_t)ret;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800645e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800646a:	2303      	movs	r3, #3
 800646c:	e04f      	b.n	800650e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006474:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	440b      	add	r3, r1
 8006484:	3318      	adds	r3, #24
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d029      	beq.n	80064e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	3318      	adds	r3, #24
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	78f9      	ldrb	r1, [r7, #3]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	460b      	mov	r3, r1
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	1a5b      	subs	r3, r3, r1
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4403      	add	r3, r0
 80064ac:	3344      	adds	r3, #68	; 0x44
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80064b4:	fb03 f301 	mul.w	r3, r3, r1
 80064b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d110      	bne.n	80064e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	3318      	adds	r3, #24
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064d2:	78f9      	ldrb	r1, [r7, #3]
 80064d4:	2300      	movs	r3, #0
 80064d6:	2200      	movs	r2, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 ff3c 	bl	8008356 <USBD_LL_Transmit>
 80064de:	e015      	b.n	800650c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006528:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006534:	2303      	movs	r3, #3
 8006536:	e015      	b.n	8006564 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 ff4c 	bl	80083da <USBD_LL_GetRxDataSize>
 8006542:	4602      	mov	r2, r0
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800655e:	4611      	mov	r1, r2
 8006560:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800657a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006582:	2303      	movs	r3, #3
 8006584:	e01b      	b.n	80065be <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d015      	beq.n	80065bc <USBD_CDC_EP0_RxReady+0x50>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006596:	2bff      	cmp	r3, #255	; 0xff
 8006598:	d010      	beq.n	80065bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80065a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065b0:	b292      	uxth	r2, r2
 80065b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	22ff      	movs	r2, #255	; 0xff
 80065b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2243      	movs	r2, #67	; 0x43
 80065d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80065d6:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	200000a4 	.word	0x200000a4

080065e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2243      	movs	r2, #67	; 0x43
 80065f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80065f6:	4b03      	ldr	r3, [pc, #12]	; (8006604 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	20000060 	.word	0x20000060

08006608 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2243      	movs	r2, #67	; 0x43
 8006614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006616:	4b03      	ldr	r3, [pc, #12]	; (8006624 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	200000e8 	.word	0x200000e8

08006628 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	220a      	movs	r2, #10
 8006634:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006636:	4b03      	ldr	r3, [pc, #12]	; (8006644 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	2000001c 	.word	0x2000001c

08006648 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	e004      	b.n	8006666 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006672:	b480      	push	{r7}
 8006674:	b087      	sub	sp, #28
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006684:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800668c:	2303      	movs	r3, #3
 800668e:	e008      	b.n	80066a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e004      	b.n	80066d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e01a      	b.n	8006738 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006708:	2b00      	cmp	r3, #0
 800670a:	d114      	bne.n	8006736 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2201      	movs	r2, #1
 8006710:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800672a:	2181      	movs	r1, #129	; 0x81
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fe12 	bl	8008356 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800674e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	e016      	b.n	800678c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7c1b      	ldrb	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800676c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006770:	2101      	movs	r1, #1
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fe10 	bl	8008398 <USBD_LL_PrepareReceive>
 8006778:	e007      	b.n	800678a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	2101      	movs	r1, #1
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fe07 	bl	8008398 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e01f      	b.n	80067ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	79fa      	ldrb	r2, [r7, #7]
 80067de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f001 fc83 	bl	80080ec <USBD_LL_Init>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	e016      	b.n	800683a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	f107 020e 	add.w	r2, r7, #14
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	4602      	mov	r2, r0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fc9a 	bl	8008184 <USBD_LL_Start>
 8006850:	4603      	mov	r3, r0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	4611      	mov	r1, r2
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800689e:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	4611      	mov	r1, r2
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
  }

  return USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 ff90 	bl	8007810 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2b02      	cmp	r3, #2
 8006912:	d01a      	beq.n	800694a <USBD_LL_SetupStage+0x72>
 8006914:	2b02      	cmp	r3, #2
 8006916:	d822      	bhi.n	800695e <USBD_LL_SetupStage+0x86>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <USBD_LL_SetupStage+0x4a>
 800691c:	2b01      	cmp	r3, #1
 800691e:	d00a      	beq.n	8006936 <USBD_LL_SetupStage+0x5e>
 8006920:	e01d      	b.n	800695e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa62 	bl	8006df4 <USBD_StdDevReq>
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]
      break;
 8006934:	e020      	b.n	8006978 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fac6 	bl	8006ed0 <USBD_StdItfReq>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e016      	b.n	8006978 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb05 	bl	8006f62 <USBD_StdEPReq>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e00c      	b.n	8006978 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006968:	b2db      	uxtb	r3, r3
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fc69 	bl	8008244 <USBD_LL_StallEP>
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]
      break;
 8006976:	bf00      	nop
  }

  return ret;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	460b      	mov	r3, r1
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d138      	bne.n	8006a08 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800699c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d14a      	bne.n	8006a3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d913      	bls.n	80069dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bf28      	it	cs
 80069ce:	4613      	movcs	r3, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 f80f 	bl	80079f8 <USBD_CtlContinueRx>
 80069da:	e030      	b.n	8006a3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d10b      	bne.n	8006a00 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f001 f80a 	bl	8007a1a <USBD_CtlSendStatus>
 8006a06:	e01a      	b.n	8006a3e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d114      	bne.n	8006a3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00e      	beq.n	8006a3e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	7afa      	ldrb	r2, [r7, #11]
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	4798      	blx	r3
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	e000      	b.n	8006a40 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	460b      	mov	r3, r1
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d16b      	bne.n	8006b34 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d156      	bne.n	8006b1a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d914      	bls.n	8006aa2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	1ad2      	subs	r2, r2, r3
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 ff84 	bl	800799c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a94:	2300      	movs	r3, #0
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f001 fc7c 	bl	8008398 <USBD_LL_PrepareReceive>
 8006aa0:	e03b      	b.n	8006b1a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d11c      	bne.n	8006ae8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d316      	bcc.n	8006ae8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d20f      	bcs.n	8006ae8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 ff65 	bl	800799c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ada:	2300      	movs	r3, #0
 8006adc:	2200      	movs	r2, #0
 8006ade:	2100      	movs	r1, #0
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f001 fc59 	bl	8008398 <USBD_LL_PrepareReceive>
 8006ae6:	e018      	b.n	8006b1a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d10b      	bne.n	8006b0c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b0c:	2180      	movs	r1, #128	; 0x80
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f001 fb98 	bl	8008244 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 ff93 	bl	8007a40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d122      	bne.n	8006b6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fe98 	bl	800685a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b32:	e01a      	b.n	8006b6a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d114      	bne.n	8006b6a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	7afa      	ldrb	r2, [r7, #11]
 8006b56:	4611      	mov	r1, r2
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	4798      	blx	r3
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	e000      	b.n	8006b6c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e02f      	b.n	8006c08 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00f      	beq.n	8006bd2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6852      	ldr	r2, [r2, #4]
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	4611      	mov	r1, r2
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bd2:	2340      	movs	r3, #64	; 0x40
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 faee 	bl	80081ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2240      	movs	r2, #64	; 0x40
 8006bea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bee:	2340      	movs	r3, #64	; 0x40
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fae0 	bl	80081ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2240      	movs	r2, #64	; 0x40
 8006c04:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2204      	movs	r2, #4
 8006c4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d106      	bne.n	8006c7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e012      	b.n	8006cc8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d10b      	bne.n	8006cc6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e014      	b.n	8006d14 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d10d      	bne.n	8006d12 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e014      	b.n	8006d60 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d10d      	bne.n	8006d5e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d009      	beq.n	8006dac <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6852      	ldr	r2, [r2, #4]
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	4611      	mov	r1, r2
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
  }

  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b087      	sub	sp, #28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dd4:	8a3b      	ldrh	r3, [r7, #16]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	b21a      	sxth	r2, r3
 8006dda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	b21b      	sxth	r3, r3
 8006de2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006de4:	89fb      	ldrh	r3, [r7, #14]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
	...

08006df4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	d005      	beq.n	8006e1a <USBD_StdDevReq+0x26>
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d853      	bhi.n	8006eba <USBD_StdDevReq+0xc6>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <USBD_StdDevReq+0x3a>
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d14f      	bne.n	8006eba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2c:	e04a      	b.n	8006ec4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b09      	cmp	r3, #9
 8006e34:	d83b      	bhi.n	8006eae <USBD_StdDevReq+0xba>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <USBD_StdDevReq+0x48>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006ea5 	.word	0x08006ea5
 8006e44:	08006eaf 	.word	0x08006eaf
 8006e48:	08006e9b 	.word	0x08006e9b
 8006e4c:	08006eaf 	.word	0x08006eaf
 8006e50:	08006e6f 	.word	0x08006e6f
 8006e54:	08006e65 	.word	0x08006e65
 8006e58:	08006eaf 	.word	0x08006eaf
 8006e5c:	08006e87 	.word	0x08006e87
 8006e60:	08006e79 	.word	0x08006e79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9de 	bl	8007228 <USBD_GetDescriptor>
          break;
 8006e6c:	e024      	b.n	8006eb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb43 	bl	80074fc <USBD_SetAddress>
          break;
 8006e76:	e01f      	b.n	8006eb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fb82 	bl	8007584 <USBD_SetConfig>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]
          break;
 8006e84:	e018      	b.n	8006eb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc21 	bl	80076d0 <USBD_GetConfig>
          break;
 8006e8e:	e013      	b.n	8006eb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fc52 	bl	800773c <USBD_GetStatus>
          break;
 8006e98:	e00e      	b.n	8006eb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc81 	bl	80077a4 <USBD_SetFeature>
          break;
 8006ea2:	e009      	b.n	8006eb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fc90 	bl	80077cc <USBD_ClrFeature>
          break;
 8006eac:	e004      	b.n	8006eb8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fce7 	bl	8007884 <USBD_CtlError>
          break;
 8006eb6:	bf00      	nop
      }
      break;
 8006eb8:	e004      	b.n	8006ec4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fce1 	bl	8007884 <USBD_CtlError>
      break;
 8006ec2:	bf00      	nop
  }

  return ret;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop

08006ed0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d005      	beq.n	8006ef6 <USBD_StdItfReq+0x26>
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d82f      	bhi.n	8006f4e <USBD_StdItfReq+0x7e>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <USBD_StdItfReq+0x26>
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d12b      	bne.n	8006f4e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d81d      	bhi.n	8006f40 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	889b      	ldrh	r3, [r3, #4]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d813      	bhi.n	8006f36 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	88db      	ldrh	r3, [r3, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d110      	bne.n	8006f4a <USBD_StdItfReq+0x7a>
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10d      	bne.n	8006f4a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fd73 	bl	8007a1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f34:	e009      	b.n	8006f4a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fca3 	bl	8007884 <USBD_CtlError>
          break;
 8006f3e:	e004      	b.n	8006f4a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc9e 	bl	8007884 <USBD_CtlError>
          break;
 8006f48:	e000      	b.n	8006f4c <USBD_StdItfReq+0x7c>
          break;
 8006f4a:	bf00      	nop
      }
      break;
 8006f4c:	e004      	b.n	8006f58 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fc97 	bl	8007884 <USBD_CtlError>
      break;
 8006f56:	bf00      	nop
  }

  return ret;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	889b      	ldrh	r3, [r3, #4]
 8006f74:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f7e:	2b40      	cmp	r3, #64	; 0x40
 8006f80:	d007      	beq.n	8006f92 <USBD_StdEPReq+0x30>
 8006f82:	2b40      	cmp	r3, #64	; 0x40
 8006f84:	f200 8145 	bhi.w	8007212 <USBD_StdEPReq+0x2b0>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <USBD_StdEPReq+0x44>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	f040 8140 	bne.w	8007212 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa4:	e13a      	b.n	800721c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	785b      	ldrb	r3, [r3, #1]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d007      	beq.n	8006fbe <USBD_StdEPReq+0x5c>
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	f300 8129 	bgt.w	8007206 <USBD_StdEPReq+0x2a4>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d07f      	beq.n	80070b8 <USBD_StdEPReq+0x156>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d03c      	beq.n	8007036 <USBD_StdEPReq+0xd4>
 8006fbc:	e123      	b.n	8007206 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d002      	beq.n	8006fd0 <USBD_StdEPReq+0x6e>
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d016      	beq.n	8006ffc <USBD_StdEPReq+0x9a>
 8006fce:	e02c      	b.n	800702a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00d      	beq.n	8006ff2 <USBD_StdEPReq+0x90>
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	d00a      	beq.n	8006ff2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f92f 	bl	8008244 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 f92b 	bl	8008244 <USBD_LL_StallEP>
 8006fee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ff0:	e020      	b.n	8007034 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fc45 	bl	8007884 <USBD_CtlError>
              break;
 8006ffa:	e01b      	b.n	8007034 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	885b      	ldrh	r3, [r3, #2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10e      	bne.n	8007022 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <USBD_StdEPReq+0xc0>
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b80      	cmp	r3, #128	; 0x80
 800700e:	d008      	beq.n	8007022 <USBD_StdEPReq+0xc0>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	88db      	ldrh	r3, [r3, #6]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f911 	bl	8008244 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fcf9 	bl	8007a1a <USBD_CtlSendStatus>

              break;
 8007028:	e004      	b.n	8007034 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fc29 	bl	8007884 <USBD_CtlError>
              break;
 8007032:	bf00      	nop
          }
          break;
 8007034:	e0ec      	b.n	8007210 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d002      	beq.n	8007048 <USBD_StdEPReq+0xe6>
 8007042:	2b03      	cmp	r3, #3
 8007044:	d016      	beq.n	8007074 <USBD_StdEPReq+0x112>
 8007046:	e030      	b.n	80070aa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <USBD_StdEPReq+0x108>
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b80      	cmp	r3, #128	; 0x80
 8007052:	d00a      	beq.n	800706a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f8f3 	bl	8008244 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800705e:	2180      	movs	r1, #128	; 0x80
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f8ef 	bl	8008244 <USBD_LL_StallEP>
 8007066:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007068:	e025      	b.n	80070b6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fc09 	bl	8007884 <USBD_CtlError>
              break;
 8007072:	e020      	b.n	80070b6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	885b      	ldrh	r3, [r3, #2]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11b      	bne.n	80070b4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 f8f9 	bl	8008282 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fcc2 	bl	8007a1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80070a8:	e004      	b.n	80070b4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fbe9 	bl	8007884 <USBD_CtlError>
              break;
 80070b2:	e000      	b.n	80070b6 <USBD_StdEPReq+0x154>
              break;
 80070b4:	bf00      	nop
          }
          break;
 80070b6:	e0ab      	b.n	8007210 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d002      	beq.n	80070ca <USBD_StdEPReq+0x168>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d032      	beq.n	800712e <USBD_StdEPReq+0x1cc>
 80070c8:	e097      	b.n	80071fa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <USBD_StdEPReq+0x17e>
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d004      	beq.n	80070e0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fbd3 	bl	8007884 <USBD_CtlError>
                break;
 80070de:	e091      	b.n	8007204 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da0b      	bge.n	8007100 <USBD_StdEPReq+0x19e>
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	3310      	adds	r3, #16
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	4413      	add	r3, r2
 80070fc:	3304      	adds	r3, #4
 80070fe:	e00b      	b.n	8007118 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	3304      	adds	r3, #4
 8007118:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2202      	movs	r2, #2
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fc1d 	bl	8007966 <USBD_CtlSendData>
              break;
 800712c:	e06a      	b.n	8007204 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800712e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007132:	2b00      	cmp	r3, #0
 8007134:	da11      	bge.n	800715a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	f003 020f 	and.w	r2, r3, #15
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	3324      	adds	r3, #36	; 0x24
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d117      	bne.n	8007180 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb96 	bl	8007884 <USBD_CtlError>
                  break;
 8007158:	e054      	b.n	8007204 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fb83 	bl	8007884 <USBD_CtlError>
                  break;
 800717e:	e041      	b.n	8007204 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007184:	2b00      	cmp	r3, #0
 8007186:	da0b      	bge.n	80071a0 <USBD_StdEPReq+0x23e>
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	3310      	adds	r3, #16
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4413      	add	r3, r2
 800719c:	3304      	adds	r3, #4
 800719e:	e00b      	b.n	80071b8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	3304      	adds	r3, #4
 80071b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <USBD_StdEPReq+0x264>
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	d103      	bne.n	80071ce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e00e      	b.n	80071ec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 f874 	bl	80082c0 <USBD_LL_IsStallEP>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e002      	b.n	80071ec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2202      	movs	r2, #2
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fbb7 	bl	8007966 <USBD_CtlSendData>
              break;
 80071f8:	e004      	b.n	8007204 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fb41 	bl	8007884 <USBD_CtlError>
              break;
 8007202:	bf00      	nop
          }
          break;
 8007204:	e004      	b.n	8007210 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fb3b 	bl	8007884 <USBD_CtlError>
          break;
 800720e:	bf00      	nop
      }
      break;
 8007210:	e004      	b.n	800721c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb35 	bl	8007884 <USBD_CtlError>
      break;
 800721a:	bf00      	nop
  }

  return ret;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	885b      	ldrh	r3, [r3, #2]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	2b06      	cmp	r3, #6
 800724a:	f200 8128 	bhi.w	800749e <USBD_GetDescriptor+0x276>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBD_GetDescriptor+0x2c>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007271 	.word	0x08007271
 8007258:	08007289 	.word	0x08007289
 800725c:	080072c9 	.word	0x080072c9
 8007260:	0800749f 	.word	0x0800749f
 8007264:	0800749f 	.word	0x0800749f
 8007268:	0800743f 	.word	0x0800743f
 800726c:	0800746b 	.word	0x0800746b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7c12      	ldrb	r2, [r2, #16]
 800727c:	f107 0108 	add.w	r1, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
      break;
 8007286:	e112      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7c1b      	ldrb	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10d      	bne.n	80072ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f107 0208 	add.w	r2, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80072aa:	e100      	b.n	80074ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f107 0208 	add.w	r2, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	2202      	movs	r2, #2
 80072c4:	701a      	strb	r2, [r3, #0]
      break;
 80072c6:	e0f2      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	885b      	ldrh	r3, [r3, #2]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	f200 80ac 	bhi.w	800742c <USBD_GetDescriptor+0x204>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <USBD_GetDescriptor+0xb4>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080072f5 	.word	0x080072f5
 80072e0:	08007329 	.word	0x08007329
 80072e4:	0800735d 	.word	0x0800735d
 80072e8:	08007391 	.word	0x08007391
 80072ec:	080073c5 	.word	0x080073c5
 80072f0:	080073f9 	.word	0x080073f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7c12      	ldrb	r2, [r2, #16]
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007316:	e091      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fab2 	bl	8007884 <USBD_CtlError>
            err++;
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	3301      	adds	r3, #1
 8007324:	72fb      	strb	r3, [r7, #11]
          break;
 8007326:	e089      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	7c12      	ldrb	r2, [r2, #16]
 8007340:	f107 0108 	add.w	r1, r7, #8
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
 8007348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800734a:	e077      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa98 	bl	8007884 <USBD_CtlError>
            err++;
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	3301      	adds	r3, #1
 8007358:	72fb      	strb	r3, [r7, #11]
          break;
 800735a:	e06f      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7c12      	ldrb	r2, [r2, #16]
 8007374:	f107 0108 	add.w	r1, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800737e:	e05d      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa7e 	bl	8007884 <USBD_CtlError>
            err++;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	3301      	adds	r3, #1
 800738c:	72fb      	strb	r3, [r7, #11]
          break;
 800738e:	e055      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e043      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa64 	bl	8007884 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e03b      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e029      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa4a 	bl	8007884 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e021      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e00f      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa30 	bl	8007884 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e007      	b.n	800743c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa28 	bl	8007884 <USBD_CtlError>
          err++;
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	3301      	adds	r3, #1
 8007438:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800743a:	bf00      	nop
      }
      break;
 800743c:	e037      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	7c1b      	ldrb	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	f107 0208 	add.w	r2, r7, #8
 8007452:	4610      	mov	r0, r2
 8007454:	4798      	blx	r3
 8007456:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007458:	e029      	b.n	80074ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fa11 	bl	8007884 <USBD_CtlError>
        err++;
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	3301      	adds	r3, #1
 8007466:	72fb      	strb	r3, [r7, #11]
      break;
 8007468:	e021      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7c1b      	ldrb	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	f107 0208 	add.w	r2, r7, #8
 800747e:	4610      	mov	r0, r2
 8007480:	4798      	blx	r3
 8007482:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	2207      	movs	r2, #7
 800748a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800748c:	e00f      	b.n	80074ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f9f7 	bl	8007884 <USBD_CtlError>
        err++;
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	3301      	adds	r3, #1
 800749a:	72fb      	strb	r3, [r7, #11]
      break;
 800749c:	e007      	b.n	80074ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f9ef 	bl	8007884 <USBD_CtlError>
      err++;
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	3301      	adds	r3, #1
 80074aa:	72fb      	strb	r3, [r7, #11]
      break;
 80074ac:	bf00      	nop
  }

  if (err != 0U)
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11e      	bne.n	80074f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	88db      	ldrh	r3, [r3, #6]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d016      	beq.n	80074ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80074bc:	893b      	ldrh	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00e      	beq.n	80074e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	88da      	ldrh	r2, [r3, #6]
 80074c6:	893b      	ldrh	r3, [r7, #8]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bf28      	it	cs
 80074cc:	4613      	movcs	r3, r2
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074d2:	893b      	ldrh	r3, [r7, #8]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa44 	bl	8007966 <USBD_CtlSendData>
 80074de:	e009      	b.n	80074f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9ce 	bl	8007884 <USBD_CtlError>
 80074e8:	e004      	b.n	80074f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa95 	bl	8007a1a <USBD_CtlSendStatus>
 80074f0:	e000      	b.n	80074f4 <USBD_GetDescriptor+0x2cc>
    return;
 80074f2:	bf00      	nop
  }
}
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	889b      	ldrh	r3, [r3, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d131      	bne.n	8007572 <USBD_SetAddress+0x76>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	88db      	ldrh	r3, [r3, #6]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d12d      	bne.n	8007572 <USBD_SetAddress+0x76>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	885b      	ldrh	r3, [r3, #2]
 800751a:	2b7f      	cmp	r3, #127	; 0x7f
 800751c:	d829      	bhi.n	8007572 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	885b      	ldrh	r3, [r3, #2]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007528:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b03      	cmp	r3, #3
 8007534:	d104      	bne.n	8007540 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f9a3 	bl	8007884 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	e01d      	b.n	800757c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7bfa      	ldrb	r2, [r7, #15]
 8007544:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fee3 	bl	8008318 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa61 	bl	8007a1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007566:	e009      	b.n	800757c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007570:	e004      	b.n	800757c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f985 	bl	8007884 <USBD_CtlError>
  }
}
 800757a:	bf00      	nop
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	885b      	ldrh	r3, [r3, #2]
 8007596:	b2da      	uxtb	r2, r3
 8007598:	4b4c      	ldr	r3, [pc, #304]	; (80076cc <USBD_SetConfig+0x148>)
 800759a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800759c:	4b4b      	ldr	r3, [pc, #300]	; (80076cc <USBD_SetConfig+0x148>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d905      	bls.n	80075b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f96c 	bl	8007884 <USBD_CtlError>
    return USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e088      	b.n	80076c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d002      	beq.n	80075c2 <USBD_SetConfig+0x3e>
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d025      	beq.n	800760c <USBD_SetConfig+0x88>
 80075c0:	e071      	b.n	80076a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80075c2:	4b42      	ldr	r3, [pc, #264]	; (80076cc <USBD_SetConfig+0x148>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01c      	beq.n	8007604 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80075ca:	4b40      	ldr	r3, [pc, #256]	; (80076cc <USBD_SetConfig+0x148>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075d4:	4b3d      	ldr	r3, [pc, #244]	; (80076cc <USBD_SetConfig+0x148>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff f948 	bl	8006870 <USBD_SetClassConfig>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f949 	bl	8007884 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075f2:	e065      	b.n	80076c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa10 	bl	8007a1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2203      	movs	r2, #3
 80075fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007602:	e05d      	b.n	80076c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa08 	bl	8007a1a <USBD_CtlSendStatus>
      break;
 800760a:	e059      	b.n	80076c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800760c:	4b2f      	ldr	r3, [pc, #188]	; (80076cc <USBD_SetConfig+0x148>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d112      	bne.n	800763a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800761c:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <USBD_SetConfig+0x148>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007626:	4b29      	ldr	r3, [pc, #164]	; (80076cc <USBD_SetConfig+0x148>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff f93b 	bl	80068a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f9f1 	bl	8007a1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007638:	e042      	b.n	80076c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <USBD_SetConfig+0x148>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d02a      	beq.n	800769e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff f929 	bl	80068a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007656:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <USBD_SetConfig+0x148>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007660:	4b1a      	ldr	r3, [pc, #104]	; (80076cc <USBD_SetConfig+0x148>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff f902 	bl	8006870 <USBD_SetClassConfig>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00f      	beq.n	8007696 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f903 	bl	8007884 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff f90e 	bl	80068a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007694:	e014      	b.n	80076c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9bf 	bl	8007a1a <USBD_CtlSendStatus>
      break;
 800769c:	e010      	b.n	80076c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9bb 	bl	8007a1a <USBD_CtlSendStatus>
      break;
 80076a4:	e00c      	b.n	80076c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f8eb 	bl	8007884 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076ae:	4b07      	ldr	r3, [pc, #28]	; (80076cc <USBD_SetConfig+0x148>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff f8f7 	bl	80068a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	73fb      	strb	r3, [r7, #15]
      break;
 80076be:	bf00      	nop
  }

  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	200001c0 	.word	0x200001c0

080076d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	88db      	ldrh	r3, [r3, #6]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d004      	beq.n	80076ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f8cd 	bl	8007884 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076ea:	e023      	b.n	8007734 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	dc02      	bgt.n	80076fe <USBD_GetConfig+0x2e>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dc03      	bgt.n	8007704 <USBD_GetConfig+0x34>
 80076fc:	e015      	b.n	800772a <USBD_GetConfig+0x5a>
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d00b      	beq.n	800771a <USBD_GetConfig+0x4a>
 8007702:	e012      	b.n	800772a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3308      	adds	r3, #8
 800770e:	2201      	movs	r2, #1
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f927 	bl	8007966 <USBD_CtlSendData>
        break;
 8007718:	e00c      	b.n	8007734 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3304      	adds	r3, #4
 800771e:	2201      	movs	r2, #1
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f91f 	bl	8007966 <USBD_CtlSendData>
        break;
 8007728:	e004      	b.n	8007734 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8a9 	bl	8007884 <USBD_CtlError>
        break;
 8007732:	bf00      	nop
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	2b02      	cmp	r3, #2
 8007752:	d81e      	bhi.n	8007792 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	88db      	ldrh	r3, [r3, #6]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d004      	beq.n	8007766 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f890 	bl	8007884 <USBD_CtlError>
        break;
 8007764:	e01a      	b.n	800779c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f043 0202 	orr.w	r2, r3, #2
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	330c      	adds	r3, #12
 8007786:	2202      	movs	r2, #2
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f8eb 	bl	8007966 <USBD_CtlSendData>
      break;
 8007790:	e004      	b.n	800779c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f875 	bl	8007884 <USBD_CtlError>
      break;
 800779a:	bf00      	nop
  }
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	885b      	ldrh	r3, [r3, #2]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d106      	bne.n	80077c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f92b 	bl	8007a1a <USBD_CtlSendStatus>
  }
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d80b      	bhi.n	80077fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	885b      	ldrh	r3, [r3, #2]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10c      	bne.n	8007806 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f910 	bl	8007a1a <USBD_CtlSendStatus>
      }
      break;
 80077fa:	e004      	b.n	8007806 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f840 	bl	8007884 <USBD_CtlError>
      break;
 8007804:	e000      	b.n	8007808 <USBD_ClrFeature+0x3c>
      break;
 8007806:	bf00      	nop
  }
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	781a      	ldrb	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fabb 	bl	8006db6 <SWAPBYTE>
 8007840:	4603      	mov	r3, r0
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3301      	adds	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3301      	adds	r3, #1
 8007852:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff faae 	bl	8006db6 <SWAPBYTE>
 800785a:	4603      	mov	r3, r0
 800785c:	461a      	mov	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3301      	adds	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff faa1 	bl	8006db6 <SWAPBYTE>
 8007874:	4603      	mov	r3, r0
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	80da      	strh	r2, [r3, #6]
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800788e:	2180      	movs	r1, #128	; 0x80
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fcd7 	bl	8008244 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007896:	2100      	movs	r1, #0
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fcd3 	bl	8008244 <USBD_LL_StallEP>
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d036      	beq.n	800792a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078c0:	6938      	ldr	r0, [r7, #16]
 80078c2:	f000 f836 	bl	8007932 <USBD_GetLen>
 80078c6:	4603      	mov	r3, r0
 80078c8:	3301      	adds	r3, #1
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	701a      	strb	r2, [r3, #0]
  idx++;
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	3301      	adds	r3, #1
 80078e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	4413      	add	r3, r2
 80078ec:	2203      	movs	r2, #3
 80078ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	3301      	adds	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80078f6:	e013      	b.n	8007920 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4413      	add	r3, r2
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3301      	adds	r3, #1
 8007908:	613b      	str	r3, [r7, #16]
    idx++;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	3301      	adds	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	4413      	add	r3, r2
 8007916:	2200      	movs	r2, #0
 8007918:	701a      	strb	r2, [r3, #0]
    idx++;
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	3301      	adds	r3, #1
 800791e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e7      	bne.n	80078f8 <USBD_GetString+0x52>
 8007928:	e000      	b.n	800792c <USBD_GetString+0x86>
    return;
 800792a:	bf00      	nop
  }
}
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007942:	e005      	b.n	8007950 <USBD_GetLen+0x1e>
  {
    len++;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	3301      	adds	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	3301      	adds	r3, #1
 800794e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f5      	bne.n	8007944 <USBD_GetLen+0x12>
  }

  return len;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2202      	movs	r2, #2
 8007976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	2100      	movs	r1, #0
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fce2 	bl	8008356 <USBD_LL_Transmit>

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	2100      	movs	r1, #0
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 fcd1 	bl	8008356 <USBD_LL_Transmit>

  return USBD_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2203      	movs	r2, #3
 80079ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	2100      	movs	r1, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fcd5 	bl	8008398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fcc4 	bl	8008398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2204      	movs	r2, #4
 8007a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc90 	bl	8008356 <USBD_LL_Transmit>

  return USBD_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2205      	movs	r2, #5
 8007a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a50:	2300      	movs	r3, #0
 8007a52:	2200      	movs	r2, #0
 8007a54:	2100      	movs	r1, #0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fc9e 	bl	8008398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4912      	ldr	r1, [pc, #72]	; (8007ab8 <MX_USB_DEVICE_Init+0x50>)
 8007a70:	4812      	ldr	r0, [pc, #72]	; (8007abc <MX_USB_DEVICE_Init+0x54>)
 8007a72:	f7fe fe8f 	bl	8006794 <USBD_Init>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a7c:	f7f9 fd56 	bl	800152c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a80:	490f      	ldr	r1, [pc, #60]	; (8007ac0 <MX_USB_DEVICE_Init+0x58>)
 8007a82:	480e      	ldr	r0, [pc, #56]	; (8007abc <MX_USB_DEVICE_Init+0x54>)
 8007a84:	f7fe feb6 	bl	80067f4 <USBD_RegisterClass>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a8e:	f7f9 fd4d 	bl	800152c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a92:	490c      	ldr	r1, [pc, #48]	; (8007ac4 <MX_USB_DEVICE_Init+0x5c>)
 8007a94:	4809      	ldr	r0, [pc, #36]	; (8007abc <MX_USB_DEVICE_Init+0x54>)
 8007a96:	f7fe fdd7 	bl	8006648 <USBD_CDC_RegisterInterface>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007aa0:	f7f9 fd44 	bl	800152c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007aa4:	4805      	ldr	r0, [pc, #20]	; (8007abc <MX_USB_DEVICE_Init+0x54>)
 8007aa6:	f7fe fecc 	bl	8006842 <USBD_Start>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ab0:	f7f9 fd3c 	bl	800152c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ab4:	bf00      	nop
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000140 	.word	0x20000140
 8007abc:	200004a0 	.word	0x200004a0
 8007ac0:	20000028 	.word	0x20000028
 8007ac4:	2000012c 	.word	0x2000012c

08007ac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007acc:	2200      	movs	r2, #0
 8007ace:	4905      	ldr	r1, [pc, #20]	; (8007ae4 <CDC_Init_FS+0x1c>)
 8007ad0:	4805      	ldr	r0, [pc, #20]	; (8007ae8 <CDC_Init_FS+0x20>)
 8007ad2:	f7fe fdce 	bl	8006672 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ad6:	4905      	ldr	r1, [pc, #20]	; (8007aec <CDC_Init_FS+0x24>)
 8007ad8:	4803      	ldr	r0, [pc, #12]	; (8007ae8 <CDC_Init_FS+0x20>)
 8007ada:	f7fe fde8 	bl	80066ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000b58 	.word	0x20000b58
 8007ae8:	200004a0 	.word	0x200004a0
 8007aec:	20000770 	.word	0x20000770

08007af0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007af4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	71fb      	strb	r3, [r7, #7]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	2b23      	cmp	r3, #35	; 0x23
 8007b14:	d84a      	bhi.n	8007bac <CDC_Control_FS+0xac>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <CDC_Control_FS+0x1c>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007bad 	.word	0x08007bad
 8007b20:	08007bad 	.word	0x08007bad
 8007b24:	08007bad 	.word	0x08007bad
 8007b28:	08007bad 	.word	0x08007bad
 8007b2c:	08007bad 	.word	0x08007bad
 8007b30:	08007bad 	.word	0x08007bad
 8007b34:	08007bad 	.word	0x08007bad
 8007b38:	08007bad 	.word	0x08007bad
 8007b3c:	08007bad 	.word	0x08007bad
 8007b40:	08007bad 	.word	0x08007bad
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007bad 	.word	0x08007bad
 8007b4c:	08007bad 	.word	0x08007bad
 8007b50:	08007bad 	.word	0x08007bad
 8007b54:	08007bad 	.word	0x08007bad
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007bad 	.word	0x08007bad
 8007b60:	08007bad 	.word	0x08007bad
 8007b64:	08007bad 	.word	0x08007bad
 8007b68:	08007bad 	.word	0x08007bad
 8007b6c:	08007bad 	.word	0x08007bad
 8007b70:	08007bad 	.word	0x08007bad
 8007b74:	08007bad 	.word	0x08007bad
 8007b78:	08007bad 	.word	0x08007bad
 8007b7c:	08007bad 	.word	0x08007bad
 8007b80:	08007bad 	.word	0x08007bad
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007bad 	.word	0x08007bad
 8007b90:	08007bad 	.word	0x08007bad
 8007b94:	08007bad 	.word	0x08007bad
 8007b98:	08007bad 	.word	0x08007bad
 8007b9c:	08007bad 	.word	0x08007bad
 8007ba0:	08007bad 	.word	0x08007bad
 8007ba4:	08007bad 	.word	0x08007bad
 8007ba8:	08007bad 	.word	0x08007bad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007bac:	bf00      	nop
  }

  return (USBD_OK);
 8007bae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4805      	ldr	r0, [pc, #20]	; (8007be0 <CDC_Receive_FS+0x24>)
 8007bca:	f7fe fd70 	bl	80066ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007bce:	4804      	ldr	r0, [pc, #16]	; (8007be0 <CDC_Receive_FS+0x24>)
 8007bd0:	f7fe fdb6 	bl	8006740 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007bd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200004a0 	.word	0x200004a0

08007be4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007bf4:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <CDC_Transmit_FS+0x48>)
 8007bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e00b      	b.n	8007c22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c0a:	887b      	ldrh	r3, [r7, #2]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4806      	ldr	r0, [pc, #24]	; (8007c2c <CDC_Transmit_FS+0x48>)
 8007c12:	f7fe fd2e 	bl	8006672 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c16:	4805      	ldr	r0, [pc, #20]	; (8007c2c <CDC_Transmit_FS+0x48>)
 8007c18:	f7fe fd62 	bl	80066e0 <USBD_CDC_TransmitPacket>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200004a0 	.word	0x200004a0

08007c30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2212      	movs	r2, #18
 8007c64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c66:	4b03      	ldr	r3, [pc, #12]	; (8007c74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	2000015c 	.word	0x2000015c

08007c78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2204      	movs	r2, #4
 8007c88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c8a:	4b03      	ldr	r3, [pc, #12]	; (8007c98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	20000170 	.word	0x20000170

08007c9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	6039      	str	r1, [r7, #0]
 8007ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d105      	bne.n	8007cba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	4907      	ldr	r1, [pc, #28]	; (8007cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007cb2:	4808      	ldr	r0, [pc, #32]	; (8007cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cb4:	f7ff fdf7 	bl	80078a6 <USBD_GetString>
 8007cb8:	e004      	b.n	8007cc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4904      	ldr	r1, [pc, #16]	; (8007cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007cbe:	4805      	ldr	r0, [pc, #20]	; (8007cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cc0:	f7ff fdf1 	bl	80078a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cc4:	4b02      	ldr	r3, [pc, #8]	; (8007cd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000f40 	.word	0x20000f40
 8007cd4:	080085c0 	.word	0x080085c0

08007cd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	4904      	ldr	r1, [pc, #16]	; (8007cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ce8:	4804      	ldr	r0, [pc, #16]	; (8007cfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cea:	f7ff fddc 	bl	80078a6 <USBD_GetString>
  return USBD_StrDesc;
 8007cee:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20000f40 	.word	0x20000f40
 8007cfc:	080085d8 	.word	0x080085d8

08007d00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	221a      	movs	r2, #26
 8007d10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d12:	f000 f843 	bl	8007d9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d16:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000174 	.word	0x20000174

08007d24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4907      	ldr	r1, [pc, #28]	; (8007d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d3a:	4808      	ldr	r0, [pc, #32]	; (8007d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d3c:	f7ff fdb3 	bl	80078a6 <USBD_GetString>
 8007d40:	e004      	b.n	8007d4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	4904      	ldr	r1, [pc, #16]	; (8007d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d46:	4805      	ldr	r0, [pc, #20]	; (8007d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d48:	f7ff fdad 	bl	80078a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d4c:	4b02      	ldr	r3, [pc, #8]	; (8007d58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000f40 	.word	0x20000f40
 8007d5c:	080085ec 	.word	0x080085ec

08007d60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d105      	bne.n	8007d7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	4907      	ldr	r1, [pc, #28]	; (8007d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d76:	4808      	ldr	r0, [pc, #32]	; (8007d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d78:	f7ff fd95 	bl	80078a6 <USBD_GetString>
 8007d7c:	e004      	b.n	8007d88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	4904      	ldr	r1, [pc, #16]	; (8007d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d82:	4805      	ldr	r0, [pc, #20]	; (8007d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d84:	f7ff fd8f 	bl	80078a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d88:	4b02      	ldr	r3, [pc, #8]	; (8007d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000f40 	.word	0x20000f40
 8007d98:	080085f8 	.word	0x080085f8

08007d9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007da2:	4b0f      	ldr	r3, [pc, #60]	; (8007de0 <Get_SerialNum+0x44>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <Get_SerialNum+0x48>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007dae:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <Get_SerialNum+0x4c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4413      	add	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d009      	beq.n	8007dd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	4909      	ldr	r1, [pc, #36]	; (8007dec <Get_SerialNum+0x50>)
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f814 	bl	8007df4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007dcc:	2204      	movs	r2, #4
 8007dce:	4908      	ldr	r1, [pc, #32]	; (8007df0 <Get_SerialNum+0x54>)
 8007dd0:	68b8      	ldr	r0, [r7, #8]
 8007dd2:	f000 f80f 	bl	8007df4 <IntToUnicode>
  }
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	1fff7a10 	.word	0x1fff7a10
 8007de4:	1fff7a14 	.word	0x1fff7a14
 8007de8:	1fff7a18 	.word	0x1fff7a18
 8007dec:	20000176 	.word	0x20000176
 8007df0:	20000186 	.word	0x20000186

08007df4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]
 8007e0a:	e027      	b.n	8007e5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	0f1b      	lsrs	r3, r3, #28
 8007e10:	2b09      	cmp	r3, #9
 8007e12:	d80b      	bhi.n	8007e2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	0f1b      	lsrs	r3, r3, #28
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	440b      	add	r3, r1
 8007e24:	3230      	adds	r2, #48	; 0x30
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	e00a      	b.n	8007e42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	0f1b      	lsrs	r3, r3, #28
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	4619      	mov	r1, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	440b      	add	r3, r1
 8007e3c:	3237      	adds	r2, #55	; 0x37
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	011b      	lsls	r3, r3, #4
 8007e46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4413      	add	r3, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]
 8007e5c:	7dfa      	ldrb	r2, [r7, #23]
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d3d3      	bcc.n	8007e0c <IntToUnicode+0x18>
  }
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
	...

08007e74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08a      	sub	sp, #40	; 0x28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e7c:	f107 0314 	add.w	r3, r7, #20
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	605a      	str	r2, [r3, #4]
 8007e86:	609a      	str	r2, [r3, #8]
 8007e88:	60da      	str	r2, [r3, #12]
 8007e8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e94:	d13a      	bne.n	8007f0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e96:	2300      	movs	r3, #0
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ea6:	4b1b      	ldr	r3, [pc, #108]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	613b      	str	r3, [r7, #16]
 8007eb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007eb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ec4:	230a      	movs	r3, #10
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ec8:	f107 0314 	add.w	r3, r7, #20
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4812      	ldr	r0, [pc, #72]	; (8007f18 <HAL_PCD_MspInit+0xa4>)
 8007ed0:	f7fa f90c 	bl	80020ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed8:	4a0e      	ldr	r2, [pc, #56]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ede:	6353      	str	r3, [r2, #52]	; 0x34
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	4a0a      	ldr	r2, [pc, #40]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eee:	6453      	str	r3, [r2, #68]	; 0x44
 8007ef0:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <HAL_PCD_MspInit+0xa0>)
 8007ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007efc:	2200      	movs	r2, #0
 8007efe:	2100      	movs	r1, #0
 8007f00:	2043      	movs	r0, #67	; 0x43
 8007f02:	f7fa f8bc 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f06:	2043      	movs	r0, #67	; 0x43
 8007f08:	f7fa f8d5 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	3728      	adds	r7, #40	; 0x28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40020000 	.word	0x40020000

08007f1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7fe fcd0 	bl	80068d8 <USBD_LL_SetupStage>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f52:	78fa      	ldrb	r2, [r7, #3]
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	440b      	add	r3, r1
 8007f60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f7fe fd0a 	bl	8006982 <USBD_LL_DataOutStage>
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	3348      	adds	r3, #72	; 0x48
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f7fe fd53 	bl	8006a48 <USBD_LL_DataInStage>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe fe67 	bl	8006c8c <USBD_LL_SOF>
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d001      	beq.n	8007fde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007fda:	f7f9 faa7 	bl	800152c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fe4:	7bfa      	ldrb	r2, [r7, #15]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fe11 	bl	8006c10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fdbd 	bl	8006b74 <USBD_LL_Reset>
}
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fe0c 	bl	8006c30 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800802a:	f043 0301 	orr.w	r3, r3, #1
 800802e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008038:	4b04      	ldr	r3, [pc, #16]	; (800804c <HAL_PCD_SuspendCallback+0x48>)
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	4a03      	ldr	r2, [pc, #12]	; (800804c <HAL_PCD_SuspendCallback+0x48>)
 800803e:	f043 0306 	orr.w	r3, r3, #6
 8008042:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	e000ed00 	.word	0xe000ed00

08008050 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fdfc 	bl	8006c5c <USBD_LL_Resume>
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fe4a 	bl	8006d1c <USBD_LL_IsoOUTIncomplete>
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fe12 	bl	8006cd0 <USBD_LL_IsoINIncomplete>
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fe50 	bl	8006d68 <USBD_LL_DevConnected>
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fe4d 	bl	8006d7e <USBD_LL_DevDisconnected>
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d13c      	bne.n	8008176 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80080fc:	4a20      	ldr	r2, [pc, #128]	; (8008180 <USBD_LL_Init+0x94>)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <USBD_LL_Init+0x94>)
 8008108:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800810c:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <USBD_LL_Init+0x94>)
 800810e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008112:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008114:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <USBD_LL_Init+0x94>)
 8008116:	2204      	movs	r2, #4
 8008118:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <USBD_LL_Init+0x94>)
 800811c:	2202      	movs	r2, #2
 800811e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008120:	4b17      	ldr	r3, [pc, #92]	; (8008180 <USBD_LL_Init+0x94>)
 8008122:	2200      	movs	r2, #0
 8008124:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008126:	4b16      	ldr	r3, [pc, #88]	; (8008180 <USBD_LL_Init+0x94>)
 8008128:	2202      	movs	r2, #2
 800812a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800812c:	4b14      	ldr	r3, [pc, #80]	; (8008180 <USBD_LL_Init+0x94>)
 800812e:	2200      	movs	r2, #0
 8008130:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <USBD_LL_Init+0x94>)
 8008134:	2200      	movs	r2, #0
 8008136:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008138:	4b11      	ldr	r3, [pc, #68]	; (8008180 <USBD_LL_Init+0x94>)
 800813a:	2200      	movs	r2, #0
 800813c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800813e:	4b10      	ldr	r3, [pc, #64]	; (8008180 <USBD_LL_Init+0x94>)
 8008140:	2200      	movs	r2, #0
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008144:	4b0e      	ldr	r3, [pc, #56]	; (8008180 <USBD_LL_Init+0x94>)
 8008146:	2200      	movs	r2, #0
 8008148:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800814a:	480d      	ldr	r0, [pc, #52]	; (8008180 <USBD_LL_Init+0x94>)
 800814c:	f7fa fecb 	bl	8002ee6 <HAL_PCD_Init>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008156:	f7f9 f9e9 	bl	800152c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800815a:	2180      	movs	r1, #128	; 0x80
 800815c:	4808      	ldr	r0, [pc, #32]	; (8008180 <USBD_LL_Init+0x94>)
 800815e:	f7fc f828 	bl	80041b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008162:	2240      	movs	r2, #64	; 0x40
 8008164:	2100      	movs	r1, #0
 8008166:	4806      	ldr	r0, [pc, #24]	; (8008180 <USBD_LL_Init+0x94>)
 8008168:	f7fb ffdc 	bl	8004124 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800816c:	2280      	movs	r2, #128	; 0x80
 800816e:	2101      	movs	r1, #1
 8008170:	4803      	ldr	r0, [pc, #12]	; (8008180 <USBD_LL_Init+0x94>)
 8008172:	f7fb ffd7 	bl	8004124 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20001140 	.word	0x20001140

08008184 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800819a:	4618      	mov	r0, r3
 800819c:	f7fa ffc0 	bl	8003120 <HAL_PCD_Start>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f942 	bl	8008430 <USBD_Get_USB_Status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	461a      	mov	r2, r3
 80081c8:	4603      	mov	r3, r0
 80081ca:	70fb      	strb	r3, [r7, #3]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70bb      	strb	r3, [r7, #2]
 80081d0:	4613      	mov	r3, r2
 80081d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081e2:	78bb      	ldrb	r3, [r7, #2]
 80081e4:	883a      	ldrh	r2, [r7, #0]
 80081e6:	78f9      	ldrb	r1, [r7, #3]
 80081e8:	f7fb fba4 	bl	8003934 <HAL_PCD_EP_Open>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 f91c 	bl	8008430 <USBD_Get_USB_Status>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7fb fbed 	bl	8003a04 <HAL_PCD_EP_Close>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 f8fd 	bl	8008430 <USBD_Get_USB_Status>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823a:	7bbb      	ldrb	r3, [r7, #14]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7fb fcc5 	bl	8003bf2 <HAL_PCD_EP_SetStall>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f8de 	bl	8008430 <USBD_Get_USB_Status>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008278:	7bbb      	ldrb	r3, [r7, #14]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	460b      	mov	r3, r1
 800828c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fb fd0a 	bl	8003cba <HAL_PCD_EP_ClrStall>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f8bf 	bl	8008430 <USBD_Get_USB_Status>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	da0b      	bge.n	80082f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082e2:	68f9      	ldr	r1, [r7, #12]
 80082e4:	4613      	mov	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	333e      	adds	r3, #62	; 0x3e
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	e00b      	b.n	800830c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	4613      	mov	r3, r2
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800830a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f7fb fad7 	bl	80038ea <HAL_PCD_SetAddress>
 800833c:	4603      	mov	r3, r0
 800833e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	4618      	mov	r0, r3
 8008344:	f000 f874 	bl	8008430 <USBD_Get_USB_Status>
 8008348:	4603      	mov	r3, r0
 800834a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800834c:	7bbb      	ldrb	r3, [r7, #14]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
 8008362:	460b      	mov	r3, r1
 8008364:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008374:	7af9      	ldrb	r1, [r7, #11]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	f7fb fbf0 	bl	8003b5e <HAL_PCD_EP_Transmit>
 800837e:	4603      	mov	r3, r0
 8008380:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f853 	bl	8008430 <USBD_Get_USB_Status>
 800838a:	4603      	mov	r3, r0
 800838c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800838e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	460b      	mov	r3, r1
 80083a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083b6:	7af9      	ldrb	r1, [r7, #11]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	f7fb fb6c 	bl	8003a98 <HAL_PCD_EP_Receive>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f832 	bl	8008430 <USBD_Get_USB_Status>
 80083cc:	4603      	mov	r3, r0
 80083ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	460b      	mov	r3, r1
 80083e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083ec:	78fa      	ldrb	r2, [r7, #3]
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fb fb9c 	bl	8003b2e <HAL_PCD_EP_GetRxCount>
 80083f6:	4603      	mov	r3, r0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008408:	4b03      	ldr	r3, [pc, #12]	; (8008418 <USBD_static_malloc+0x18>)
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	200001c4 	.word	0x200001c4

0800841c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]

}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	2b03      	cmp	r3, #3
 8008442:	d817      	bhi.n	8008474 <USBD_Get_USB_Status+0x44>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <USBD_Get_USB_Status+0x1c>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	0800845d 	.word	0x0800845d
 8008450:	08008463 	.word	0x08008463
 8008454:	08008469 	.word	0x08008469
 8008458:	0800846f 	.word	0x0800846f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
    break;
 8008460:	e00b      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008462:	2303      	movs	r3, #3
 8008464:	73fb      	strb	r3, [r7, #15]
    break;
 8008466:	e008      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
    break;
 800846c:	e005      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800846e:	2303      	movs	r3, #3
 8008470:	73fb      	strb	r3, [r7, #15]
    break;
 8008472:	e002      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008474:	2303      	movs	r3, #3
 8008476:	73fb      	strb	r3, [r7, #15]
    break;
 8008478:	bf00      	nop
  }
  return usb_status;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <__libc_init_array>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4d0d      	ldr	r5, [pc, #52]	; (80084c0 <__libc_init_array+0x38>)
 800848c:	4c0d      	ldr	r4, [pc, #52]	; (80084c4 <__libc_init_array+0x3c>)
 800848e:	1b64      	subs	r4, r4, r5
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	2600      	movs	r6, #0
 8008494:	42a6      	cmp	r6, r4
 8008496:	d109      	bne.n	80084ac <__libc_init_array+0x24>
 8008498:	4d0b      	ldr	r5, [pc, #44]	; (80084c8 <__libc_init_array+0x40>)
 800849a:	4c0c      	ldr	r4, [pc, #48]	; (80084cc <__libc_init_array+0x44>)
 800849c:	f000 f87c 	bl	8008598 <_init>
 80084a0:	1b64      	subs	r4, r4, r5
 80084a2:	10a4      	asrs	r4, r4, #2
 80084a4:	2600      	movs	r6, #0
 80084a6:	42a6      	cmp	r6, r4
 80084a8:	d105      	bne.n	80084b6 <__libc_init_array+0x2e>
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b0:	4798      	blx	r3
 80084b2:	3601      	adds	r6, #1
 80084b4:	e7ee      	b.n	8008494 <__libc_init_array+0xc>
 80084b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ba:	4798      	blx	r3
 80084bc:	3601      	adds	r6, #1
 80084be:	e7f2      	b.n	80084a6 <__libc_init_array+0x1e>
 80084c0:	08008650 	.word	0x08008650
 80084c4:	08008650 	.word	0x08008650
 80084c8:	08008650 	.word	0x08008650
 80084cc:	08008654 	.word	0x08008654

080084d0 <__itoa>:
 80084d0:	1e93      	subs	r3, r2, #2
 80084d2:	2b22      	cmp	r3, #34	; 0x22
 80084d4:	b510      	push	{r4, lr}
 80084d6:	460c      	mov	r4, r1
 80084d8:	d904      	bls.n	80084e4 <__itoa+0x14>
 80084da:	2300      	movs	r3, #0
 80084dc:	700b      	strb	r3, [r1, #0]
 80084de:	461c      	mov	r4, r3
 80084e0:	4620      	mov	r0, r4
 80084e2:	bd10      	pop	{r4, pc}
 80084e4:	2a0a      	cmp	r2, #10
 80084e6:	d109      	bne.n	80084fc <__itoa+0x2c>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	da07      	bge.n	80084fc <__itoa+0x2c>
 80084ec:	232d      	movs	r3, #45	; 0x2d
 80084ee:	700b      	strb	r3, [r1, #0]
 80084f0:	4240      	negs	r0, r0
 80084f2:	2101      	movs	r1, #1
 80084f4:	4421      	add	r1, r4
 80084f6:	f000 f80d 	bl	8008514 <__utoa>
 80084fa:	e7f1      	b.n	80084e0 <__itoa+0x10>
 80084fc:	2100      	movs	r1, #0
 80084fe:	e7f9      	b.n	80084f4 <__itoa+0x24>

08008500 <itoa>:
 8008500:	f7ff bfe6 	b.w	80084d0 <__itoa>

08008504 <memset>:
 8008504:	4402      	add	r2, r0
 8008506:	4603      	mov	r3, r0
 8008508:	4293      	cmp	r3, r2
 800850a:	d100      	bne.n	800850e <memset+0xa>
 800850c:	4770      	bx	lr
 800850e:	f803 1b01 	strb.w	r1, [r3], #1
 8008512:	e7f9      	b.n	8008508 <memset+0x4>

08008514 <__utoa>:
 8008514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008516:	4c1f      	ldr	r4, [pc, #124]	; (8008594 <__utoa+0x80>)
 8008518:	b08b      	sub	sp, #44	; 0x2c
 800851a:	4605      	mov	r5, r0
 800851c:	460b      	mov	r3, r1
 800851e:	466e      	mov	r6, sp
 8008520:	f104 0c20 	add.w	ip, r4, #32
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	6861      	ldr	r1, [r4, #4]
 8008528:	4637      	mov	r7, r6
 800852a:	c703      	stmia	r7!, {r0, r1}
 800852c:	3408      	adds	r4, #8
 800852e:	4564      	cmp	r4, ip
 8008530:	463e      	mov	r6, r7
 8008532:	d1f7      	bne.n	8008524 <__utoa+0x10>
 8008534:	7921      	ldrb	r1, [r4, #4]
 8008536:	7139      	strb	r1, [r7, #4]
 8008538:	1e91      	subs	r1, r2, #2
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	6038      	str	r0, [r7, #0]
 800853e:	2922      	cmp	r1, #34	; 0x22
 8008540:	f04f 0100 	mov.w	r1, #0
 8008544:	d904      	bls.n	8008550 <__utoa+0x3c>
 8008546:	7019      	strb	r1, [r3, #0]
 8008548:	460b      	mov	r3, r1
 800854a:	4618      	mov	r0, r3
 800854c:	b00b      	add	sp, #44	; 0x2c
 800854e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008550:	1e58      	subs	r0, r3, #1
 8008552:	4684      	mov	ip, r0
 8008554:	fbb5 f7f2 	udiv	r7, r5, r2
 8008558:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800855c:	fb02 5617 	mls	r6, r2, r7, r5
 8008560:	4476      	add	r6, lr
 8008562:	460c      	mov	r4, r1
 8008564:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008568:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800856c:	462e      	mov	r6, r5
 800856e:	42b2      	cmp	r2, r6
 8008570:	f101 0101 	add.w	r1, r1, #1
 8008574:	463d      	mov	r5, r7
 8008576:	d9ed      	bls.n	8008554 <__utoa+0x40>
 8008578:	2200      	movs	r2, #0
 800857a:	545a      	strb	r2, [r3, r1]
 800857c:	1919      	adds	r1, r3, r4
 800857e:	1aa5      	subs	r5, r4, r2
 8008580:	42aa      	cmp	r2, r5
 8008582:	dae2      	bge.n	800854a <__utoa+0x36>
 8008584:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008588:	780e      	ldrb	r6, [r1, #0]
 800858a:	7006      	strb	r6, [r0, #0]
 800858c:	3201      	adds	r2, #1
 800858e:	f801 5901 	strb.w	r5, [r1], #-1
 8008592:	e7f4      	b.n	800857e <__utoa+0x6a>
 8008594:	08008620 	.word	0x08008620

08008598 <_init>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr

080085a4 <_fini>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr
