
8_ENCODER_POLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008094  08008094  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800809c  0800809c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080080a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013cc  200001f4  08008298  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  08008298  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001752d  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ae  00000000  00000000  00037751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0003ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  0003bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192a0  00000000  00000000  0003ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001429f  00000000  00000000  00055d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008995e  00000000  00000000  00069fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f392d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  000f3980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fa4 	.word	0x08007fa4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08007fa4 	.word	0x08007fa4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_GPIO_Init+0xd0>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <MX_GPIO_Init+0xd4>)
 8000616:	f000 ff83 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <MX_GPIO_Init+0xd4>)
 8000634:	f000 fdd8 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_Pin|GC_Pin|GA_Pin|GB_Pin;
 8000638:	23e1      	movs	r3, #225	; 0xe1
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_GPIO_Init+0xd8>)
 800064c:	f000 fdcc 	bl	80011e8 <HAL_GPIO_Init>

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40020800 	.word	0x40020800
 8000660:	40020000 	.word	0x40020000

08000664 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <MX_I2C1_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_I2C1_Init+0x58>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_I2C1_Init+0x50>)
 80006a2:	f000 ff71 	bl	8001588 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 fb20 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200004b0 	.word	0x200004b0
 80006b8:	40005400 	.word	0x40005400
 80006bc:	000186a0 	.word	0x000186a0

080006c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a19      	ldr	r2, [pc, #100]	; (8000744 <HAL_I2C_MspInit+0x84>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d12c      	bne.n	800073c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_I2C_MspInit+0x88>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <HAL_I2C_MspInit+0x88>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_I2C_MspInit+0x88>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000704:	2312      	movs	r3, #18
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000710:	2304      	movs	r3, #4
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <HAL_I2C_MspInit+0x8c>)
 800071c:	f000 fd64 	bl	80011e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_I2C_MspInit+0x88>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_I2C_MspInit+0x88>)
 800072a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_I2C_MspInit+0x88>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40005400 	.word	0x40005400
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400

08000750 <LCD_SendInternal>:
        0b00110,
        0b00000
};


HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af02      	add	r7, sp, #8
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	460b      	mov	r3, r1
 800075c:	71bb      	strb	r3, [r7, #6]
 800075e:	4613      	mov	r3, r2
 8000760:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	b299      	uxth	r1, r3
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2201      	movs	r2, #1
 800076c:	4822      	ldr	r0, [pc, #136]	; (80007f8 <LCD_SendInternal+0xa8>)
 800076e:	f001 f94d 	bl	8001a0c <HAL_I2C_IsDeviceReady>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800077c:	e7f1      	b.n	8000762 <LCD_SendInternal+0x12>
            break;
 800077e:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	f023 030f 	bic.w	r3, r3, #15
 8000786:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800078e:	7bba      	ldrb	r2, [r7, #14]
 8000790:	797b      	ldrb	r3, [r7, #5]
 8000792:	4313      	orrs	r3, r2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f043 030c 	orr.w	r3, r3, #12
 800079a:	b2db      	uxtb	r3, r3
 800079c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800079e:	7bba      	ldrb	r2, [r7, #14]
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80007ae:	7b7a      	ldrb	r2, [r7, #13]
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f043 030c 	orr.w	r3, r3, #12
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80007be:	7b7a      	ldrb	r2, [r7, #13]
 80007c0:	797b      	ldrb	r3, [r7, #5]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	b299      	uxth	r1, r3
 80007d2:	f107 0208 	add.w	r2, r7, #8
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2304      	movs	r3, #4
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <LCD_SendInternal+0xa8>)
 80007e0:	f001 f816 	bl	8001810 <HAL_I2C_Master_Transmit>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]
    LCD_Delay_ms(5);
 80007e8:	2005      	movs	r0, #5
 80007ea:	f000 f929 	bl	8000a40 <LCD_Delay_ms>
    return res;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200004b0 	.word	0x200004b0

080007fc <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, cmd, 0);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	204e      	movs	r0, #78	; 0x4e
 800080e:	f7ff ff9f 	bl	8000750 <LCD_SendInternal>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, data, PIN_RS);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2201      	movs	r2, #1
 8000828:	4619      	mov	r1, r3
 800082a:	204e      	movs	r0, #78	; 0x4e
 800082c:	f7ff ff90 	bl	8000750 <LCD_SendInternal>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <LCD_Init>:

void LCD_Init(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	LCD_Opt.CurrentX = 0;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <LCD_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	70da      	strb	r2, [r3, #3]
	LCD_Opt.CurrentY = 0;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <LCD_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	711a      	strb	r2, [r3, #4]
	LCD_Opt.DisplayFunction = LCD_8BITMODE | LCD_5x8DOTS | LCD_2LINE;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <LCD_Init+0x74>)
 800084a:	2218      	movs	r2, #24
 800084c:	705a      	strb	r2, [r3, #1]
	LCD_Opt.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <LCD_Init+0x74>)
 8000850:	2204      	movs	r2, #4
 8000852:	701a      	strb	r2, [r3, #0]
	LCD_Opt.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <LCD_Init+0x74>)
 8000856:	2202      	movs	r2, #2
 8000858:	709a      	strb	r2, [r3, #2]

    // 8-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(LCD_FUNCTIONSET | LCD_Opt.DisplayFunction);//0x38
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <LCD_Init+0x74>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffc9 	bl	80007fc <LCD_SendCommand>
    // display & cursor home
    LCD_SendCommand(LCD_RETURNHOME); //0x02
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff ffc6 	bl	80007fc <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(LCD_DISPLAYCONTROL | LCD_Opt.DisplayControl);//0x0c
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <LCD_Init+0x74>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffbe 	bl	80007fc <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(LCD_CLEARDISPLAY); //0x01
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ffbb 	bl	80007fc <LCD_SendCommand>

    LCD_SendCommand(LCD_ENTRYMODESET | LCD_Opt.DisplayMode); //0x06
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <LCD_Init+0x74>)
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ffb3 	bl	80007fc <LCD_SendCommand>

    LCD_CreateSpecialChar(0, special1);
 8000896:	4906      	ldr	r1, [pc, #24]	; (80008b0 <LCD_Init+0x78>)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f84b 	bl	8000934 <LCD_CreateSpecialChar>
    LCD_CreateSpecialChar(1, special2);
 800089e:	4905      	ldr	r1, [pc, #20]	; (80008b4 <LCD_Init+0x7c>)
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 f847 	bl	8000934 <LCD_CreateSpecialChar>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000210 	.word	0x20000210
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008

080008b8 <LCD_Clear>:

void LCD_Clear()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_CLEARDISPLAY);
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff ff9d 	bl	80007fc <LCD_SendCommand>
	LCD_Delay_ms(2);
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 f8bc 	bl	8000a40 <LCD_Delay_ms>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <LCD_SetCursor>:
	LCD_SendCommand(LCD_RETURNHOME);
	LCD_Delay_ms(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <LCD_SetCursor+0x60>)
 80008de:	f107 0408 	add.w	r4, r7, #8
 80008e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= _LCD_ROWS)
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d901      	bls.n	80008f2 <LCD_SetCursor+0x26>
		row = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71bb      	strb	r3, [r7, #6]
	LCD_Opt.CurrentX = col;
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <LCD_SetCursor+0x64>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	70d3      	strb	r3, [r2, #3]
	LCD_Opt.CurrentY = row;
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LCD_SetCursor+0x64>)
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	7113      	strb	r3, [r2, #4]
	LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80008fe:	79bb      	ldrb	r3, [r7, #6]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	f107 0218 	add.w	r2, r7, #24
 8000906:	4413      	add	r3, r2
 8000908:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4413      	add	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	b25b      	sxtb	r3, r3
 8000916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800091a:	b25b      	sxtb	r3, r3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff6c 	bl	80007fc <LCD_SendCommand>
}
 8000924:	bf00      	nop
 8000926:	371c      	adds	r7, #28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	08007fbc 	.word	0x08007fbc
 8000930:	20000210 	.word	0x20000210

08000934 <LCD_CreateSpecialChar>:
	LCD_Opt.DisplayMode &= ~LCD_ENTRYSHIFTINC;
	LCD_SendCommand(LCD_ENTRYMODESET | LCD_Opt.DisplayMode);
}

void LCD_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	71fb      	strb	r3, [r7, #7]
  LCD_SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	b25b      	sxtb	r3, r3
 800094e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000952:	b25b      	sxtb	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff50 	bl	80007fc <LCD_SendCommand>
  for (int i=0; i<8; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e009      	b.n	8000976 <LCD_CreateSpecialChar+0x42>
  {
    LCD_SendData(charmap[i]);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff55 	bl	800081a <LCD_SendData>
  for (int i=0; i<8; i++)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b07      	cmp	r3, #7
 800097a:	ddf2      	ble.n	8000962 <LCD_CreateSpecialChar+0x2e>
  }
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <LCD_Puts>:
{
  while(*c) LCD_SendData(*c++);
}

void LCD_Puts(uint8_t x, uint8_t y, char* str)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	603a      	str	r2, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	460b      	mov	r3, r1
 8000996:	71bb      	strb	r3, [r7, #6]
	LCD_SetCursor(x, y);
 8000998:	79ba      	ldrb	r2, [r7, #6]
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff94 	bl	80008cc <LCD_SetCursor>
	while (*str)
 80009a4:	e040      	b.n	8000a28 <LCD_Puts+0xa0>
	{
		if (LCD_Opt.CurrentX >= _LCD_COLS)
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <LCD_Puts+0xb4>)
 80009a8:	78db      	ldrb	r3, [r3, #3]
 80009aa:	2b0f      	cmp	r3, #15
 80009ac:	d910      	bls.n	80009d0 <LCD_Puts+0x48>
		{
			LCD_Opt.CurrentX = 0;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <LCD_Puts+0xb4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	70da      	strb	r2, [r3, #3]
			LCD_Opt.CurrentY++;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <LCD_Puts+0xb4>)
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <LCD_Puts+0xb4>)
 80009be:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <LCD_Puts+0xb4>)
 80009c2:	78db      	ldrb	r3, [r3, #3]
 80009c4:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <LCD_Puts+0xb4>)
 80009c6:	7912      	ldrb	r2, [r2, #4]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff7e 	bl	80008cc <LCD_SetCursor>
		}
		if (*str == '\n')
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b0a      	cmp	r3, #10
 80009d6:	d10e      	bne.n	80009f6 <LCD_Puts+0x6e>
		{
			LCD_Opt.CurrentY++;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <LCD_Puts+0xb4>)
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <LCD_Puts+0xb4>)
 80009e2:	711a      	strb	r2, [r3, #4]
			LCD_SetCursor(LCD_Opt.CurrentX, LCD_Opt.CurrentY);
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <LCD_Puts+0xb4>)
 80009e6:	78db      	ldrb	r3, [r3, #3]
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <LCD_Puts+0xb4>)
 80009ea:	7912      	ldrb	r2, [r2, #4]
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff6c 	bl	80008cc <LCD_SetCursor>
 80009f4:	e015      	b.n	8000a22 <LCD_Puts+0x9a>
		}
		else if (*str == '\r')
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b0d      	cmp	r3, #13
 80009fc:	d106      	bne.n	8000a0c <LCD_Puts+0x84>
		{
			LCD_SetCursor(0, LCD_Opt.CurrentY);
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Puts+0xb4>)
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	4619      	mov	r1, r3
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ff61 	bl	80008cc <LCD_SetCursor>
 8000a0a:	e00a      	b.n	8000a22 <LCD_Puts+0x9a>
		}
		else
		{
			LCD_SendData(*str);//LCD_Print(*str);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff02 	bl	800081a <LCD_SendData>
			LCD_Opt.CurrentX++;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Puts+0xb4>)
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <LCD_Puts+0xb4>)
 8000a20:	70da      	strb	r2, [r3, #3]
		}
		str++;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	603b      	str	r3, [r7, #0]
	while (*str)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1ba      	bne.n	80009a6 <LCD_Puts+0x1e>
	}
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000210 	.word	0x20000210

08000a40 <LCD_Delay_ms>:
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));
}

void LCD_Delay_ms(uint8_t ms)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  #if _LCD_USE_FREERTOS==1
  osDelay(ms);
  #else
  HAL_Delay(ms);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fa95 	bl	8000f7c <HAL_Delay>
  #endif
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <rotaryEnc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rotaryEnc(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
	uint8_t nowEnc = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	71bb      	strb	r3, [r7, #6]
	uint8_t returnEnc = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
	static uint8_t oldEnc = 0;

	nowEnc = (SWB << 1) + SWA;
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <rotaryEnc+0x70>)
 8000a6e:	f000 fd3f 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <rotaryEnc+0x20>
 8000a78:	2402      	movs	r4, #2
 8000a7a:	e000      	b.n	8000a7e <rotaryEnc+0x22>
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <rotaryEnc+0x70>)
 8000a82:	f000 fd35 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4423      	add	r3, r4
 8000a94:	71bb      	strb	r3, [r7, #6]

	if (oldEnc == 0 && nowEnc == 1) {
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <rotaryEnc+0x74>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d105      	bne.n	8000aaa <rotaryEnc+0x4e>
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d102      	bne.n	8000aaa <rotaryEnc+0x4e>
		returnEnc = 1; // CW
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	e008      	b.n	8000abc <rotaryEnc+0x60>
	} else if (oldEnc == 0 && nowEnc == 2) {
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <rotaryEnc+0x74>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d104      	bne.n	8000abc <rotaryEnc+0x60>
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d101      	bne.n	8000abc <rotaryEnc+0x60>
		returnEnc = 2; // CCW
 8000ab8:	2302      	movs	r3, #2
 8000aba:	71fb      	strb	r3, [r7, #7]
	}

	oldEnc = nowEnc;
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <rotaryEnc+0x74>)
 8000abe:	79bb      	ldrb	r3, [r7, #6]
 8000ac0:	7013      	strb	r3, [r2, #0]

	return returnEnc;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	2000027e 	.word	0x2000027e

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b598      	push	{r3, r4, r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad8:	f000 f9de 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f89e 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f7ff fd52 	bl	8000588 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ae4:	f7ff fdbe 	bl	8000664 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000ae8:	f006 f888 	bl	8006bfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000aec:	f7ff fea4 	bl	8000838 <LCD_Init>

  LCD_SetCursor(0, 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff feea 	bl	80008cc <LCD_SetCursor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  enc = rotaryEnc();
 8000af8:	f7ff ffb0 	bl	8000a5c <rotaryEnc>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <main+0x120>)
 8000b02:	701a      	strb	r2, [r3, #0]

	  if (enc == 1) {
 8000b04:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <main+0x120>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d105      	bne.n	8000b18 <main+0x44>
		  encVal++;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <main+0x124>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <main+0x124>)
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e008      	b.n	8000b2a <main+0x56>
	  } else if (enc == 2) {
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <main+0x120>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d104      	bne.n	8000b2a <main+0x56>
		  encVal--;
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <main+0x124>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	4a34      	ldr	r2, [pc, #208]	; (8000bf8 <main+0x124>)
 8000b28:	6013      	str	r3, [r2, #0]
	  }

	  if (encVal != oldEncVal) {
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <main+0x124>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <main+0x128>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d02e      	beq.n	8000b94 <main+0xc0>
		  sprintf(MSG, "ENC Tick: %d\r\n", encVal);
 8000b36:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <main+0x124>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4930      	ldr	r1, [pc, #192]	; (8000c00 <main+0x12c>)
 8000b3e:	4831      	ldr	r0, [pc, #196]	; (8000c04 <main+0x130>)
 8000b40:	f006 fdb8 	bl	80076b4 <siprintf>
		  itoa(encVal, lcdMsg, 10);
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <main+0x124>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	220a      	movs	r2, #10
 8000b4a:	492f      	ldr	r1, [pc, #188]	; (8000c08 <main+0x134>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 fda7 	bl	80076a0 <itoa>
		  if (strlen(oldMsg) != strlen(lcdMsg)) LCD_Clear();
 8000b52:	482e      	ldr	r0, [pc, #184]	; (8000c0c <main+0x138>)
 8000b54:	f7ff fb44 	bl	80001e0 <strlen>
 8000b58:	4604      	mov	r4, r0
 8000b5a:	482b      	ldr	r0, [pc, #172]	; (8000c08 <main+0x134>)
 8000b5c:	f7ff fb40 	bl	80001e0 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	429c      	cmp	r4, r3
 8000b64:	d001      	beq.n	8000b6a <main+0x96>
 8000b66:	f7ff fea7 	bl	80008b8 <LCD_Clear>
		  LCD_Puts(0, 0, lcdMsg);
 8000b6a:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <main+0x134>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff ff0a 	bl	8000988 <LCD_Puts>
		  while (CDC_Transmit_FS(MSG, strlen(MSG)) == USBD_OK) {}
 8000b74:	bf00      	nop
 8000b76:	4823      	ldr	r0, [pc, #140]	; (8000c04 <main+0x130>)
 8000b78:	f7ff fb32 	bl	80001e0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4820      	ldr	r0, [pc, #128]	; (8000c04 <main+0x130>)
 8000b82:	f006 f8f9 	bl	8006d78 <CDC_Transmit_FS>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f4      	beq.n	8000b76 <main+0xa2>
		  oldEncVal = encVal;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <main+0x124>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <main+0x128>)
 8000b92:	6013      	str	r3, [r2, #0]
	  }

	  if (SWC != oldBt && SWC) {
 8000b94:	2120      	movs	r1, #32
 8000b96:	481e      	ldr	r0, [pc, #120]	; (8000c10 <main+0x13c>)
 8000b98:	f000 fcaa 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2301      	moveq	r3, #1
 8000ba4:	2300      	movne	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <main+0x140>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d00b      	beq.n	8000bca <main+0xf6>
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <main+0x13c>)
 8000bb6:	f000 fc9b 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d104      	bne.n	8000bca <main+0xf6>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc4:	4814      	ldr	r0, [pc, #80]	; (8000c18 <main+0x144>)
 8000bc6:	f000 fcc4 	bl	8001552 <HAL_GPIO_TogglePin>
	  }

	  oldBt = SWC;
 8000bca:	2120      	movs	r1, #32
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <main+0x13c>)
 8000bce:	f000 fc8f 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf0c      	ite	eq
 8000bd8:	2301      	moveq	r3, #1
 8000bda:	2300      	movne	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <main+0x140>)
 8000be2:	701a      	strb	r2, [r3, #0]
	  strcpy(oldMsg, lcdMsg);
 8000be4:	4908      	ldr	r1, [pc, #32]	; (8000c08 <main+0x134>)
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <main+0x138>)
 8000be8:	f006 fd84 	bl	80076f4 <strcpy>

	  HAL_Delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 f9c5 	bl	8000f7c <HAL_Delay>
	  enc = rotaryEnc();
 8000bf2:	e781      	b.n	8000af8 <main+0x24>
 8000bf4:	20000215 	.word	0x20000215
 8000bf8:	20000218 	.word	0x20000218
 8000bfc:	2000021c 	.word	0x2000021c
 8000c00:	08007fcc 	.word	0x08007fcc
 8000c04:	20000220 	.word	0x20000220
 8000c08:	20000240 	.word	0x20000240
 8000c0c:	20000260 	.word	0x20000260
 8000c10:	40020000 	.word	0x40020000
 8000c14:	2000023e 	.word	0x2000023e
 8000c18:	40020800 	.word	0x40020800

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	; 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	2230      	movs	r2, #48	; 0x30
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 fd3a 	bl	80076a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <SystemClock_Config+0xcc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <SystemClock_Config+0xd0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <SystemClock_Config+0xd0>)
 8000c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c90:	2319      	movs	r3, #25
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c94:	23c0      	movs	r3, #192	; 0xc0
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000c98:	2306      	movs	r3, #6
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fb6b 	bl	8003380 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cb0:	f000 f81e 	bl	8000cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fdce 	bl	8003870 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cda:	f000 f809 	bl	8000cf0 <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	; 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40007000 	.word	0x40007000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <NMI_Handler+0x4>

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f000 f8d0 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <OTG_FS_IRQHandler+0x10>)
 8000da6:	f001 fab8 	bl	800231a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200011a8 	.word	0x200011a8

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f006 fc1a 	bl	800761c <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20010000 	.word	0x20010000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000280 	.word	0x20000280
 8000e1c:	200015c0 	.word	0x200015c0

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e60:	4c0b      	ldr	r4, [pc, #44]	; (8000e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd7 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f006 fbd9 	bl	8007628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fe2d 	bl	8000ad4 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000e88:	080080a4 	.word	0x080080a4
  ldr r2, =_sbss
 8000e8c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000e90:	200015c0 	.word	0x200015c0

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f94f 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff ff16 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f967 	bl	80011ce <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f92f 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000010 	.word	0x20000010
 8000f34:	20000018 	.word	0x20000018
 8000f38:	20000014 	.word	0x20000014

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000018 	.word	0x20000018
 8000f60:	20000504 	.word	0x20000504

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000504 	.word	0x20000504

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000018 	.word	0x20000018

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e159      	b.n	80014b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8148 	bne.w	80014b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80a2 	beq.w	80014b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <HAL_GPIO_Init+0x2e8>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a56      	ldr	r2, [pc, #344]	; (80014d0 <HAL_GPIO_Init+0x2e8>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b54      	ldr	r3, [pc, #336]	; (80014d0 <HAL_GPIO_Init+0x2e8>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x2ec>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a49      	ldr	r2, [pc, #292]	; (80014d8 <HAL_GPIO_Init+0x2f0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x202>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_GPIO_Init+0x2f4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x1fe>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a47      	ldr	r2, [pc, #284]	; (80014e0 <HAL_GPIO_Init+0x2f8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x1fa>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <HAL_GPIO_Init+0x2fc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x1f6>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a45      	ldr	r2, [pc, #276]	; (80014e8 <HAL_GPIO_Init+0x300>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x1f2>
 80013d6:	2304      	movs	r3, #4
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013da:	2307      	movs	r3, #7
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x204>
 80013ea:	2300      	movs	r3, #0
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fc:	4935      	ldr	r1, [pc, #212]	; (80014d4 <HAL_GPIO_Init+0x2ec>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <HAL_GPIO_Init+0x304>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142e:	4a2f      	ldr	r2, [pc, #188]	; (80014ec <HAL_GPIO_Init+0x304>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_GPIO_Init+0x304>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001458:	4a24      	ldr	r2, [pc, #144]	; (80014ec <HAL_GPIO_Init+0x304>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_GPIO_Init+0x304>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <HAL_GPIO_Init+0x304>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_GPIO_Init+0x304>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_GPIO_Init+0x304>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	f67f aea2 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001564:	887a      	ldrh	r2, [r7, #2]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	041a      	lsls	r2, r3, #16
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43d9      	mvns	r1, r3
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	400b      	ands	r3, r1
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e12b      	b.n	80017f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff f886 	bl	80006c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2224      	movs	r2, #36	; 0x24
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015ec:	f002 fae8 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 80015f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a81      	ldr	r2, [pc, #516]	; (80017fc <HAL_I2C_Init+0x274>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d807      	bhi.n	800160c <HAL_I2C_Init+0x84>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a80      	ldr	r2, [pc, #512]	; (8001800 <HAL_I2C_Init+0x278>)
 8001600:	4293      	cmp	r3, r2
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e006      	b.n	800161a <HAL_I2C_Init+0x92>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a7d      	ldr	r2, [pc, #500]	; (8001804 <HAL_I2C_Init+0x27c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	bf94      	ite	ls
 8001614:	2301      	movls	r3, #1
 8001616:	2300      	movhi	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0e7      	b.n	80017f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a78      	ldr	r2, [pc, #480]	; (8001808 <HAL_I2C_Init+0x280>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0c9b      	lsrs	r3, r3, #18
 800162c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a6a      	ldr	r2, [pc, #424]	; (80017fc <HAL_I2C_Init+0x274>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d802      	bhi.n	800165c <HAL_I2C_Init+0xd4>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	e009      	b.n	8001670 <HAL_I2C_Init+0xe8>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	4a69      	ldr	r2, [pc, #420]	; (800180c <HAL_I2C_Init+0x284>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	3301      	adds	r3, #1
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	430b      	orrs	r3, r1
 8001676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	495c      	ldr	r1, [pc, #368]	; (80017fc <HAL_I2C_Init+0x274>)
 800168c:	428b      	cmp	r3, r1
 800168e:	d819      	bhi.n	80016c4 <HAL_I2C_Init+0x13c>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e59      	subs	r1, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fbb1 f3f3 	udiv	r3, r1, r3
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016a4:	400b      	ands	r3, r1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00a      	beq.n	80016c0 <HAL_I2C_Init+0x138>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1e59      	subs	r1, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016be:	e051      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e04f      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d111      	bne.n	80016f0 <HAL_I2C_Init+0x168>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	e012      	b.n	8001716 <HAL_I2C_Init+0x18e>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e58      	subs	r0, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	0099      	lsls	r1, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	fbb0 f3f3 	udiv	r3, r0, r3
 8001706:	3301      	adds	r3, #1
 8001708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Init+0x196>
 800171a:	2301      	movs	r3, #1
 800171c:	e022      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10e      	bne.n	8001744 <HAL_I2C_Init+0x1bc>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1e58      	subs	r0, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	440b      	add	r3, r1
 8001734:	fbb0 f3f3 	udiv	r3, r0, r3
 8001738:	3301      	adds	r3, #1
 800173a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001742:	e00f      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1e58      	subs	r0, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	0099      	lsls	r1, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	fbb0 f3f3 	udiv	r3, r0, r3
 800175a:	3301      	adds	r3, #1
 800175c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	6809      	ldr	r1, [r1, #0]
 8001768:	4313      	orrs	r3, r2
 800176a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6911      	ldr	r1, [r2, #16]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68d2      	ldr	r2, [r2, #12]
 800179e:	4311      	orrs	r1, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	000186a0 	.word	0x000186a0
 8001800:	001e847f 	.word	0x001e847f
 8001804:	003d08ff 	.word	0x003d08ff
 8001808:	431bde83 	.word	0x431bde83
 800180c:	10624dd3 	.word	0x10624dd3

08001810 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	460b      	mov	r3, r1
 800181e:	817b      	strh	r3, [r7, #10]
 8001820:	4613      	mov	r3, r2
 8001822:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff fb9e 	bl	8000f64 <HAL_GetTick>
 8001828:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b20      	cmp	r3, #32
 8001834:	f040 80e0 	bne.w	80019f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2319      	movs	r3, #25
 800183e:	2201      	movs	r2, #1
 8001840:	4970      	ldr	r1, [pc, #448]	; (8001a04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fa92 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800184e:	2302      	movs	r3, #2
 8001850:	e0d3      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x50>
 800185c:	2302      	movs	r3, #2
 800185e:	e0cc      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d007      	beq.n	8001886 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0201 	orr.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001894:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2221      	movs	r2, #33	; 0x21
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2210      	movs	r2, #16
 80018a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	893a      	ldrh	r2, [r7, #8]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <HAL_I2C_Master_Transmit+0x1f8>)
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f9ca 	bl	8001c68 <I2C_MasterRequestWrite>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e08d      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018f4:	e066      	b.n	80019c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	6a39      	ldr	r1, [r7, #32]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 fb0c 	bl	8001f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00d      	beq.n	8001922 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2b04      	cmp	r3, #4
 800190c:	d107      	bne.n	800191e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06b      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29b      	uxth	r3, r3
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b04      	cmp	r3, #4
 800195e:	d11b      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x188>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	d017      	beq.n	8001998 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fafc 	bl	8001f9a <I2C_WaitOnBTFFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d107      	bne.n	80019c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e01a      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d194      	bne.n	80018f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	00100002 	.word	0x00100002
 8001a08:	ffff0000 	.word	0xffff0000

08001a0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff faa2 	bl	8000f64 <HAL_GetTick>
 8001a20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	f040 8111 	bne.w	8001c56 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2319      	movs	r3, #25
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4988      	ldr	r1, [pc, #544]	; (8001c60 <HAL_I2C_IsDeviceReady+0x254>)
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f994 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e104      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_I2C_IsDeviceReady+0x50>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0fd      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0x24c>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d007      	beq.n	8001a82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2224      	movs	r2, #36	; 0x24
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a70      	ldr	r2, [pc, #448]	; (8001c64 <HAL_I2C_IsDeviceReady+0x258>)
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f952 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00d      	beq.n	8001aea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001adc:	d103      	bne.n	8001ae6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e0b6      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001af8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff fa33 	bl	8000f64 <HAL_GetTick>
 8001afe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	bf0c      	ite	eq
 8001b0e:	2301      	moveq	r3, #1
 8001b10:	2300      	movne	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b2e:	e025      	b.n	8001b7c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b30:	f7ff fa18 	bl	8000f64 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d302      	bcc.n	8001b46 <HAL_I2C_IsDeviceReady+0x13a>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	22a0      	movs	r2, #160	; 0xa0
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2ba0      	cmp	r3, #160	; 0xa0
 8001b86:	d005      	beq.n	8001b94 <HAL_I2C_IsDeviceReady+0x188>
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <HAL_I2C_IsDeviceReady+0x188>
 8001b8e:	7dbb      	ldrb	r3, [r7, #22]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0cd      	beq.n	8001b30 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d129      	bne.n	8001bfe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4921      	ldr	r1, [pc, #132]	; (8001c60 <HAL_I2C_IsDeviceReady+0x254>)
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f8c6 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e036      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2220      	movs	r2, #32
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e02c      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c16:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2319      	movs	r3, #25
 8001c1e:	2201      	movs	r2, #1
 8001c20:	490f      	ldr	r1, [pc, #60]	; (8001c60 <HAL_I2C_IsDeviceReady+0x254>)
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f8a2 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e012      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f4ff af32 	bcc.w	8001aa6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	00100002 	.word	0x00100002
 8001c64:	ffff0000 	.word	0xffff0000

08001c68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	460b      	mov	r3, r1
 8001c76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d006      	beq.n	8001c92 <I2C_MasterRequestWrite+0x2a>
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d003      	beq.n	8001c92 <I2C_MasterRequestWrite+0x2a>
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c90:	d108      	bne.n	8001ca4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	d107      	bne.n	8001cbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f84f 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce2:	d103      	bne.n	8001cec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e035      	b.n	8001d5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cf8:	d108      	bne.n	8001d0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cfa:	897b      	ldrh	r3, [r7, #10]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	e01b      	b.n	8001d44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d0c:	897b      	ldrh	r3, [r7, #10]
 8001d0e:	11db      	asrs	r3, r3, #7
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f003 0306 	and.w	r3, r3, #6
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f063 030f 	orn	r3, r3, #15
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <I2C_MasterRequestWrite+0xfc>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f875 	bl	8001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e010      	b.n	8001d5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d3a:	897b      	ldrh	r3, [r7, #10]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <I2C_MasterRequestWrite+0x100>)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f865 	bl	8001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	00010008 	.word	0x00010008
 8001d68:	00010002 	.word	0x00010002

08001d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7c:	e025      	b.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d021      	beq.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d86:	f7ff f8ed 	bl	8000f64 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d302      	bcc.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d116      	bne.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0220 	orr.w	r2, r3, #32
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e023      	b.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10d      	bne.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4013      	ands	r3, r2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	e00c      	b.n	8001e0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d0b6      	beq.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e28:	e051      	b.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e38:	d123      	bne.n	8001e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f043 0204 	orr.w	r2, r3, #4
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e046      	b.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d021      	beq.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8a:	f7ff f86b 	bl	8000f64 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d116      	bne.n	8001ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f043 0220 	orr.w	r2, r3, #32
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e020      	b.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10c      	bne.n	8001ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2301      	movne	r3, #1
 8001eec:	2300      	moveq	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	e00b      	b.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d18d      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f24:	e02d      	b.n	8001f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f878 	bl	800201c <I2C_IsAcknowledgeFailed>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e02d      	b.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d021      	beq.n	8001f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7ff f811 	bl	8000f64 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d116      	bne.n	8001f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f043 0220 	orr.w	r2, r3, #32
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e007      	b.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d1ca      	bne.n	8001f26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fa6:	e02d      	b.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f837 	bl	800201c <I2C_IsAcknowledgeFailed>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e02d      	b.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d021      	beq.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc0:	f7fe ffd0 	bl	8000f64 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d302      	bcc.n	8001fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e007      	b.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b04      	cmp	r3, #4
 8002010:	d1ca      	bne.n	8001fa8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002032:	d11b      	bne.n	800206c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800203c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f043 0204 	orr.w	r2, r3, #4
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800207a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207c:	b08f      	sub	sp, #60	; 0x3c
 800207e:	af0a      	add	r7, sp, #40	; 0x28
 8002080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e10f      	b.n	80022ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f004 ffae 	bl	8007008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2203      	movs	r2, #3
 80020b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 fea1 	bl	8003e12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	687e      	ldr	r6, [r7, #4]
 80020d8:	466d      	mov	r5, sp
 80020da:	f106 0410 	add.w	r4, r6, #16
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ee:	1d33      	adds	r3, r6, #4
 80020f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f2:	6838      	ldr	r0, [r7, #0]
 80020f4:	f001 fd78 	bl	8003be8 <USB_CoreInit>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0d0      	b.n	80022ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fe8f 	bl	8003e34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e04a      	b.n	80021b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	333d      	adds	r3, #61	; 0x3d
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	333c      	adds	r3, #60	; 0x3c
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	b298      	uxth	r0, r3
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	3342      	adds	r3, #66	; 0x42
 8002158:	4602      	mov	r2, r0
 800215a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	333f      	adds	r3, #63	; 0x3f
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3344      	adds	r3, #68	; 0x44
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3348      	adds	r3, #72	; 0x48
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3350      	adds	r3, #80	; 0x50
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	3301      	adds	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3af      	bcc.n	800211c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e044      	b.n	800224c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	3301      	adds	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d3b5      	bcc.n	80021c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	687e      	ldr	r6, [r7, #4]
 800225e:	466d      	mov	r5, sp
 8002260:	f106 0410 	add.w	r4, r6, #16
 8002264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002270:	e885 0003 	stmia.w	r5, {r0, r1}
 8002274:	1d33      	adds	r3, r6, #4
 8002276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f001 fe27 	bl	8003ecc <USB_DevInit>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e00d      	b.n	80022ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fea3 	bl	8004ff0 <USB_DevDisconnect>

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_PCD_Start+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e020      	b.n	8002312 <HAL_PCD_Start+0x5e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d109      	bne.n	80022f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fd79 	bl	8003df0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fe53 	bl	8004fae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800231a:	b590      	push	{r4, r7, lr}
 800231c:	b08d      	sub	sp, #52	; 0x34
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f002 ff11 	bl	8005158 <USB_GetMode>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 839d 	bne.w	8002a78 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f002 fe75 	bl	8005032 <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8393 	beq.w	8002a76 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f002 fe6c 	bl	8005032 <USB_ReadInterrupts>
 800235a:	4603      	mov	r3, r0
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d107      	bne.n	8002374 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f002 0202 	and.w	r2, r2, #2
 8002372:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fe5a 	bl	8005032 <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b10      	cmp	r3, #16
 8002386:	d161      	bne.n	800244c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0210 	bic.w	r2, r2, #16
 8002396:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f003 020f 	and.w	r2, r3, #15
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	3304      	adds	r3, #4
 80023b6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	0c5b      	lsrs	r3, r3, #17
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d124      	bne.n	800240e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d035      	beq.n	800243c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	6a38      	ldr	r0, [r7, #32]
 80023e4:	f002 fc91 	bl	8004d0a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f4:	441a      	add	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002406:	441a      	add	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	e016      	b.n	800243c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	0c5b      	lsrs	r3, r3, #17
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	2b06      	cmp	r3, #6
 8002418:	d110      	bne.n	800243c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002420:	2208      	movs	r2, #8
 8002422:	4619      	mov	r1, r3
 8002424:	6a38      	ldr	r0, [r7, #32]
 8002426:	f002 fc70 	bl	8004d0a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002436:	441a      	add	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0210 	orr.w	r2, r2, #16
 800244a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f002 fdee 	bl	8005032 <USB_ReadInterrupts>
 8002456:	4603      	mov	r3, r0
 8002458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002460:	d16e      	bne.n	8002540 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fdf4 	bl	8005058 <USB_ReadDevAllOutEpInterrupt>
 8002470:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002472:	e062      	b.n	800253a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d057      	beq.n	800252e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f002 fe19 	bl	80050c0 <USB_ReadDevOutEPInterrupt>
 800248e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	2301      	movs	r3, #1
 80024aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fdb0 	bl	8003014 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ca:	461a      	mov	r2, r3
 80024cc:	2308      	movs	r3, #8
 80024ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 feaa 	bl	800322c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	461a      	mov	r2, r3
 80024f0:	2310      	movs	r3, #16
 80024f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250a:	461a      	mov	r2, r3
 800250c:	2320      	movs	r3, #32
 800250e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002526:	461a      	mov	r2, r3
 8002528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800252c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d199      	bne.n	8002474 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fd74 	bl	8005032 <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002554:	f040 80c0 	bne.w	80026d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f002 fd95 	bl	800508c <USB_ReadDevAllInEpInterrupt>
 8002562:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002568:	e0b2      	b.n	80026d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a7 	beq.w	80026c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f002 fdbb 	bl	80050fc <USB_ReadDevInEPInterrupt>
 8002586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d057      	beq.n	8002642 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	2201      	movs	r2, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69f9      	ldr	r1, [r7, #28]
 80025ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025b2:	4013      	ands	r3, r2
 80025b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c2:	461a      	mov	r2, r3
 80025c4:	2301      	movs	r3, #1
 80025c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d132      	bne.n	8002636 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3348      	adds	r3, #72	; 0x48
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4403      	add	r3, r0
 80025f0:	3344      	adds	r3, #68	; 0x44
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4419      	add	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4403      	add	r3, r0
 8002604:	3348      	adds	r3, #72	; 0x48
 8002606:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d113      	bne.n	8002636 <HAL_PCD_IRQHandler+0x31c>
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3350      	adds	r3, #80	; 0x50
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d108      	bne.n	8002636 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800262e:	461a      	mov	r2, r3
 8002630:	2101      	movs	r1, #1
 8002632:	f002 fdc3 	bl	80051bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f004 fd64 	bl	800710a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002658:	461a      	mov	r2, r3
 800265a:	2308      	movs	r3, #8
 800265c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002674:	461a      	mov	r2, r3
 8002676:	2310      	movs	r3, #16
 8002678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002690:	461a      	mov	r2, r3
 8002692:	2340      	movs	r3, #64	; 0x40
 8002694:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ac:	461a      	mov	r2, r3
 80026ae:	2302      	movs	r3, #2
 80026b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fc1b 	bl	8002efa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	3301      	adds	r3, #1
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f47f af49 	bne.w	800256a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fca8 	bl	8005032 <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026ec:	d122      	bne.n	8002734 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002714:	2100      	movs	r1, #0
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fe26 	bl	8003368 <HAL_PCDEx_LPM_Callback>
 800271c:	e002      	b.n	8002724 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f004 fd60 	bl	80071e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fc7a 	bl	8005032 <USB_ReadInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002748:	d112      	bne.n	8002770 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d102      	bne.n	8002760 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f004 fd1c 	bl	8007198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800276e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fc5c 	bl	8005032 <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	f040 80c7 	bne.w	8002916 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2110      	movs	r1, #16
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fcf6 	bl	8004194 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ac:	e056      	b.n	800285c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ba:	461a      	mov	r2, r3
 80027bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d2:	0151      	lsls	r1, r2, #5
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	440a      	add	r2, r1
 80027d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	0151      	lsls	r1, r2, #5
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	440a      	add	r2, r1
 80027f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280e:	461a      	mov	r2, r3
 8002810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002814:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	440a      	add	r2, r1
 800282c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002834:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002846:	0151      	lsls	r1, r2, #5
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	440a      	add	r2, r1
 800284c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002854:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	3301      	adds	r3, #1
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002862:	429a      	cmp	r2, r3
 8002864:	d3a3      	bcc.n	80027ae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002874:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002878:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002892:	f043 030b 	orr.w	r3, r3, #11
 8002896:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a8:	f043 030b 	orr.w	r3, r3, #11
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	e015      	b.n	80028dc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d6:	f043 030b 	orr.w	r3, r3, #11
 80028da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002900:	461a      	mov	r2, r3
 8002902:	f002 fc5b 	bl	80051bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fb89 	bl	8005032 <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292a:	d124      	bne.n	8002976 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f002 fc1f 	bl	8005174 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fc87 	bl	800424e <USB_GetDevSpeed>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681c      	ldr	r4, [r3, #0]
 800294c:	f001 f92c 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8002950:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	4620      	mov	r0, r4
 800295c:	f001 f9a6 	bl	8003cac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f004 fbfa 	bl	800715a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002974:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fb59 	bl	8005032 <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b08      	cmp	r3, #8
 8002988:	d10a      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f004 fbd7 	bl	800713e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f002 0208 	and.w	r2, r2, #8
 800299e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 fb44 	bl	8005032 <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b4:	d10f      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f004 fc2f 	bl	8007224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 fb29 	bl	8005032 <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ea:	d10f      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f004 fc02 	bl	8007200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 fb0e 	bl	8005032 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d10a      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f004 fc10 	bl	8007248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 faf8 	bl	8005032 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d115      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f004 fc00 	bl	8007264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	e000      	b.n	8002a78 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a76:	bf00      	nop
    }
  }
}
 8002a78:	3734      	adds	r7, #52	; 0x34
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}

08002a7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_PCD_SetAddress+0x1a>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e013      	b.n	8002ac0 <HAL_PCD_SetAddress+0x42>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fa56 	bl	8004f62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	70fb      	strb	r3, [r7, #3]
 8002ada:	460b      	mov	r3, r1
 8002adc:	803b      	strh	r3, [r7, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da0f      	bge.n	8002b0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3338      	adds	r3, #56	; 0x38
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	705a      	strb	r2, [r3, #1]
 8002b0c:	e00f      	b.n	8002b2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b3a:	883a      	ldrh	r2, [r7, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	78ba      	ldrb	r2, [r7, #2]
 8002b44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b58:	78bb      	ldrb	r3, [r7, #2]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d102      	bne.n	8002b64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_PCD_EP_Open+0xaa>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e00e      	b.n	8002b90 <HAL_PCD_EP_Open+0xc8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fb89 	bl	8004298 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da0f      	bge.n	8002bcc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3338      	adds	r3, #56	; 0x38
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	705a      	strb	r2, [r3, #1]
 8002bca:	e00f      	b.n	8002bec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_PCD_EP_Close+0x6e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e00e      	b.n	8002c24 <HAL_PCD_EP_Close+0x8c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fbc7 	bl	80043a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
 8002c3e:	f003 020f 	and.w	r2, r3, #15
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	f001 fea2 	bl	80049e8 <USB_EP0StartXfer>
 8002ca4:	e008      	b.n	8002cb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	f001 fc54 	bl	8004560 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ce4:	681b      	ldr	r3, [r3, #0]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3338      	adds	r3, #56	; 0x38
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	f001 fe40 	bl	80049e8 <USB_EP0StartXfer>
 8002d68:	e008      	b.n	8002d7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	6979      	ldr	r1, [r7, #20]
 8002d78:	f001 fbf2 	bl	8004560 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d901      	bls.n	8002da4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e050      	b.n	8002e46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da0f      	bge.n	8002dcc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	f003 020f 	and.w	r2, r3, #15
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	3338      	adds	r3, #56	; 0x38
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	705a      	strb	r2, [r3, #1]
 8002dca:	e00d      	b.n	8002de8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_PCD_EP_SetStall+0x82>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e01e      	b.n	8002e46 <HAL_PCD_EP_SetStall+0xc0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 ffcf 	bl	8004dba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	b2d9      	uxtb	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e36:	461a      	mov	r2, r3
 8002e38:	f002 f9c0 	bl	80051bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d901      	bls.n	8002e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e042      	b.n	8002ef2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da0f      	bge.n	8002e94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 020f 	and.w	r2, r3, #15
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	3338      	adds	r3, #56	; 0x38
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	705a      	strb	r2, [r3, #1]
 8002e92:	e00f      	b.n	8002eb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_PCD_EP_ClrStall+0x86>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e00e      	b.n	8002ef2 <HAL_PCD_EP_ClrStall+0xa4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68f9      	ldr	r1, [r7, #12]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 ffd7 	bl	8004e96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b08a      	sub	sp, #40	; 0x28
 8002efe:	af02      	add	r7, sp, #8
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	3338      	adds	r3, #56	; 0x38
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3304      	adds	r3, #4
 8002f20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d901      	bls.n	8002f32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06c      	b.n	800300c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d902      	bls.n	8002f4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3303      	adds	r3, #3
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f56:	e02b      	b.n	8002fb0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d902      	bls.n	8002f74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	3303      	adds	r3, #3
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68d9      	ldr	r1, [r3, #12]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4603      	mov	r3, r0
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f001 fe7b 	bl	8004c8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d809      	bhi.n	8002fda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d203      	bcs.n	8002fda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1be      	bne.n	8002f58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d811      	bhi.n	800300a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	2201      	movs	r2, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	6939      	ldr	r1, [r7, #16]
 8003002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003006:	4013      	ands	r3, r2
 8003008:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	333c      	adds	r3, #60	; 0x3c
 800302c:	3304      	adds	r3, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b01      	cmp	r3, #1
 8003048:	f040 80a0 	bne.w	800318c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d015      	beq.n	8003082 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a72      	ldr	r2, [pc, #456]	; (8003224 <PCD_EP_OutXfrComplete_int+0x210>)
 800305a:	4293      	cmp	r3, r2
 800305c:	f240 80dd 	bls.w	800321a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80d7 	beq.w	800321a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	6093      	str	r3, [r2, #8]
 8003080:	e0cb      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003098:	461a      	mov	r2, r3
 800309a:	2320      	movs	r3, #32
 800309c:	6093      	str	r3, [r2, #8]
 800309e:	e0bc      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80b7 	bne.w	800321a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a5d      	ldr	r2, [pc, #372]	; (8003224 <PCD_EP_OutXfrComplete_int+0x210>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d90f      	bls.n	80030d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ca:	461a      	mov	r2, r3
 80030cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d0:	6093      	str	r3, [r2, #8]
 80030d2:	e0a2      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	0159      	lsls	r1, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	440b      	add	r3, r1
 80030f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4403      	add	r3, r0
 800310a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800310e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4403      	add	r3, r0
 8003132:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4419      	add	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4403      	add	r3, r0
 8003148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800314c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d114      	bne.n	800317e <PCD_EP_OutXfrComplete_int+0x16a>
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003176:	461a      	mov	r2, r3
 8003178:	2101      	movs	r1, #1
 800317a:	f002 f81f 	bl	80051bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f003 ffa5 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
 800318a:	e046      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a26      	ldr	r2, [pc, #152]	; (8003228 <PCD_EP_OutXfrComplete_int+0x214>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d124      	bne.n	80031de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b0:	6093      	str	r3, [r2, #8]
 80031b2:	e032      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	461a      	mov	r2, r3
 80031cc:	2320      	movs	r3, #32
 80031ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f003 ff7c 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
 80031dc:	e01d      	b.n	800321a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d114      	bne.n	800320e <PCD_EP_OutXfrComplete_int+0x1fa>
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d108      	bne.n	800320e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003206:	461a      	mov	r2, r3
 8003208:	2100      	movs	r1, #0
 800320a:	f001 ffd7 	bl	80051bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f003 ff5d 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	4f54300a 	.word	0x4f54300a
 8003228:	4f54310a 	.word	0x4f54310a

0800322c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	333c      	adds	r3, #60	; 0x3c
 8003244:	3304      	adds	r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d90e      	bls.n	8003280 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f003 ff15 	bl	80070b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d90c      	bls.n	80032a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032a0:	461a      	mov	r2, r3
 80032a2:	2101      	movs	r1, #1
 80032a4:	f001 ff8a 	bl	80051bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	4f54300a 	.word	0x4f54300a

080032b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
 80032c4:	4613      	mov	r3, r2
 80032c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032d6:	883b      	ldrh	r3, [r7, #0]
 80032d8:	0419      	lsls	r1, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
 80032e4:	e028      	b.n	8003338 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4413      	add	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e00d      	b.n	8003316 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3340      	adds	r3, #64	; 0x40
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	3301      	adds	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	3b01      	subs	r3, #1
 800331c:	429a      	cmp	r2, r3
 800331e:	d3ec      	bcc.n	80032fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003320:	883b      	ldrh	r3, [r7, #0]
 8003322:	0418      	lsls	r0, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	3b01      	subs	r3, #1
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4302      	orrs	r2, r0
 8003330:	3340      	adds	r3, #64	; 0x40
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e264      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d075      	beq.n	800348a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339e:	4ba3      	ldr	r3, [pc, #652]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4ba0      	ldr	r3, [pc, #640]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d112      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b9d      	ldr	r3, [pc, #628]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	4b99      	ldr	r3, [pc, #612]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05b      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e23f      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x74>
 80033e6:	4b91      	ldr	r3, [pc, #580]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a90      	ldr	r2, [pc, #576]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x98>
 80033fe:	4b8b      	ldr	r3, [pc, #556]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a8a      	ldr	r2, [pc, #552]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a87      	ldr	r2, [pc, #540]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 8003418:	4b84      	ldr	r3, [pc, #528]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a83      	ldr	r2, [pc, #524]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a80      	ldr	r2, [pc, #512]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fd fd94 	bl	8000f64 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003440:	f7fd fd90 	bl	8000f64 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e204      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b76      	ldr	r3, [pc, #472]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xc0>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fd fd80 	bl	8000f64 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd fd7c 	bl	8000f64 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1f0      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b6c      	ldr	r3, [pc, #432]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b62      	ldr	r3, [pc, #392]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b5c      	ldr	r3, [pc, #368]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x152>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1c4      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b56      	ldr	r3, [pc, #344]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4952      	ldr	r1, [pc, #328]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <HAL_RCC_OscConfig+0x2b0>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fd fd35 	bl	8000f64 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fd fd31 	bl	8000f64 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1a5      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b43      	ldr	r3, [pc, #268]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4940      	ldr	r1, [pc, #256]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_OscConfig+0x2b0>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd fd14 	bl	8000f64 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003540:	f7fd fd10 	bl	8000f64 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e184      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d030      	beq.n	80035cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_RCC_OscConfig+0x2b4>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fd fcf4 	bl	8000f64 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003580:	f7fd fcf0 	bl	8000f64 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e164      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b26      	ldr	r3, [pc, #152]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x200>
 800359e:	e015      	b.n	80035cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_OscConfig+0x2b4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fd fcdd 	bl	8000f64 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ae:	f7fd fcd9 	bl	8000f64 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e14d      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a0 	beq.w	800371a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_OscConfig+0x2b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d121      	bne.n	800365a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_RCC_OscConfig+0x2b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a07      	ldr	r2, [pc, #28]	; (8003638 <HAL_RCC_OscConfig+0x2b8>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fd fc9f 	bl	8000f64 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e011      	b.n	800364e <HAL_RCC_OscConfig+0x2ce>
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	42470000 	.word	0x42470000
 8003634:	42470e80 	.word	0x42470e80
 8003638:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363c:	f7fd fc92 	bl	8000f64 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e106      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364e:	4b85      	ldr	r3, [pc, #532]	; (8003864 <HAL_RCC_OscConfig+0x4e4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x2f0>
 8003662:	4b81      	ldr	r3, [pc, #516]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a80      	ldr	r2, [pc, #512]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	e01c      	b.n	80036aa <HAL_RCC_OscConfig+0x32a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d10c      	bne.n	8003692 <HAL_RCC_OscConfig+0x312>
 8003678:	4b7b      	ldr	r3, [pc, #492]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a7a      	ldr	r2, [pc, #488]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
 8003684:	4b78      	ldr	r3, [pc, #480]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a77      	ldr	r2, [pc, #476]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e00b      	b.n	80036aa <HAL_RCC_OscConfig+0x32a>
 8003692:	4b75      	ldr	r3, [pc, #468]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a74      	ldr	r2, [pc, #464]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	4b72      	ldr	r3, [pc, #456]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a71      	ldr	r2, [pc, #452]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d015      	beq.n	80036de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fd fc57 	bl	8000f64 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fd fc53 	bl	8000f64 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0c5      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ee      	beq.n	80036ba <HAL_RCC_OscConfig+0x33a>
 80036dc:	e014      	b.n	8003708 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036de:	f7fd fc41 	bl	8000f64 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7fd fc3d 	bl	8000f64 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e0af      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	4b5a      	ldr	r3, [pc, #360]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370e:	4b56      	ldr	r3, [pc, #344]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a55      	ldr	r2, [pc, #340]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 809b 	beq.w	800385a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d05c      	beq.n	80037ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d141      	bne.n	80037bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x4ec>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fd fc11 	bl	8000f64 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003746:	f7fd fc0d 	bl	8000f64 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e081      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003758:	4b43      	ldr	r3, [pc, #268]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f0      	bne.n	8003746 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	019b      	lsls	r3, r3, #6
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	3b01      	subs	r3, #1
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	061b      	lsls	r3, r3, #24
 8003788:	4937      	ldr	r1, [pc, #220]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <HAL_RCC_OscConfig+0x4ec>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd fbe6 	bl	8000f64 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379c:	f7fd fbe2 	bl	8000f64 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e056      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x41c>
 80037ba:	e04e      	b.n	800385a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_OscConfig+0x4ec>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd fbcf 	bl	8000f64 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fd fbcb 	bl	8000f64 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e03f      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0x44a>
 80037e8:	e037      	b.n	800385a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e032      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <HAL_RCC_OscConfig+0x4e8>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d028      	beq.n	8003856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d121      	bne.n	8003856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d11a      	bne.n	8003856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800382c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382e:	4293      	cmp	r3, r2
 8003830:	d111      	bne.n	8003856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d107      	bne.n	8003856 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40007000 	.word	0x40007000
 8003868:	40023800 	.word	0x40023800
 800386c:	42470060 	.word	0x42470060

08003870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0cc      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d90c      	bls.n	80038ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d044      	beq.n	8003990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d119      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d003      	beq.n	800392e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	2b03      	cmp	r3, #3
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e067      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394e:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4934      	ldr	r1, [pc, #208]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003960:	f7fd fb00 	bl	8000f64 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fd fafc 	bl	8000f64 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e04f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 020c 	and.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d1eb      	bne.n	8003968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d20c      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490a      	ldr	r1, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fa60 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40023c00 	.word	0x40023c00
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08008024 	.word	0x08008024
 8003a34:	20000010 	.word	0x20000010
 8003a38:	20000014 	.word	0x20000014

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b5b0      	push	{r4, r5, r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a42:	2100      	movs	r1, #0
 8003a44:	6079      	str	r1, [r7, #4]
 8003a46:	2100      	movs	r1, #0
 8003a48:	60f9      	str	r1, [r7, #12]
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a4e:	2100      	movs	r1, #0
 8003a50:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a52:	4952      	ldr	r1, [pc, #328]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a54:	6889      	ldr	r1, [r1, #8]
 8003a56:	f001 010c 	and.w	r1, r1, #12
 8003a5a:	2908      	cmp	r1, #8
 8003a5c:	d00d      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x3e>
 8003a5e:	2908      	cmp	r1, #8
 8003a60:	f200 8094 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x150>
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x32>
 8003a68:	2904      	cmp	r1, #4
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x38>
 8003a6c:	e08e      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a6e:	4b4c      	ldr	r3, [pc, #304]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a70:	60bb      	str	r3, [r7, #8]
       break;
 8003a72:	e08e      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a76:	60bb      	str	r3, [r7, #8]
      break;
 8003a78:	e08b      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a7a:	4948      	ldr	r1, [pc, #288]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a7c:	6849      	ldr	r1, [r1, #4]
 8003a7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a82:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a84:	4945      	ldr	r1, [pc, #276]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a86:	6849      	ldr	r1, [r1, #4]
 8003a88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a8c:	2900      	cmp	r1, #0
 8003a8e:	d024      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a90:	4942      	ldr	r1, [pc, #264]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a92:	6849      	ldr	r1, [r1, #4]
 8003a94:	0989      	lsrs	r1, r1, #6
 8003a96:	4608      	mov	r0, r1
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003aa0:	f04f 0500 	mov.w	r5, #0
 8003aa4:	ea00 0204 	and.w	r2, r0, r4
 8003aa8:	ea01 0305 	and.w	r3, r1, r5
 8003aac:	493d      	ldr	r1, [pc, #244]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003aae:	fb01 f003 	mul.w	r0, r1, r3
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	fb01 f102 	mul.w	r1, r1, r2
 8003ab8:	1844      	adds	r4, r0, r1
 8003aba:	493a      	ldr	r1, [pc, #232]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003abc:	fba2 0101 	umull	r0, r1, r2, r1
 8003ac0:	1863      	adds	r3, r4, r1
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	f7fc fbe0 	bl	8000290 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e04a      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	099b      	lsrs	r3, r3, #6
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	ea02 0400 	and.w	r4, r2, r0
 8003af2:	ea03 0501 	and.w	r5, r3, r1
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	014b      	lsls	r3, r1, #5
 8003b04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b08:	0142      	lsls	r2, r0, #5
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	1b00      	subs	r0, r0, r4
 8003b10:	eb61 0105 	sbc.w	r1, r1, r5
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	018b      	lsls	r3, r1, #6
 8003b1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b22:	0182      	lsls	r2, r0, #6
 8003b24:	1a12      	subs	r2, r2, r0
 8003b26:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	00d9      	lsls	r1, r3, #3
 8003b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b38:	00d0      	lsls	r0, r2, #3
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	1912      	adds	r2, r2, r4
 8003b40:	eb45 0303 	adc.w	r3, r5, r3
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	0299      	lsls	r1, r3, #10
 8003b4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b52:	0290      	lsls	r0, r2, #10
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f7fc fb94 	bl	8000290 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	60bb      	str	r3, [r7, #8]
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b8e:	60bb      	str	r3, [r7, #8]
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	68bb      	ldr	r3, [r7, #8]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	017d7840 	.word	0x017d7840

08003ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000010 	.word	0x20000010

08003bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc4:	f7ff fff0 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	0a9b      	lsrs	r3, r3, #10
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4903      	ldr	r1, [pc, #12]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	08008034 	.word	0x08008034

08003be8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be8:	b084      	sub	sp, #16
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	f107 001c 	add.w	r0, r7, #28
 8003bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d122      	bne.n	8003c46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f001 fb1c 	bl	8005278 <USB_CoreReset>
 8003c40:	4603      	mov	r3, r0
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	e01a      	b.n	8003c7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f001 fb10 	bl	8005278 <USB_CoreReset>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c6e:	e005      	b.n	8003c7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d10b      	bne.n	8003c9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f043 0206 	orr.w	r2, r3, #6
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f043 0220 	orr.w	r2, r3, #32
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ca6:	b004      	add	sp, #16
 8003ca8:	4770      	bx	lr
	...

08003cac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d165      	bne.n	8003d8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <USB_SetTurnaroundTime+0x11c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d906      	bls.n	8003cd6 <USB_SetTurnaroundTime+0x2a>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <USB_SetTurnaroundTime+0x120>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d202      	bcs.n	8003cd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cd0:	230f      	movs	r3, #15
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e062      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <USB_SetTurnaroundTime+0x120>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d306      	bcc.n	8003cec <USB_SetTurnaroundTime+0x40>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <USB_SetTurnaroundTime+0x124>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d202      	bcs.n	8003cec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ce6:	230e      	movs	r3, #14
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e057      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <USB_SetTurnaroundTime+0x124>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d306      	bcc.n	8003d02 <USB_SetTurnaroundTime+0x56>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4a37      	ldr	r2, [pc, #220]	; (8003dd4 <USB_SetTurnaroundTime+0x128>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d202      	bcs.n	8003d02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cfc:	230d      	movs	r3, #13
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e04c      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <USB_SetTurnaroundTime+0x128>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d306      	bcc.n	8003d18 <USB_SetTurnaroundTime+0x6c>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a32      	ldr	r2, [pc, #200]	; (8003dd8 <USB_SetTurnaroundTime+0x12c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d802      	bhi.n	8003d18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d12:	230c      	movs	r3, #12
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e041      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <USB_SetTurnaroundTime+0x12c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d906      	bls.n	8003d2e <USB_SetTurnaroundTime+0x82>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <USB_SetTurnaroundTime+0x130>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d802      	bhi.n	8003d2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d28:	230b      	movs	r3, #11
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e036      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <USB_SetTurnaroundTime+0x130>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d906      	bls.n	8003d44 <USB_SetTurnaroundTime+0x98>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4a29      	ldr	r2, [pc, #164]	; (8003de0 <USB_SetTurnaroundTime+0x134>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d802      	bhi.n	8003d44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d3e:	230a      	movs	r3, #10
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e02b      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <USB_SetTurnaroundTime+0x134>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d906      	bls.n	8003d5a <USB_SetTurnaroundTime+0xae>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <USB_SetTurnaroundTime+0x138>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d202      	bcs.n	8003d5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d54:	2309      	movs	r3, #9
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e020      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <USB_SetTurnaroundTime+0x138>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d306      	bcc.n	8003d70 <USB_SetTurnaroundTime+0xc4>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <USB_SetTurnaroundTime+0x13c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d802      	bhi.n	8003d70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e015      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <USB_SetTurnaroundTime+0x13c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d906      	bls.n	8003d86 <USB_SetTurnaroundTime+0xda>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <USB_SetTurnaroundTime+0x140>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d202      	bcs.n	8003d86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d80:	2307      	movs	r3, #7
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e00a      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d86:	2306      	movs	r3, #6
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e007      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d92:	2309      	movs	r3, #9
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e001      	b.n	8003d9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d98:	2309      	movs	r3, #9
 8003d9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	00d8acbf 	.word	0x00d8acbf
 8003dcc:	00e4e1c0 	.word	0x00e4e1c0
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	01067380 	.word	0x01067380
 8003dd8:	011a499f 	.word	0x011a499f
 8003ddc:	01312cff 	.word	0x01312cff
 8003de0:	014ca43f 	.word	0x014ca43f
 8003de4:	016e3600 	.word	0x016e3600
 8003de8:	01a6ab1f 	.word	0x01a6ab1f
 8003dec:	01e84800 	.word	0x01e84800

08003df0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f043 0201 	orr.w	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d115      	bne.n	8003e82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7fd f88a 	bl	8000f7c <HAL_Delay>
      ms++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f001 f972 	bl	8005158 <USB_GetMode>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d01e      	beq.n	8003eb8 <USB_SetCurrentMode+0x84>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b31      	cmp	r3, #49	; 0x31
 8003e7e:	d9f0      	bls.n	8003e62 <USB_SetCurrentMode+0x2e>
 8003e80:	e01a      	b.n	8003eb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d115      	bne.n	8003eb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e94:	2001      	movs	r0, #1
 8003e96:	f7fd f871 	bl	8000f7c <HAL_Delay>
      ms++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f001 f959 	bl	8005158 <USB_GetMode>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <USB_SetCurrentMode+0x84>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b31      	cmp	r3, #49	; 0x31
 8003eb0:	d9f0      	bls.n	8003e94 <USB_SetCurrentMode+0x60>
 8003eb2:	e001      	b.n	8003eb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e005      	b.n	8003ec4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b32      	cmp	r3, #50	; 0x32
 8003ebc:	d101      	bne.n	8003ec2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ecc:	b084      	sub	sp, #16
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e009      	b.n	8003f00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3340      	adds	r3, #64	; 0x40
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3301      	adds	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0e      	cmp	r3, #14
 8003f04:	d9f2      	bls.n	8003eec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11c      	bne.n	8003f46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1a:	f043 0302 	orr.w	r3, r3, #2
 8003f1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
 8003f44:	e00b      	b.n	8003f5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f64:	461a      	mov	r2, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	4619      	mov	r1, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	461a      	mov	r2, r3
 8003f7a:	680b      	ldr	r3, [r1, #0]
 8003f7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10c      	bne.n	8003f9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d104      	bne.n	8003f94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f945 	bl	800421c <USB_SetDevSpeed>
 8003f92:	e008      	b.n	8003fa6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f94:	2101      	movs	r1, #1
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f940 	bl	800421c <USB_SetDevSpeed>
 8003f9c:	e003      	b.n	8003fa6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f93b 	bl	800421c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fa6:	2110      	movs	r1, #16
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8f3 	bl	8004194 <USB_FlushTxFifo>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f90f 	bl	80041dc <USB_FlushRxFifo>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	e043      	b.n	800407a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004008:	d118      	bne.n	800403c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	461a      	mov	r2, r3
 800401e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e013      	b.n	800404e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	461a      	mov	r2, r3
 8004034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e008      	b.n	800404e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	461a      	mov	r2, r3
 800405c:	2300      	movs	r3, #0
 800405e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	461a      	mov	r2, r3
 800406e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004072:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	3301      	adds	r3, #1
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	429a      	cmp	r2, r3
 8004080:	d3b7      	bcc.n	8003ff2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e043      	b.n	8004110 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800409a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800409e:	d118      	bne.n	80040d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e013      	b.n	80040e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	e008      	b.n	80040e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	461a      	mov	r2, r3
 80040f2:	2300      	movs	r3, #0
 80040f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3301      	adds	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d3b7      	bcc.n	8004088 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f043 0210 	orr.w	r2, r3, #16
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <USB_DevInit+0x2c4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f043 0208 	orr.w	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d107      	bne.n	8004180 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004180:	7dfb      	ldrb	r3, [r7, #23]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800418c:	b004      	add	sp, #16
 800418e:	4770      	bx	lr
 8004190:	803c3800 	.word	0x803c3800

08004194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <USB_FlushTxFifo+0x44>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e006      	b.n	80041cc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d0f1      	beq.n	80041ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	00030d40 	.word	0x00030d40

080041dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2210      	movs	r2, #16
 80041ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3301      	adds	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	4a08      	ldr	r2, [pc, #32]	; (8004218 <USB_FlushRxFifo+0x3c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e006      	b.n	800420c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d0f1      	beq.n	80041ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	00030d40 	.word	0x00030d40

0800421c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0306 	and.w	r3, r3, #6
 8004266:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
 8004272:	e00a      	b.n	800428a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d002      	beq.n	8004280 <USB_GetDevSpeed+0x32>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d102      	bne.n	8004286 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004280:	2302      	movs	r3, #2
 8004282:	75fb      	strb	r3, [r7, #23]
 8004284:	e001      	b.n	800428a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004286:	230f      	movs	r3, #15
 8004288:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	785b      	ldrb	r3, [r3, #1]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d13a      	bne.n	800432a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d155      	bne.n	8004398 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004308:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	059b      	lsls	r3, r3, #22
 800430e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004310:	4313      	orrs	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e036      	b.n	8004398 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	2101      	movs	r1, #1
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004348:	4313      	orrs	r3, r2
 800434a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11a      	bne.n	8004398 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800437e:	430b      	orrs	r3, r1
 8004380:	4313      	orrs	r3, r2
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	440a      	add	r2, r1
 800438a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004396:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d161      	bne.n	8004488 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043da:	d11f      	bne.n	800441c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	b29b      	uxth	r3, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	b29b      	uxth	r3, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004460:	4013      	ands	r3, r2
 8004462:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	440b      	add	r3, r1
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	4619      	mov	r1, r3
 8004480:	4b35      	ldr	r3, [pc, #212]	; (8004558 <USB_DeactivateEndpoint+0x1b0>)
 8004482:	4013      	ands	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
 8004486:	e060      	b.n	800454a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800449a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449e:	d11f      	bne.n	80044e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f303 	lsl.w	r3, r1, r3
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	43db      	mvns	r3, r3
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004500:	4013      	ands	r3, r2
 8004502:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	2101      	movs	r1, #1
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	43db      	mvns	r3, r3
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004524:	4013      	ands	r3, r2
 8004526:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	0159      	lsls	r1, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	440b      	add	r3, r1
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	4619      	mov	r1, r3
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <USB_DeactivateEndpoint+0x1b4>)
 8004546:	4013      	ands	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	ec337800 	.word	0xec337800
 800455c:	eff37800 	.word	0xeff37800

08004560 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 815c 	bne.w	800483a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d132      	bne.n	80045f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e8:	0cdb      	lsrs	r3, r3, #19
 80045ea:	04db      	lsls	r3, r3, #19
 80045ec:	6113      	str	r3, [r2, #16]
 80045ee:	e074      	b.n	80046da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460a:	0cdb      	lsrs	r3, r3, #19
 800460c:	04db      	lsls	r3, r3, #19
 800460e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6959      	ldr	r1, [r3, #20]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	440b      	add	r3, r1
 800464c:	1e59      	subs	r1, r3, #1
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	fbb1 f3f3 	udiv	r3, r1, r3
 8004656:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004658:	4b9d      	ldr	r3, [pc, #628]	; (80048d0 <USB_EPStartXfer+0x370>)
 800465a:	400b      	ands	r3, r1
 800465c:	69b9      	ldr	r1, [r7, #24]
 800465e:	0148      	lsls	r0, r1, #5
 8004660:	69f9      	ldr	r1, [r7, #28]
 8004662:	4401      	add	r1, r0
 8004664:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	0148      	lsls	r0, r1, #5
 8004686:	69f9      	ldr	r1, [r7, #28]
 8004688:	4401      	add	r1, r0
 800468a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800468e:	4313      	orrs	r3, r2
 8004690:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	78db      	ldrb	r3, [r3, #3]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d11f      	bne.n	80046da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d14b      	bne.n	8004778 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	461a      	mov	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d128      	bne.n	8004756 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d110      	bne.n	8004736 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e00f      	b.n	8004756 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	440a      	add	r2, r1
 800476c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e12f      	b.n	80049d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004796:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	78db      	ldrb	r3, [r3, #3]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d015      	beq.n	80047cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8117 	beq.w	80049d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	69f9      	ldr	r1, [r7, #28]
 80047c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c6:	4313      	orrs	r3, r2
 80047c8:	634b      	str	r3, [r1, #52]	; 0x34
 80047ca:	e105      	b.n	80049d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d110      	bne.n	80047fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e00f      	b.n	800481e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	68d9      	ldr	r1, [r3, #12]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	b298      	uxth	r0, r3
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4603      	mov	r3, r0
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fa2b 	bl	8004c8e <USB_WritePacket>
 8004838:	e0ce      	b.n	80049d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004854:	0cdb      	lsrs	r3, r3, #19
 8004856:	04db      	lsls	r3, r3, #19
 8004858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	0151      	lsls	r1, r2, #5
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	440a      	add	r2, r1
 8004870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800487c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d126      	bne.n	80048d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	0148      	lsls	r0, r1, #5
 80048a0:	69f9      	ldr	r1, [r7, #28]
 80048a2:	4401      	add	r1, r0
 80048a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048a8:	4313      	orrs	r3, r2
 80048aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048ca:	6113      	str	r3, [r2, #16]
 80048cc:	e036      	b.n	800493c <USB_EPStartXfer+0x3dc>
 80048ce:	bf00      	nop
 80048d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4413      	add	r3, r2
 80048de:	1e5a      	subs	r2, r3, #1
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	8afb      	ldrh	r3, [r7, #22]
 80048fa:	04d9      	lsls	r1, r3, #19
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <USB_EPStartXfer+0x484>)
 80048fe:	400b      	ands	r3, r1
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	0148      	lsls	r0, r1, #5
 8004904:	69f9      	ldr	r1, [r7, #28]
 8004906:	4401      	add	r1, r0
 8004908:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	8af9      	ldrh	r1, [r7, #22]
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	0148      	lsls	r0, r1, #5
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	4401      	add	r1, r0
 8004934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10d      	bne.n	800495e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	68d9      	ldr	r1, [r3, #12]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	460a      	mov	r2, r1
 800495c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	78db      	ldrb	r3, [r3, #3]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d128      	bne.n	80049b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d110      	bne.n	8004998 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e00f      	b.n	80049b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	1ff80000 	.word	0x1ff80000

080049e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	f040 80cd 	bne.w	8004ba4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d132      	bne.n	8004a78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	0cdb      	lsrs	r3, r3, #19
 8004a72:	04db      	lsls	r3, r3, #19
 8004a74:	6113      	str	r3, [r2, #16]
 8004a76:	e04e      	b.n	8004b16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a92:	0cdb      	lsrs	r3, r3, #19
 8004a94:	04db      	lsls	r3, r3, #19
 8004a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d903      	bls.n	8004ad0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	0148      	lsls	r0, r1, #5
 8004b0a:	6979      	ldr	r1, [r7, #20]
 8004b0c:	4401      	add	r1, r0
 8004b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11e      	bne.n	8004b5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d009      	beq.n	8004b38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e092      	b.n	8004c80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d07e      	beq.n	8004c80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	2101      	movs	r1, #1
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ba2:	e06d      	b.n	8004c80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bbe:	0cdb      	lsrs	r3, r3, #19
 8004bc0:	04db      	lsls	r3, r3, #19
 8004bc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2e:	6939      	ldr	r1, [r7, #16]
 8004c30:	0148      	lsls	r0, r1, #5
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	4401      	add	r1, r0
 8004c36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d10d      	bne.n	8004c60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	68d9      	ldr	r1, [r3, #12]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	460a      	mov	r2, r1
 8004c5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b089      	sub	sp, #36	; 0x24
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	71fb      	strb	r3, [r7, #7]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d123      	bne.n	8004cfc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cb4:	88bb      	ldrh	r3, [r7, #4]
 8004cb6:	3303      	adds	r3, #3
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e018      	b.n	8004cf4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	031a      	lsls	r2, r3, #12
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cce:	461a      	mov	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3e2      	bcc.n	8004cc2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3724      	adds	r7, #36	; 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b08b      	sub	sp, #44	; 0x2c
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	4613      	mov	r3, r2
 8004d16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d30:	2300      	movs	r3, #0
 8004d32:	623b      	str	r3, [r7, #32]
 8004d34:	e014      	b.n	8004d60 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	3301      	adds	r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	3301      	adds	r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	3301      	adds	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d3e6      	bcc.n	8004d36 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d68:	8bfb      	ldrh	r3, [r7, #30]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01e      	beq.n	8004dac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f107 0310 	add.w	r3, r7, #16
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	701a      	strb	r2, [r3, #0]
      i++;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	3301      	adds	r3, #1
 8004d98:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004da0:	8bfb      	ldrh	r3, [r7, #30]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004da6:	8bfb      	ldrh	r3, [r7, #30]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1ea      	bne.n	8004d82 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	372c      	adds	r7, #44	; 0x2c
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d12c      	bne.n	8004e30 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	db12      	blt.n	8004e0e <USB_EPSetStall+0x54>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00f      	beq.n	8004e0e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e0c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e02b      	b.n	8004e88 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db12      	blt.n	8004e68 <USB_EPSetStall+0xae>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00f      	beq.n	8004e68 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e66:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d128      	bne.n	8004f04 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ed0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d003      	beq.n	8004ee2 <USB_EPClearStall+0x4c>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	78db      	ldrb	r3, [r3, #3]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d138      	bne.n	8004f54 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e027      	b.n	8004f54 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	78db      	ldrb	r3, [r3, #3]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d003      	beq.n	8004f34 <USB_EPClearStall+0x9e>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	78db      	ldrb	r3, [r3, #3]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d10f      	bne.n	8004f54 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f52:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f84:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fc8:	f023 0303 	bic.w	r3, r3, #3
 8004fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fdc:	f023 0302 	bic.w	r3, r3, #2
 8004fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800504a:	68fb      	ldr	r3, [r7, #12]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	0c1b      	lsrs	r3, r3, #16
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	b29b      	uxth	r3, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050ee:	68bb      	ldr	r3, [r7, #8]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	01db      	lsls	r3, r3, #7
 800512e:	b2db      	uxtb	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4013      	ands	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800514a:	68bb      	ldr	r3, [r7, #8]
}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0301 	and.w	r3, r3, #1
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	460b      	mov	r3, r1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	333c      	adds	r3, #60	; 0x3c
 80051d2:	3304      	adds	r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4a26      	ldr	r2, [pc, #152]	; (8005274 <USB_EP0_OutStart+0xb8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d90a      	bls.n	80051f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f0:	d101      	bne.n	80051f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e037      	b.n	8005266 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005224:	f043 0318 	orr.w	r3, r3, #24
 8005228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005238:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800523c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800523e:	7afb      	ldrb	r3, [r7, #11]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10f      	bne.n	8005264 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	461a      	mov	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	4f54300a 	.word	0x4f54300a

08005278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <USB_CoreReset+0x60>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e01a      	b.n	80052ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	daf3      	bge.n	8005284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f043 0201 	orr.w	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <USB_CoreReset+0x60>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e006      	b.n	80052ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d0f1      	beq.n	80052ac <USB_CoreReset+0x34>

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	00030d40 	.word	0x00030d40

080052dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052ec:	f002 f952 	bl	8007594 <USBD_static_malloc>
 80052f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005300:	2302      	movs	r3, #2
 8005302:	e066      	b.n	80053d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7c1b      	ldrb	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d119      	bne.n	8005348 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005318:	2202      	movs	r2, #2
 800531a:	2181      	movs	r1, #129	; 0x81
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f002 f816 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800532c:	2202      	movs	r2, #2
 800532e:	2101      	movs	r1, #1
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f002 f80c 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2210      	movs	r2, #16
 8005342:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005346:	e016      	b.n	8005376 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	2202      	movs	r2, #2
 800534c:	2181      	movs	r1, #129	; 0x81
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 fffd 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800535a:	2340      	movs	r3, #64	; 0x40
 800535c:	2202      	movs	r2, #2
 800535e:	2101      	movs	r1, #1
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 fff4 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2210      	movs	r2, #16
 8005372:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005376:	2308      	movs	r3, #8
 8005378:	2203      	movs	r2, #3
 800537a:	2182      	movs	r1, #130	; 0x82
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 ffe6 	bl	800734e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	7c1b      	ldrb	r3, [r3, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053b6:	2101      	movs	r1, #1
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f002 f8b7 	bl	800752c <USBD_LL_PrepareReceive>
 80053be:	e007      	b.n	80053d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053c6:	2340      	movs	r3, #64	; 0x40
 80053c8:	2101      	movs	r1, #1
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f002 f8ae 	bl	800752c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80053e6:	2181      	movs	r1, #129	; 0x81
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 ffd6 	bl	800739a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053f4:	2101      	movs	r1, #1
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 ffcf 	bl	800739a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005404:	2182      	movs	r1, #130	; 0x82
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 ffc7 	bl	800739a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005436:	4618      	mov	r0, r3
 8005438:	f002 f8ba 	bl	80075b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005460:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e0af      	b.n	80055d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005480:	2b00      	cmp	r3, #0
 8005482:	d03f      	beq.n	8005504 <USBD_CDC_Setup+0xb4>
 8005484:	2b20      	cmp	r3, #32
 8005486:	f040 809f 	bne.w	80055c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02e      	beq.n	80054f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b25b      	sxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	da16      	bge.n	80054ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80054a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	88d2      	ldrh	r2, [r2, #6]
 80054ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	88db      	ldrh	r3, [r3, #6]
 80054b4:	2b07      	cmp	r3, #7
 80054b6:	bf28      	it	cs
 80054b8:	2307      	movcs	r3, #7
 80054ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	89fa      	ldrh	r2, [r7, #14]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 fb19 	bl	8006afa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80054c8:	e085      	b.n	80055d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	785a      	ldrb	r2, [r3, #1]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	88db      	ldrh	r3, [r3, #6]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80054e0:	6939      	ldr	r1, [r7, #16]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	88db      	ldrh	r3, [r3, #6]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fb32 	bl	8006b52 <USBD_CtlPrepareRx>
      break;
 80054ee:	e072      	b.n	80055d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	7850      	ldrb	r0, [r2, #1]
 80054fc:	2200      	movs	r2, #0
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	4798      	blx	r3
      break;
 8005502:	e068      	b.n	80055d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b0b      	cmp	r3, #11
 800550a:	d852      	bhi.n	80055b2 <USBD_CDC_Setup+0x162>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <USBD_CDC_Setup+0xc4>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005545 	.word	0x08005545
 8005518:	080055c1 	.word	0x080055c1
 800551c:	080055b3 	.word	0x080055b3
 8005520:	080055b3 	.word	0x080055b3
 8005524:	080055b3 	.word	0x080055b3
 8005528:	080055b3 	.word	0x080055b3
 800552c:	080055b3 	.word	0x080055b3
 8005530:	080055b3 	.word	0x080055b3
 8005534:	080055b3 	.word	0x080055b3
 8005538:	080055b3 	.word	0x080055b3
 800553c:	0800556f 	.word	0x0800556f
 8005540:	08005599 	.word	0x08005599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b03      	cmp	r3, #3
 800554e:	d107      	bne.n	8005560 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005550:	f107 030a 	add.w	r3, r7, #10
 8005554:	2202      	movs	r2, #2
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 face 	bl	8006afa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800555e:	e032      	b.n	80055c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 fa58 	bl	8006a18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005568:	2303      	movs	r3, #3
 800556a:	75fb      	strb	r3, [r7, #23]
          break;
 800556c:	e02b      	b.n	80055c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b03      	cmp	r3, #3
 8005578:	d107      	bne.n	800558a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800557a:	f107 030d 	add.w	r3, r7, #13
 800557e:	2201      	movs	r2, #1
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fab9 	bl	8006afa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005588:	e01d      	b.n	80055c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fa43 	bl	8006a18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005592:	2303      	movs	r3, #3
 8005594:	75fb      	strb	r3, [r7, #23]
          break;
 8005596:	e016      	b.n	80055c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d00f      	beq.n	80055c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fa36 	bl	8006a18 <USBD_CtlError>
            ret = USBD_FAIL;
 80055ac:	2303      	movs	r3, #3
 80055ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055b0:	e008      	b.n	80055c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fa2f 	bl	8006a18 <USBD_CtlError>
          ret = USBD_FAIL;
 80055ba:	2303      	movs	r3, #3
 80055bc:	75fb      	strb	r3, [r7, #23]
          break;
 80055be:	e002      	b.n	80055c6 <USBD_CDC_Setup+0x176>
          break;
 80055c0:	bf00      	nop
 80055c2:	e008      	b.n	80055d6 <USBD_CDC_Setup+0x186>
          break;
 80055c4:	bf00      	nop
      }
      break;
 80055c6:	e006      	b.n	80055d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fa24 	bl	8006a18 <USBD_CtlError>
      ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80055f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055fe:	2303      	movs	r3, #3
 8005600:	e04f      	b.n	80056a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005608:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3318      	adds	r3, #24
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d029      	beq.n	8005674 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3318      	adds	r3, #24
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	78f9      	ldrb	r1, [r7, #3]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	460b      	mov	r3, r1
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	1a5b      	subs	r3, r3, r1
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4403      	add	r3, r0
 8005640:	3344      	adds	r3, #68	; 0x44
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	fbb2 f1f3 	udiv	r1, r2, r3
 8005648:	fb03 f301 	mul.w	r3, r3, r1
 800564c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800564e:	2b00      	cmp	r3, #0
 8005650:	d110      	bne.n	8005674 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	3318      	adds	r3, #24
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005666:	78f9      	ldrb	r1, [r7, #3]
 8005668:	2300      	movs	r3, #0
 800566a:	2200      	movs	r2, #0
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 ff3c 	bl	80074ea <USBD_LL_Transmit>
 8005672:	e015      	b.n	80056a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e015      	b.n	80056f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 ff4c 	bl	800756e <USBD_LL_GetRxDataSize>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056f2:	4611      	mov	r1, r2
 80056f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800570e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005716:	2303      	movs	r3, #3
 8005718:	e01b      	b.n	8005752 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d015      	beq.n	8005750 <USBD_CDC_EP0_RxReady+0x50>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800572a:	2bff      	cmp	r3, #255	; 0xff
 800572c:	d010      	beq.n	8005750 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800573c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005744:	b292      	uxth	r2, r2
 8005746:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	22ff      	movs	r2, #255	; 0xff
 800574c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2243      	movs	r2, #67	; 0x43
 8005768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800576a:	4b03      	ldr	r3, [pc, #12]	; (8005778 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200000a4 	.word	0x200000a4

0800577c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2243      	movs	r2, #67	; 0x43
 8005788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20000060 	.word	0x20000060

0800579c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2243      	movs	r2, #67	; 0x43
 80057a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80057aa:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	200000e8 	.word	0x200000e8

080057bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	220a      	movs	r2, #10
 80057c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057ca:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	2000001c 	.word	0x2000001c

080057dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e004      	b.n	80057fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005806:	b480      	push	{r7}
 8005808:	b087      	sub	sp, #28
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005818:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	e008      	b.n	8005836 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005852:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800585a:	2303      	movs	r3, #3
 800585c:	e004      	b.n	8005868 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005882:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005892:	2303      	movs	r3, #3
 8005894:	e01a      	b.n	80058cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800589c:	2b00      	cmp	r3, #0
 800589e:	d114      	bne.n	80058ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058be:	2181      	movs	r1, #129	; 0x81
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fe12 	bl	80074ea <USBD_LL_Transmit>

    ret = USBD_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e016      	b.n	8005920 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	7c1b      	ldrb	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005904:	2101      	movs	r1, #1
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 fe10 	bl	800752c <USBD_LL_PrepareReceive>
 800590c:	e007      	b.n	800591e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	2101      	movs	r1, #1
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 fe07 	bl	800752c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800593c:	2303      	movs	r3, #3
 800593e:	e01f      	b.n	8005980 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	79fa      	ldrb	r2, [r7, #7]
 8005972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f001 fc83 	bl	8007280 <USBD_LL_Init>
 800597a:	4603      	mov	r3, r0
 800597c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	e016      	b.n	80059ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	f107 020e 	add.w	r2, r7, #14
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
 80059c4:	4602      	mov	r2, r0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fc9a 	bl	8007318 <USBD_LL_Start>
 80059e4:	4603      	mov	r3, r0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a10:	2303      	movs	r3, #3
 8005a12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
  }

  return USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 ff90 	bl	80069a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a92:	461a      	mov	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d01a      	beq.n	8005ade <USBD_LL_SetupStage+0x72>
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d822      	bhi.n	8005af2 <USBD_LL_SetupStage+0x86>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <USBD_LL_SetupStage+0x4a>
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d00a      	beq.n	8005aca <USBD_LL_SetupStage+0x5e>
 8005ab4:	e01d      	b.n	8005af2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa62 	bl	8005f88 <USBD_StdDevReq>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac8:	e020      	b.n	8005b0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fac6 	bl	8006064 <USBD_StdItfReq>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	73fb      	strb	r3, [r7, #15]
      break;
 8005adc:	e016      	b.n	8005b0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb05 	bl	80060f6 <USBD_StdEPReq>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
      break;
 8005af0:	e00c      	b.n	8005b0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005af8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fc69 	bl	80073d8 <USBD_LL_StallEP>
 8005b06:	4603      	mov	r3, r0
 8005b08:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0a:	bf00      	nop
  }

  return ret;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d138      	bne.n	8005b9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d14a      	bne.n	8005bd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d913      	bls.n	8005b70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	bf28      	it	cs
 8005b62:	4613      	movcs	r3, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f001 f80f 	bl	8006b8c <USBD_CtlContinueRx>
 8005b6e:	e030      	b.n	8005bd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d10b      	bne.n	8005b94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f001 f80a 	bl	8006bae <USBD_CtlSendStatus>
 8005b9a:	e01a      	b.n	8005bd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d114      	bne.n	8005bd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00e      	beq.n	8005bd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	7afa      	ldrb	r2, [r7, #11]
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	4798      	blx	r3
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	e000      	b.n	8005bd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	460b      	mov	r3, r1
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d16b      	bne.n	8005cc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d156      	bne.n	8005cae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d914      	bls.n	8005c36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 ff84 	bl	8006b30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f001 fc7c 	bl	800752c <USBD_LL_PrepareReceive>
 8005c34:	e03b      	b.n	8005cae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d11c      	bne.n	8005c7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d316      	bcc.n	8005c7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d20f      	bcs.n	8005c7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2100      	movs	r1, #0
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 ff65 	bl	8006b30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2200      	movs	r2, #0
 8005c72:	2100      	movs	r1, #0
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f001 fc59 	bl	800752c <USBD_LL_PrepareReceive>
 8005c7a:	e018      	b.n	8005cae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d10b      	bne.n	8005ca0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f001 fb98 	bl	80073d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 ff93 	bl	8006bd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d122      	bne.n	8005cfe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff fe98 	bl	80059ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005cc6:	e01a      	b.n	8005cfe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d114      	bne.n	8005cfe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00e      	beq.n	8005cfe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	7afa      	ldrb	r2, [r7, #11]
 8005cea:	4611      	mov	r1, r2
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	4798      	blx	r3
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	e000      	b.n	8005d00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e02f      	b.n	8005d9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00f      	beq.n	8005d66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6852      	ldr	r2, [r2, #4]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	4611      	mov	r1, r2
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d66:	2340      	movs	r3, #64	; 0x40
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 faee 	bl	800734e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2240      	movs	r2, #64	; 0x40
 8005d7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d82:	2340      	movs	r3, #64	; 0x40
 8005d84:	2200      	movs	r2, #0
 8005d86:	2180      	movs	r1, #128	; 0x80
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fae0 	bl	800734e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d106      	bne.n	8005e12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e012      	b.n	8005e5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d10b      	bne.n	8005e5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e014      	b.n	8005ea8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d10d      	bne.n	8005ea6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e014      	b.n	8005ef4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d10d      	bne.n	8005ef2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	4611      	mov	r1, r2
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6852      	ldr	r2, [r2, #4]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
  }

  return USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b087      	sub	sp, #28
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f68:	8a3b      	ldrh	r3, [r7, #16]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	b21a      	sxth	r2, r3
 8005f6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b21b      	sxth	r3, r3
 8005f76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f78:	89fb      	ldrh	r3, [r7, #14]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d005      	beq.n	8005fae <USBD_StdDevReq+0x26>
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d853      	bhi.n	800604e <USBD_StdDevReq+0xc6>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <USBD_StdDevReq+0x3a>
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d14f      	bne.n	800604e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4798      	blx	r3
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e04a      	b.n	8006058 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b09      	cmp	r3, #9
 8005fc8:	d83b      	bhi.n	8006042 <USBD_StdDevReq+0xba>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <USBD_StdDevReq+0x48>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08006039 	.word	0x08006039
 8005fd8:	08006043 	.word	0x08006043
 8005fdc:	0800602f 	.word	0x0800602f
 8005fe0:	08006043 	.word	0x08006043
 8005fe4:	08006003 	.word	0x08006003
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	08006043 	.word	0x08006043
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800600d 	.word	0x0800600d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9de 	bl	80063bc <USBD_GetDescriptor>
          break;
 8006000:	e024      	b.n	800604c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fb43 	bl	8006690 <USBD_SetAddress>
          break;
 800600a:	e01f      	b.n	800604c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb82 	bl	8006718 <USBD_SetConfig>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
          break;
 8006018:	e018      	b.n	800604c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fc21 	bl	8006864 <USBD_GetConfig>
          break;
 8006022:	e013      	b.n	800604c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc52 	bl	80068d0 <USBD_GetStatus>
          break;
 800602c:	e00e      	b.n	800604c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fc81 	bl	8006938 <USBD_SetFeature>
          break;
 8006036:	e009      	b.n	800604c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fc90 	bl	8006960 <USBD_ClrFeature>
          break;
 8006040:	e004      	b.n	800604c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fce7 	bl	8006a18 <USBD_CtlError>
          break;
 800604a:	bf00      	nop
      }
      break;
 800604c:	e004      	b.n	8006058 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fce1 	bl	8006a18 <USBD_CtlError>
      break;
 8006056:	bf00      	nop
  }

  return ret;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop

08006064 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d005      	beq.n	800608a <USBD_StdItfReq+0x26>
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d82f      	bhi.n	80060e2 <USBD_StdItfReq+0x7e>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <USBD_StdItfReq+0x26>
 8006086:	2b20      	cmp	r3, #32
 8006088:	d12b      	bne.n	80060e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	2b02      	cmp	r3, #2
 8006096:	d81d      	bhi.n	80060d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	889b      	ldrh	r3, [r3, #4]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d813      	bhi.n	80060ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	4798      	blx	r3
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	88db      	ldrh	r3, [r3, #6]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d110      	bne.n	80060de <USBD_StdItfReq+0x7a>
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fd73 	bl	8006bae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060c8:	e009      	b.n	80060de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fca3 	bl	8006a18 <USBD_CtlError>
          break;
 80060d2:	e004      	b.n	80060de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fc9e 	bl	8006a18 <USBD_CtlError>
          break;
 80060dc:	e000      	b.n	80060e0 <USBD_StdItfReq+0x7c>
          break;
 80060de:	bf00      	nop
      }
      break;
 80060e0:	e004      	b.n	80060ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fc97 	bl	8006a18 <USBD_CtlError>
      break;
 80060ea:	bf00      	nop
  }

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	889b      	ldrh	r3, [r3, #4]
 8006108:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d007      	beq.n	8006126 <USBD_StdEPReq+0x30>
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	f200 8145 	bhi.w	80063a6 <USBD_StdEPReq+0x2b0>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <USBD_StdEPReq+0x44>
 8006120:	2b20      	cmp	r3, #32
 8006122:	f040 8140 	bne.w	80063a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
      break;
 8006138:	e13a      	b.n	80063b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d007      	beq.n	8006152 <USBD_StdEPReq+0x5c>
 8006142:	2b03      	cmp	r3, #3
 8006144:	f300 8129 	bgt.w	800639a <USBD_StdEPReq+0x2a4>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d07f      	beq.n	800624c <USBD_StdEPReq+0x156>
 800614c:	2b01      	cmp	r3, #1
 800614e:	d03c      	beq.n	80061ca <USBD_StdEPReq+0xd4>
 8006150:	e123      	b.n	800639a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d002      	beq.n	8006164 <USBD_StdEPReq+0x6e>
 800615e:	2b03      	cmp	r3, #3
 8006160:	d016      	beq.n	8006190 <USBD_StdEPReq+0x9a>
 8006162:	e02c      	b.n	80061be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <USBD_StdEPReq+0x90>
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d00a      	beq.n	8006186 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 f92f 	bl	80073d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800617a:	2180      	movs	r1, #128	; 0x80
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 f92b 	bl	80073d8 <USBD_LL_StallEP>
 8006182:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006184:	e020      	b.n	80061c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fc45 	bl	8006a18 <USBD_CtlError>
              break;
 800618e:	e01b      	b.n	80061c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	885b      	ldrh	r3, [r3, #2]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10e      	bne.n	80061b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <USBD_StdEPReq+0xc0>
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d008      	beq.n	80061b6 <USBD_StdEPReq+0xc0>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	88db      	ldrh	r3, [r3, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 f911 	bl	80073d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fcf9 	bl	8006bae <USBD_CtlSendStatus>

              break;
 80061bc:	e004      	b.n	80061c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fc29 	bl	8006a18 <USBD_CtlError>
              break;
 80061c6:	bf00      	nop
          }
          break;
 80061c8:	e0ec      	b.n	80063a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d002      	beq.n	80061dc <USBD_StdEPReq+0xe6>
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d016      	beq.n	8006208 <USBD_StdEPReq+0x112>
 80061da:	e030      	b.n	800623e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <USBD_StdEPReq+0x108>
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d00a      	beq.n	80061fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 f8f3 	bl	80073d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061f2:	2180      	movs	r1, #128	; 0x80
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 f8ef 	bl	80073d8 <USBD_LL_StallEP>
 80061fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061fc:	e025      	b.n	800624a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fc09 	bl	8006a18 <USBD_CtlError>
              break;
 8006206:	e020      	b.n	800624a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	885b      	ldrh	r3, [r3, #2]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11b      	bne.n	8006248 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 f8f9 	bl	8007416 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fcc2 	bl	8006bae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800623c:	e004      	b.n	8006248 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fbe9 	bl	8006a18 <USBD_CtlError>
              break;
 8006246:	e000      	b.n	800624a <USBD_StdEPReq+0x154>
              break;
 8006248:	bf00      	nop
          }
          break;
 800624a:	e0ab      	b.n	80063a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d002      	beq.n	800625e <USBD_StdEPReq+0x168>
 8006258:	2b03      	cmp	r3, #3
 800625a:	d032      	beq.n	80062c2 <USBD_StdEPReq+0x1cc>
 800625c:	e097      	b.n	800638e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <USBD_StdEPReq+0x17e>
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	2b80      	cmp	r3, #128	; 0x80
 8006268:	d004      	beq.n	8006274 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fbd3 	bl	8006a18 <USBD_CtlError>
                break;
 8006272:	e091      	b.n	8006398 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006278:	2b00      	cmp	r3, #0
 800627a:	da0b      	bge.n	8006294 <USBD_StdEPReq+0x19e>
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	3310      	adds	r3, #16
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	4413      	add	r3, r2
 8006290:	3304      	adds	r3, #4
 8006292:	e00b      	b.n	80062ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	3304      	adds	r3, #4
 80062ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2202      	movs	r2, #2
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fc1d 	bl	8006afa <USBD_CtlSendData>
              break;
 80062c0:	e06a      	b.n	8006398 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80062c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da11      	bge.n	80062ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	f003 020f 	and.w	r2, r3, #15
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	3324      	adds	r3, #36	; 0x24
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d117      	bne.n	8006314 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fb96 	bl	8006a18 <USBD_CtlError>
                  break;
 80062ec:	e054      	b.n	8006398 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	f003 020f 	and.w	r2, r3, #15
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fb83 	bl	8006a18 <USBD_CtlError>
                  break;
 8006312:	e041      	b.n	8006398 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006318:	2b00      	cmp	r3, #0
 800631a:	da0b      	bge.n	8006334 <USBD_StdEPReq+0x23e>
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	3310      	adds	r3, #16
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4413      	add	r3, r2
 8006330:	3304      	adds	r3, #4
 8006332:	e00b      	b.n	800634c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	3304      	adds	r3, #4
 800634c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <USBD_StdEPReq+0x264>
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d103      	bne.n	8006362 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e00e      	b.n	8006380 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 f874 	bl	8007454 <USBD_LL_IsStallEP>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	e002      	b.n	8006380 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2202      	movs	r2, #2
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fbb7 	bl	8006afa <USBD_CtlSendData>
              break;
 800638c:	e004      	b.n	8006398 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fb41 	bl	8006a18 <USBD_CtlError>
              break;
 8006396:	bf00      	nop
          }
          break;
 8006398:	e004      	b.n	80063a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fb3b 	bl	8006a18 <USBD_CtlError>
          break;
 80063a2:	bf00      	nop
      }
      break;
 80063a4:	e004      	b.n	80063b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb35 	bl	8006a18 <USBD_CtlError>
      break;
 80063ae:	bf00      	nop
  }

  return ret;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	885b      	ldrh	r3, [r3, #2]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	2b06      	cmp	r3, #6
 80063de:	f200 8128 	bhi.w	8006632 <USBD_GetDescriptor+0x276>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <USBD_GetDescriptor+0x2c>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	08006405 	.word	0x08006405
 80063ec:	0800641d 	.word	0x0800641d
 80063f0:	0800645d 	.word	0x0800645d
 80063f4:	08006633 	.word	0x08006633
 80063f8:	08006633 	.word	0x08006633
 80063fc:	080065d3 	.word	0x080065d3
 8006400:	080065ff 	.word	0x080065ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	7c12      	ldrb	r2, [r2, #16]
 8006410:	f107 0108 	add.w	r1, r7, #8
 8006414:	4610      	mov	r0, r2
 8006416:	4798      	blx	r3
 8006418:	60f8      	str	r0, [r7, #12]
      break;
 800641a:	e112      	b.n	8006642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7c1b      	ldrb	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10d      	bne.n	8006440 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	f107 0208 	add.w	r2, r7, #8
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	2202      	movs	r2, #2
 800643c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800643e:	e100      	b.n	8006642 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	f107 0208 	add.w	r2, r7, #8
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
 8006450:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	2202      	movs	r2, #2
 8006458:	701a      	strb	r2, [r3, #0]
      break;
 800645a:	e0f2      	b.n	8006642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b05      	cmp	r3, #5
 8006464:	f200 80ac 	bhi.w	80065c0 <USBD_GetDescriptor+0x204>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USBD_GetDescriptor+0xb4>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006489 	.word	0x08006489
 8006474:	080064bd 	.word	0x080064bd
 8006478:	080064f1 	.word	0x080064f1
 800647c:	08006525 	.word	0x08006525
 8006480:	08006559 	.word	0x08006559
 8006484:	0800658d 	.word	0x0800658d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	7c12      	ldrb	r2, [r2, #16]
 80064a0:	f107 0108 	add.w	r1, r7, #8
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
 80064a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064aa:	e091      	b.n	80065d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fab2 	bl	8006a18 <USBD_CtlError>
            err++;
 80064b4:	7afb      	ldrb	r3, [r7, #11]
 80064b6:	3301      	adds	r3, #1
 80064b8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ba:	e089      	b.n	80065d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7c12      	ldrb	r2, [r2, #16]
 80064d4:	f107 0108 	add.w	r1, r7, #8
 80064d8:	4610      	mov	r0, r2
 80064da:	4798      	blx	r3
 80064dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064de:	e077      	b.n	80065d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa98 	bl	8006a18 <USBD_CtlError>
            err++;
 80064e8:	7afb      	ldrb	r3, [r7, #11]
 80064ea:	3301      	adds	r3, #1
 80064ec:	72fb      	strb	r3, [r7, #11]
          break;
 80064ee:	e06f      	b.n	80065d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	7c12      	ldrb	r2, [r2, #16]
 8006508:	f107 0108 	add.w	r1, r7, #8
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
 8006510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006512:	e05d      	b.n	80065d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa7e 	bl	8006a18 <USBD_CtlError>
            err++;
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	3301      	adds	r3, #1
 8006520:	72fb      	strb	r3, [r7, #11]
          break;
 8006522:	e055      	b.n	80065d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	7c12      	ldrb	r2, [r2, #16]
 800653c:	f107 0108 	add.w	r1, r7, #8
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006546:	e043      	b.n	80065d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa64 	bl	8006a18 <USBD_CtlError>
            err++;
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	3301      	adds	r3, #1
 8006554:	72fb      	strb	r3, [r7, #11]
          break;
 8006556:	e03b      	b.n	80065d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	7c12      	ldrb	r2, [r2, #16]
 8006570:	f107 0108 	add.w	r1, r7, #8
 8006574:	4610      	mov	r0, r2
 8006576:	4798      	blx	r3
 8006578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800657a:	e029      	b.n	80065d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa4a 	bl	8006a18 <USBD_CtlError>
            err++;
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	3301      	adds	r3, #1
 8006588:	72fb      	strb	r3, [r7, #11]
          break;
 800658a:	e021      	b.n	80065d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	7c12      	ldrb	r2, [r2, #16]
 80065a4:	f107 0108 	add.w	r1, r7, #8
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ae:	e00f      	b.n	80065d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa30 	bl	8006a18 <USBD_CtlError>
            err++;
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	3301      	adds	r3, #1
 80065bc:	72fb      	strb	r3, [r7, #11]
          break;
 80065be:	e007      	b.n	80065d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa28 	bl	8006a18 <USBD_CtlError>
          err++;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	3301      	adds	r3, #1
 80065cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80065ce:	bf00      	nop
      }
      break;
 80065d0:	e037      	b.n	8006642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	7c1b      	ldrb	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	f107 0208 	add.w	r2, r7, #8
 80065e6:	4610      	mov	r0, r2
 80065e8:	4798      	blx	r3
 80065ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065ec:	e029      	b.n	8006642 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fa11 	bl	8006a18 <USBD_CtlError>
        err++;
 80065f6:	7afb      	ldrb	r3, [r7, #11]
 80065f8:	3301      	adds	r3, #1
 80065fa:	72fb      	strb	r3, [r7, #11]
      break;
 80065fc:	e021      	b.n	8006642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7c1b      	ldrb	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10d      	bne.n	8006622 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	f107 0208 	add.w	r2, r7, #8
 8006612:	4610      	mov	r0, r2
 8006614:	4798      	blx	r3
 8006616:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	2207      	movs	r2, #7
 800661e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006620:	e00f      	b.n	8006642 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f9f7 	bl	8006a18 <USBD_CtlError>
        err++;
 800662a:	7afb      	ldrb	r3, [r7, #11]
 800662c:	3301      	adds	r3, #1
 800662e:	72fb      	strb	r3, [r7, #11]
      break;
 8006630:	e007      	b.n	8006642 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f9ef 	bl	8006a18 <USBD_CtlError>
      err++;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	3301      	adds	r3, #1
 800663e:	72fb      	strb	r3, [r7, #11]
      break;
 8006640:	bf00      	nop
  }

  if (err != 0U)
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11e      	bne.n	8006686 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d016      	beq.n	800667e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006650:	893b      	ldrh	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88da      	ldrh	r2, [r3, #6]
 800665a:	893b      	ldrh	r3, [r7, #8]
 800665c:	4293      	cmp	r3, r2
 800665e:	bf28      	it	cs
 8006660:	4613      	movcs	r3, r2
 8006662:	b29b      	uxth	r3, r3
 8006664:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006666:	893b      	ldrh	r3, [r7, #8]
 8006668:	461a      	mov	r2, r3
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fa44 	bl	8006afa <USBD_CtlSendData>
 8006672:	e009      	b.n	8006688 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9ce 	bl	8006a18 <USBD_CtlError>
 800667c:	e004      	b.n	8006688 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa95 	bl	8006bae <USBD_CtlSendStatus>
 8006684:	e000      	b.n	8006688 <USBD_GetDescriptor+0x2cc>
    return;
 8006686:	bf00      	nop
  }
}
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop

08006690 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	889b      	ldrh	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d131      	bne.n	8006706 <USBD_SetAddress+0x76>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	88db      	ldrh	r3, [r3, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d12d      	bne.n	8006706 <USBD_SetAddress+0x76>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	885b      	ldrh	r3, [r3, #2]
 80066ae:	2b7f      	cmp	r3, #127	; 0x7f
 80066b0:	d829      	bhi.n	8006706 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	885b      	ldrh	r3, [r3, #2]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d104      	bne.n	80066d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9a3 	bl	8006a18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d2:	e01d      	b.n	8006710 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	7bfa      	ldrb	r2, [r7, #15]
 80066d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fee3 	bl	80074ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa61 	bl	8006bae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d004      	beq.n	80066fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066fa:	e009      	b.n	8006710 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006704:	e004      	b.n	8006710 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f985 	bl	8006a18 <USBD_CtlError>
  }
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	885b      	ldrh	r3, [r3, #2]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b4c      	ldr	r3, [pc, #304]	; (8006860 <USBD_SetConfig+0x148>)
 800672e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006730:	4b4b      	ldr	r3, [pc, #300]	; (8006860 <USBD_SetConfig+0x148>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d905      	bls.n	8006744 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f96c 	bl	8006a18 <USBD_CtlError>
    return USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e088      	b.n	8006856 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d002      	beq.n	8006756 <USBD_SetConfig+0x3e>
 8006750:	2b03      	cmp	r3, #3
 8006752:	d025      	beq.n	80067a0 <USBD_SetConfig+0x88>
 8006754:	e071      	b.n	800683a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006756:	4b42      	ldr	r3, [pc, #264]	; (8006860 <USBD_SetConfig+0x148>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01c      	beq.n	8006798 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800675e:	4b40      	ldr	r3, [pc, #256]	; (8006860 <USBD_SetConfig+0x148>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006768:	4b3d      	ldr	r3, [pc, #244]	; (8006860 <USBD_SetConfig+0x148>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff f948 	bl	8005a04 <USBD_SetClassConfig>
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f949 	bl	8006a18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006786:	e065      	b.n	8006854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fa10 	bl	8006bae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2203      	movs	r2, #3
 8006792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006796:	e05d      	b.n	8006854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa08 	bl	8006bae <USBD_CtlSendStatus>
      break;
 800679e:	e059      	b.n	8006854 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80067a0:	4b2f      	ldr	r3, [pc, #188]	; (8006860 <USBD_SetConfig+0x148>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d112      	bne.n	80067ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80067b0:	4b2b      	ldr	r3, [pc, #172]	; (8006860 <USBD_SetConfig+0x148>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067ba:	4b29      	ldr	r3, [pc, #164]	; (8006860 <USBD_SetConfig+0x148>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff f93b 	bl	8005a3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9f1 	bl	8006bae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067cc:	e042      	b.n	8006854 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80067ce:	4b24      	ldr	r3, [pc, #144]	; (8006860 <USBD_SetConfig+0x148>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d02a      	beq.n	8006832 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff f929 	bl	8005a3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <USBD_SetConfig+0x148>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067f4:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <USBD_SetConfig+0x148>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff f902 	bl	8005a04 <USBD_SetClassConfig>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00f      	beq.n	800682a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f903 	bl	8006a18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff f90e 	bl	8005a3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006828:	e014      	b.n	8006854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9bf 	bl	8006bae <USBD_CtlSendStatus>
      break;
 8006830:	e010      	b.n	8006854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9bb 	bl	8006bae <USBD_CtlSendStatus>
      break;
 8006838:	e00c      	b.n	8006854 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8eb 	bl	8006a18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006842:	4b07      	ldr	r3, [pc, #28]	; (8006860 <USBD_SetConfig+0x148>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff f8f7 	bl	8005a3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800684e:	2303      	movs	r3, #3
 8006850:	73fb      	strb	r3, [r7, #15]
      break;
 8006852:	bf00      	nop
  }

  return ret;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000284 	.word	0x20000284

08006864 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	88db      	ldrh	r3, [r3, #6]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d004      	beq.n	8006880 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f8cd 	bl	8006a18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800687e:	e023      	b.n	80068c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	dc02      	bgt.n	8006892 <USBD_GetConfig+0x2e>
 800688c:	2b00      	cmp	r3, #0
 800688e:	dc03      	bgt.n	8006898 <USBD_GetConfig+0x34>
 8006890:	e015      	b.n	80068be <USBD_GetConfig+0x5a>
 8006892:	2b03      	cmp	r3, #3
 8006894:	d00b      	beq.n	80068ae <USBD_GetConfig+0x4a>
 8006896:	e012      	b.n	80068be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3308      	adds	r3, #8
 80068a2:	2201      	movs	r2, #1
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f927 	bl	8006afa <USBD_CtlSendData>
        break;
 80068ac:	e00c      	b.n	80068c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3304      	adds	r3, #4
 80068b2:	2201      	movs	r2, #1
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f91f 	bl	8006afa <USBD_CtlSendData>
        break;
 80068bc:	e004      	b.n	80068c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f8a9 	bl	8006a18 <USBD_CtlError>
        break;
 80068c6:	bf00      	nop
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d81e      	bhi.n	8006926 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	88db      	ldrh	r3, [r3, #6]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d004      	beq.n	80068fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f890 	bl	8006a18 <USBD_CtlError>
        break;
 80068f8:	e01a      	b.n	8006930 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f043 0202 	orr.w	r2, r3, #2
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	330c      	adds	r3, #12
 800691a:	2202      	movs	r2, #2
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f8eb 	bl	8006afa <USBD_CtlSendData>
      break;
 8006924:	e004      	b.n	8006930 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f875 	bl	8006a18 <USBD_CtlError>
      break;
 800692e:	bf00      	nop
  }
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	885b      	ldrh	r3, [r3, #2]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d106      	bne.n	8006958 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f92b 	bl	8006bae <USBD_CtlSendStatus>
  }
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006970:	b2db      	uxtb	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	2b02      	cmp	r3, #2
 8006976:	d80b      	bhi.n	8006990 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	885b      	ldrh	r3, [r3, #2]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10c      	bne.n	800699a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f910 	bl	8006bae <USBD_CtlSendStatus>
      }
      break;
 800698e:	e004      	b.n	800699a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f840 	bl	8006a18 <USBD_CtlError>
      break;
 8006998:	e000      	b.n	800699c <USBD_ClrFeature+0x3c>
      break;
 800699a:	bf00      	nop
  }
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3301      	adds	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff fabb 	bl	8005f4a <SWAPBYTE>
 80069d4:	4603      	mov	r3, r0
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff faae 	bl	8005f4a <SWAPBYTE>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff faa1 	bl	8005f4a <SWAPBYTE>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	80da      	strh	r2, [r3, #6]
}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a22:	2180      	movs	r1, #128	; 0x80
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fcd7 	bl	80073d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fcd3 	bl	80073d8 <USBD_LL_StallEP>
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b086      	sub	sp, #24
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d036      	beq.n	8006abe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a54:	6938      	ldr	r0, [r7, #16]
 8006a56:	f000 f836 	bl	8006ac6 <USBD_GetLen>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	3301      	adds	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	4413      	add	r3, r2
 8006a80:	2203      	movs	r2, #3
 8006a82:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	3301      	adds	r3, #1
 8006a88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a8a:	e013      	b.n	8006ab4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	613b      	str	r3, [r7, #16]
    idx++;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
    idx++;
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e7      	bne.n	8006a8c <USBD_GetString+0x52>
 8006abc:	e000      	b.n	8006ac0 <USBD_GetString+0x86>
    return;
 8006abe:	bf00      	nop
  }
}
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ad6:	e005      	b.n	8006ae4 <USBD_GetLen+0x1e>
  {
    len++;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	3301      	adds	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <USBD_GetLen+0x12>
  }

  return len;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	2100      	movs	r1, #0
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fce2 	bl	80074ea <USBD_LL_Transmit>

  return USBD_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	2100      	movs	r1, #0
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fcd1 	bl	80074ea <USBD_LL_Transmit>

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2203      	movs	r2, #3
 8006b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fcd5 	bl	800752c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fcc4 	bl	800752c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc90 	bl	80074ea <USBD_LL_Transmit>

  return USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2205      	movs	r2, #5
 8006be0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006be4:	2300      	movs	r3, #0
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fc9e 	bl	800752c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c00:	2200      	movs	r2, #0
 8006c02:	4912      	ldr	r1, [pc, #72]	; (8006c4c <MX_USB_DEVICE_Init+0x50>)
 8006c04:	4812      	ldr	r0, [pc, #72]	; (8006c50 <MX_USB_DEVICE_Init+0x54>)
 8006c06:	f7fe fe8f 	bl	8005928 <USBD_Init>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c10:	f7fa f86e 	bl	8000cf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c14:	490f      	ldr	r1, [pc, #60]	; (8006c54 <MX_USB_DEVICE_Init+0x58>)
 8006c16:	480e      	ldr	r0, [pc, #56]	; (8006c50 <MX_USB_DEVICE_Init+0x54>)
 8006c18:	f7fe feb6 	bl	8005988 <USBD_RegisterClass>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c22:	f7fa f865 	bl	8000cf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c26:	490c      	ldr	r1, [pc, #48]	; (8006c58 <MX_USB_DEVICE_Init+0x5c>)
 8006c28:	4809      	ldr	r0, [pc, #36]	; (8006c50 <MX_USB_DEVICE_Init+0x54>)
 8006c2a:	f7fe fdd7 	bl	80057dc <USBD_CDC_RegisterInterface>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c34:	f7fa f85c 	bl	8000cf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c38:	4805      	ldr	r0, [pc, #20]	; (8006c50 <MX_USB_DEVICE_Init+0x54>)
 8006c3a:	f7fe fecc 	bl	80059d6 <USBD_Start>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c44:	f7fa f854 	bl	8000cf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c48:	bf00      	nop
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20000140 	.word	0x20000140
 8006c50:	20000508 	.word	0x20000508
 8006c54:	20000028 	.word	0x20000028
 8006c58:	2000012c 	.word	0x2000012c

08006c5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c60:	2200      	movs	r2, #0
 8006c62:	4905      	ldr	r1, [pc, #20]	; (8006c78 <CDC_Init_FS+0x1c>)
 8006c64:	4805      	ldr	r0, [pc, #20]	; (8006c7c <CDC_Init_FS+0x20>)
 8006c66:	f7fe fdce 	bl	8005806 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c6a:	4905      	ldr	r1, [pc, #20]	; (8006c80 <CDC_Init_FS+0x24>)
 8006c6c:	4803      	ldr	r0, [pc, #12]	; (8006c7c <CDC_Init_FS+0x20>)
 8006c6e:	f7fe fde8 	bl	8005842 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000bc0 	.word	0x20000bc0
 8006c7c:	20000508 	.word	0x20000508
 8006c80:	200007d8 	.word	0x200007d8

08006c84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	6039      	str	r1, [r7, #0]
 8006c9e:	71fb      	strb	r3, [r7, #7]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	2b23      	cmp	r3, #35	; 0x23
 8006ca8:	d84a      	bhi.n	8006d40 <CDC_Control_FS+0xac>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <CDC_Control_FS+0x1c>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006d41 	.word	0x08006d41
 8006cb4:	08006d41 	.word	0x08006d41
 8006cb8:	08006d41 	.word	0x08006d41
 8006cbc:	08006d41 	.word	0x08006d41
 8006cc0:	08006d41 	.word	0x08006d41
 8006cc4:	08006d41 	.word	0x08006d41
 8006cc8:	08006d41 	.word	0x08006d41
 8006ccc:	08006d41 	.word	0x08006d41
 8006cd0:	08006d41 	.word	0x08006d41
 8006cd4:	08006d41 	.word	0x08006d41
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006d41 	.word	0x08006d41
 8006ce0:	08006d41 	.word	0x08006d41
 8006ce4:	08006d41 	.word	0x08006d41
 8006ce8:	08006d41 	.word	0x08006d41
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006d41 	.word	0x08006d41
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d41 	.word	0x08006d41
 8006cfc:	08006d41 	.word	0x08006d41
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d41 	.word	0x08006d41
 8006d0c:	08006d41 	.word	0x08006d41
 8006d10:	08006d41 	.word	0x08006d41
 8006d14:	08006d41 	.word	0x08006d41
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d41 	.word	0x08006d41
 8006d24:	08006d41 	.word	0x08006d41
 8006d28:	08006d41 	.word	0x08006d41
 8006d2c:	08006d41 	.word	0x08006d41
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006d41 	.word	0x08006d41
 8006d38:	08006d41 	.word	0x08006d41
 8006d3c:	08006d41 	.word	0x08006d41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d40:	bf00      	nop
  }

  return (USBD_OK);
 8006d42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4805      	ldr	r0, [pc, #20]	; (8006d74 <CDC_Receive_FS+0x24>)
 8006d5e:	f7fe fd70 	bl	8005842 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d62:	4804      	ldr	r0, [pc, #16]	; (8006d74 <CDC_Receive_FS+0x24>)
 8006d64:	f7fe fdb6 	bl	80058d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000508 	.word	0x20000508

08006d78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d88:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <CDC_Transmit_FS+0x48>)
 8006d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e00b      	b.n	8006db6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d9e:	887b      	ldrh	r3, [r7, #2]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4806      	ldr	r0, [pc, #24]	; (8006dc0 <CDC_Transmit_FS+0x48>)
 8006da6:	f7fe fd2e 	bl	8005806 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006daa:	4805      	ldr	r0, [pc, #20]	; (8006dc0 <CDC_Transmit_FS+0x48>)
 8006dac:	f7fe fd62 	bl	8005874 <USBD_CDC_TransmitPacket>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000508 	.word	0x20000508

08006dc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2212      	movs	r2, #18
 8006df8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dfa:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	2000015c 	.word	0x2000015c

08006e0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e1e:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	20000170 	.word	0x20000170

08006e30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4907      	ldr	r1, [pc, #28]	; (8006e64 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e46:	4808      	ldr	r0, [pc, #32]	; (8006e68 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e48:	f7ff fdf7 	bl	8006a3a <USBD_GetString>
 8006e4c:	e004      	b.n	8006e58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4904      	ldr	r1, [pc, #16]	; (8006e64 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e52:	4805      	ldr	r0, [pc, #20]	; (8006e68 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e54:	f7ff fdf1 	bl	8006a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e58:	4b02      	ldr	r3, [pc, #8]	; (8006e64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000fa8 	.word	0x20000fa8
 8006e68:	08007fdc 	.word	0x08007fdc

08006e6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	4904      	ldr	r1, [pc, #16]	; (8006e8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e7c:	4804      	ldr	r0, [pc, #16]	; (8006e90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e7e:	f7ff fddc 	bl	8006a3a <USBD_GetString>
  return USBD_StrDesc;
 8006e82:	4b02      	ldr	r3, [pc, #8]	; (8006e8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000fa8 	.word	0x20000fa8
 8006e90:	08007ff4 	.word	0x08007ff4

08006e94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	6039      	str	r1, [r7, #0]
 8006e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	221a      	movs	r2, #26
 8006ea4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ea6:	f000 f843 	bl	8006f30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006eaa:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000174 	.word	0x20000174

08006eb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d105      	bne.n	8006ed6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4907      	ldr	r1, [pc, #28]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ece:	4808      	ldr	r0, [pc, #32]	; (8006ef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ed0:	f7ff fdb3 	bl	8006a3a <USBD_GetString>
 8006ed4:	e004      	b.n	8006ee0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4904      	ldr	r1, [pc, #16]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eda:	4805      	ldr	r0, [pc, #20]	; (8006ef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006edc:	f7ff fdad 	bl	8006a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000fa8 	.word	0x20000fa8
 8006ef0:	08008008 	.word	0x08008008

08006ef4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4907      	ldr	r1, [pc, #28]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f0a:	4808      	ldr	r0, [pc, #32]	; (8006f2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f0c:	f7ff fd95 	bl	8006a3a <USBD_GetString>
 8006f10:	e004      	b.n	8006f1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4904      	ldr	r1, [pc, #16]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f16:	4805      	ldr	r0, [pc, #20]	; (8006f2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f18:	f7ff fd8f 	bl	8006a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000fa8 	.word	0x20000fa8
 8006f2c:	08008014 	.word	0x08008014

08006f30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <Get_SerialNum+0x44>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f3c:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <Get_SerialNum+0x48>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f42:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <Get_SerialNum+0x4c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f56:	2208      	movs	r2, #8
 8006f58:	4909      	ldr	r1, [pc, #36]	; (8006f80 <Get_SerialNum+0x50>)
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f814 	bl	8006f88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f60:	2204      	movs	r2, #4
 8006f62:	4908      	ldr	r1, [pc, #32]	; (8006f84 <Get_SerialNum+0x54>)
 8006f64:	68b8      	ldr	r0, [r7, #8]
 8006f66:	f000 f80f 	bl	8006f88 <IntToUnicode>
  }
}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	1fff7a10 	.word	0x1fff7a10
 8006f78:	1fff7a14 	.word	0x1fff7a14
 8006f7c:	1fff7a18 	.word	0x1fff7a18
 8006f80:	20000176 	.word	0x20000176
 8006f84:	20000186 	.word	0x20000186

08006f88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
 8006f9e:	e027      	b.n	8006ff0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	0f1b      	lsrs	r3, r3, #28
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	d80b      	bhi.n	8006fc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	0f1b      	lsrs	r3, r3, #28
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	440b      	add	r3, r1
 8006fb8:	3230      	adds	r2, #48	; 0x30
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e00a      	b.n	8006fd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	0f1b      	lsrs	r3, r3, #28
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	440b      	add	r3, r1
 8006fd0:	3237      	adds	r2, #55	; 0x37
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	3301      	adds	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
 8006ff0:	7dfa      	ldrb	r2, [r7, #23]
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d3d3      	bcc.n	8006fa0 <IntToUnicode+0x18>
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	; 0x28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007010:	f107 0314 	add.w	r3, r7, #20
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	609a      	str	r2, [r3, #8]
 800701c:	60da      	str	r2, [r3, #12]
 800701e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007028:	d13a      	bne.n	80070a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	4a1d      	ldr	r2, [pc, #116]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 8007034:	f043 0301 	orr.w	r3, r3, #1
 8007038:	6313      	str	r3, [r2, #48]	; 0x30
 800703a:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007046:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800704a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704c:	2302      	movs	r3, #2
 800704e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007054:	2303      	movs	r3, #3
 8007056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007058:	230a      	movs	r3, #10
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	4619      	mov	r1, r3
 8007062:	4812      	ldr	r0, [pc, #72]	; (80070ac <HAL_PCD_MspInit+0xa4>)
 8007064:	f7fa f8c0 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007068:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 800706a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706c:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 800706e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007072:	6353      	str	r3, [r2, #52]	; 0x34
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 800707a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707c:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 800707e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007082:	6453      	str	r3, [r2, #68]	; 0x44
 8007084:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <HAL_PCD_MspInit+0xa0>)
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007090:	2200      	movs	r2, #0
 8007092:	2100      	movs	r1, #0
 8007094:	2043      	movs	r0, #67	; 0x43
 8007096:	f7fa f870 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800709a:	2043      	movs	r0, #67	; 0x43
 800709c:	f7fa f889 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070a0:	bf00      	nop
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40020000 	.word	0x40020000

080070b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe fcd0 	bl	8005a6c <USBD_LL_SetupStage>
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	4619      	mov	r1, r3
 80070fe:	f7fe fd0a 	bl	8005b16 <USBD_LL_DataOutStage>
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3348      	adds	r3, #72	; 0x48
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	4619      	mov	r1, r3
 8007132:	f7fe fd53 	bl	8005bdc <USBD_LL_DataInStage>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe fe67 	bl	8005e20 <USBD_LL_SOF>
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d001      	beq.n	8007172 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800716e:	f7f9 fdbf 	bl	8000cf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007178:	7bfa      	ldrb	r2, [r7, #15]
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fe11 	bl	8005da4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fdbd 	bl	8005d08 <USBD_LL_Reset>
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fe0c 	bl	8005dc4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071be:	f043 0301 	orr.w	r3, r3, #1
 80071c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <HAL_PCD_SuspendCallback+0x48>)
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	4a03      	ldr	r2, [pc, #12]	; (80071e0 <HAL_PCD_SuspendCallback+0x48>)
 80071d2:	f043 0306 	orr.w	r3, r3, #6
 80071d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	e000ed00 	.word	0xe000ed00

080071e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fdfc 	bl	8005df0 <USBD_LL_Resume>
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	4611      	mov	r1, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fe4a 	bl	8005eb0 <USBD_LL_IsoOUTIncomplete>
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	4611      	mov	r1, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fe12 	bl	8005e64 <USBD_LL_IsoINIncomplete>
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fe50 	bl	8005efc <USBD_LL_DevConnected>
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fe4d 	bl	8005f12 <USBD_LL_DevDisconnected>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d13c      	bne.n	800730a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007290:	4a20      	ldr	r2, [pc, #128]	; (8007314 <USBD_LL_Init+0x94>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <USBD_LL_Init+0x94>)
 800729c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072a0:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <USBD_LL_Init+0x94>)
 80072a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072a8:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <USBD_LL_Init+0x94>)
 80072aa:	2204      	movs	r2, #4
 80072ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072ae:	4b19      	ldr	r3, [pc, #100]	; (8007314 <USBD_LL_Init+0x94>)
 80072b0:	2202      	movs	r2, #2
 80072b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072b4:	4b17      	ldr	r3, [pc, #92]	; (8007314 <USBD_LL_Init+0x94>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072ba:	4b16      	ldr	r3, [pc, #88]	; (8007314 <USBD_LL_Init+0x94>)
 80072bc:	2202      	movs	r2, #2
 80072be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072c0:	4b14      	ldr	r3, [pc, #80]	; (8007314 <USBD_LL_Init+0x94>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <USBD_LL_Init+0x94>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <USBD_LL_Init+0x94>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <USBD_LL_Init+0x94>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072d8:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <USBD_LL_Init+0x94>)
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072de:	480d      	ldr	r0, [pc, #52]	; (8007314 <USBD_LL_Init+0x94>)
 80072e0:	f7fa fecb 	bl	800207a <HAL_PCD_Init>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072ea:	f7f9 fd01 	bl	8000cf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	4808      	ldr	r0, [pc, #32]	; (8007314 <USBD_LL_Init+0x94>)
 80072f2:	f7fc f828 	bl	8003346 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072f6:	2240      	movs	r2, #64	; 0x40
 80072f8:	2100      	movs	r1, #0
 80072fa:	4806      	ldr	r0, [pc, #24]	; (8007314 <USBD_LL_Init+0x94>)
 80072fc:	f7fb ffdc 	bl	80032b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	2101      	movs	r1, #1
 8007304:	4803      	ldr	r0, [pc, #12]	; (8007314 <USBD_LL_Init+0x94>)
 8007306:	f7fb ffd7 	bl	80032b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	200011a8 	.word	0x200011a8

08007318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fa ffc0 	bl	80022b4 <HAL_PCD_Start>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f942 	bl	80075c4 <USBD_Get_USB_Status>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007344:	7bbb      	ldrb	r3, [r7, #14]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	461a      	mov	r2, r3
 800735c:	4603      	mov	r3, r0
 800735e:	70fb      	strb	r3, [r7, #3]
 8007360:	460b      	mov	r3, r1
 8007362:	70bb      	strb	r3, [r7, #2]
 8007364:	4613      	mov	r3, r2
 8007366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007376:	78bb      	ldrb	r3, [r7, #2]
 8007378:	883a      	ldrh	r2, [r7, #0]
 800737a:	78f9      	ldrb	r1, [r7, #3]
 800737c:	f7fb fba4 	bl	8002ac8 <HAL_PCD_EP_Open>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f91c 	bl	80075c4 <USBD_Get_USB_Status>
 800738c:	4603      	mov	r3, r0
 800738e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007390:	7bbb      	ldrb	r3, [r7, #14]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073b4:	78fa      	ldrb	r2, [r7, #3]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fb fbed 	bl	8002b98 <HAL_PCD_EP_Close>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f8fd 	bl	80075c4 <USBD_Get_USB_Status>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	4611      	mov	r1, r2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fb fcc5 	bl	8002d86 <HAL_PCD_EP_SetStall>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f8de 	bl	80075c4 <USBD_Get_USB_Status>
 8007408:	4603      	mov	r3, r0
 800740a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800740c:	7bbb      	ldrb	r3, [r7, #14]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	4611      	mov	r1, r2
 8007434:	4618      	mov	r0, r3
 8007436:	f7fb fd0a 	bl	8002e4e <HAL_PCD_EP_ClrStall>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f8bf 	bl	80075c4 <USBD_Get_USB_Status>
 8007446:	4603      	mov	r3, r0
 8007448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800744a:	7bbb      	ldrb	r3, [r7, #14]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800746c:	2b00      	cmp	r3, #0
 800746e:	da0b      	bge.n	8007488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	4613      	mov	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	333e      	adds	r3, #62	; 0x3e
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	e00b      	b.n	80074a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	4613      	mov	r3, r2
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800749e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fb fad7 	bl	8002a7e <HAL_PCD_SetAddress>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f874 	bl	80075c4 <USBD_Get_USB_Status>
 80074dc:	4603      	mov	r3, r0
 80074de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	460b      	mov	r3, r1
 80074f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007508:	7af9      	ldrb	r1, [r7, #11]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	f7fb fbf0 	bl	8002cf2 <HAL_PCD_EP_Transmit>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f853 	bl	80075c4 <USBD_Get_USB_Status>
 800751e:	4603      	mov	r3, r0
 8007520:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007522:	7dbb      	ldrb	r3, [r7, #22]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	460b      	mov	r3, r1
 800753a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800754a:	7af9      	ldrb	r1, [r7, #11]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	f7fb fb6c 	bl	8002c2c <HAL_PCD_EP_Receive>
 8007554:	4603      	mov	r3, r0
 8007556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f832 	bl	80075c4 <USBD_Get_USB_Status>
 8007560:	4603      	mov	r3, r0
 8007562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007564:	7dbb      	ldrb	r3, [r7, #22]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f7fb fb9c 	bl	8002cc2 <HAL_PCD_EP_GetRxCount>
 800758a:	4603      	mov	r3, r0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800759c:	4b03      	ldr	r3, [pc, #12]	; (80075ac <USBD_static_malloc+0x18>)
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000288 	.word	0x20000288

080075b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d817      	bhi.n	8007608 <USBD_Get_USB_Status+0x44>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <USBD_Get_USB_Status+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	080075f1 	.word	0x080075f1
 80075e4:	080075f7 	.word	0x080075f7
 80075e8:	080075fd 	.word	0x080075fd
 80075ec:	08007603 	.word	0x08007603
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
    break;
 80075f4:	e00b      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075f6:	2303      	movs	r3, #3
 80075f8:	73fb      	strb	r3, [r7, #15]
    break;
 80075fa:	e008      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075fc:	2301      	movs	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007600:	e005      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	73fb      	strb	r3, [r7, #15]
    break;
 8007606:	e002      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	73fb      	strb	r3, [r7, #15]
    break;
 800760c:	bf00      	nop
  }
  return usb_status;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <__errno>:
 800761c:	4b01      	ldr	r3, [pc, #4]	; (8007624 <__errno+0x8>)
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000190 	.word	0x20000190

08007628 <__libc_init_array>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	4d0d      	ldr	r5, [pc, #52]	; (8007660 <__libc_init_array+0x38>)
 800762c:	4c0d      	ldr	r4, [pc, #52]	; (8007664 <__libc_init_array+0x3c>)
 800762e:	1b64      	subs	r4, r4, r5
 8007630:	10a4      	asrs	r4, r4, #2
 8007632:	2600      	movs	r6, #0
 8007634:	42a6      	cmp	r6, r4
 8007636:	d109      	bne.n	800764c <__libc_init_array+0x24>
 8007638:	4d0b      	ldr	r5, [pc, #44]	; (8007668 <__libc_init_array+0x40>)
 800763a:	4c0c      	ldr	r4, [pc, #48]	; (800766c <__libc_init_array+0x44>)
 800763c:	f000 fcb2 	bl	8007fa4 <_init>
 8007640:	1b64      	subs	r4, r4, r5
 8007642:	10a4      	asrs	r4, r4, #2
 8007644:	2600      	movs	r6, #0
 8007646:	42a6      	cmp	r6, r4
 8007648:	d105      	bne.n	8007656 <__libc_init_array+0x2e>
 800764a:	bd70      	pop	{r4, r5, r6, pc}
 800764c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007650:	4798      	blx	r3
 8007652:	3601      	adds	r6, #1
 8007654:	e7ee      	b.n	8007634 <__libc_init_array+0xc>
 8007656:	f855 3b04 	ldr.w	r3, [r5], #4
 800765a:	4798      	blx	r3
 800765c:	3601      	adds	r6, #1
 800765e:	e7f2      	b.n	8007646 <__libc_init_array+0x1e>
 8007660:	0800809c 	.word	0x0800809c
 8007664:	0800809c 	.word	0x0800809c
 8007668:	0800809c 	.word	0x0800809c
 800766c:	080080a0 	.word	0x080080a0

08007670 <__itoa>:
 8007670:	1e93      	subs	r3, r2, #2
 8007672:	2b22      	cmp	r3, #34	; 0x22
 8007674:	b510      	push	{r4, lr}
 8007676:	460c      	mov	r4, r1
 8007678:	d904      	bls.n	8007684 <__itoa+0x14>
 800767a:	2300      	movs	r3, #0
 800767c:	700b      	strb	r3, [r1, #0]
 800767e:	461c      	mov	r4, r3
 8007680:	4620      	mov	r0, r4
 8007682:	bd10      	pop	{r4, pc}
 8007684:	2a0a      	cmp	r2, #10
 8007686:	d109      	bne.n	800769c <__itoa+0x2c>
 8007688:	2800      	cmp	r0, #0
 800768a:	da07      	bge.n	800769c <__itoa+0x2c>
 800768c:	232d      	movs	r3, #45	; 0x2d
 800768e:	700b      	strb	r3, [r1, #0]
 8007690:	4240      	negs	r0, r0
 8007692:	2101      	movs	r1, #1
 8007694:	4421      	add	r1, r4
 8007696:	f000 f835 	bl	8007704 <__utoa>
 800769a:	e7f1      	b.n	8007680 <__itoa+0x10>
 800769c:	2100      	movs	r1, #0
 800769e:	e7f9      	b.n	8007694 <__itoa+0x24>

080076a0 <itoa>:
 80076a0:	f7ff bfe6 	b.w	8007670 <__itoa>

080076a4 <memset>:
 80076a4:	4402      	add	r2, r0
 80076a6:	4603      	mov	r3, r0
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d100      	bne.n	80076ae <memset+0xa>
 80076ac:	4770      	bx	lr
 80076ae:	f803 1b01 	strb.w	r1, [r3], #1
 80076b2:	e7f9      	b.n	80076a8 <memset+0x4>

080076b4 <siprintf>:
 80076b4:	b40e      	push	{r1, r2, r3}
 80076b6:	b500      	push	{lr}
 80076b8:	b09c      	sub	sp, #112	; 0x70
 80076ba:	ab1d      	add	r3, sp, #116	; 0x74
 80076bc:	9002      	str	r0, [sp, #8]
 80076be:	9006      	str	r0, [sp, #24]
 80076c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076c4:	4809      	ldr	r0, [pc, #36]	; (80076ec <siprintf+0x38>)
 80076c6:	9107      	str	r1, [sp, #28]
 80076c8:	9104      	str	r1, [sp, #16]
 80076ca:	4909      	ldr	r1, [pc, #36]	; (80076f0 <siprintf+0x3c>)
 80076cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d0:	9105      	str	r1, [sp, #20]
 80076d2:	6800      	ldr	r0, [r0, #0]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	a902      	add	r1, sp, #8
 80076d8:	f000 f8b2 	bl	8007840 <_svfiprintf_r>
 80076dc:	9b02      	ldr	r3, [sp, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	b01c      	add	sp, #112	; 0x70
 80076e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e8:	b003      	add	sp, #12
 80076ea:	4770      	bx	lr
 80076ec:	20000190 	.word	0x20000190
 80076f0:	ffff0208 	.word	0xffff0208

080076f4 <strcpy>:
 80076f4:	4603      	mov	r3, r0
 80076f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076fa:	f803 2b01 	strb.w	r2, [r3], #1
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d1f9      	bne.n	80076f6 <strcpy+0x2>
 8007702:	4770      	bx	lr

08007704 <__utoa>:
 8007704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007706:	4c1f      	ldr	r4, [pc, #124]	; (8007784 <__utoa+0x80>)
 8007708:	b08b      	sub	sp, #44	; 0x2c
 800770a:	4605      	mov	r5, r0
 800770c:	460b      	mov	r3, r1
 800770e:	466e      	mov	r6, sp
 8007710:	f104 0c20 	add.w	ip, r4, #32
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	6861      	ldr	r1, [r4, #4]
 8007718:	4637      	mov	r7, r6
 800771a:	c703      	stmia	r7!, {r0, r1}
 800771c:	3408      	adds	r4, #8
 800771e:	4564      	cmp	r4, ip
 8007720:	463e      	mov	r6, r7
 8007722:	d1f7      	bne.n	8007714 <__utoa+0x10>
 8007724:	7921      	ldrb	r1, [r4, #4]
 8007726:	7139      	strb	r1, [r7, #4]
 8007728:	1e91      	subs	r1, r2, #2
 800772a:	6820      	ldr	r0, [r4, #0]
 800772c:	6038      	str	r0, [r7, #0]
 800772e:	2922      	cmp	r1, #34	; 0x22
 8007730:	f04f 0100 	mov.w	r1, #0
 8007734:	d904      	bls.n	8007740 <__utoa+0x3c>
 8007736:	7019      	strb	r1, [r3, #0]
 8007738:	460b      	mov	r3, r1
 800773a:	4618      	mov	r0, r3
 800773c:	b00b      	add	sp, #44	; 0x2c
 800773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007740:	1e58      	subs	r0, r3, #1
 8007742:	4684      	mov	ip, r0
 8007744:	fbb5 f7f2 	udiv	r7, r5, r2
 8007748:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800774c:	fb02 5617 	mls	r6, r2, r7, r5
 8007750:	4476      	add	r6, lr
 8007752:	460c      	mov	r4, r1
 8007754:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007758:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800775c:	462e      	mov	r6, r5
 800775e:	42b2      	cmp	r2, r6
 8007760:	f101 0101 	add.w	r1, r1, #1
 8007764:	463d      	mov	r5, r7
 8007766:	d9ed      	bls.n	8007744 <__utoa+0x40>
 8007768:	2200      	movs	r2, #0
 800776a:	545a      	strb	r2, [r3, r1]
 800776c:	1919      	adds	r1, r3, r4
 800776e:	1aa5      	subs	r5, r4, r2
 8007770:	42aa      	cmp	r2, r5
 8007772:	dae2      	bge.n	800773a <__utoa+0x36>
 8007774:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007778:	780e      	ldrb	r6, [r1, #0]
 800777a:	7006      	strb	r6, [r0, #0]
 800777c:	3201      	adds	r2, #1
 800777e:	f801 5901 	strb.w	r5, [r1], #-1
 8007782:	e7f4      	b.n	800776e <__utoa+0x6a>
 8007784:	0800803c 	.word	0x0800803c

08007788 <__ssputs_r>:
 8007788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800778c:	688e      	ldr	r6, [r1, #8]
 800778e:	429e      	cmp	r6, r3
 8007790:	4682      	mov	sl, r0
 8007792:	460c      	mov	r4, r1
 8007794:	4690      	mov	r8, r2
 8007796:	461f      	mov	r7, r3
 8007798:	d838      	bhi.n	800780c <__ssputs_r+0x84>
 800779a:	898a      	ldrh	r2, [r1, #12]
 800779c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077a0:	d032      	beq.n	8007808 <__ssputs_r+0x80>
 80077a2:	6825      	ldr	r5, [r4, #0]
 80077a4:	6909      	ldr	r1, [r1, #16]
 80077a6:	eba5 0901 	sub.w	r9, r5, r1
 80077aa:	6965      	ldr	r5, [r4, #20]
 80077ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077b4:	3301      	adds	r3, #1
 80077b6:	444b      	add	r3, r9
 80077b8:	106d      	asrs	r5, r5, #1
 80077ba:	429d      	cmp	r5, r3
 80077bc:	bf38      	it	cc
 80077be:	461d      	movcc	r5, r3
 80077c0:	0553      	lsls	r3, r2, #21
 80077c2:	d531      	bpl.n	8007828 <__ssputs_r+0xa0>
 80077c4:	4629      	mov	r1, r5
 80077c6:	f000 fb47 	bl	8007e58 <_malloc_r>
 80077ca:	4606      	mov	r6, r0
 80077cc:	b950      	cbnz	r0, 80077e4 <__ssputs_r+0x5c>
 80077ce:	230c      	movs	r3, #12
 80077d0:	f8ca 3000 	str.w	r3, [sl]
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e4:	6921      	ldr	r1, [r4, #16]
 80077e6:	464a      	mov	r2, r9
 80077e8:	f000 fabe 	bl	8007d68 <memcpy>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	6126      	str	r6, [r4, #16]
 80077fa:	6165      	str	r5, [r4, #20]
 80077fc:	444e      	add	r6, r9
 80077fe:	eba5 0509 	sub.w	r5, r5, r9
 8007802:	6026      	str	r6, [r4, #0]
 8007804:	60a5      	str	r5, [r4, #8]
 8007806:	463e      	mov	r6, r7
 8007808:	42be      	cmp	r6, r7
 800780a:	d900      	bls.n	800780e <__ssputs_r+0x86>
 800780c:	463e      	mov	r6, r7
 800780e:	4632      	mov	r2, r6
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	4641      	mov	r1, r8
 8007814:	f000 fab6 	bl	8007d84 <memmove>
 8007818:	68a3      	ldr	r3, [r4, #8]
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	1b9b      	subs	r3, r3, r6
 800781e:	4432      	add	r2, r6
 8007820:	60a3      	str	r3, [r4, #8]
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	2000      	movs	r0, #0
 8007826:	e7db      	b.n	80077e0 <__ssputs_r+0x58>
 8007828:	462a      	mov	r2, r5
 800782a:	f000 fb6f 	bl	8007f0c <_realloc_r>
 800782e:	4606      	mov	r6, r0
 8007830:	2800      	cmp	r0, #0
 8007832:	d1e1      	bne.n	80077f8 <__ssputs_r+0x70>
 8007834:	6921      	ldr	r1, [r4, #16]
 8007836:	4650      	mov	r0, sl
 8007838:	f000 fabe 	bl	8007db8 <_free_r>
 800783c:	e7c7      	b.n	80077ce <__ssputs_r+0x46>
	...

08007840 <_svfiprintf_r>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	4698      	mov	r8, r3
 8007846:	898b      	ldrh	r3, [r1, #12]
 8007848:	061b      	lsls	r3, r3, #24
 800784a:	b09d      	sub	sp, #116	; 0x74
 800784c:	4607      	mov	r7, r0
 800784e:	460d      	mov	r5, r1
 8007850:	4614      	mov	r4, r2
 8007852:	d50e      	bpl.n	8007872 <_svfiprintf_r+0x32>
 8007854:	690b      	ldr	r3, [r1, #16]
 8007856:	b963      	cbnz	r3, 8007872 <_svfiprintf_r+0x32>
 8007858:	2140      	movs	r1, #64	; 0x40
 800785a:	f000 fafd 	bl	8007e58 <_malloc_r>
 800785e:	6028      	str	r0, [r5, #0]
 8007860:	6128      	str	r0, [r5, #16]
 8007862:	b920      	cbnz	r0, 800786e <_svfiprintf_r+0x2e>
 8007864:	230c      	movs	r3, #12
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	f04f 30ff 	mov.w	r0, #4294967295
 800786c:	e0d1      	b.n	8007a12 <_svfiprintf_r+0x1d2>
 800786e:	2340      	movs	r3, #64	; 0x40
 8007870:	616b      	str	r3, [r5, #20]
 8007872:	2300      	movs	r3, #0
 8007874:	9309      	str	r3, [sp, #36]	; 0x24
 8007876:	2320      	movs	r3, #32
 8007878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800787c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007880:	2330      	movs	r3, #48	; 0x30
 8007882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a2c <_svfiprintf_r+0x1ec>
 8007886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800788a:	f04f 0901 	mov.w	r9, #1
 800788e:	4623      	mov	r3, r4
 8007890:	469a      	mov	sl, r3
 8007892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007896:	b10a      	cbz	r2, 800789c <_svfiprintf_r+0x5c>
 8007898:	2a25      	cmp	r2, #37	; 0x25
 800789a:	d1f9      	bne.n	8007890 <_svfiprintf_r+0x50>
 800789c:	ebba 0b04 	subs.w	fp, sl, r4
 80078a0:	d00b      	beq.n	80078ba <_svfiprintf_r+0x7a>
 80078a2:	465b      	mov	r3, fp
 80078a4:	4622      	mov	r2, r4
 80078a6:	4629      	mov	r1, r5
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7ff ff6d 	bl	8007788 <__ssputs_r>
 80078ae:	3001      	adds	r0, #1
 80078b0:	f000 80aa 	beq.w	8007a08 <_svfiprintf_r+0x1c8>
 80078b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b6:	445a      	add	r2, fp
 80078b8:	9209      	str	r2, [sp, #36]	; 0x24
 80078ba:	f89a 3000 	ldrb.w	r3, [sl]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80a2 	beq.w	8007a08 <_svfiprintf_r+0x1c8>
 80078c4:	2300      	movs	r3, #0
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ce:	f10a 0a01 	add.w	sl, sl, #1
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	9307      	str	r3, [sp, #28]
 80078d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078da:	931a      	str	r3, [sp, #104]	; 0x68
 80078dc:	4654      	mov	r4, sl
 80078de:	2205      	movs	r2, #5
 80078e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e4:	4851      	ldr	r0, [pc, #324]	; (8007a2c <_svfiprintf_r+0x1ec>)
 80078e6:	f7f8 fc83 	bl	80001f0 <memchr>
 80078ea:	9a04      	ldr	r2, [sp, #16]
 80078ec:	b9d8      	cbnz	r0, 8007926 <_svfiprintf_r+0xe6>
 80078ee:	06d0      	lsls	r0, r2, #27
 80078f0:	bf44      	itt	mi
 80078f2:	2320      	movmi	r3, #32
 80078f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f8:	0711      	lsls	r1, r2, #28
 80078fa:	bf44      	itt	mi
 80078fc:	232b      	movmi	r3, #43	; 0x2b
 80078fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007902:	f89a 3000 	ldrb.w	r3, [sl]
 8007906:	2b2a      	cmp	r3, #42	; 0x2a
 8007908:	d015      	beq.n	8007936 <_svfiprintf_r+0xf6>
 800790a:	9a07      	ldr	r2, [sp, #28]
 800790c:	4654      	mov	r4, sl
 800790e:	2000      	movs	r0, #0
 8007910:	f04f 0c0a 	mov.w	ip, #10
 8007914:	4621      	mov	r1, r4
 8007916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800791a:	3b30      	subs	r3, #48	; 0x30
 800791c:	2b09      	cmp	r3, #9
 800791e:	d94e      	bls.n	80079be <_svfiprintf_r+0x17e>
 8007920:	b1b0      	cbz	r0, 8007950 <_svfiprintf_r+0x110>
 8007922:	9207      	str	r2, [sp, #28]
 8007924:	e014      	b.n	8007950 <_svfiprintf_r+0x110>
 8007926:	eba0 0308 	sub.w	r3, r0, r8
 800792a:	fa09 f303 	lsl.w	r3, r9, r3
 800792e:	4313      	orrs	r3, r2
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	46a2      	mov	sl, r4
 8007934:	e7d2      	b.n	80078dc <_svfiprintf_r+0x9c>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	1d19      	adds	r1, r3, #4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	9103      	str	r1, [sp, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	bfbb      	ittet	lt
 8007942:	425b      	neglt	r3, r3
 8007944:	f042 0202 	orrlt.w	r2, r2, #2
 8007948:	9307      	strge	r3, [sp, #28]
 800794a:	9307      	strlt	r3, [sp, #28]
 800794c:	bfb8      	it	lt
 800794e:	9204      	strlt	r2, [sp, #16]
 8007950:	7823      	ldrb	r3, [r4, #0]
 8007952:	2b2e      	cmp	r3, #46	; 0x2e
 8007954:	d10c      	bne.n	8007970 <_svfiprintf_r+0x130>
 8007956:	7863      	ldrb	r3, [r4, #1]
 8007958:	2b2a      	cmp	r3, #42	; 0x2a
 800795a:	d135      	bne.n	80079c8 <_svfiprintf_r+0x188>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1d1a      	adds	r2, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	9203      	str	r2, [sp, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfb8      	it	lt
 8007968:	f04f 33ff 	movlt.w	r3, #4294967295
 800796c:	3402      	adds	r4, #2
 800796e:	9305      	str	r3, [sp, #20]
 8007970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a3c <_svfiprintf_r+0x1fc>
 8007974:	7821      	ldrb	r1, [r4, #0]
 8007976:	2203      	movs	r2, #3
 8007978:	4650      	mov	r0, sl
 800797a:	f7f8 fc39 	bl	80001f0 <memchr>
 800797e:	b140      	cbz	r0, 8007992 <_svfiprintf_r+0x152>
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	eba0 000a 	sub.w	r0, r0, sl
 8007986:	fa03 f000 	lsl.w	r0, r3, r0
 800798a:	9b04      	ldr	r3, [sp, #16]
 800798c:	4303      	orrs	r3, r0
 800798e:	3401      	adds	r4, #1
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007996:	4826      	ldr	r0, [pc, #152]	; (8007a30 <_svfiprintf_r+0x1f0>)
 8007998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800799c:	2206      	movs	r2, #6
 800799e:	f7f8 fc27 	bl	80001f0 <memchr>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d038      	beq.n	8007a18 <_svfiprintf_r+0x1d8>
 80079a6:	4b23      	ldr	r3, [pc, #140]	; (8007a34 <_svfiprintf_r+0x1f4>)
 80079a8:	bb1b      	cbnz	r3, 80079f2 <_svfiprintf_r+0x1b2>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	3307      	adds	r3, #7
 80079ae:	f023 0307 	bic.w	r3, r3, #7
 80079b2:	3308      	adds	r3, #8
 80079b4:	9303      	str	r3, [sp, #12]
 80079b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b8:	4433      	add	r3, r6
 80079ba:	9309      	str	r3, [sp, #36]	; 0x24
 80079bc:	e767      	b.n	800788e <_svfiprintf_r+0x4e>
 80079be:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c2:	460c      	mov	r4, r1
 80079c4:	2001      	movs	r0, #1
 80079c6:	e7a5      	b.n	8007914 <_svfiprintf_r+0xd4>
 80079c8:	2300      	movs	r3, #0
 80079ca:	3401      	adds	r4, #1
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	4619      	mov	r1, r3
 80079d0:	f04f 0c0a 	mov.w	ip, #10
 80079d4:	4620      	mov	r0, r4
 80079d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079da:	3a30      	subs	r2, #48	; 0x30
 80079dc:	2a09      	cmp	r2, #9
 80079de:	d903      	bls.n	80079e8 <_svfiprintf_r+0x1a8>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0c5      	beq.n	8007970 <_svfiprintf_r+0x130>
 80079e4:	9105      	str	r1, [sp, #20]
 80079e6:	e7c3      	b.n	8007970 <_svfiprintf_r+0x130>
 80079e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ec:	4604      	mov	r4, r0
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7f0      	b.n	80079d4 <_svfiprintf_r+0x194>
 80079f2:	ab03      	add	r3, sp, #12
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	462a      	mov	r2, r5
 80079f8:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <_svfiprintf_r+0x1f8>)
 80079fa:	a904      	add	r1, sp, #16
 80079fc:	4638      	mov	r0, r7
 80079fe:	f3af 8000 	nop.w
 8007a02:	1c42      	adds	r2, r0, #1
 8007a04:	4606      	mov	r6, r0
 8007a06:	d1d6      	bne.n	80079b6 <_svfiprintf_r+0x176>
 8007a08:	89ab      	ldrh	r3, [r5, #12]
 8007a0a:	065b      	lsls	r3, r3, #25
 8007a0c:	f53f af2c 	bmi.w	8007868 <_svfiprintf_r+0x28>
 8007a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a12:	b01d      	add	sp, #116	; 0x74
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	ab03      	add	r3, sp, #12
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <_svfiprintf_r+0x1f8>)
 8007a20:	a904      	add	r1, sp, #16
 8007a22:	4638      	mov	r0, r7
 8007a24:	f000 f87a 	bl	8007b1c <_printf_i>
 8007a28:	e7eb      	b.n	8007a02 <_svfiprintf_r+0x1c2>
 8007a2a:	bf00      	nop
 8007a2c:	08008061 	.word	0x08008061
 8007a30:	0800806b 	.word	0x0800806b
 8007a34:	00000000 	.word	0x00000000
 8007a38:	08007789 	.word	0x08007789
 8007a3c:	08008067 	.word	0x08008067

08007a40 <_printf_common>:
 8007a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a44:	4616      	mov	r6, r2
 8007a46:	4699      	mov	r9, r3
 8007a48:	688a      	ldr	r2, [r1, #8]
 8007a4a:	690b      	ldr	r3, [r1, #16]
 8007a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a50:	4293      	cmp	r3, r2
 8007a52:	bfb8      	it	lt
 8007a54:	4613      	movlt	r3, r2
 8007a56:	6033      	str	r3, [r6, #0]
 8007a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	b10a      	cbz	r2, 8007a66 <_printf_common+0x26>
 8007a62:	3301      	adds	r3, #1
 8007a64:	6033      	str	r3, [r6, #0]
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	0699      	lsls	r1, r3, #26
 8007a6a:	bf42      	ittt	mi
 8007a6c:	6833      	ldrmi	r3, [r6, #0]
 8007a6e:	3302      	addmi	r3, #2
 8007a70:	6033      	strmi	r3, [r6, #0]
 8007a72:	6825      	ldr	r5, [r4, #0]
 8007a74:	f015 0506 	ands.w	r5, r5, #6
 8007a78:	d106      	bne.n	8007a88 <_printf_common+0x48>
 8007a7a:	f104 0a19 	add.w	sl, r4, #25
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	6832      	ldr	r2, [r6, #0]
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	dc26      	bgt.n	8007ad6 <_printf_common+0x96>
 8007a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a8c:	1e13      	subs	r3, r2, #0
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	bf18      	it	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	0692      	lsls	r2, r2, #26
 8007a96:	d42b      	bmi.n	8007af0 <_printf_common+0xb0>
 8007a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	47c0      	blx	r8
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d01e      	beq.n	8007ae4 <_printf_common+0xa4>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	68e5      	ldr	r5, [r4, #12]
 8007aaa:	6832      	ldr	r2, [r6, #0]
 8007aac:	f003 0306 	and.w	r3, r3, #6
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	bf08      	it	eq
 8007ab4:	1aad      	subeq	r5, r5, r2
 8007ab6:	68a3      	ldr	r3, [r4, #8]
 8007ab8:	6922      	ldr	r2, [r4, #16]
 8007aba:	bf0c      	ite	eq
 8007abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac0:	2500      	movne	r5, #0
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	bfc4      	itt	gt
 8007ac6:	1a9b      	subgt	r3, r3, r2
 8007ac8:	18ed      	addgt	r5, r5, r3
 8007aca:	2600      	movs	r6, #0
 8007acc:	341a      	adds	r4, #26
 8007ace:	42b5      	cmp	r5, r6
 8007ad0:	d11a      	bne.n	8007b08 <_printf_common+0xc8>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e008      	b.n	8007ae8 <_printf_common+0xa8>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4652      	mov	r2, sl
 8007ada:	4649      	mov	r1, r9
 8007adc:	4638      	mov	r0, r7
 8007ade:	47c0      	blx	r8
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d103      	bne.n	8007aec <_printf_common+0xac>
 8007ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aec:	3501      	adds	r5, #1
 8007aee:	e7c6      	b.n	8007a7e <_printf_common+0x3e>
 8007af0:	18e1      	adds	r1, r4, r3
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	2030      	movs	r0, #48	; 0x30
 8007af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007afa:	4422      	add	r2, r4
 8007afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b04:	3302      	adds	r3, #2
 8007b06:	e7c7      	b.n	8007a98 <_printf_common+0x58>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	4638      	mov	r0, r7
 8007b10:	47c0      	blx	r8
 8007b12:	3001      	adds	r0, #1
 8007b14:	d0e6      	beq.n	8007ae4 <_printf_common+0xa4>
 8007b16:	3601      	adds	r6, #1
 8007b18:	e7d9      	b.n	8007ace <_printf_common+0x8e>
	...

08007b1c <_printf_i>:
 8007b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	460c      	mov	r4, r1
 8007b22:	4691      	mov	r9, r2
 8007b24:	7e27      	ldrb	r7, [r4, #24]
 8007b26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b28:	2f78      	cmp	r7, #120	; 0x78
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	469a      	mov	sl, r3
 8007b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b32:	d807      	bhi.n	8007b44 <_printf_i+0x28>
 8007b34:	2f62      	cmp	r7, #98	; 0x62
 8007b36:	d80a      	bhi.n	8007b4e <_printf_i+0x32>
 8007b38:	2f00      	cmp	r7, #0
 8007b3a:	f000 80d8 	beq.w	8007cee <_printf_i+0x1d2>
 8007b3e:	2f58      	cmp	r7, #88	; 0x58
 8007b40:	f000 80a3 	beq.w	8007c8a <_printf_i+0x16e>
 8007b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b4c:	e03a      	b.n	8007bc4 <_printf_i+0xa8>
 8007b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b52:	2b15      	cmp	r3, #21
 8007b54:	d8f6      	bhi.n	8007b44 <_printf_i+0x28>
 8007b56:	a001      	add	r0, pc, #4	; (adr r0, 8007b5c <_printf_i+0x40>)
 8007b58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b5c:	08007bb5 	.word	0x08007bb5
 8007b60:	08007bc9 	.word	0x08007bc9
 8007b64:	08007b45 	.word	0x08007b45
 8007b68:	08007b45 	.word	0x08007b45
 8007b6c:	08007b45 	.word	0x08007b45
 8007b70:	08007b45 	.word	0x08007b45
 8007b74:	08007bc9 	.word	0x08007bc9
 8007b78:	08007b45 	.word	0x08007b45
 8007b7c:	08007b45 	.word	0x08007b45
 8007b80:	08007b45 	.word	0x08007b45
 8007b84:	08007b45 	.word	0x08007b45
 8007b88:	08007cd5 	.word	0x08007cd5
 8007b8c:	08007bf9 	.word	0x08007bf9
 8007b90:	08007cb7 	.word	0x08007cb7
 8007b94:	08007b45 	.word	0x08007b45
 8007b98:	08007b45 	.word	0x08007b45
 8007b9c:	08007cf7 	.word	0x08007cf7
 8007ba0:	08007b45 	.word	0x08007b45
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007b45 	.word	0x08007b45
 8007bac:	08007b45 	.word	0x08007b45
 8007bb0:	08007cbf 	.word	0x08007cbf
 8007bb4:	680b      	ldr	r3, [r1, #0]
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	600a      	str	r2, [r1, #0]
 8007bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e0a3      	b.n	8007d10 <_printf_i+0x1f4>
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	6808      	ldr	r0, [r1, #0]
 8007bcc:	062e      	lsls	r6, r5, #24
 8007bce:	f100 0304 	add.w	r3, r0, #4
 8007bd2:	d50a      	bpl.n	8007bea <_printf_i+0xce>
 8007bd4:	6805      	ldr	r5, [r0, #0]
 8007bd6:	600b      	str	r3, [r1, #0]
 8007bd8:	2d00      	cmp	r5, #0
 8007bda:	da03      	bge.n	8007be4 <_printf_i+0xc8>
 8007bdc:	232d      	movs	r3, #45	; 0x2d
 8007bde:	426d      	negs	r5, r5
 8007be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be4:	485e      	ldr	r0, [pc, #376]	; (8007d60 <_printf_i+0x244>)
 8007be6:	230a      	movs	r3, #10
 8007be8:	e019      	b.n	8007c1e <_printf_i+0x102>
 8007bea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bee:	6805      	ldr	r5, [r0, #0]
 8007bf0:	600b      	str	r3, [r1, #0]
 8007bf2:	bf18      	it	ne
 8007bf4:	b22d      	sxthne	r5, r5
 8007bf6:	e7ef      	b.n	8007bd8 <_printf_i+0xbc>
 8007bf8:	680b      	ldr	r3, [r1, #0]
 8007bfa:	6825      	ldr	r5, [r4, #0]
 8007bfc:	1d18      	adds	r0, r3, #4
 8007bfe:	6008      	str	r0, [r1, #0]
 8007c00:	0628      	lsls	r0, r5, #24
 8007c02:	d501      	bpl.n	8007c08 <_printf_i+0xec>
 8007c04:	681d      	ldr	r5, [r3, #0]
 8007c06:	e002      	b.n	8007c0e <_printf_i+0xf2>
 8007c08:	0669      	lsls	r1, r5, #25
 8007c0a:	d5fb      	bpl.n	8007c04 <_printf_i+0xe8>
 8007c0c:	881d      	ldrh	r5, [r3, #0]
 8007c0e:	4854      	ldr	r0, [pc, #336]	; (8007d60 <_printf_i+0x244>)
 8007c10:	2f6f      	cmp	r7, #111	; 0x6f
 8007c12:	bf0c      	ite	eq
 8007c14:	2308      	moveq	r3, #8
 8007c16:	230a      	movne	r3, #10
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c1e:	6866      	ldr	r6, [r4, #4]
 8007c20:	60a6      	str	r6, [r4, #8]
 8007c22:	2e00      	cmp	r6, #0
 8007c24:	bfa2      	ittt	ge
 8007c26:	6821      	ldrge	r1, [r4, #0]
 8007c28:	f021 0104 	bicge.w	r1, r1, #4
 8007c2c:	6021      	strge	r1, [r4, #0]
 8007c2e:	b90d      	cbnz	r5, 8007c34 <_printf_i+0x118>
 8007c30:	2e00      	cmp	r6, #0
 8007c32:	d04d      	beq.n	8007cd0 <_printf_i+0x1b4>
 8007c34:	4616      	mov	r6, r2
 8007c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c3e:	5dc7      	ldrb	r7, [r0, r7]
 8007c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c44:	462f      	mov	r7, r5
 8007c46:	42bb      	cmp	r3, r7
 8007c48:	460d      	mov	r5, r1
 8007c4a:	d9f4      	bls.n	8007c36 <_printf_i+0x11a>
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d10b      	bne.n	8007c68 <_printf_i+0x14c>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	07df      	lsls	r7, r3, #31
 8007c54:	d508      	bpl.n	8007c68 <_printf_i+0x14c>
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	6861      	ldr	r1, [r4, #4]
 8007c5a:	4299      	cmp	r1, r3
 8007c5c:	bfde      	ittt	le
 8007c5e:	2330      	movle	r3, #48	; 0x30
 8007c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c68:	1b92      	subs	r2, r2, r6
 8007c6a:	6122      	str	r2, [r4, #16]
 8007c6c:	f8cd a000 	str.w	sl, [sp]
 8007c70:	464b      	mov	r3, r9
 8007c72:	aa03      	add	r2, sp, #12
 8007c74:	4621      	mov	r1, r4
 8007c76:	4640      	mov	r0, r8
 8007c78:	f7ff fee2 	bl	8007a40 <_printf_common>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d14c      	bne.n	8007d1a <_printf_i+0x1fe>
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	b004      	add	sp, #16
 8007c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8a:	4835      	ldr	r0, [pc, #212]	; (8007d60 <_printf_i+0x244>)
 8007c8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	680e      	ldr	r6, [r1, #0]
 8007c94:	061f      	lsls	r7, r3, #24
 8007c96:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c9a:	600e      	str	r6, [r1, #0]
 8007c9c:	d514      	bpl.n	8007cc8 <_printf_i+0x1ac>
 8007c9e:	07d9      	lsls	r1, r3, #31
 8007ca0:	bf44      	itt	mi
 8007ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ca6:	6023      	strmi	r3, [r4, #0]
 8007ca8:	b91d      	cbnz	r5, 8007cb2 <_printf_i+0x196>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	f023 0320 	bic.w	r3, r3, #32
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	2310      	movs	r3, #16
 8007cb4:	e7b0      	b.n	8007c18 <_printf_i+0xfc>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	f043 0320 	orr.w	r3, r3, #32
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	2378      	movs	r3, #120	; 0x78
 8007cc0:	4828      	ldr	r0, [pc, #160]	; (8007d64 <_printf_i+0x248>)
 8007cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cc6:	e7e3      	b.n	8007c90 <_printf_i+0x174>
 8007cc8:	065e      	lsls	r6, r3, #25
 8007cca:	bf48      	it	mi
 8007ccc:	b2ad      	uxthmi	r5, r5
 8007cce:	e7e6      	b.n	8007c9e <_printf_i+0x182>
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	e7bb      	b.n	8007c4c <_printf_i+0x130>
 8007cd4:	680b      	ldr	r3, [r1, #0]
 8007cd6:	6826      	ldr	r6, [r4, #0]
 8007cd8:	6960      	ldr	r0, [r4, #20]
 8007cda:	1d1d      	adds	r5, r3, #4
 8007cdc:	600d      	str	r5, [r1, #0]
 8007cde:	0635      	lsls	r5, r6, #24
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	d501      	bpl.n	8007ce8 <_printf_i+0x1cc>
 8007ce4:	6018      	str	r0, [r3, #0]
 8007ce6:	e002      	b.n	8007cee <_printf_i+0x1d2>
 8007ce8:	0671      	lsls	r1, r6, #25
 8007cea:	d5fb      	bpl.n	8007ce4 <_printf_i+0x1c8>
 8007cec:	8018      	strh	r0, [r3, #0]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	4616      	mov	r6, r2
 8007cf4:	e7ba      	b.n	8007c6c <_printf_i+0x150>
 8007cf6:	680b      	ldr	r3, [r1, #0]
 8007cf8:	1d1a      	adds	r2, r3, #4
 8007cfa:	600a      	str	r2, [r1, #0]
 8007cfc:	681e      	ldr	r6, [r3, #0]
 8007cfe:	6862      	ldr	r2, [r4, #4]
 8007d00:	2100      	movs	r1, #0
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7f8 fa74 	bl	80001f0 <memchr>
 8007d08:	b108      	cbz	r0, 8007d0e <_printf_i+0x1f2>
 8007d0a:	1b80      	subs	r0, r0, r6
 8007d0c:	6060      	str	r0, [r4, #4]
 8007d0e:	6863      	ldr	r3, [r4, #4]
 8007d10:	6123      	str	r3, [r4, #16]
 8007d12:	2300      	movs	r3, #0
 8007d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d18:	e7a8      	b.n	8007c6c <_printf_i+0x150>
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	4649      	mov	r1, r9
 8007d20:	4640      	mov	r0, r8
 8007d22:	47d0      	blx	sl
 8007d24:	3001      	adds	r0, #1
 8007d26:	d0ab      	beq.n	8007c80 <_printf_i+0x164>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	079b      	lsls	r3, r3, #30
 8007d2c:	d413      	bmi.n	8007d56 <_printf_i+0x23a>
 8007d2e:	68e0      	ldr	r0, [r4, #12]
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	4298      	cmp	r0, r3
 8007d34:	bfb8      	it	lt
 8007d36:	4618      	movlt	r0, r3
 8007d38:	e7a4      	b.n	8007c84 <_printf_i+0x168>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	4649      	mov	r1, r9
 8007d40:	4640      	mov	r0, r8
 8007d42:	47d0      	blx	sl
 8007d44:	3001      	adds	r0, #1
 8007d46:	d09b      	beq.n	8007c80 <_printf_i+0x164>
 8007d48:	3501      	adds	r5, #1
 8007d4a:	68e3      	ldr	r3, [r4, #12]
 8007d4c:	9903      	ldr	r1, [sp, #12]
 8007d4e:	1a5b      	subs	r3, r3, r1
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	dcf2      	bgt.n	8007d3a <_printf_i+0x21e>
 8007d54:	e7eb      	b.n	8007d2e <_printf_i+0x212>
 8007d56:	2500      	movs	r5, #0
 8007d58:	f104 0619 	add.w	r6, r4, #25
 8007d5c:	e7f5      	b.n	8007d4a <_printf_i+0x22e>
 8007d5e:	bf00      	nop
 8007d60:	08008072 	.word	0x08008072
 8007d64:	08008083 	.word	0x08008083

08007d68 <memcpy>:
 8007d68:	440a      	add	r2, r1
 8007d6a:	4291      	cmp	r1, r2
 8007d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d70:	d100      	bne.n	8007d74 <memcpy+0xc>
 8007d72:	4770      	bx	lr
 8007d74:	b510      	push	{r4, lr}
 8007d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	d1f9      	bne.n	8007d76 <memcpy+0xe>
 8007d82:	bd10      	pop	{r4, pc}

08007d84 <memmove>:
 8007d84:	4288      	cmp	r0, r1
 8007d86:	b510      	push	{r4, lr}
 8007d88:	eb01 0402 	add.w	r4, r1, r2
 8007d8c:	d902      	bls.n	8007d94 <memmove+0x10>
 8007d8e:	4284      	cmp	r4, r0
 8007d90:	4623      	mov	r3, r4
 8007d92:	d807      	bhi.n	8007da4 <memmove+0x20>
 8007d94:	1e43      	subs	r3, r0, #1
 8007d96:	42a1      	cmp	r1, r4
 8007d98:	d008      	beq.n	8007dac <memmove+0x28>
 8007d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007da2:	e7f8      	b.n	8007d96 <memmove+0x12>
 8007da4:	4402      	add	r2, r0
 8007da6:	4601      	mov	r1, r0
 8007da8:	428a      	cmp	r2, r1
 8007daa:	d100      	bne.n	8007dae <memmove+0x2a>
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007db6:	e7f7      	b.n	8007da8 <memmove+0x24>

08007db8 <_free_r>:
 8007db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	d048      	beq.n	8007e50 <_free_r+0x98>
 8007dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc2:	9001      	str	r0, [sp, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dca:	bfb8      	it	lt
 8007dcc:	18e4      	addlt	r4, r4, r3
 8007dce:	f000 f8d3 	bl	8007f78 <__malloc_lock>
 8007dd2:	4a20      	ldr	r2, [pc, #128]	; (8007e54 <_free_r+0x9c>)
 8007dd4:	9801      	ldr	r0, [sp, #4]
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	4615      	mov	r5, r2
 8007dda:	b933      	cbnz	r3, 8007dea <_free_r+0x32>
 8007ddc:	6063      	str	r3, [r4, #4]
 8007dde:	6014      	str	r4, [r2, #0]
 8007de0:	b003      	add	sp, #12
 8007de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007de6:	f000 b8cd 	b.w	8007f84 <__malloc_unlock>
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	d90b      	bls.n	8007e06 <_free_r+0x4e>
 8007dee:	6821      	ldr	r1, [r4, #0]
 8007df0:	1862      	adds	r2, r4, r1
 8007df2:	4293      	cmp	r3, r2
 8007df4:	bf04      	itt	eq
 8007df6:	681a      	ldreq	r2, [r3, #0]
 8007df8:	685b      	ldreq	r3, [r3, #4]
 8007dfa:	6063      	str	r3, [r4, #4]
 8007dfc:	bf04      	itt	eq
 8007dfe:	1852      	addeq	r2, r2, r1
 8007e00:	6022      	streq	r2, [r4, #0]
 8007e02:	602c      	str	r4, [r5, #0]
 8007e04:	e7ec      	b.n	8007de0 <_free_r+0x28>
 8007e06:	461a      	mov	r2, r3
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	b10b      	cbz	r3, 8007e10 <_free_r+0x58>
 8007e0c:	42a3      	cmp	r3, r4
 8007e0e:	d9fa      	bls.n	8007e06 <_free_r+0x4e>
 8007e10:	6811      	ldr	r1, [r2, #0]
 8007e12:	1855      	adds	r5, r2, r1
 8007e14:	42a5      	cmp	r5, r4
 8007e16:	d10b      	bne.n	8007e30 <_free_r+0x78>
 8007e18:	6824      	ldr	r4, [r4, #0]
 8007e1a:	4421      	add	r1, r4
 8007e1c:	1854      	adds	r4, r2, r1
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	6011      	str	r1, [r2, #0]
 8007e22:	d1dd      	bne.n	8007de0 <_free_r+0x28>
 8007e24:	681c      	ldr	r4, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	6053      	str	r3, [r2, #4]
 8007e2a:	4421      	add	r1, r4
 8007e2c:	6011      	str	r1, [r2, #0]
 8007e2e:	e7d7      	b.n	8007de0 <_free_r+0x28>
 8007e30:	d902      	bls.n	8007e38 <_free_r+0x80>
 8007e32:	230c      	movs	r3, #12
 8007e34:	6003      	str	r3, [r0, #0]
 8007e36:	e7d3      	b.n	8007de0 <_free_r+0x28>
 8007e38:	6825      	ldr	r5, [r4, #0]
 8007e3a:	1961      	adds	r1, r4, r5
 8007e3c:	428b      	cmp	r3, r1
 8007e3e:	bf04      	itt	eq
 8007e40:	6819      	ldreq	r1, [r3, #0]
 8007e42:	685b      	ldreq	r3, [r3, #4]
 8007e44:	6063      	str	r3, [r4, #4]
 8007e46:	bf04      	itt	eq
 8007e48:	1949      	addeq	r1, r1, r5
 8007e4a:	6021      	streq	r1, [r4, #0]
 8007e4c:	6054      	str	r4, [r2, #4]
 8007e4e:	e7c7      	b.n	8007de0 <_free_r+0x28>
 8007e50:	b003      	add	sp, #12
 8007e52:	bd30      	pop	{r4, r5, pc}
 8007e54:	200004a8 	.word	0x200004a8

08007e58 <_malloc_r>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	1ccd      	adds	r5, r1, #3
 8007e5c:	f025 0503 	bic.w	r5, r5, #3
 8007e60:	3508      	adds	r5, #8
 8007e62:	2d0c      	cmp	r5, #12
 8007e64:	bf38      	it	cc
 8007e66:	250c      	movcc	r5, #12
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	db01      	blt.n	8007e72 <_malloc_r+0x1a>
 8007e6e:	42a9      	cmp	r1, r5
 8007e70:	d903      	bls.n	8007e7a <_malloc_r+0x22>
 8007e72:	230c      	movs	r3, #12
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	2000      	movs	r0, #0
 8007e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e7a:	f000 f87d 	bl	8007f78 <__malloc_lock>
 8007e7e:	4921      	ldr	r1, [pc, #132]	; (8007f04 <_malloc_r+0xac>)
 8007e80:	680a      	ldr	r2, [r1, #0]
 8007e82:	4614      	mov	r4, r2
 8007e84:	b99c      	cbnz	r4, 8007eae <_malloc_r+0x56>
 8007e86:	4f20      	ldr	r7, [pc, #128]	; (8007f08 <_malloc_r+0xb0>)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	b923      	cbnz	r3, 8007e96 <_malloc_r+0x3e>
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f862 	bl	8007f58 <_sbrk_r>
 8007e94:	6038      	str	r0, [r7, #0]
 8007e96:	4629      	mov	r1, r5
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f85d 	bl	8007f58 <_sbrk_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d123      	bne.n	8007eea <_malloc_r+0x92>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 f86c 	bl	8007f84 <__malloc_unlock>
 8007eac:	e7e3      	b.n	8007e76 <_malloc_r+0x1e>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	1b5b      	subs	r3, r3, r5
 8007eb2:	d417      	bmi.n	8007ee4 <_malloc_r+0x8c>
 8007eb4:	2b0b      	cmp	r3, #11
 8007eb6:	d903      	bls.n	8007ec0 <_malloc_r+0x68>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	441c      	add	r4, r3
 8007ebc:	6025      	str	r5, [r4, #0]
 8007ebe:	e004      	b.n	8007eca <_malloc_r+0x72>
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	42a2      	cmp	r2, r4
 8007ec4:	bf0c      	ite	eq
 8007ec6:	600b      	streq	r3, [r1, #0]
 8007ec8:	6053      	strne	r3, [r2, #4]
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 f85a 	bl	8007f84 <__malloc_unlock>
 8007ed0:	f104 000b 	add.w	r0, r4, #11
 8007ed4:	1d23      	adds	r3, r4, #4
 8007ed6:	f020 0007 	bic.w	r0, r0, #7
 8007eda:	1ac2      	subs	r2, r0, r3
 8007edc:	d0cc      	beq.n	8007e78 <_malloc_r+0x20>
 8007ede:	1a1b      	subs	r3, r3, r0
 8007ee0:	50a3      	str	r3, [r4, r2]
 8007ee2:	e7c9      	b.n	8007e78 <_malloc_r+0x20>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	6864      	ldr	r4, [r4, #4]
 8007ee8:	e7cc      	b.n	8007e84 <_malloc_r+0x2c>
 8007eea:	1cc4      	adds	r4, r0, #3
 8007eec:	f024 0403 	bic.w	r4, r4, #3
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d0e3      	beq.n	8007ebc <_malloc_r+0x64>
 8007ef4:	1a21      	subs	r1, r4, r0
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f000 f82e 	bl	8007f58 <_sbrk_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d1dd      	bne.n	8007ebc <_malloc_r+0x64>
 8007f00:	e7cf      	b.n	8007ea2 <_malloc_r+0x4a>
 8007f02:	bf00      	nop
 8007f04:	200004a8 	.word	0x200004a8
 8007f08:	200004ac 	.word	0x200004ac

08007f0c <_realloc_r>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	4607      	mov	r7, r0
 8007f10:	4614      	mov	r4, r2
 8007f12:	460e      	mov	r6, r1
 8007f14:	b921      	cbnz	r1, 8007f20 <_realloc_r+0x14>
 8007f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	f7ff bf9c 	b.w	8007e58 <_malloc_r>
 8007f20:	b922      	cbnz	r2, 8007f2c <_realloc_r+0x20>
 8007f22:	f7ff ff49 	bl	8007db8 <_free_r>
 8007f26:	4625      	mov	r5, r4
 8007f28:	4628      	mov	r0, r5
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	f000 f830 	bl	8007f90 <_malloc_usable_size_r>
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d20f      	bcs.n	8007f54 <_realloc_r+0x48>
 8007f34:	4621      	mov	r1, r4
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ff8e 	bl	8007e58 <_malloc_r>
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d0f2      	beq.n	8007f28 <_realloc_r+0x1c>
 8007f42:	4631      	mov	r1, r6
 8007f44:	4622      	mov	r2, r4
 8007f46:	f7ff ff0f 	bl	8007d68 <memcpy>
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7ff ff33 	bl	8007db8 <_free_r>
 8007f52:	e7e9      	b.n	8007f28 <_realloc_r+0x1c>
 8007f54:	4635      	mov	r5, r6
 8007f56:	e7e7      	b.n	8007f28 <_realloc_r+0x1c>

08007f58 <_sbrk_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d06      	ldr	r5, [pc, #24]	; (8007f74 <_sbrk_r+0x1c>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7f8 ff26 	bl	8000db4 <_sbrk>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_sbrk_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_sbrk_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	200015b0 	.word	0x200015b0

08007f78 <__malloc_lock>:
 8007f78:	4801      	ldr	r0, [pc, #4]	; (8007f80 <__malloc_lock+0x8>)
 8007f7a:	f000 b811 	b.w	8007fa0 <__retarget_lock_acquire_recursive>
 8007f7e:	bf00      	nop
 8007f80:	200015b8 	.word	0x200015b8

08007f84 <__malloc_unlock>:
 8007f84:	4801      	ldr	r0, [pc, #4]	; (8007f8c <__malloc_unlock+0x8>)
 8007f86:	f000 b80c 	b.w	8007fa2 <__retarget_lock_release_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	200015b8 	.word	0x200015b8

08007f90 <_malloc_usable_size_r>:
 8007f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f94:	1f18      	subs	r0, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfbc      	itt	lt
 8007f9a:	580b      	ldrlt	r3, [r1, r0]
 8007f9c:	18c0      	addlt	r0, r0, r3
 8007f9e:	4770      	bx	lr

08007fa0 <__retarget_lock_acquire_recursive>:
 8007fa0:	4770      	bx	lr

08007fa2 <__retarget_lock_release_recursive>:
 8007fa2:	4770      	bx	lr

08007fa4 <_init>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr

08007fb0 <_fini>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr
